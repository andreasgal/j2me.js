/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var MIDlet = {
  name: "aMIDlet",

  SMSDialogVerificationText: "This app sent you an SMS. Type the message you received here:",
  SMSDialogTimeout: 300000, // Five minutes
  SMSDialogTimeoutText: "left",
  SMSDialogReceiveFilter: function(message) {
    return message;
  },

  wakeUpAlarm: 60000, // ms, i.e. 60 seconds
};

var config = {
  main: "com/sun/midp/main/MIDletSuiteLoader",
  midletClassName: "RunTests",

  // Ignored files are files that always exist and are empty, so we discard
  // writes to them and return no data from reads.  It's useful for log files
  // to which midlets write frequently but never read.  Specify one by adding
  // the string pathname to the set via config.ignoredFiles.add().
  ignoredFiles: new Set(),
};

// The base directory of the app, relative to the current page.  Normally this
// is the directory from which the page was loaded, but some test pages load
// from a subdirectory, like tests/fs/, and they set this accordingly such that
// code loads files, like libs/fs-init.js, can load them from the right place.
var APP_BASE_DIR = "./";
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



// generated, build-specific configuration

config.release = true;
config.version = "1427070574";
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



/**
 * The URL query parameters.  One or more of the following:
 *
 *    args (gets split from comma-separated list to Array)
 *    gamepad
 *    icc_mcc
 *    icc_mnc
 *    icc_msisdn
 *    jad
 *    jars
 *    logConsole
 *    logLevel
 *    main
 *    midletClassName
 *    network_mcc
 *    network_mnc
 *    platform
 *    autosize
 *    fontSize
 *    language
 *
 * Keep this list up-to-date!
 */

(function() {
  var params = {};

  location.search.substring(1).split("&").forEach(function (param) {
    param = param.split("=").map(function(v) {
      return v.replace(/\+/g, " ");
    }).map(decodeURIComponent);
    params[param[0]] = param[1];
  });

  params.args = (params.args || "").split(",");

  if ("midletClassName" in params) {
    params.midletClassName = params.midletClassName.replace(/\//g, '.');
  }

  for (var name in params) {
    config[name] = params[name];
  }
})();
var Benchmark = (function() {

  function mean(array) {
    function add(a, b) {
      return a + b;
    }
    return array.reduce(add, 0) / array.length;
  }

  var defaultStorage = {
    numRounds: 10,
    roundDelay: 5000, // ms to delay starting next round of tests
    baseline: {},
    current: {},
    running: false,
    round: 0,
    deleteFs: false,
    deleteJitCache: false,
    buildBaseline: false,
    recordMemory: true
  };

  var NO_SECURITY = typeof netscape !== "undefined" && netscape.security.PrivilegeManager;

  function enableSuperPowers() {
    // To enable chrome privileges use a separate profile and enable the pref:
    // security.turn_off_all_security_so_that_viruses_can_take_over_this_computer
    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
  }

  function forceCollectors() {
    enableSuperPowers();
    console.log("Forcing CC/GC.");
    for (var i = 0; i < 3; i++) {
      Components.utils.forceCC();
      Components.utils.forceGC();
    }
  }

  var STORAGE_KEY = "benchmark";
  var storage;
  function initStorage(defaults) {
    if (!(STORAGE_KEY in localStorage)) {
      storage = defaults;
    } else {
      storage = JSON.parse(localStorage[STORAGE_KEY]);
      for (var key in defaults) {
        if (key in storage) {
          continue;
        }
        storage[key] = defaults[key];
      }
    }
  }

  function saveStorage() {
    localStorage[STORAGE_KEY] = JSON.stringify(storage);
  }
  
  initStorage(defaultStorage);
  var LEFT = 0; var CENTER = 1; var RIGHT = 2;
  function prettyTable(rows, alignment) {
    function pad(str, repeat, n, align) {
      if (align === LEFT) {
        return str.padRight(repeat, n);
      } else if (align === CENTER) {
        var middle = ((n - str.length) / 2) | 0;
        return str.padRight(repeat, middle + str.length).padLeft(repeat, n);
      } else if (align === RIGHT) {
        return str.padLeft(repeat, n);
      }
      throw new Error("Bad align value." + align);
    }
    var maxColumnLengths = [];
    var numColumns = rows[0].length;
    for (var colIndex = 0; colIndex < numColumns; colIndex++) {
      var maxLength = 0;
      for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        maxLength = Math.max(rows[rowIndex][colIndex].toString().length, maxLength);
      }
      maxColumnLengths[colIndex] = maxLength;
    }
    var out = "";
    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      out += "| ";
      for (var colIndex = 0; colIndex < numColumns; colIndex++) {
        out += pad(rows[rowIndex][colIndex].toString(), " ", maxColumnLengths[colIndex], rowIndex === 0 ? CENTER : alignment[colIndex]) + " | ";
      }
      out += "\n";
      if (rowIndex === 0) {
        out += "|";
        for (var colIndex = 0; colIndex < numColumns; colIndex++) {
          var align = alignment[colIndex];
          if (align === 0) {
            out += ":".padRight("-", maxColumnLengths[colIndex] + 2);
          } else if (align === 1) {
            out += ":".padLeft("-", maxColumnLengths[colIndex] + 1) + ":";
          } else if (align === 2) {
            out += ":".padLeft("-", maxColumnLengths[colIndex] + 2);
          }
          out += "|";
        }
        out += "\n";
      }
    }
    return out;
  }

  function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  function msFormatter(x) {
    return numberWithCommas(Math.round(x)) + "ms";
  }

  function byteFormatter(x) {
    return numberWithCommas(Math.round(x / 1024)) + "kb";
  }

  var valueFormatters = {
    startupTime: msFormatter,
    totalSize: byteFormatter,
    domSize: byteFormatter,
    styleSize: byteFormatter,
    jsObjectsSize: byteFormatter,
    jsStringsSize: byteFormatter,
    jsOtherSize: byteFormatter,
    otherSize: byteFormatter,
  };

  var startup = {
    run: function(settings) {
      storage.round = 0;
      var current = storage.current = {};
      current.startupTime = [];
      if (settings.recordMemory) {
        storage.recordMemory = true;
        current.totalSize     = [];
        current.domSize       = [];
        current.styleSize     = [];
        current.jsObjectsSize = [];
        current.jsStringsSize = [];
        current.jsOtherSize   = [];
        current.otherSize     = [];
      }
      storage.running = true;
      storage.numRounds = "numRounds" in settings ? settings.numRounds : defaultStorage.numRounds;
      storage.roundDelay = "roundDelay" in settings ? settings.roundDelay : defaultStorage.roundDelay;
      storage.deleteFs = "deleteFs" in settings ? settings.deleteFs : defaultStorage.deleteFs;
      storage.deleteJitCache = "deleteJitCache" in settings ? settings.deleteJitCache : defaultStorage.deleteJitCache;
      storage.buildBaseline = "buildBaseline" in settings ? settings.buildBaseline : defaultStorage.buildBaseline;
      if (storage.buildBaseline) {
        storage.baseline = {};
      }
      saveStorage();
      this.runNextRound();
    },
    startTimer: function() {
      if (!storage.running) {
        console.log("startTimer called while benchmark not running");
        return;
      }
      this.startTime = performance.now();
    },
    stopTimer: function() {
      if (!storage.running) {
        console.log("stopTimer called while benchmark not running");
        return;
      }
      if (this.startTime === null) {
        console.log("stopTimer called without previous call to startTimer");
        return;
      }
      var took = performance.now() - this.startTime;
      this.startTime = null;
      storage.current.startupTime.push(took);
      storage.round++;
      saveStorage();
      this.runNextRound();
    },
    sampleMemory: function() {
      if (NO_SECURITY) {
        forceCollectors();
        var memoryReporter = Components.classes["@mozilla.org/memory-reporter-manager;1"].getService(Components.interfaces.nsIMemoryReporterManager);

        var jsObjectsSize = {};
        var jsStringsSize = {};
        var jsOtherSize = {};
        var domSize = {};
        var styleSize = {};
        var otherSize = {};
        var totalSize = {};
        var jsMilliseconds = {};
        var nonJSMilliseconds = {};

        try {
          memoryReporter.sizeOfTab(window.parent.window, jsObjectsSize, jsStringsSize, jsOtherSize,
            domSize, styleSize, otherSize, totalSize, jsMilliseconds, nonJSMilliseconds);
        } catch (e) {
          console.log(e);
        }
        storage.current.totalSize.push(totalSize.value);
        storage.current.domSize.push(domSize.value);
        storage.current.styleSize.push(styleSize.value);
        storage.current.jsObjectsSize.push(jsObjectsSize.value);
        storage.current.jsStringsSize.push(jsStringsSize.value);
        storage.current.jsOtherSize.push(jsOtherSize.value);
        storage.current.otherSize.push(otherSize.value);
        saveStorage();
      }
    },
    runNextRound: function() {
      var self = this;
      var done = storage.round >= storage.numRounds;
      function run() {
        if (NO_SECURITY) {
          forceCollectors();
        }
        if (storage.round !== 0) {
          if (NO_SECURITY) {
            self.sampleMemory();
          }
          if (done) {
            self.finish();
            return;
          }
        }
        DumbPipe.close(DumbPipe.open("reload", {}));
      }
      if (storage.deleteFs) {
        console.log("Deleting fs.");
        indexedDB.deleteDatabase("asyncStorage");
      }
      if (storage.deleteJitCache) {
        console.log("Deleting jit cache.");
        indexedDB.deleteDatabase("CompiledMethodCache");
      }
      if (storage.round !== 0) {
        console.log("Scheduling round " + (storage.round) + " of " + storage.numRounds + " finalization in " + storage.roundDelay + "ms");
        setTimeout(run, storage.roundDelay);
      } else {
        run();
      }
    },
    finish: function() {
      storage.running = false;
      saveStorage();
      var labels = ["Test", "Baseline Mean", "Mean", "+/-", "%", "P", "Min", "Max"];
      var rows = [labels];
      for (var key in storage.current) {
        var samples = storage.current[key];
        var baselineSamples = storage.baseline[key] || [];
        var hasBaseline = baselineSamples.length > 0;
        var formatter = valueFormatters[key];

        var row = [key];
        rows.push(row);
        var currentMean = mean(samples);
        var baselineMean = mean(baselineSamples);
        row.push(hasBaseline ? formatter(baselineMean) + "" : "n/a");
        row.push(formatter(currentMean) + "");
        row.push(hasBaseline ? formatter(currentMean - baselineMean) + "" : "n/a");
        row.push(hasBaseline ? (100 * (currentMean - baselineMean) / baselineMean).toFixed(2) : "n/a");
        var pMessage = "n/a";
        if (hasBaseline) {
          var p = (baselineSamples.length < 2) ? 1 : ttest(baselineSamples, samples).pValue();
          if (p < 0.05) {
            pMessage = currentMean < baselineMean ? "BETTER" : "WORSE";
          } else {
            pMessage = "INSIGNIFICANT";
          }
        } else {
          pMessage = "n/a";
        }
        row.push(pMessage);
        row.push(formatter(Math.min.apply(null, samples)));
        row.push(formatter(Math.max.apply(null, samples)));
      }
      if (storage.buildBaseline) {
        storage.baseline = storage.current;
        storage.buildBaseline = false;
        console.log("FINISHED BUILDING BASELINE");
      }
      console.log("Raw Values:\n" + "Current: " + JSON.stringify(storage.current) + "\nBaseline: " + JSON.stringify(storage.baseline))
      console.log("\n" + prettyTable(rows, [LEFT, RIGHT, RIGHT, RIGHT, RIGHT, RIGHT, RIGHT, RIGHT]));
      saveStorage();
    }

  };

  // Start right away instead of in init() so we can see any speedups in script loading.
  if (storage.running) {
    startup.startTimer();
  }

  var numRoundsEl;
  var roundDelayEl;
  var deleteFsEl;
  var deleteJitCacheEl;
  var startButton;
  var baselineButton;

  function getSettings() {
    return {
      numRounds: numRoundsEl.value | 0,
      roundDelay: roundDelayEl.value | 0,
      deleteFs: !!deleteFsEl.checked,
      deleteJitCache: !!deleteJitCacheEl.checked,
      recordMemory: NO_SECURITY
    };
  }

  function start() {
    startup.run(getSettings());
  }

  function buildBaseline() {
    var settings = getSettings();
    settings.buildBaseline = true;
    startup.run(settings);
  }

  return {
    initUI: function() {
      numRoundsEl = document.getElementById("benchmark-num-rounds");
      roundDelayEl = document.getElementById("benchmark-round-delay");
      deleteFsEl = document.getElementById("benchmark-delete-fs");
      deleteJitCacheEl = document.getElementById("benchmark-delete-jit-cache");
      startButton = document.getElementById("benchmark-startup-run");
      baselineButton = document.getElementById("benchmark-startup-baseline");

      numRoundsEl.value = storage.numRounds;
      roundDelayEl.value = storage.roundDelay;
      deleteFsEl.checked = storage.deleteFs;
      deleteJitCacheEl.checked = storage.deleteJitCache;

      startButton.onclick = start;
      baselineButton.onclick = buildBaseline;
    },
    start: start,
    buildBaseline: buildBaseline,
    startup: {
      init: function() {
        if (!storage.running) {
          return;
        }
        var implKey = "com/sun/midp/lcdui/DisplayDevice.gainedForeground0.(II)V";
        var originalFn = Native[implKey];
        Native[implKey] = function() {
          startup.stopTimer();
          originalFn.apply(null, arguments);
        };
      },
      run: startup.run.bind(startup),
    }
  };
})();
/*
Copyright (c) 2013 Andreas Madsen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Built using https://github.com/AndreasMadsen/ttest with browserify.
*/

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var OneDataSet = require('./hypothesis/one-data-set.js');
var TwoDataSet = require('./hypothesis/two-data-set.js');

var Summary = require('summary');

var ALTERNATIVE_MAP = {
  "not equal": 0,
  "less": -1,
  "greater": 1
};

function isList(list) {
  return (Array.isArray(list) || list instanceof Summary);
}

function hypothesis(left, right, options) {
  // Vertify required arguments
  if (!isList(left)) {
    throw new TypeError('left value in hypothesis test must be an array');
  }

  if (!isList(right)) {
    options = right;
    right = undefined;
  }

  // Set the default options
  if (!options) options = {};

  options = {
    mu: options.hasOwnProperty('mu') ? options.mu : 0,
    alpha: options.hasOwnProperty('alpha') ? options.alpha : 0.05,
    alternative: options.hasOwnProperty('alternative') ? ALTERNATIVE_MAP[options.alternative] : 0
  };

  // Vertify mu option
  if (typeof options.mu !== 'number') {
    throw new TypeError('alpha option must be a number');
  }

  // Vertify alpha option
  if (typeof options.alpha !== 'number') {
    throw new TypeError('alpha option must be a number');
  }
  if (options.alpha >= 1) {
    throw new RangeError('alpha must be bellow 1.0');
  }

  // Vertify alternative option
  if (typeof options.alternative === undefined) {
    throw new Error('alternative must be either not equal, less or greater');
  }

  // Perform the student's t test
  if (isList(right)) {
    return new TwoDataSet(left, right, options);
  } else {
    return new OneDataSet(left, options);
  }
}
module.exports = hypothesis;

},{"./hypothesis/one-data-set.js":3,"./hypothesis/two-data-set.js":4,"summary":14}],2:[function(require,module,exports){

function AbstactStudentT(options) {
  this._options = options;
}
module.exports = AbstactStudentT;

AbstactStudentT.prototype.testValue = function () {
  var dif = (this._mean - this._options.mu);
  return dif / this._fac;
};

AbstactStudentT.prototype.pValue = function () {
  var t = this.testValue();

  switch (this._options.alternative) {
    case 1: // mu > mu[0]
      return 1 - this._dist.cdf(t);
    case -1: // mu < mu[0]
      return this._dist.cdf(t);
    case 0: // mu != mu[0]
      return 2 * (1 - this._dist.cdf(Math.abs(t)));
  }
};

AbstactStudentT.prototype.confidence = function () {
  var pm;
  switch (this._options.alternative) {
    case 1: // mu > mu[0]
      pm = Math.abs(this._dist.inv(this._options.alpha)) * this._fac;
      return [this._mean - pm, Infinity];
    case -1: // mu < mu[0]
      pm = Math.abs(this._dist.inv(this._options.alpha)) * this._fac;
      return [-Infinity, this._mean + pm];
    case 0: // mu != mu[0]
      pm = Math.abs(this._dist.inv(this._options.alpha / 2)) * this._fac;
      return [this._mean - pm, this._mean + pm];
  }
};

AbstactStudentT.prototype.valid = function () {
  return this.pValue() >= this._options.alpha;
};

AbstactStudentT.prototype.freedom = function () {
  return this._freedom;
}
},{}],3:[function(require,module,exports){

var Distribution = require('distributions').Studentt;
var Summary = require('summary');

var util = require('util');
var AbstactStudentT = require('./abstact.js');

function StudentT(data, options) {
  AbstactStudentT.call(this, options);

  var summary = (data instanceof Summary) ? data : new Summary(data);

  this._freedom = summary.size() - 1;
  var variance = summary.variance();

  this._fac = Math.sqrt(variance* (1 / summary.size()));
  this._mean = summary.mean();

  this._dist = new Distribution(this._freedom);
}
util.inherits(StudentT, AbstactStudentT);
module.exports = StudentT;

},{"./abstact.js":2,"distributions":5,"summary":14,"util":19}],4:[function(require,module,exports){

var Distribution = require('distributions').Studentt;
var Summary = require('summary');

var util = require('util');
var AbstactStudentT = require('./abstact.js');

function StudentT(left, right, options) {
  AbstactStudentT.call(this, options);

  var leftsummary = (left instanceof Summary) ? left : new Summary(left);
  var rightsummary = (right instanceof Summary) ? right : new Summary(right);

  this._freedom = leftsummary.size() + rightsummary.size() - 2;
  var commonVariance = ((leftsummary.size() - 1) * leftsummary.variance() +
                        (rightsummary.size() - 1) * rightsummary.variance()) / this._freedom;

  this._fac = Math.sqrt(commonVariance * (1 / leftsummary.size() + 1 / rightsummary.size()));
  this._mean = leftsummary.mean() - rightsummary.mean();

  this._dist = new Distribution(this._freedom);
}
util.inherits(StudentT, AbstactStudentT);
module.exports = StudentT;

},{"./abstact.js":2,"distributions":5,"summary":14,"util":19}],5:[function(require,module,exports){

var a = require('./distributions/normal.js');
var a = require('./distributions/uniform.js');
var a = require('./distributions/studentt.js');
var files = ['normal', 'uniform', 'studentt'];

for (var i = 0, l = files.length; i < l; i++) {
  var fns = require('./distributions/' + files[i] + '.js');
  var keys = Object.keys(fns);

  for (var n = 0, r = keys.length; n < r; n++) {
    exports[ keys[n] ] = fns[keys[n]];
  }
}

},{"./distributions/normal.js":6,"./distributions/studentt.js":7,"./distributions/uniform.js":8}],6:[function(require,module,exports){

var mathfn = require('mathfn');

function NormalDistribution(mean, sd) {
  if (!(this instanceof NormalDistribution)) {
    return new NormalDistribution(mean, sd);
  }

  if (typeof mean !== 'number' && mean !== undefined) {
    throw TypeError('mean must be a number');
  }
  if (typeof sd !== 'number' && sd !== undefined) {
    throw TypeError('sd must be a number');
  }

  if (sd !== undefined && sd <= 0.0) {
    throw TypeError('sd must be positive');
  }

  this._mean = mean || 0;
  this._sd = sd || 1;
  this._var = this._sd * this._sd;
}
exports.Normal = NormalDistribution;

// -0.5 * log(2 Pi)
var HALF_TWO_PI_LOG = -0.91893853320467274180;

NormalDistribution.prototype.pdf = function (x) {
  return Math.exp(HALF_TWO_PI_LOG - Math.log(this._sd) - Math.pow(x - this._mean, 2) / (2 * this._var));
};

NormalDistribution.prototype.cdf = function (x) {
  return 0.5 * (1 + mathfn.erf((x - this._mean) / Math.sqrt(2 * this._var)));
};

NormalDistribution.prototype.inv = function (p) {
  return -Math.SQRT2 * this._sd * mathfn.invErfc(2 * p) + this._mean;
};

NormalDistribution.prototype.median = function () {
  return this._mean;
};

NormalDistribution.prototype.mean = function () {
  return this._mean;
};

NormalDistribution.prototype.variance = function () {
  return this._var;
};

},{"mathfn":13}],7:[function(require,module,exports){

var mathfn = require('mathfn');

function StudenttDistribution(df) {
  if (!(this instanceof StudenttDistribution)) {
    return new StudenttDistribution(df);
  }

  if (typeof df !== 'number') {
    throw TypeError('mean must be a number');
  }
  if (df <= 0) {
    throw RangeError('df must be a positive number');
  }

  this._df = df;

  this._pdf_const = (mathfn.gamma((df + 1) / 2) / (Math.sqrt(df * Math.PI) * mathfn.gamma(df / 2)));
  this._pdf_exp = -((df + 1) / 2);

  this._df_half = df / 2;
}
exports.Studentt = StudenttDistribution;

StudenttDistribution.prototype.pdf = function (x) {
  return this._pdf_const * Math.pow(1 + ((x*x) / this._df), this._pdf_exp);
};

StudenttDistribution.prototype.cdf = function (x) {
  var fac = Math.sqrt(x * x + this._df);

  return mathfn.incBeta((x + fac) / (2 * fac), this._df_half, this._df_half);
};

StudenttDistribution.prototype.inv = function (p) {
  var fac = mathfn.invIncBeta(2 * Math.min(p, 1 - p), this._df_half, 0.5);
  var y = Math.sqrt(this._df * (1 - fac) / fac);
  return (p > 0.5) ? y : -y;
};

StudenttDistribution.prototype.median = function () {
  return 0;
};

StudenttDistribution.prototype.mean = function () {
  return (this._df > 1) ? 0 : undefined;
};

StudenttDistribution.prototype.variance = function () {
  if (this._df > 2) return this._df / (this._df - 2);
  else if (this._df > 1) return Infinity;
  else return undefined;
};

},{"mathfn":13}],8:[function(require,module,exports){

function UniformDistribution(a, b) {
  if (!(this instanceof UniformDistribution)) {
    return new UniformDistribution(a, b);
  }

  if (typeof a !== 'number' && a !== undefined) {
    throw TypeError('mean must be a number');
  }
  if (typeof b !== 'number' && b !== undefined) {
    throw TypeError('sd must be a number');
  }

  this._a = typeof a === 'number' ? a : 0;
  this._b = typeof b === 'number' ? b : 1;

  if (this._b <= this._a) {
    throw new RangeError('a must be greater than b');
  }

  this._k = 1 / (this._b - this._a);
  this._mean = (this._a + this._b) / 2;
  this._var = (this._a - this._b) * (this._a - this._b) / 12;
}
exports.Uniform = UniformDistribution;

UniformDistribution.prototype.pdf = function (x) {
  return (x < this._a || x > this._b) ? 0 : this._k;
};

UniformDistribution.prototype.cdf = function (x) {
  if (x < this._a) return 0;
  else if (x > this._b) return 1;
  else return (x - this._a) * this._k;
};

UniformDistribution.prototype.inv = function (p) {
  if (p < 0 || p > 1) return NaN;
  else return p * (this._b - this._a) + this._a;
};

UniformDistribution.prototype.median = function () {
  return this._mean;
};

UniformDistribution.prototype.mean = function () {
  return this._mean;
};

UniformDistribution.prototype.variance = function () {
  return this._var;
};

},{}],9:[function(require,module,exports){

var gammaCollection = require('./gamma.js');
var log1p = require('./log.js').log1p;

//
// The beta functions are taken from the jStat library, and modified to fit
// the API and style pattern used in this module.
// See: https://github.com/jstat/jstat/
// License: MIT
// 

//Copyright (c) 2013 jStat
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

function beta(x, y) {
	if (x < 0 || y < 0) {
   throw RangeError('Arguments must be positive.'); 
	}

  // Some special cases
  else if (x === 0 && y === 0) return NaN;
  else if (x === 0 || y === 0) return Infinity;

	// make sure x + y doesn't exceed the upper limit of usable values
  else if (x + y > 170) {
    return Math.exp(gammaCollection.betaln(x, y));
  }

  else {
    return gammaCollection.gamma(x) * gammaCollection.gamma(y) / gammaCollection.gamma(x + y);
  }
}
exports.beta = beta;

function logBeta(x, y) {
  if (x < 0 || y < 0) {
   throw RangeError('Arguments must be positive.'); 
	}

  // Some special cases
  else if (x === 0 && y === 0) return NaN;
  else if (x === 0 || y === 0) return Infinity;
  
  else {
    return gammaCollection.logGamma(x) + gammaCollection.logGamma(y) - gammaCollection.logGamma(x + y);
  }
}
exports.logBeta = logBeta;

// evaluates the continued fraction for incomplete beta function by modified Lentz's method.
function betacf(x, a, b) {
	var fpmin = 1e-30,
		m = 1,
		m2, aa, c, d, del, h, qab, qam, qap;
	// These q's will be used in factors that occur in the coefficients
	qab = a + b;
	qap = a + 1;
	qam = a - 1;
	c = 1;
	d = 1 - qab * x / qap;
	if (Math.abs(d) < fpmin) d = fpmin;
	d = 1 / d;
	h = d;
	for (; m <= 100; m++) {
		m2 = 2 * m;
		aa = m * (b - m) * x / ((qam + m2) * (a + m2));
		// One step (the even one) of the recurrence
		d = 1 + aa * d;
		if (Math.abs(d) < fpmin) d = fpmin;
		c = 1 + aa / c;
		if (Math.abs(c) < fpmin) c = fpmin;
		d = 1 / d;
		h *= d * c;
		aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));
		// Next step of the recurrence (the odd one)
		d = 1 + aa * d;
		if (Math.abs(d) < fpmin) d = fpmin;
		c = 1 + aa / c;
		if (Math.abs(c) < fpmin) c = fpmin;
		d = 1 / d;
		del = d * c;
		h *= del;
		if (Math.abs(del - 1.0) < 3e-7) break;
	}
	return h;
}

// Returns the incomplete beta function I_x(a,b)
function incBeta(x, a, b) {
	if(x < 0 || x > 1) {
    throw new RangeError('First argument must be between 0 and 1.');
	}

  // Special cases, there can make trouble otherwise
  else if (a === 1 && b === 1) return x;
  else if (x === 0) return 0;
  else if (x === 1) return 1;
  else if (a === 0) return 1;
  else if (b === 0) return 0;

  else {
    var bt = 
      Math.exp(gammaCollection.logGamma(a + b) -
      gammaCollection.logGamma(a) -
      gammaCollection.logGamma(b) +
      a * Math.log(x) +
      b * log1p(-x));

    // Use continued fraction directly.
    if (x < (a + 1) / (a + b + 2)) return bt * betacf(x, a, b) / a;
    // else use continued fraction after making the symmetry transformation.
    else return 1 - bt * betacf(1 - x, b, a) / b;
  }
}
exports.incBeta = incBeta;

// Returns the inverse of the incomplete beta function
function invIncBeta(p, a, b) {
  if(x < 0 || x > 1) {
    throw new RangeError('First argument must be between 0 and 1.');
	}

  // Special cases, there can make trouble otherwise
  else if (a === 1 && b === 1) return p;
  else if (p === 1) return 1;
  else if (p === 0) return 0;
  else if (a === 0) return 0;
  else if (b === 0) return 1;

  else {
    var EPS = 1e-8,
        a1 = a - 1,
        b1 = b - 1,
        j = 0,
        lna, lnb, pp, t, u, err, x, al, h, w, afac;
  
	if(a >= 1 && b >= 1) {
    pp = (p < 0.5) ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));

		x = (2.30753 + t * 0.27061) / (1 + t* (0.99229 + t * 0.04481)) - t;
		if(p < 0.5) x = -x;
		al = (x * x - 3) / 6;
		h = 2 / (1 / (2 * a - 1)  + 1 / (2 * b - 1));
		w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));
		x = a / (a + b * Math.exp(2 * w));
	} else {
		lna = Math.log(a / (a + b));
		lnb = Math.log(b / (a + b));
		t = Math.exp(a * lna) / a;
		u = Math.exp(b * lnb) / b;
		w = t + u;
		if (p < t / w) x = Math.pow(a * w * p, 1 / a);
		else x = 1 - Math.pow(b * w * (1 - p), 1 / b);
	}

	afac = -gammaCollection.logGamma(a) - gammaCollection.logGamma(b) + gammaCollection.logGamma(a + b);

  for(; j < 10; j++) {
		if(x === 0 || x === 1) return x;
		err = incBeta(x, a, b) - p;

    t = Math.exp(a1 * Math.log(x) + b1 * log1p(-x) + afac);
		u = err / t;
		x -= (t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x)))));

    if (x <= 0) x = 0.5 * (x + t);
		if (x >= 1) x = 0.5 * (x + t + 1);

		if (Math.abs(t) < EPS * x && j > 0) break;
	}

	return x;
  }
}
exports.invIncBeta = invIncBeta;

},{"./gamma.js":11,"./log.js":12}],10:[function(require,module,exports){

//
// Modified from:
//  C++: http://www.johndcook.com/cpp_erf.html
//
var ERF_A = [
  0.254829592,
  -0.284496736,
  1.421413741,
  -1.453152027,
  1.061405429
];
var ERF_P = 0.3275911;

function erf(x) {
  var sign = 1;
  if (x < 0) sign = -1;

  x = Math.abs(x);

  var t = 1.0/(1.0 + ERF_P*x);
  var y = 1.0 - (((((ERF_A[4]*t + ERF_A[3])*t) + ERF_A[2])*t + ERF_A[1])*t + ERF_A[0])*t*Math.exp(-x*x);

  return sign * y;
}
exports.erf = erf;

//
// Combined from two sources:
//  Python: http://pydoc.net/Python/timbre/1.0.0/timbre.stats/
//  JavaScript: https://github.com/jstat/jstat/blob/master/src/special.js
//
var M_2_SQRTPI = 1.12837916709551257;

var ERFC_COF = [
  -2.8e-17, 1.21e-16, -9.4e-17, -1.523e-15, 7.106e-15,
   3.81e-16, -1.12708e-13, 3.13092e-13, 8.94487e-13,
  -6.886027e-12, 2.394038e-12, 9.6467911e-11,
  -2.27365122e-10, -9.91364156e-10, 5.059343495e-9,
   6.529054439e-9, -8.5238095915e-8, 1.5626441722e-8,
   1.303655835580e-6, -1.624290004647e-6,
  -2.0278578112534e-5, 4.2523324806907e-5,
   3.66839497852761e-4, -9.46595344482036e-4,
  -9.561514786808631e-3, 1.9476473204185836e-2,
   6.4196979235649026e-1, -1.3026537197817094
];
var ERFC_COF_LAST = ERFC_COF[ERFC_COF.length - 1];

function erfc(x) {
  function erfccheb(y) {
    var d = 0.0, dd = 0.0, temp = 0.0,
        t = 2.0 / (2.0 + y), ty = 4.0 * t - 2.0;
  
    for (var i = 0, l = ERFC_COF.length - 1; i < l; i++) {
      temp = d;
      d = ty * d - dd + ERFC_COF[i];
      dd = temp;
    }
  
    return t * Math.exp(-y * y + 0.5 * (ERFC_COF_LAST + ty * d) - dd);
  }
  
  return x >= 0.0 ? erfccheb(x) : 2.0 - erfccheb(-x);
}
exports.erfc = erfc;

//
// Combined from three sources:
//  Python: http://pydoc.net/Python/timbre/1.0.0/timbre.stats/
//  JavaScript: https://github.com/jstat/jstat/blob/master/src/special.js
//  C: https://github.com/Peteysoft/sea_ice/blob/master/src/mcc_ice/inverf.c
//
function invErfc(p) {
  if (p < 0.0 || p > 2.0) {
    throw RangeError('Argument must be betweeen 0 and 2');
  }

  else if (p === 0.0) {
    return Infinity;
  }
  
  else if (p === 2.0) {
    return -Infinity;
  }
  
  else {
    var pp = p < 1.0 ? p : 2.0 - p;
    var t = Math.sqrt(-2.0 * Math.log(pp / 2.0));
    var x = -0.70711 * ((2.30753 + t * 0.27061) / (1.0 + t * (0.99229 + t * 0.04481)) - t);

    var err1 = erfc(x) - pp;
    x += err1 / (M_2_SQRTPI * Math.exp(-x * x) - x * err1);
    var err2 = erfc(x) - pp;
    x += err2 / (M_2_SQRTPI * Math.exp(-x * x) - x * err2);

    return p < 1.0 ? x : -x;
  }
}
exports.invErfc = invErfc;

//
// Used math: inverf(x) = -inverfc(1 + x);
//  NOTE: you are welcome to add a specific approximation
//
function invErf(p) {
  if (p < -1.0 || p > 1.0) {
    throw RangeError('Argument must be betweeen -1 and 1');
  }

  return -invErfc(p + 1);
}
exports.invErf = invErf;

},{}],11:[function(require,module,exports){

//
// Modified form:
//  C++: http://www.johndcook.com/cpp_gamma.html
//

// Euler's gamma constant
var GAMMA_CONST = 0.577215664901532860606512090;

// numerator coefficients for approximation over the interval (1,2)
var P_COFF = [
  -1.71618513886549492533811E+0,
   2.47656508055759199108314E+1,
  -3.79804256470945635097577E+2,
   6.29331155312818442661052E+2,
   8.66966202790413211295064E+2,
  -3.14512729688483675254357E+4,
  -3.61444134186911729807069E+4,
   6.64561438202405440627855E+4
];

// denominator coefficients for approximation over the interval (1,2)
var Q_COFF = [
  -3.08402300119738975254353E+1,
   3.15350626979604161529144E+2,
  -1.01515636749021914166146E+3,
  -3.10777167157231109440444E+3,
   2.25381184209801510330112E+4,
   4.75584627752788110767815E+3,
  -1.34659959864969306392456E+5,
  -1.15132259675553483497211E+5
];

function gamma(x) {
  if (x <= 0.0) {
    throw new RangeError('Argument must be positive.');
	}

	// For small x, 1/Gamma(x) has power series x + gamma x^2  - ...
	// So in this range, 1/Gamma(x) = x + gamma x^2 with error on the order of x^3.
	// The relative error over this interval is less than 6e-7.
  else if (x < 0.001) {
    return 1.0/(x*(1.0 + GAMMA_CONST*x));
  }
  
  // The algorithm directly approximates gamma over (1,2) and uses
  // reduction identities to reduce other arguments to this interval.
  else if (x < 12.0) {
    var y = x, n = 0, lessOne = (y < 1.0);

    // Add or subtract integers as necessary to bring y into (1,2)
    if (lessOne) {
      y += 1.0;
    } else {
      n = Math.floor(y) - 1;
      y -= n;
    }
    
    var num = 0.0, den = 1.0, z = y - 1;
    for (var i = 0; i < 8; i++) {
      num = (num + P_COFF[i])*z;
      den = den*z + Q_COFF[i];
    }
    var result = num/den + 1.0;

    // Apply correction if argument was not initially in (1,2)
    if (lessOne) {
      result /= (y-1.0);
    } else {
      // Use the identity gamma(z+n) = z*(z+1)* ... *(z+n-1)*gamma(z)
      for (i = 0; i < n; i++)
        result *= y++;
    }

    return result;
  }

  // Correct answer too large to display. Force +infinity.
  else if (x > 171.624) {
		return Infinity;
  }
  
  else {
    return Math.exp(logGamma(x));
  }
}

// gamma functions goes under two names
exports.gamma = gamma;

//
// Modified form:
//  C++: http://www.johndcook.com/cpp_gamma.html
//

var C_COFF = [
   1.0/12.0,
  -1.0/360.0,
   1.0/1260.0,
  -1.0/1680.0,
   1.0/1188.0,
  -691.0/360360.0,
   1.0/156.0,
  -3617.0/122400.0
];

var HALF_LOG_TWO_PI = 0.91893853320467274178032973640562;

function logGamma(x) {
  if (x <= 0.0) {
    throw new RangeError('Argument must be positive.');
	}

  else if (x < 12.0) {
    return Math.log(Math.abs(gamma(x)));
  }

  // Abramowitz and Stegun 6.1.41
  // Asymptotic series should be good to at least 11 or 12 figures
  // For error analysis, see Whittiker and Watson
  // A Course in Modern Analysis (1927), page 252
  
  else {
    var  z = 1.0/(x*x);
    var sum = C_COFF[7];
    for (var i = 6; i >= 0; i--) {
      sum *= z;
      sum += C_COFF[i];
    }
    var series = sum/x;
    return (x - 0.5)*Math.log(x) - x + HALF_LOG_TWO_PI + series;
  }
}
exports.logGamma = logGamma;

},{}],12:[function(require,module,exports){

//
// Modified from:
//  C++: http://www.johndcook.com/cpp_erf.html
//

function log1p(x) {
  if (x <= -1.0) {
    throw new RangeError('Argument mustbe greater than -1.0');
  }

  // x is large enough that the obvious evaluation is OK
  else if (Math.abs(x) > 1e-4) {
      return Math.log(1.0 + x);
  }

  // Use Taylor approx. log(1 + x) = x - x^2/2 with error roughly x^3/3
  // Since |x| < 10^-4, |x|^3 < 10^-12, relative error less than 10^-8
  else {
    return (-0.5*x + 1.0)*x;
  }
}
exports.log1p = log1p;

//
// Modified from:
//  C++: http://www.johndcook.com/cpp_erf.html
//
var TABLE_LOOKUP = [
  0.000000000000000,
  0.000000000000000,
  0.693147180559945,
  1.791759469228055,
  3.178053830347946,
  4.787491742782046,
  6.579251212010101,
  8.525161361065415,
  10.604602902745251,
  12.801827480081469,
  15.104412573075516,
  17.502307845873887,
  19.987214495661885,
  22.552163853123421,
  25.191221182738683,
  27.899271383840894,
  30.671860106080675,
  33.505073450136891,
  36.395445208033053,
  39.339884187199495,
  42.335616460753485,
  45.380138898476908,
  48.471181351835227,
  51.606675567764377,
  54.784729398112319,
  58.003605222980518,
  61.261701761002001,
  64.557538627006323,
  67.889743137181526,
  71.257038967168000,
  74.658236348830158,
  78.092223553315307,
  81.557959456115029,
  85.054467017581516,
  88.580827542197682,
  92.136175603687079,
  95.719694542143202,
  99.330612454787428,
  102.968198614513810,
  106.631760260643450,
  110.320639714757390,
  114.034211781461690,
  117.771881399745060,
  121.533081515438640,
  125.317271149356880,
  129.123933639127240,
  132.952575035616290,
  136.802722637326350,
  140.673923648234250,
  144.565743946344900,
  148.477766951773020,
  152.409592584497350,
  156.360836303078800,
  160.331128216630930,
  164.320112263195170,
  168.327445448427650,
  172.352797139162820,
  176.395848406997370,
  180.456291417543780,
  184.533828861449510,
  188.628173423671600,
  192.739047287844900,
  196.866181672889980,
  201.009316399281570,
  205.168199482641200,
  209.342586752536820,
  213.532241494563270,
  217.736934113954250,
  221.956441819130360,
  226.190548323727570,
  230.439043565776930,
  234.701723442818260,
  238.978389561834350,
  243.268849002982730,
  247.572914096186910,
  251.890402209723190,
  256.221135550009480,
  260.564940971863220,
  264.921649798552780,
  269.291097651019810,
  273.673124285693690,
  278.067573440366120,
  282.474292687630400,
  286.893133295426990,
  291.323950094270290,
  295.766601350760600,
  300.220948647014100,
  304.686856765668720,
  309.164193580146900,
  313.652829949878990,
  318.152639620209300,
  322.663499126726210,
  327.185287703775200,
  331.717887196928470,
  336.261181979198450,
  340.815058870798960,
  345.379407062266860,
  349.954118040770250,
  354.539085519440790,
  359.134205369575340,
  363.739375555563470,
  368.354496072404690,
  372.979468885689020,
  377.614197873918670,
  382.258588773060010,
  386.912549123217560,
  391.575988217329610,
  396.248817051791490,
  400.930948278915760,
  405.622296161144900,
  410.322776526937280,
  415.032306728249580,
  419.750805599544780,
  424.478193418257090,
  429.214391866651570,
  433.959323995014870,
  438.712914186121170,
  443.475088120918940,
  448.245772745384610,
  453.024896238496130,
  457.812387981278110,
  462.608178526874890,
  467.412199571608080,
  472.224383926980520,
  477.044665492585580,
  481.872979229887900,
  486.709261136839360,
  491.553448223298010,
  496.405478487217580,
  501.265290891579240,
  506.132825342034830,
  511.008022665236070,
  515.890824587822520,
  520.781173716044240,
  525.679013515995050,
  530.584288294433580,
  535.496943180169520,
  540.416924105997740,
  545.344177791154950,
  550.278651724285620,
  555.220294146894960,
  560.169054037273100,
  565.124881094874350,
  570.087725725134190,
  575.057539024710200,
  580.034272767130800,
  585.017879388839220,
  590.008311975617860,
  595.005524249382010,
  600.009470555327430,
  605.020105849423770,
  610.037385686238740,
  615.061266207084940,
  620.091704128477430,
  625.128656730891070,
  630.172081847810200,
  635.221937855059760,
  640.278183660408100,
  645.340778693435030,
  650.409682895655240,
  655.484856710889060,
  660.566261075873510,
  665.653857411105950,
  670.747607611912710,
  675.847474039736880,
  680.953419513637530,
  686.065407301994010,
  691.183401114410800,
  696.307365093814040,
  701.437263808737160,
  706.573062245787470,
  711.714725802289990,
  716.862220279103440,
  722.015511873601330,
  727.174567172815840,
  732.339353146739310,
  737.509837141777440,
  742.685986874351220,
  747.867770424643370,
  753.055156230484160,
  758.248113081374300,
  763.446610112640200,
  768.650616799717000,
  773.860102952558460,
  779.075038710167410,
  784.295394535245690,
  789.521141208958970,
  794.752249825813460,
  799.988691788643450,
  805.230438803703120,
  810.477462875863580,
  815.729736303910160,
  820.987231675937890,
  826.249921864842800,
  831.517780023906310,
  836.790779582469900,
  842.068894241700490,
  847.352097970438420,
  852.640365001133090,
  857.933669825857460,
  863.231987192405430,
  868.535292100464630,
  873.843559797865740,
  879.156765776907600,
  884.474885770751830,
  889.797895749890240,
  895.125771918679900,
  900.458490711945270,
  905.796028791646340,
  911.138363043611210,
  916.485470574328820,
  921.837328707804890,
  927.193914982476710,
  932.555207148186240,
  937.921183163208070,
  943.291821191335660,
  948.667099599019820,
  954.046996952560450,
  959.431492015349480,
  964.820563745165940,
  970.214191291518320,
  975.612353993036210,
  981.015031374908400,
  986.422203146368590,
  991.833849198223450,
  997.249949600427840,
  1002.670484599700300,
  1008.095434617181700,
  1013.524780246136200,
  1018.958502249690200,
  1024.396581558613400,
  1029.838999269135500,
  1035.285736640801600,
  1040.736775094367400,
  1046.192096209724900,
  1051.651681723869200,
  1057.115513528895000,
  1062.583573670030100,
  1068.055844343701400,
  1073.532307895632800,
  1079.012946818975000,
  1084.497743752465600,
  1089.986681478622400,
  1095.479742921962700,
  1100.976911147256000,
  1106.478169357800900,
  1111.983500893733000,
  1117.492889230361000,
  1123.006317976526100,
  1128.523770872990800,
  1134.045231790853000,
  1139.570684729984800,
  1145.100113817496100,
  1150.633503306223700,
  1156.170837573242400
];

function logFactorial(n) {
  if (n < 0) {
    throw new Error('Argument may not be negative.');
  }

  // For big values use a function
  else if (n > 254) {
    var x = n + 1;
    return (x - 0.5)*Math.log(x) - x + 0.5*Math.log(2*Math.PI) + 1.0/(12.0*x);
  }
  
  // For small values use a table lookup
  else {
    return TABLE_LOOKUP[n];
  }
}
exports.logFactorial = logFactorial;

},{}],13:[function(require,module,exports){

var files = ['erf', 'gamma', 'beta', 'log'];

require('./functions/erf.js');
require('./functions/gamma.js');
require('./functions/beta.js');
require('./functions/log.js');

for (var i = 0, l = files.length; i < l; i++) {
  var fns = require('./functions/' + files[i] + '.js');
  var keys = Object.keys(fns);

  for (var n = 0, r = keys.length; n < r; n++) {
    exports[ keys[n] ] = fns[keys[n]];
  }
}

},{"./functions/beta.js":9,"./functions/erf.js":10,"./functions/gamma.js":11,"./functions/log.js":12}],14:[function(require,module,exports){

var array_types = [
    Array, Int8Array, Uint8Array, Int16Array, Uint16Array,
    Int32Array, Uint32Array, Float32Array, Float64Array
];

function Summary(data, sorted) {
  if (!(this instanceof Summary)) return new Summary(data, sorted);

  if (array_types.indexOf(data.constructor) === -1) {
    throw TypeError('data must be an array');
  }

  this._data = data;
  this._sorted = !!sorted;
  this._length = data.length;

  this._cache_sum = null;
  this._cache_mode = null;
  this._cache_mean = null;
  this._cache_quartiles = {};
  this._cache_variance = null;
  this._cache_sd = null;
  this._cache_max = null;
  this._cache_min = null;
}
module.exports = Summary;

//
// Not all values are in lazy calculated since that wouldn't do any good
//
Summary.prototype.sort = function() {
  if (this._sorted === false) {
    this._sorted = true;
    this._data = this._data.sort(function (a, b) { return a - b; });
  }

  return this._data;
};

Summary.prototype.size = function () {
  return this._length;
};

//
// Always lazy calculated functions
//
Summary.prototype.sum = function () {
  if (this._cache_sum === null) {
    var sum = 0;
    for (var i = 0; i < this._length; i++) sum += this._data[i];
    this._cache_sum = sum;
  }

  return this._cache_sum;
};

Summary.prototype.mode = function () {
  if (this._cache_mode === null) {
    var data = this.sort();

    var modeValue = NaN;
    var modeCount = 0;
    var currValue = data[0];
    var currCount = 1;

    // Count the amount of repeat and update mode variables
    for (var i = 1; i < this._length; i++) {
      if (data[i] === currValue) {
        currCount += 1;
      } else {
        if (currCount >= modeCount) {
          modeCount = currCount;
          modeValue = currValue;
        }

        currValue = data[i];
        currCount = 1;
      }
    }

    // Check the last count
    if (currCount >= modeCount) {
      modeCount = currCount;
      modeValue = currValue;
    }

    this._cache_mode = modeValue;
  }

  return this._cache_mode;
};

Summary.prototype.mean = function () {
  if (this._cache_mean === null) {
    this._cache_mean = this.sum() / this._length;
  }

  return this._cache_mean;
};

Summary.prototype.quartile = function (prob) {
  if (!this._cache_quartiles.hasOwnProperty(prob)) {
    var data = this.sort();
    var product = prob * this.size();
    var ceil = Math.ceil(product);

    if (ceil === product) {
      if (ceil === 0) {
        this._cache_quartiles[prob] = data[0];
      } else if (ceil === data.length) {
        this._cache_quartiles[prob] = data[data.length - 1];
      } else {
        this._cache_quartiles[prob] = (data[ceil - 1] + data[ceil]) / 2;
      }
    } else {
      this._cache_quartiles[prob] = data[ceil - 1];
    }
  }

  return this._cache_quartiles[prob];
};

Summary.prototype.median = function () {
  return this.quartile(0.5);
};

Summary.prototype.variance = function () {
  if (this._cache_variance === null) {
    var mean = this.mean();
    var sqsum = 0;
    for (var i = 0; i < this._length; i++) {
      sqsum += (this._data[i] - mean) * (this._data[i] - mean);
    }

    this._cache_variance = sqsum / (this._length - 1);
  }

  return this._cache_variance;
};

Summary.prototype.sd = function () {
  if (this._cache_sd === null) {
    this._cache_sd = Math.sqrt(this.variance());
  }

  return this._cache_sd;
};

Summary.prototype.max = function () {
  if (this._cache_max === null) {
    this._cache_max = this.sort()[this._length - 1];
  }

  return this._cache_max;
};

Summary.prototype.min = function () {
  if (this._cache_min === null) {
    this._cache_min = this.sort()[0];
  }

  return this._cache_min;
};

},{}],15:[function(require,module,exports){
window.ttest = require('ttest');

},{"ttest":1}],16:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],17:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],18:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],19:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":18,"_process":17,"inherits":16}]},{},[15]);
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



(function() {

  var windowConsole = window.console;

  var LOG_LEVELS = {
    trace: 0,
    log: 1,
    info: 2,
    warn: 3,
    error: 4,
    silent: 5,
  };

  /**
   * The console(s) to which messages should be output.  A comma-separated list
   * of one or more of these consoles:
   *    web: the browser's Web Console (default)
   *    native: the native console (via the *dump* function)
   *    terminal: a faster canvas based console if Shumway.js is included.
   */
  var ENABLED_CONSOLE_TYPES = (config.logConsole || "page").split(",");
  var minLogLevel = LOG_LEVELS[config.logLevel || (config.release ? "error" : "log")];


  //================================================================


  var startTime = performance.now();

  /**
   * Every log entry serializes itself into a LogItem, so that it can
   * subsequently be piped to various consoles.
   */
  function LogItem(levelName, args) {
    if (levelName === "trace") {
      // If logging a trace, save the stack (minus uninteresting parts):
      this.stack = new Error().stack.split('\n').filter(function(line) {
        return line.indexOf("console.js") !== -1;
      }).join('\n');
    }

    this.levelName = levelName;
    this.ctx = typeof $ !== "undefined" && $ ? $.ctx : null;
    this.logLevel = LOG_LEVELS[levelName];
    this.args = args;
    this.time = performance.now() - startTime;
  }

  function padRight(str, c, n) {
    var length = str.length;
    if (!c || length >= n) {
      return str;
    }
    var max = (n - length) / c.length;
    for (var i = 0; i < max; i++) {
      str += c;
    }
    return str;
  }

  LogItem.prototype = {
    get messagePrefix() {
      var s = typeof J2ME !== "undefined" ? J2ME.Context.currentContextPrefix() : "";
      if (false) {
        s = this.time.toFixed(2) + " " + s;
      }
      return padRight(s.toString(), " ", 4) + " | ";
    },

    get message() {
      if (this._message === undefined) {
        this._message = this.messagePrefix + this.args.join(" ") + " ";
      }
      return this._message;
    },

    get searchPredicate() {
      if (this._searchPredicate === undefined) {
        this._searchPredicate = this.message.toLowerCase();
      }
      return this._searchPredicate;
    },

    /**
     * Return this log item as an HTML node suitable for insertion
     * into the page console, caching the node for performance when
     * doing live filtering.
     */
    toHtmlElement: function() {
      if (this._cachedElement === undefined) {
        var div = document.createElement("div");
        div.classList.add("log-item");
        div.classList.add("log-item-" + this.levelName);
        div.textContent = this.message + "\n";
        this._cachedElement = div;
      }
      return this._cachedElement;
    },

    matchesCurrentFilters: function() {
      return (this.logLevel >= minLogLevel &&
              (CONSOLES.page.currentFilterText === "" ||
               this.searchPredicate.indexOf(CONSOLES.page.currentFilterText) !== -1));
    }
  };


  //================================================================
  // Console Implementations
  /**
   * In-page console, providing dynamic filtering and colored output.
   * Renders to the document's "console" element.
   */
  function PageConsole(selector) {
    this.el = document.querySelector(selector);
    this.items = [];
    this.shouldAutoScroll = true;
    this.currentFilterText = "";
    window.addEventListener(
      'console-filters-changed', this.onFiltersChanged.bind(this));
    window.addEventListener(
      'console-clear', this.onClear.bind(this));
  }

  PageConsole.prototype = {
    push: function(item) {
      this.items.push(item);
      if (item.matchesCurrentFilters(item)) {
        var wasAtBottom = this.isScrolledToBottom();
        this.el.appendChild(item.toHtmlElement());
        if (this.shouldAutoScroll && wasAtBottom) {
          this.el.scrollTop = this.el.scrollHeight;
        }
      }
    },

    isScrolledToBottom: function() {
      var fudgeFactor = 10; // Match the intent, not the pixel-perfect value
      return this.el.scrollTop + this.el.clientHeight > this.el.scrollHeight - fudgeFactor;
    },
    
    onFiltersChanged: function() {
      var fragment = document.createDocumentFragment();
      this.items.forEach(function(item) {
        if (item.matchesCurrentFilters()) {
          fragment.appendChild(item.toHtmlElement());
        }
      }, this);
      this.el.innerHTML = "";
      this.el.appendChild(fragment);
    },

    onClear: function() {
      this.items = [];
      this.el.innerHTML = "";
    }

  };

  /**
   * WebConsole: The standard console.log() and friends.
   */
  function WebConsole() {
    this.buffer = "";
  }

  WebConsole.prototype = {
    flush: function() {
      if (this.buffer.length) {
        var temp = this.buffer;
        this.buffer = "";
        console.info(temp);
      }
    },

    push: function(item) {
      if (item.matchesCurrentFilters()) {
        this.flush(); // Preserve order w/r/t console.print().
        windowConsole[item.levelName].apply(windowConsole, [item.message]);
      }
    },

    /** Print one character to the output (buffered). */
    print: function(ch) {
      if (ch === 10) {
        this.flush();
      } else {
        this.buffer += String.fromCharCode(ch);
      }
    }
  };

  /**
   * NativeConsole: Throws logs at Gecko's dump().
   */
  function NativeConsole() {
  }

  NativeConsole.prototype = {
    push: function(item) {
      if (item.matchesCurrentFilters()) {
        dump(item.message + "\n");
      }
    }
  };

  /**
   * RawConsoleForTests: Spits text directly into a textarea, for
   * simpler CasperJS-style output testing.
   */
  function RawConsoleForTests(selector) {
    this.el = document.querySelector(selector);
  }

  RawConsoleForTests.prototype = {
    push: function(item) {
      if (item.matchesCurrentFilters()) {
        this.el.textContent += item.levelName[0].toUpperCase() + ' ' + item.args.join(" ") + '\n';
      }
    }
  };

  function TerminalConsole(selector) {
    this.buffer = new Terminal.Buffer();
    this.view = new Terminal.View(new Terminal.Screen(document.querySelector(selector), 10), this.buffer);
    this.count = 0;
    window.addEventListener(
      'console-clear', this.onClear.bind(this));
    window.addEventListener(
      'console-save', this.onSave.bind(this));
  }

  var contextColors = ["#111111", "#222222", "#333333", "#444444", "#555555", "#666666"];


  function toRGB565(r, g, b) {
    return ((r / 256 * 32) & 0x1F) << 11 |
           ((g / 256 * 64) & 0x3F) <<  5 |
           ((b / 256 * 32) & 0x1F) <<  0;
  }

    //trace: 0,
    //log: 1,
    //info: 2,
    //warn: 3,
    //error: 4,
    //silent: 5,

  var colors = [
    toRGB565(0xFF, 0xFF, 0xFF),
    toRGB565(0xFF, 0xFF, 0xFF),
    toRGB565(0xFF, 0xFF, 0xFF),
    toRGB565(0xFF, 0xFF, 0),
    toRGB565(0xFF, 0, 0),
    toRGB565(0, 0, 0),
  ];

  var lastTime = 0;
  TerminalConsole.prototype = {
    push: function(item) {
      if (item.matchesCurrentFilters()) {
        this.buffer.color = colors[item.logLevel];
        var thisTime = performance.now();
        var prefix = (thisTime - lastTime).toFixed(2) + " : ";
        prefix = "";
        lastTime = thisTime;
        this.buffer.writeString(prefix.padLeft(" ", 4) + item.logLevel + " " + item.message);
        this.buffer.writeLine();
        this.view.scrollToBottom();
      }
    },
    onClear: function() {
      this.buffer.clear();
      this.view.scrollToBottom();
    },
    onSave: function() {
      var string = this.buffer.toString();
      var b = this.buffer;
      var l = [];
      for (var i = 0; i < b.h; i++) {
        l.push(b.getLine(i));
      }
      var blob = new Blob([l.join("\n")], {type:'text/plain'});
      saveAs(blob, "console-" + Date.now() + ".txt");
      // window.open(URL.createObjectURL(blob));
    }
  }

  var CONSOLES = {
    web: new WebConsole(),
    page: new PageConsole('#consoleContainer'),
    native: new NativeConsole(),
    raw: new RawConsoleForTests("#raw-console"),
    terminal: typeof Terminal === "undefined" ? new WebConsole() : new TerminalConsole("#consoleContainer")
  };

  var print = CONSOLES.web.print.bind(CONSOLES.web);

  // If we're only printing to the web console, then use the original console
  // object, so that file/line number references show up correctly in it.
  if (ENABLED_CONSOLE_TYPES.length === 1 && ENABLED_CONSOLE_TYPES[0] === "web") {
    windowConsole.print = print;
    return;
  }


  //================================================================
  // Filtering & Runtime Page Console Options

  document.querySelector('#console-clear').addEventListener('click', function() {
    window.dispatchEvent(new CustomEvent('console-clear'));
  });

  document.querySelector('#console-save').addEventListener('click', function() {
    window.dispatchEvent(new CustomEvent('console-save'));
  });

  var logLevelSelect = document.querySelector('#loglevel');
  var consoleFilterTextInput = document.querySelector('#console-filter-input');

  function updateFilters() {
    minLogLevel = logLevelSelect.value;
    CONSOLES.page.currentFilterText = consoleFilterTextInput.value.toLowerCase();
    window.dispatchEvent(new CustomEvent('console-filters-changed'));
  }

  logLevelSelect.value = minLogLevel;
  logLevelSelect.addEventListener('change', updateFilters);

  consoleFilterTextInput.value = "";
  consoleFilterTextInput.addEventListener('input', updateFilters);

  //----------------------------------------------------------------


  var logAtLevel = function(levelName) {
    var item = new LogItem(levelName, Array.prototype.slice.call(arguments, 1));
    ENABLED_CONSOLE_TYPES.forEach(function(consoleType) {
      CONSOLES[consoleType].push(item);
    });
  };

  window.console = {
    trace: logAtLevel.bind(null, "trace"),
    log: logAtLevel.bind(null, "log"),
    info: logAtLevel.bind(null, "info"),
    warn: logAtLevel.bind(null, "warn"),
    error: logAtLevel.bind(null, "error"),
    print: print,
    profile: typeof console !== "undefined" && console.profile ? console.profile.bind(console) : null,
    profileEnd: typeof console !== "undefined" && console.profileEnd ? console.profileEnd.bind(console) : null,
  };

})();
/*
Copyright (c) 2013 Forbes Lindesay
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
(function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == "function" && require;
        if (!u && a) return a(o, !0);
        if (i) return i(o, !0);
        var f = new Error("Cannot find module '" + o + "'");
        throw f.code = "MODULE_NOT_FOUND", f;
      }
      var l = n[o] = {
        exports: {}
      };
      t[o][0].call(l.exports, function(e) {
        var n = t[o][1][e];
        return s(n ? n : e);
      }, l, l.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = typeof require == "function" && require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
})({
  1: [ function(require, module, exports) {
    var process = module.exports = {};
    process.nextTick = function() {
      var canSetImmediate = typeof window !== "undefined" && window.setImmediate;
      var canPost = typeof window !== "undefined" && window.postMessage && window.addEventListener;
      if (canSetImmediate) {
        return function(f) {
          return window.setImmediate(f);
        };
      }
      if (canPost) {
        var queue = [];
        window.addEventListener("message", function(ev) {
          var source = ev.source;
          if ((source === window || source === null) && ev.data === "process-tick") {
            ev.stopPropagation();
            if (queue.length > 0) {
              var fn = queue.shift();
              fn();
            }
          }
        }, true);
        return function nextTick(fn) {
          queue.push(fn);
          window.postMessage("process-tick", "*");
        };
      }
      return function nextTick(fn) {
        setTimeout(fn, 0);
      };
    }();
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process.cwd = function() {
      return "/";
    };
    process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
  }, {} ],
  2: [ function(require, module, exports) {
    ;
    var asap = require("asap");
    module.exports = Promise;
    function Promise(fn) {
      if (typeof this !== "object") throw new TypeError("Promises must be constructed via new");
      if (typeof fn !== "function") throw new TypeError("not a function");
      var state = null;
      var value = null;
      var deferreds = [];
      var self = this;
      this.then = function(onFulfilled, onRejected) {
        return new self.constructor(function(resolve, reject) {
          handle(new Handler(onFulfilled, onRejected, resolve, reject));
        });
      };
      function handle(deferred) {
        if (state === null) {
          deferreds.push(deferred);
          return;
        }
        asap(function() {
          var cb = state ? deferred.onFulfilled : deferred.onRejected;
          if (cb === null) {
            (state ? deferred.resolve : deferred.reject)(value);
            return;
          }
          var ret;
          try {
            ret = cb(value);
          } catch (e) {
            deferred.reject(e);
            return;
          }
          deferred.resolve(ret);
        });
      }
      function resolve(newValue) {
        try {
          if (newValue === self) throw new TypeError("A promise cannot be resolved with itself.");
          if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
            var then = newValue.then;
            if (typeof then === "function") {
              doResolve(then.bind(newValue), resolve, reject);
              return;
            }
          }
          state = true;
          value = newValue;
          finale();
        } catch (e) {
          reject(e);
        }
      }
      function reject(newValue) {
        state = false;
        value = newValue;
        finale();
      }
      function finale() {
        for (var i = 0, len = deferreds.length; i < len; i++) handle(deferreds[i]);
        deferreds = null;
      }
      doResolve(fn, resolve, reject);
    }
    function Handler(onFulfilled, onRejected, resolve, reject) {
      this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
      this.onRejected = typeof onRejected === "function" ? onRejected : null;
      this.resolve = resolve;
      this.reject = reject;
    }
    function doResolve(fn, onFulfilled, onRejected) {
      var done = false;
      try {
        fn(function(value) {
          if (done) return;
          done = true;
          onFulfilled(value);
        }, function(reason) {
          if (done) return;
          done = true;
          onRejected(reason);
        });
      } catch (ex) {
        if (done) return;
        done = true;
        onRejected(ex);
      }
    }
  }, {
    asap: 4
  } ],
  3: [ function(require, module, exports) {
    ;
    var Promise = require("./core.js");
    var asap = require("asap");
    module.exports = Promise;
    function ValuePromise(value) {
      this.then = function(onFulfilled) {
        if (typeof onFulfilled !== "function") return this;
        return new Promise(function(resolve, reject) {
          asap(function() {
            try {
              resolve(onFulfilled(value));
            } catch (ex) {
              reject(ex);
            }
          });
        });
      };
    }
    ValuePromise.prototype = Promise.prototype;
    var TRUE = new ValuePromise(true);
    var FALSE = new ValuePromise(false);
    var NULL = new ValuePromise(null);
    var UNDEFINED = new ValuePromise(undefined);
    var ZERO = new ValuePromise(0);
    var EMPTYSTRING = new ValuePromise("");
    Promise.resolve = function(value) {
      if (value instanceof Promise) return value;
      if (value === null) return NULL;
      if (value === undefined) return UNDEFINED;
      if (value === true) return TRUE;
      if (value === false) return FALSE;
      if (value === 0) return ZERO;
      if (value === "") return EMPTYSTRING;
      if (typeof value === "object" || typeof value === "function") {
        try {
          var then = value.then;
          if (typeof then === "function") {
            return new Promise(then.bind(value));
          }
        } catch (ex) {
          return new Promise(function(resolve, reject) {
            reject(ex);
          });
        }
      }
      return new ValuePromise(value);
    };
    Promise.all = function(arr) {
      var args = Array.prototype.slice.call(arr);
      return new Promise(function(resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;
        function res(i, val) {
          try {
            if (val && (typeof val === "object" || typeof val === "function")) {
              var then = val.then;
              if (typeof then === "function") {
                then.call(val, function(val) {
                  res(i, val);
                }, reject);
                return;
              }
            }
            args[i] = val;
            if (--remaining === 0) {
              resolve(args);
            }
          } catch (ex) {
            reject(ex);
          }
        }
        for (var i = 0; i < args.length; i++) {
          res(i, args[i]);
        }
      });
    };
    Promise.reject = function(value) {
      return new Promise(function(resolve, reject) {
        reject(value);
      });
    };
    Promise.race = function(values) {
      return new Promise(function(resolve, reject) {
        values.forEach(function(value) {
          Promise.resolve(value).then(resolve, reject);
        });
      });
    };
    Promise.prototype["catch"] = function(onRejected) {
      return this.then(null, onRejected);
    };
  }, {
    "./core.js": 2,
    asap: 4
  } ],
  4: [ function(require, module, exports) {
    (function(process) {
      var head = {
        task: void 0,
        next: null
      };
      var tail = head;
      var flushing = false;
      var requestFlush = void 0;
      var isNodeJS = false;
      function flush() {
        while (head.next) {
          head = head.next;
          var task = head.task;
          head.task = void 0;
          var domain = head.domain;
          if (domain) {
            head.domain = void 0;
            domain.enter();
          }
          try {
            task();
          } catch (e) {
            if (isNodeJS) {
              if (domain) {
                domain.exit();
              }
              setTimeout(flush, 0);
              if (domain) {
                domain.enter();
              }
              throw e;
            } else {
              setTimeout(function() {
                throw e;
              }, 0);
            }
          }
          if (domain) {
            domain.exit();
          }
        }
        flushing = false;
      }
      if (typeof process !== "undefined" && process.nextTick) {
        isNodeJS = true;
        requestFlush = function() {
          process.nextTick(flush);
        };
      } else if (typeof setImmediate === "function") {
        if (typeof window !== "undefined") {
          requestFlush = setImmediate.bind(window, flush);
        } else {
          requestFlush = function() {
            setImmediate(flush);
          };
        }
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel();
        channel.port1.onmessage = flush;
        requestFlush = function() {
          channel.port2.postMessage(0);
        };
      } else {
        requestFlush = function() {
          setTimeout(flush, 0);
        };
      }
      function asap(task) {
        tail = tail.next = {
          task: task,
          domain: isNodeJS && process.domain,
          next: null
        };
        if (!flushing) {
          flushing = true;
          requestFlush();
        }
      }
      module.exports = asap;
    }).call(this, require("_process"));
  }, {
    _process: 1
  } ],
  5: [ function(require, module, exports) {
    if (typeof Promise.prototype.done !== "function") {
      Promise.prototype.done = function(onFulfilled, onRejected) {
        var self = arguments.length ? this.then.apply(this, arguments) : this;
        self.then(null, function(err) {
          setTimeout(function() {
            throw err;
          }, 0);
        });
      };
    }
  }, {} ],
  6: [ function(require, module, exports) {
    var asap = require("asap");
    if (typeof Promise === "undefined") {
      Promise = require("./lib/core.js");
      require("./lib/es6-extensions.js");
    }
    require("./polyfill-done.js");
  }, {
    "./lib/core.js": 2,
    "./lib/es6-extensions.js": 3,
    "./polyfill-done.js": 5,
    asap: 4
  } ]
}, {}, [ 6 ]);
//# sourceMappingURL=/polyfills/promise-6.0.0.js.map/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



if (!HTMLCanvasElement.prototype.toBlob) {
 Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
  value: function (callback, type, quality) {

    var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
        len = binStr.length,
        arr = new Uint8Array(len);

    for (var i=0; i<len; i++ ) {
     arr[i] = binStr.charCodeAt(i);
    }

    callback( new Blob( [arr], {type: type || 'image/png'} ) );
  }
 });
}
// Copyright Mathias Bynens <https://mathiasbynens.be/>
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}
// Copyright Mathias Bynens <https://mathiasbynens.be/>
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
  (function() {
     // needed to support `apply`/`call` with `undefined`/`null`
    var defineProperty = (function() {
      // IE 8 only supports `Object.defineProperty` on DOM elements
      try {
        var object = {};
        var $defineProperty = Object.defineProperty;
        var result = $defineProperty(object, object, object) && $defineProperty;
      } catch(error) {}
      return result;
    }());
    var codePointAt = function(position) {
      if (this == null) {
        throw TypeError();
      }
      var string = String(this);
      var size = string.length;
      // `ToInteger`
      var index = position ? Number(position) : 0;
      if (index != index) { // better `isNaN`
        index = 0;
      }
      // Account for out-of-bounds indices:
      if (index < 0 || index >= size) {
        return undefined;
      }
      // Get the first code unit
      var first = string.charCodeAt(index);
      var second;
      if ( // check if it’s the start of a surrogate pair
        first >= 0xD800 && first <= 0xDBFF && // high surrogate
        size > index + 1 // there is a next code unit
      ) {
        second = string.charCodeAt(index + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
      }
      return first;
    };
    if (defineProperty) {
      defineProperty(String.prototype, 'codePointAt', {
        'value': codePointAt,
        'configurable': true,
        'writable': true
      });
    } else {
      String.prototype.codePointAt = codePointAt;
    }
  }());
}
// IndexedDB-getAll-shim v1.1 - https://github.com/jdscheff/IndexedDB-getAll-shim
//
// Copyright (c) 2012 Jeremy Scheff
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(function () {
    ;

    var Event, IDBIndex, IDBObjectStore, IDBRequest, getAll;

    IDBObjectStore = window.IDBObjectStore || window.webkitIDBObjectStore || window.mozIDBObjectStore || window.msIDBObjectStore;
    IDBIndex = window.IDBIndex || window.webkitIDBIndex || window.mozIDBIndex || window.msIDBIndex;

    if (typeof IDBObjectStore === "undefined" || typeof IDBIndex === "undefined" || (IDBObjectStore.prototype.getAll !== undefined && IDBIndex.prototype.getAll !== undefined)) {
        return;
    }

    if (IDBObjectStore.prototype.mozGetAll !== undefined && IDBIndex.prototype.mozGetAll !== undefined) {
        IDBObjectStore.prototype.getAll = IDBObjectStore.prototype.mozGetAll;
        IDBIndex.prototype.getAll = IDBIndex.prototype.mozGetAll;
        return;
    }

    // https://github.com/axemclion/IndexedDBShim/blob/gh-pages/src/IDBRequest.js
    IDBRequest = function () {
        this.onsuccess = null;
        this.readyState = "pending";
    };
    // https://github.com/axemclion/IndexedDBShim/blob/gh-pages/src/Event.js
    Event = function (type, debug) {
        return {
            "type": type,
            debug: debug,
            bubbles: false,
            cancelable: false,
            eventPhase: 0,
            timeStamp: new Date()
        };
    };

    getAll = function (key) {
        var request, result;

        key = key !== undefined ? key : null;

        request = new IDBRequest();
        result = [];

        // this is either an IDBObjectStore or an IDBIndex, depending on the context.
        this.openCursor(key).onsuccess = function (event) {
            var cursor, e;

            cursor = event.target.result;
            if (cursor) {
                result.push(cursor.value);
                cursor.continue();
            } else {
                if (typeof request.onsuccess === "function") {
                    e = new Event("success");
                    e.target = {
                        readyState: "done",
                        result: result
                    };
                    request.result = result;
                    request.onsuccess(e);
                }
            }
        };

        return request;
    };

    IDBObjectStore.prototype.getAll = getAll;
    IDBIndex.prototype.getAll = getAll;
}());
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



if (!Map.prototype.clear) {
  Map.prototype.clear = function() {
    for (var keyVal of this) {
      this.delete(keyVal[0]);
    }
  };
}

if (!Map.prototype.forEach) {
  Map.prototype.forEach = function(callback, thisArg) {
    for (var keyVal of this) {
      callback.call(thisArg || null, keyVal[1], keyVal[0], this);
    }
  }
}
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



if (!String.prototype.contains) {
    String.prototype.contains = function() {
        return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
}
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



if (!Math.fround) {
    Math.fround = (function() {
        var fa = new Float32Array(1);
        return function(v) {
            fa[0] = v;
            return fa[0];
        }
    })();
}
/*
 * This script can be black-boxed in the debugger to disable breaking
 * at unwanted exception points.
 */

function throwHelper(e) {
  J2ME.traceWriter && J2ME.traceWriter.writeLn("Throw " + e);
  throw e;
}

function throwPause() {
  throwHelper(VM.Pause);
}
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



// Only add setZeroTimeout to the window object, and hide everything
// else in a closure.
(function() {
    var resolved = Promise.resolve();

    // Like setTimeout, but only takes a function argument.  There's
    // no time argument (always zero) and no arguments (you have to
    // use a closure).
    function setZeroTimeout(fn) {
        resolved.then(fn);
    }

    // Add the one thing we want added to the window object.
    window.setZeroTimeout = setZeroTimeout;
})();
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var util = (function () {
  var Utf8TextDecoder = new TextDecoder("utf-8");

  function decodeUtf8(array) {
    return Utf8TextDecoder.decode(array);
  }

  /**
   * Provides a UTF-8 decoder that will throw an exception on error rather
   * than silently sanitizing the output.
   */
  var fallibleUtf8Decoder = new TextDecoder("utf-8", { fatal: true });

  /**
   * Decodes a UTF-8 string stored in an ArrayBufferView.
   *
   * @param arr An ArrayBufferView to decode (such as a Uint8Array).
   * @returns The decoded string.
   * @throws An invalid enoding is encountered, see
   *         TextDecoder.prototype.decode().
   */
  function decodeUtf8Array(arr) {
    return fallibleUtf8Decoder.decode(arr);
  }

  var INT_MAX = Math.pow(2, 31) - 1;
  var INT_MIN = -INT_MAX - 1;

  function double2int(d) {
    if (d > INT_MAX)
      return INT_MAX;
    if (d < INT_MIN)
      return INT_MIN;
    return d|0;
  }

  function double2long(d) {
    if (d === Number.POSITIVE_INFINITY)
      return Long.MAX_VALUE;
    if (d === Number.NEGATIVE_INFINITY)
      return Long.MIN_VALUE;
    return Long.fromNumber(d);
  }

  var jStringEncoder = new TextEncoder('utf-16');
  var jStringDecoder = new TextDecoder('utf-16');

  function fromJavaChars(chars, offset, count) {
    if (!chars) {
      return null;
    }
    if (typeof count !== 'number')
      count = chars.length;
    if (typeof offset !== 'number')
      offset = 0;
    return jStringDecoder.decode(chars.subarray(offset, offset + count));
  }

  /**
   * Returns an ArrayBufferView of the underlying code points
   * represented by the given Java string.
   *
   * NOTE: Do not modify the ArrayBuffer; it may be shared between
   * multiple string instances.
   */
  function stringToCharArray(str) {
    return new Uint16Array(jStringEncoder.encode(str).buffer);
  }

  var id = (function() {
    var gen = 0;
    return function() {
      return ++gen;
    }
  })();

  /**
   * Compare two typed arrays, returning *true* if they have the same length
   * and values, *false* otherwise.  Note that we compare by value, not by byte,
   * so:
   *     compareTypedArrays(new Uint8Array([0x00, 0xFF]), new Uint8Array[0x00, 0xFF])
   * returns *true*;
   *
   * and:
   *     compareTypedArrays(new Uint8Array([0x00, 0xFF]), new Uint32Array[0x00000000, 0x000000FF])
   * also returns *true*;
   *
   * but:
   *     compareTypedArrays(new Uint8Array([0x00, 0xFF]), new Uint16Array([0x00FF]))
   * returns *false*.
   */
  function compareTypedArrays(ary1, ary2) {
    if (ary1.length != ary2.length) {
      return false;
    }

    for (var i = 0; i < ary1.length; i++) {
      if (ary1[i] !== ary2[i]) {
        return false;
      }
    }

    return true;
  }

  function pad(num, len) {
    return "0".repeat(len - num.toString().length) + num;
  }

  function toCodePointArray(str) {
    var chars = [];

    var str = str.slice();

    while (str.length > 0) {
      var ucsChars = String.fromCodePoint(str.codePointAt(0));
      chars.push(ucsChars);
      str = str.substr(ucsChars.length);
    }

    return chars;
  }

  function abgrIntToCSS(pixel) {
    var a = (pixel >> 24) & 0xff;
    var b = (pixel >> 16) & 0xff;
    var g = (pixel >> 8) & 0xff;
    var r = pixel & 0xff;
    return "rgba(" + r + "," + g + "," + b + "," + (a/255) + ")";
  }

  return {
    INT_MAX: INT_MAX,
    INT_MIN: INT_MIN,
    decodeUtf8: decodeUtf8,
    decodeUtf8Array: decodeUtf8Array,
    double2int: double2int,
    double2long: double2long,
    fromJavaChars: fromJavaChars,
    stringToCharArray: stringToCharArray,
    id: id,
    compareTypedArrays: compareTypedArrays,
    pad: pad,
    toCodePointArray: toCodePointArray,
    abgrIntToCSS: abgrIntToCSS,
  };
})();
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var CompiledMethodCache = (function() {
  var DEBUG = false;
  var DATABASE = "CompiledMethodCache";
  var VERSION = 1;
  var OBJECT_STORE = "methods";
  var KEY_PATH = "key";

  var database;
  var cache = new Map();

  function debug(message) {
    console.log("CompiledMethodCache " + message);
  }

  var upgrade = {
    "0to1": function(database, transaction, next) {
      database.createObjectStore(OBJECT_STORE, { keyPath: KEY_PATH });
      next();
    },
  };

  function restore() {
    return openDatabase.then(new Promise(function(resolve, reject) {
      DEBUG && debug("restore");

      var then = performance.now();
      var transaction = database.transaction(OBJECT_STORE, "readonly");
      var objectStore = transaction.objectStore(OBJECT_STORE);
      var request = objectStore.getAll();

      request.onerror = function() {
        console.error("Error restoring: " + request.error.name);
        reject(request.error.name);
      };

      request.onsuccess = function() {
        var count = request.result.length;
        for (var i = 0; i < count; i++) {
          cache.set(request.result[i][KEY_PATH], request.result[i]);
        }
        DEBUG && debug("restore complete: " + count + " methods in " + (performance.now() - then) + "ms");
        resolve();
      };
    }));
  }

  function clear() {
    return openDatabase.then(new Promise(function(resolve, reject) {
      DEBUG && debug("clear");

      // First clear the in-memory cache, in case we've already restored it
      // from the database.
      cache.clear();

      var then = performance.now();
      var transaction = database.transaction(OBJECT_STORE, "readwrite");
      var objectStore = transaction.objectStore(OBJECT_STORE);
      var request = objectStore.clear();

      request.onerror = function() {
        console.error("Error clearing: " + request.error.name);
        reject(request.error.name);
      };

      request.onsuccess = function() {
        DEBUG && debug("clear complete in " + (performance.now() - then) + "ms");
        resolve();
      };
    }));
  }

  var openDatabase = new Promise(function(resolve, reject) {
    DEBUG && debug("open");

    var request = indexedDB.open(DATABASE, VERSION);

    request.onerror = function() {
      console.error("error opening database: " + request.error.name);
      reject(request.error.name);
    };

    request.onupgradeneeded = function(event) {
      DEBUG && debug("upgrade needed from " + event.oldVersion + " to " + event.newVersion);

      var database = request.result;
      var transaction = request.transaction;

      var version = event.oldVersion;
      (function next() {
        if (version < event.newVersion) {
          DEBUG && debug("upgrade from " + version + " to " + (version + 1));
          upgrade[version + "to" + ++version](database, transaction, next);
        }
      })();
    };

    request.onsuccess = function() {
      DEBUG && debug("open success");

      database = request.result;

      var oldVersion = localStorage.getItem("lastAppVersion");
      if (config.version === oldVersion) {
        DEBUG && debug("app version " + config.version + " === " + oldVersion + "; restore");
        restore().catch(console.error.bind(console));
      } else {
        DEBUG && debug("app version " + config.version + " !== " + oldVersion + "; clear");
        clear().catch(console.error.bind(console));
        localStorage.setItem("lastAppVersion", config.version);
      }

      resolve();
    };
  });

  function get(key) {
    var elem = cache.get(key);
    if (elem) {
      cache.delete(key);
    }
    return elem;
  }

  var recordsToFlush = [];
  var flushTimer = null;

  function flush() {
    flushTimer = null;
    openDatabase.then(function() {
      var then = performance.now();
      var transaction = database.transaction(OBJECT_STORE, "readwrite");
      var objectStore = transaction.objectStore(OBJECT_STORE);
      var numRecords = recordsToFlush.length;
      for (var i = 0; i < numRecords; i++) {
        var request = objectStore.put(recordsToFlush[i]);
      }
      recordsToFlush = [];
      DEBUG && (transaction.oncomplete = function(event) {
        debug("flushed " + numRecords + " in " + (performance.now() - then) + "ms");
      });
      transaction.onerror = function(event) {
        console.error("error flushing " + event.target.name);
      };
    });
  }

  function put(obj) {
    DEBUG && debug("put " + obj[KEY_PATH]);
    recordsToFlush.push(obj);
    if (!flushTimer) {
      flushTimer = setTimeout(flush, 3000 /* ms; 3 seconds */);
    }
  }

  return {
    get: get,
    put: put,
    clear: clear,
  };

})();
var RELOOPER_BUFFER_SIZE = 1024 * 64;
// Relooper, (C) 2012 Alon Zakai, MIT license, https://github.com/kripken/Relooper
var Relooper = (function(Module) {
var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function";var ENVIRONMENT_IS_WEB=typeof window==="object";var ENVIRONMENT_IS_WORKER=typeof importScripts==="function";var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=function print(x){process["stdout"].write(x+"\n")};if(!Module["printErr"])Module["printErr"]=function printErr(x){process["stderr"].write(x+"\n")};var nodeFS=require("fs");var nodePath=require("path");Module["read"]=function read(filename,binary){filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){return Module["read"](filename,true)};Module["load"]=function load(f){globalEval(read(f))};if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}))}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}this["Module"]=Module}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WEB){window["Module"]=Module}else{Module["load"]=importScripts}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),getAsmConst:(function(code,numArgs){if(!Runtime.asmConstCache)Runtime.asmConstCache={};var func=Runtime.asmConstCache[code];if(func)return func;var args=[];for(var i=0;i<numArgs;i++){args.push(String.fromCharCode(36)+i)}var source=Pointer_stringify(code);if(source[0]==='"'){if(source.indexOf('"',1)===source.length-1){source=source.substr(1,source.length-2)}else{abort("invalid EM_ASM input |"+source+"|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)")}}try{var evalled=eval("(function(Module, FS) { return function("+args.join(",")+"){ "+source+" } })")(Module,typeof FS!=="undefined"?FS:null)}catch(e){Module.printErr("error in executing inline EM_ASM code: "+e+" on: \n\n"+source+"\n\nwith args |"+args+"| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)");throw e}return Runtime.asmConstCache[code]=evalled}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),UTF8Processor:(function(){var buffer=[];var needed=0;this.processCChar=(function(code){code=code&255;if(buffer.length==0){if((code&128)==0){return String.fromCharCode(code)}buffer.push(code);if((code&224)==192){needed=1}else if((code&240)==224){needed=2}else{needed=3}return""}if(needed){buffer.push(code);needed--;if(needed>0)return""}var c1=buffer[0];var c2=buffer[1];var c3=buffer[2];var c4=buffer[3];var ret;if(buffer.length==2){ret=String.fromCharCode((c1&31)<<6|c2&63)}else if(buffer.length==3){ret=String.fromCharCode((c1&15)<<12|(c2&63)<<6|c3&63)}else{var codePoint=(c1&7)<<18|(c2&63)<<12|(c3&63)<<6|c4&63;ret=String.fromCharCode(((codePoint-65536)/1024|0)+55296,(codePoint-65536)%1024+56320)}buffer.length=0;return ret});this.processJSString=function processJSString(string){string=unescape(encodeURIComponent(string));var ret=[];for(var i=0;i<string.length;i++){ret.push(string.charCodeAt(i))}return ret}}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY)enlargeMemory();return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var globalScope=this;function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0)Runtime.stackRestore(stack);return ret};var sourceRegex=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"="+convertCode.returnValue+";"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["cwrap"]=cwrap;Module["ccall"]=ccall;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=false;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];if(t>=128)hasUtf=true;else if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(!hasUtf){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}var utf8=new Runtime.UTF8Processor;for(i=0;i<length;i++){t=HEAPU8[ptr+i>>0];ret+=utf8.processCChar(t)}return ret}Module["Pointer_stringify"]=Pointer_stringify;function UTF16ToString(ptr){var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module["UTF16ToString"]=UTF16ToString;function stringToUTF16(str,outPtr){for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr+i*2>>1]=codeUnit}HEAP16[outPtr+str.length*2>>1]=0}Module["stringToUTF16"]=stringToUTF16;function UTF32ToString(ptr){var i=0;var str="";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module["UTF32ToString"]=UTF32ToString;function stringToUTF32(str,outPtr){var iChar=0;for(var iCodeUnit=0;iCodeUnit<str.length;++iCodeUnit){var codeUnit=str.charCodeAt(iCodeUnit);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++iCodeUnit);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr+iChar*4>>2]=codeUnit;++iChar}HEAP32[outPtr+iChar*4>>2]=0}Module["stringToUTF32"]=stringToUTF32;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={"v":"void","b":"bool","c":"char","s":"short","i":"int","l":"long","f":"float","d":"double","w":"wchar_t","a":"signed char","h":"unsigned char","t":"unsigned short","j":"unsigned int","m":"unsigned long","x":"long long","y":"unsigned long long","z":"..."};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre="";for(var a=0;a<i;a++)pre+=" ";Module.print(pre+"^")}function parseNested(){i++;if(func[i]==="K")i++;var parts=[];while(func[i]!=="E"){if(func[i]==="S"){i++;var next=func.indexOf("_",i);var num=func.substring(i,next)||0;parts.push(subs[num]||"?");i=next+1;continue}if(func[i]==="C"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret="",list=[];function flushList(){return"("+list.join(", ")+")"}var name;if(func[i]==="N"){name=parseNested().join("::");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]==="K"||first&&func[i]==="L")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]==="I"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+" "+name+"<"+iList.join(", ")+">"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case"P":list.push(parse(true,1,true)[0]+"*");break;case"R":list.push(parse(true,1,true)[0]+"&");break;case"L":{i++;var end=func.indexOf("E",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case"A":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!=="_")throw"?";i++;list.push(parse(true,1,true)[0]+" ["+size+"]");break};case"E":break paramLoop;default:ret+="?"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]==="void")list=[];if(rawList){if(ret){list.push(ret+"?")}return list}else{return ret+flushList()}}var parsed=func;try{if(func=="Object._main"||func=="_main"){return"main()"}if(typeof func==="number")func=Pointer_stringify(func);if(func[0]!=="_")return func;if(func[1]!=="_")return func;if(func[2]!=="Z")return func;switch(func[3]){case"n":return"operator new()";case"d":return"operator delete()"}parsed=parse()}catch(e){parsed+="?"}if(parsed.indexOf("?")>=0&&!hasLibcxxabi){Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")}return parsed}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){return x+4095&-4096}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value "+TOTAL_MEMORY+", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.")}var TOTAL_STACK=Module["TOTAL_STACK"]||16384;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||524288;var FAST_MEMORY=Module["FAST_MEMORY"]||2097152;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){Module.printErr("increasing TOTAL_MEMORY to "+totalMemory+" to be compliant with the asm.js spec");TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&!!(new Int32Array(1))["subarray"]&&!!(new Int32Array(1))["set"],"JS engine does not provide full typed array support");var buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,"Typed arrays 2 must be run on a little-endian system");Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=Module.addOnPreRun=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=Module.addOnInit=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=Module.addOnPreMain=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=Module.addOnExit=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=Module.addOnPostRun=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var ret=(new Runtime.UTF8Processor).processJSString(stringy);if(length){ret.length=length}if(!dontAddNull){ret.push(0)}return ret}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer+i>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;i++){HEAP8[buffer+i>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer+str.length>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;STATIC_BASE=8;STATICTOP=STATIC_BASE+2976;__ATINIT__.push({func:(function(){__GLOBAL__I_a()})});allocate([1,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,108,97,98,101,108,32,61,32,37,100,59,10,0,0,0,0,37,115,32,76,37,100,59,10,0,0,0,0,0,0,0,0,98,114,101,97,107,0,0,0,99,111,110,116,105,110,117,101,0,0,0,0,0,0,0,0,37,115,59,10,0,0,0,0,108,97,98,101,108,32,61,32,48,59,10,0,0,0,0,0,115,119,105,116,99,104,32,40,37,115,41,32,123,10,0,0,37,115,32,123,10,0,0,0,37,115,105,102,32,40,37,115,41,32,123,10,0,0,0,0,0,0,0,0,0,0,0,0,125,32,101,108,115,101,32,0,32,38,38,32,0,0,0,0,33,40,0,0,0,0,0,0,32,61,61,32,0,0,0,0,41,0,0,0,0,0,0,0,100,101,102,97,117,108,116,58,32,123,10,0,0,0,0,0,105,102,32,40,37,115,41,32,123,10,0,0,0,0,0,0,125,32,101,108,115,101,32,105,102,32,40,37,115,41,32,123,10,0,0,0,0,0,0,0,125,32,101,108,115,101,32,123,10,0,0,0,0,0,0,0,98,114,101,97,107,59,10,0,125,10,0,0,0,0,0,0,76,37,100,58,32,0,0,0,76,37,100,58,32,100,111,32,123,10,0,0,0,0,0,0,100,111,32,123,10,0,0,0,125,32,119,104,105,108,101,40,48,41,59,10,0,0,0,0,0,0,0,0,0,0,0,0,37,115,105,102,32,40,40,108,97,98,101,108,124,48,41,32,61,61,32,37,100,41,32,123,10,0,0,0,0,0,0,0,101,108,115,101,32,0,0,0,37,115,105,102,32,40,108,97,98,101,108,32,61,61,32,37,100,41,32,123,10,0,0,0,115,119,105,116,99,104,32,40,108,97,98,101,108,124,48,41,32,123,10,0,0,0,0,0,115,119,105,116,99,104,32,40,108,97,98,101,108,41,32,123,10,0,0,0,0,0,0,0,99,97,115,101,32,37,100,58,32,123,10,0,0,0,0,0,76,37,100,58,32,119,104,105,108,101,40,49,41,32,123,10,0,0,0,0,0,0,0,0,119,104,105,108,101,40,49,41,32,123,10,0,0,0,0,0,115,119,105,116,99,104,40,108,97,98,101,108,124,48,41,32,123,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,2,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,49,51,77,117,108,116,105,112,108,101,83,104,97,112,101,0,49,50,76,97,98,101,108,101,100,83,104,97,112,101,0,0,53,83,104,97,112,101,0,0,136,6,0,0,120,2,0,0,176,6,0,0,104,2,0,0,128,2,0,0,0,0,0,0,176,6,0,0,88,2,0,0,136,2,0,0,0,0,0,0,0,0,0,0,208,2,0,0,3,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,57,76,111,111,112,83,104,97,112,101,0,0,0,0,0,0,176,6,0,0,192,2,0,0,136,2,0,0,0,0,0,0,0,0,0,0,8,3,0,0,5,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,49,51,69,109,117,108,97,116,101,100,83,104,97,112,101,0,176,6,0,0,248,2,0,0,136,2,0,0,0,0,0,0,0,0,0,0,64,3,0,0,3,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,49,49,83,105,109,112,108,101,83,104,97,112,101,0,0,0,176,6,0,0,48,3,0,0,128,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,96,3,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,248,4,0,0,8,0,0,0,9,0,0,0,1,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,176,6,0,0,232,4,0,0,128,5,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,136,6,0,0,112,5,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,136,6,0,0,136,5,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,176,6,0,0,160,5,0,0,152,5,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,176,6,0,0,216,5,0,0,200,5,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,176,6,0,0,56,6,0,0,200,5,0,0,0,0,0,0,176,6,0,0,16,6,0,0,96,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,248,6,0,0,10,0,0,0,14,0,0,0,12,0,0,0,13,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,176,6,0,0,208,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=Runtime.alignMemory(allocate(12,"i8",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}var _BDtoIHigh=true;Module["_i64Subtract"]=_i64Subtract;var ___errno_state=0;function ___setErrNo(value){HEAP32[___errno_state>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}Module["_memset"]=_memset;var _BDtoILow=true;Module["_bitshift64Lshr"]=_bitshift64Lshr;var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum,strerrbuf,buflen){if(errnum in ERRNO_MESSAGES){if(ERRNO_MESSAGES[errnum].length>buflen-1){return ___setErrNo(ERRNO_CODES.ERANGE)}else{var msg=ERRNO_MESSAGES[errnum];writeAsciiToMemory(msg,strerrbuf);return 0}}else{return ___setErrNo(ERRNO_CODES.EINVAL)}}function _strerror(errnum){if(!_strerror.buffer)_strerror.buffer=_malloc(256);_strerror_r(errnum,_strerror.buffer,256);return _strerror.buffer}Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}var FS=undefined;var SOCKFS=undefined;function _send(fd,buf,len,flags){var sock=SOCKFS.getSocket(fd);if(!sock){___setErrNo(ERRNO_CODES.EBADF);return-1}return _write(fd,buf,len)}function _pwrite(fildes,buf,nbyte,offset){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte,offset)}catch(e){FS.handleFSError(e);return-1}}function _write(fildes,buf,nbyte){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte)}catch(e){FS.handleFSError(e);return-1}}function _fileno(stream){stream=FS.getStreamFromPtr(stream);if(!stream)return-1;return stream.fd}function _fwrite(ptr,size,nitems,stream){var bytesToWrite=nitems*size;if(bytesToWrite==0)return 0;var fd=_fileno(stream);var bytesWritten=_write(fd,ptr,bytesToWrite);if(bytesWritten==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return 0}else{return bytesWritten/size|0}}Module["_strlen"]=_strlen;function __reallyNegative(x){return x<0||x===0&&1/x===-Infinity}function __formatString(format,varargs){var textIndex=format;var argIndex=0;function getNextArg(type){var ret;if(type==="double"){ret=(HEAP32[tempDoublePtr>>2]=HEAP32[varargs+argIndex>>2],HEAP32[tempDoublePtr+4>>2]=HEAP32[varargs+(argIndex+4)>>2],+HEAPF64[tempDoublePtr>>3])}else if(type=="i64"){ret=[HEAP32[varargs+argIndex>>2],HEAP32[varargs+(argIndex+4)>>2]]}else{type="i32";ret=HEAP32[varargs+argIndex>>2]}argIndex+=Runtime.getNativeFieldSize(type);return ret}var ret=[];var curr,next,currArg;while(1){var startTextIndex=textIndex;curr=HEAP8[textIndex>>0];if(curr===0)break;next=HEAP8[textIndex+1>>0];if(curr==37){var flagAlwaysSigned=false;var flagLeftAlign=false;var flagAlternative=false;var flagZeroPad=false;var flagPadSign=false;flagsLoop:while(1){switch(next){case 43:flagAlwaysSigned=true;break;case 45:flagLeftAlign=true;break;case 35:flagAlternative=true;break;case 48:if(flagZeroPad){break flagsLoop}else{flagZeroPad=true;break};case 32:flagPadSign=true;break;default:break flagsLoop}textIndex++;next=HEAP8[textIndex+1>>0]}var width=0;if(next==42){width=getNextArg("i32");textIndex++;next=HEAP8[textIndex+1>>0]}else{while(next>=48&&next<=57){width=width*10+(next-48);textIndex++;next=HEAP8[textIndex+1>>0]}}var precisionSet=false,precision=-1;if(next==46){precision=0;precisionSet=true;textIndex++;next=HEAP8[textIndex+1>>0];if(next==42){precision=getNextArg("i32");textIndex++}else{while(1){var precisionChr=HEAP8[textIndex+1>>0];if(precisionChr<48||precisionChr>57)break;precision=precision*10+(precisionChr-48);textIndex++}}next=HEAP8[textIndex+1>>0]}if(precision<0){precision=6;precisionSet=false}var argSize;switch(String.fromCharCode(next)){case"h":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==104){textIndex++;argSize=1}else{argSize=2}break;case"l":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==108){textIndex++;argSize=8}else{argSize=4}break;case"L":case"q":case"j":argSize=8;break;case"z":case"t":case"I":argSize=4;break;default:argSize=null}if(argSize)textIndex++;next=HEAP8[textIndex+1>>0];switch(String.fromCharCode(next)){case"d":case"i":case"u":case"o":case"x":case"X":case"p":{var signed=next==100||next==105;argSize=argSize||4;var currArg=getNextArg("i"+argSize*8);var origArg=currArg;var argText;if(argSize==8){currArg=Runtime.makeBigInt(currArg[0],currArg[1],next==117)}if(argSize<=4){var limit=Math.pow(256,argSize)-1;currArg=(signed?reSign:unSign)(currArg&limit,argSize*8)}var currAbsArg=Math.abs(currArg);var prefix="";if(next==100||next==105){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],null);else argText=reSign(currArg,8*argSize,1).toString(10)}else if(next==117){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],true);else argText=unSign(currArg,8*argSize,1).toString(10);currArg=Math.abs(currArg)}else if(next==111){argText=(flagAlternative?"0":"")+currAbsArg.toString(8)}else if(next==120||next==88){prefix=flagAlternative&&currArg!=0?"0x":"";if(argSize==8&&i64Math){if(origArg[1]){argText=(origArg[1]>>>0).toString(16);var lower=(origArg[0]>>>0).toString(16);while(lower.length<8)lower="0"+lower;argText+=lower}else{argText=(origArg[0]>>>0).toString(16)}}else if(currArg<0){currArg=-currArg;argText=(currAbsArg-1).toString(16);var buffer=[];for(var i=0;i<argText.length;i++){buffer.push((15-parseInt(argText[i],16)).toString(16))}argText=buffer.join("");while(argText.length<argSize*2)argText="f"+argText}else{argText=currAbsArg.toString(16)}if(next==88){prefix=prefix.toUpperCase();argText=argText.toUpperCase()}}else if(next==112){if(currAbsArg===0){argText="(nil)"}else{prefix="0x";argText=currAbsArg.toString(16)}}if(precisionSet){while(argText.length<precision){argText="0"+argText}}if(currArg>=0){if(flagAlwaysSigned){prefix="+"+prefix}else if(flagPadSign){prefix=" "+prefix}}if(argText.charAt(0)=="-"){prefix="-"+prefix;argText=argText.substr(1)}while(prefix.length+argText.length<width){if(flagLeftAlign){argText+=" "}else{if(flagZeroPad){argText="0"+argText}else{prefix=" "+prefix}}}argText=prefix+argText;argText.split("").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case"f":case"F":case"e":case"E":case"g":case"G":{var currArg=getNextArg("double");var argText;if(isNaN(currArg)){argText="nan";flagZeroPad=false}else if(!isFinite(currArg)){argText=(currArg<0?"-":"")+"inf";flagZeroPad=false}else{var isGeneral=false;var effectivePrecision=Math.min(precision,20);if(next==103||next==71){isGeneral=true;precision=precision||1;var exponent=parseInt(currArg.toExponential(effectivePrecision).split("e")[1],10);if(precision>exponent&&exponent>=-4){next=(next==103?"f":"F").charCodeAt(0);precision-=exponent+1}else{next=(next==103?"e":"E").charCodeAt(0);precision--}effectivePrecision=Math.min(precision,20)}if(next==101||next==69){argText=currArg.toExponential(effectivePrecision);if(/[eE][-+]\d$/.test(argText)){argText=argText.slice(0,-1)+"0"+argText.slice(-1)}}else if(next==102||next==70){argText=currArg.toFixed(effectivePrecision);if(currArg===0&&__reallyNegative(currArg)){argText="-"+argText}}var parts=argText.split("e");if(isGeneral&&!flagAlternative){while(parts[0].length>1&&parts[0].indexOf(".")!=-1&&(parts[0].slice(-1)=="0"||parts[0].slice(-1)==".")){parts[0]=parts[0].slice(0,-1)}}else{if(flagAlternative&&argText.indexOf(".")==-1)parts[0]+=".";while(precision>effectivePrecision++)parts[0]+="0"}argText=parts[0]+(parts.length>1?"e"+parts[1]:"");if(next==69)argText=argText.toUpperCase();if(currArg>=0){if(flagAlwaysSigned){argText="+"+argText}else if(flagPadSign){argText=" "+argText}}}while(argText.length<width){if(flagLeftAlign){argText+=" "}else{if(flagZeroPad&&(argText[0]=="-"||argText[0]=="+")){argText=argText[0]+"0"+argText.slice(1)}else{argText=(flagZeroPad?"0":" ")+argText}}}if(next<97)argText=argText.toUpperCase();argText.split("").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case"s":{var arg=getNextArg("i8*");var argLength=arg?_strlen(arg):"(null)".length;if(precisionSet)argLength=Math.min(argLength,precision);if(!flagLeftAlign){while(argLength<width--){ret.push(32)}}if(arg){for(var i=0;i<argLength;i++){ret.push(HEAPU8[arg++>>0])}}else{ret=ret.concat(intArrayFromString("(null)".substr(0,argLength),true))}if(flagLeftAlign){while(argLength<width--){ret.push(32)}}break};case"c":{if(flagLeftAlign)ret.push(getNextArg("i8"));while(--width>0){ret.push(32)}if(!flagLeftAlign)ret.push(getNextArg("i8"));break};case"n":{var ptr=getNextArg("i32*");HEAP32[ptr>>2]=ret.length;break};case"%":{ret.push(curr);break};default:{for(var i=startTextIndex;i<textIndex+2;i++){ret.push(HEAP8[i>>0])}}}textIndex+=2}else{ret.push(curr);textIndex+=1}}return ret}function _fprintf(stream,format,varargs){var result=__formatString(format,varargs);var stack=Runtime.stackSave();var ret=_fwrite(allocate(result,"i8",ALLOC_STACK),1,result.length,stream);Runtime.stackRestore(stack);return ret}function _vfprintf(s,f,va_arg){return _fprintf(s,f,HEAP32[va_arg>>2])}function ___cxa_begin_catch(ptr){__ZSt18uncaught_exceptionv.uncaught_exception--;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall("v",func);_pthread_once.seen[ptr]=1}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function _fputc(c,stream){var chr=unSign(c&255);HEAP8[_fputc.ret>>0]=chr;var fd=_fileno(stream);var ret=_write(fd,_fputc.ret,1);if(ret==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return-1}else{return chr}}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}Module["_i64Add"]=_i64Add;function _fputs(s,stream){var fd=_fileno(stream);return _write(fd,s,_strlen(s))}var _stdout=allocate(1,"i32*",ALLOC_STATIC);function _puts(s){var result=Pointer_stringify(s);var string=result.substr(0);if(string[string.length-1]==="\n")string=string.substr(0,string.length-1);Module.print(string);return result.length}Module["_memmove"]=_memmove;var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function ___errno_location(){return ___errno_state}var _BItoD=true;Module["_strcpy"]=_strcpy;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0)self.alloc(bytes);return ret}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module["_malloc"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}var ___dso_handle=allocate(1,"i32*",ALLOC_STATIC);var _stderr=allocate(1,"i32*",ALLOC_STATIC);___errno_state=Runtime.staticAlloc(4);HEAP32[___errno_state>>2]=0;_fputc.ret=allocate([0],"i8",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,"TOTAL_MEMORY not big enough for stack");var ctlz_i8=allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_DYNAMIC);var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array};Module.asmLibraryArg={"abort":abort,"assert":assert,"min":Math_min,"invoke_iiii":invoke_iiii,"invoke_viiiii":invoke_viiiii,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_ii":invoke_ii,"invoke_v":invoke_v,"invoke_viiiiii":invoke_viiiiii,"invoke_viiii":invoke_viiii,"_send":_send,"___setErrNo":___setErrNo,"_vfprintf":_vfprintf,"___cxa_allocate_exception":___cxa_allocate_exception,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"_pwrite":_pwrite,"_strerror_r":_strerror_r,"__reallyNegative":__reallyNegative,"_sbrk":_sbrk,"___cxa_begin_catch":___cxa_begin_catch,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_fileno":_fileno,"___resumeException":___resumeException,"___cxa_find_matching_catch":___cxa_find_matching_catch,"_sysconf":_sysconf,"_pthread_getspecific":_pthread_getspecific,"_atexit":_atexit,"_pthread_once":_pthread_once,"_puts":_puts,"_pthread_key_create":_pthread_key_create,"_write":_write,"___errno_location":___errno_location,"_pthread_setspecific":_pthread_setspecific,"___cxa_atexit":___cxa_atexit,"_fputc":_fputc,"___cxa_throw":___cxa_throw,"_abort":_abort,"_fwrite":_fwrite,"_time":_time,"_fprintf":_fprintf,"_strerror":_strerror,"__formatString":__formatString,"_fputs":_fputs,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8,"ctlz_i8":ctlz_i8,"NaN":NaN,"Infinity":Infinity,"___dso_handle":___dso_handle,"_stderr":_stderr};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env.___dso_handle|0;var p=env._stderr|0;var q=0;var r=0;var s=0;var t=0;var u=+env.NaN,v=+env.Infinity;var w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0,E=0.0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=0;var P=global.Math.floor;var Q=global.Math.abs;var R=global.Math.sqrt;var S=global.Math.pow;var T=global.Math.cos;var U=global.Math.sin;var V=global.Math.tan;var W=global.Math.acos;var X=global.Math.asin;var Y=global.Math.atan;var Z=global.Math.atan2;var _=global.Math.exp;var $=global.Math.log;var aa=global.Math.ceil;var ba=global.Math.imul;var ca=env.abort;var da=env.assert;var ea=env.min;var fa=env.invoke_iiii;var ga=env.invoke_viiiii;var ha=env.invoke_vi;var ia=env.invoke_vii;var ja=env.invoke_ii;var ka=env.invoke_v;var la=env.invoke_viiiiii;var ma=env.invoke_viiii;var na=env._send;var oa=env.___setErrNo;var pa=env._vfprintf;var qa=env.___cxa_allocate_exception;var ra=env.__ZSt18uncaught_exceptionv;var sa=env._pwrite;var ta=env._strerror_r;var ua=env.__reallyNegative;var va=env._sbrk;var wa=env.___cxa_begin_catch;var xa=env._emscripten_memcpy_big;var ya=env._fileno;var za=env.___resumeException;var Aa=env.___cxa_find_matching_catch;var Ba=env._sysconf;var Ca=env._pthread_getspecific;var Da=env._atexit;var Ea=env._pthread_once;var Fa=env._puts;var Ga=env._pthread_key_create;var Ha=env._write;var Ia=env.___errno_location;var Ja=env._pthread_setspecific;var Ka=env.___cxa_atexit;var La=env._fputc;var Ma=env.___cxa_throw;var Na=env._abort;var Oa=env._fwrite;var Pa=env._time;var Qa=env._fprintf;var Ra=env._strerror;var Sa=env.__formatString;var Ta=env._fputs;var Ua=0.0;
// EMSCRIPTEN_START_FUNCS
function bb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function cb(){return i|0}function db(a){a=a|0;i=a}function eb(a,b){a=a|0;b=b|0;if(!q){q=a;r=b}}function fb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function gb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function hb(a){a=a|0;F=a}function ib(){return F|0}function jb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;c[b>>2]=0;a[b+8>>0]=1;if(!d)d=0;else d=Zd(d)|0;c[b+12>>2]=d;if(!e)d=0;else d=Zd(e)|0;c[b+16>>2]=d;i=f;return}function kb(a){a=a|0;var b=0,d=0;d=i;b=c[a+12>>2]|0;if(b)Fe(b);b=c[a+16>>2]|0;if(!b){i=d;return}Fe(b);i=d;return}function lb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=i;i=i+16|0;g=h;f=c[b+16>>2]|0;if(f){c[g>>2]=f;mb(16,g)}if(e){c[g>>2]=c[d+52>>2];mb(24,g)}e=c[b>>2]|0;if(!e){i=h;return}f=c[b+4>>2]|0;if((f+-1|0)>>>0>=2){i=h;return}f=(f|0)==1?56:64;if(!(a[b+8>>0]|0)){c[g>>2]=f;mb(80,g);i=h;return}else{b=c[e+4>>2]|0;c[g>>2]=f;c[g+4>>2]=b;mb(40,g);i=h;return}}function mb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=i;i=i+16|0;e=f;Td(0)|0;do{d=(c[136]|0)-(c[134]|0)+(c[132]|0)|0;c[e>>2]=b;d=Oe(c[134]|0,d,a,e)|0}while(!(Td(d)|0));c[134]=(c[134]|0)+d;i=f;return}function nb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;c[b+4>>2]=0;c[b+8>>2]=0;c[b>>2]=b+4;c[b+16>>2]=0;c[b+20>>2]=0;c[b+12>>2]=b+16;c[b+28>>2]=0;c[b+32>>2]=0;c[b+24>>2]=b+28;c[b+40>>2]=0;c[b+44>>2]=0;c[b+36>>2]=b+40;c[b+48>>2]=0;c[b+52>>2]=-1;a[b+64>>0]=0;if(!d)d=0;else d=Zd(d)|0;c[b+56>>2]=d;if(!e){e=0;b=b+60|0;c[b>>2]=e;i=f;return}e=Zd(e)|0;b=b+60|0;c[b>>2]=e;i=f;return}function ob(a){a=a|0;wa(a|0)|0;ge()}function pb(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;b=c[a+56>>2]|0;if(b)Fe(b);b=c[a+60>>2]|0;if(b)Fe(b);e=a+24|0;b=c[e>>2]|0;f=a+28|0;if((b|0)!=(f|0))do{d=c[b+20>>2]|0;if(d){kb(d);be(d)}b=sc(b)|0}while((b|0)!=(f|0));Gd(a+36|0);Ud(e);Gd(a+12|0);Ud(a);i=g;return}function qb(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;a=a+56|0;d=c[a>>2]|0;if(d)Fe(d);c[a>>2]=Zd(b)|0;i=e;return}function rb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+16|0;g=f;c[g>>2]=b;b=ae(20)|0;jb(b,d,e);c[(sb(a,g)|0)>>2]=b;i=f;return}function sb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;h=i;i=i+16|0;g=h+12|0;d=h;e=wc(a,g,b)|0;f=c[e>>2]|0;if(f){a=f;a=a+20|0;i=h;return a|0}xc(d,a,b);b=c[d>>2]|0;c[d>>2]=0;yc(a,c[g>>2]|0,e,b);a=b;a=a+20|0;i=h;return a|0}function tb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;E=i;i=i+32|0;D=E;B=E+24|0;C=E+12|0;A=E+8|0;if(!((a[b+64>>0]|0)==0|d^1))mb(88,D);e=c[b+56>>2]|0;a:do if((e|0)!=0?(a[e>>0]|0)!=0:0){while(1){f=Xd(e,10)|0;if(!f)break;a[f>>0]=0;ub(e);a[f>>0]=10;e=f+1|0;if(!(a[e>>0]|0))break a}ub(e)}while(0);u=b+24|0;f=b+32|0;if(!(c[f>>2]|0)){i=E;return}v=b+48|0;e=c[v>>2]|0;w=(vb(e)|0)!=0;e=e+8|0;g=c[e>>2]|0;x=wb(g)|0;y=(x|0)!=0;if(y){c[e>>2]=c[g+8>>2];a[x+40>>0]=0;xb(x);t=(c[x+32>>2]|0)!=(c[f>>2]|0)}else t=1;c[B>>2]=0;e=c[u>>2]|0;s=b+28|0;if((e|0)==(s|0))g=0;else{g=0;f=e;do{if(!(c[(c[f+20>>2]|0)+12>>2]|0)){g=c[f+16>>2]|0;c[B>>2]=g}f=sc(f)|0}while((f|0)!=(s|0))}q=b+60|0;f=c[q>>2]|0;r=(f|0)!=0;if(r){c[D>>2]=f;mb(104,D);f=c[u>>2]|0}else f=e;c[C>>2]=0;o=C+4|0;c[o>>2]=0;c[C+8>>2]=0;p=x+24|0;h=g;e=r^1;while(1){n=(f|0)!=(s|0);if(n){j=c[f+16>>2]|0;if((j|0)!=(h|0)){b=f+20|0;z=22}}else{h=g;b=sb(u,B)|0;j=g;z=22}if((z|0)==22){z=0;m=c[b>>2]|0;if(t?(a[j+64>>0]|0)!=0:0)l=1;else l=w;if(y)k=(vc(p,j+52|0)|0)!=0;else k=0;if(!l?!((c[m+4>>2]|0)!=0|k):0)b=(c[m+16>>2]|0)!=0;else b=1;do if(n){if(r){c[D>>2]=c[m+12>>2];mb(120,D);if(e){e=1;break}else{z=50;break}}if(b){z=c[m+12>>2]|0;c[D>>2]=e?144:152;c[D+4>>2]=z;mb(128,D);z=50;break}if((c[C>>2]|0)>0)yb(C,160)|0;yb(C,168)|0;b=c[q>>2]|0;if(b){yb(C,b)|0;yb(C,176)|0}yb(C,c[m+12>>2]|0)|0;yb(C,184)|0;if(e)e=1;else z=50}else{if(r){mb(192,D);if(e){e=1;break}else{z=50;break}}if(!b)if(e){e=1;break}else{z=50;break}if((c[C>>2]|0)<=0){if(e){e=1;break}mb(248,D);z=50;break}b=c[o>>2]|0;if(e){c[D>>2]=b;mb(208,D);z=50;break}else{c[D>>2]=b;mb(224,D);z=50;break}}while(0);if((z|0)==50){z=0;c[2]=(c[2]|0)+1;e=0}lb(m,j,l);if(!k){if((c[m+4>>2]|0)==3){m=c[(c[v>>2]|0)+8>>2]|0;Ya[c[(c[m>>2]|0)+8>>2]&7](m,d);c[(c[v>>2]|0)+8>>2]=0}}else{tc(A,p,j+52|0);m=c[(c[A>>2]|0)+20>>2]|0;Ya[c[(c[m>>2]|0)+8>>2]&7](m,d)}if(r&n)mb(264,D);if(!e)c[2]=(c[2]|0)+-1;if(r)mb(272,D);if((f|0)==(s|0))break}f=sc(f)|0}if(!e)mb(272,D);if(y)zb(x);Ab(C);i=E;return}function ub(b){b=b|0;var d=0,e=0;d=i;Td(0)|0;Td((Ze(b|0)|0)+1|0)|0;bf(c[134]|0,b|0)|0;b=Ze(b|0)|0;e=c[134]|0;c[134]=e+(b+1);a[e+b>>0]=10;a[c[134]>>0]=0;i=d;return}function vb(a){a=a|0;var b=0;b=i;if(!((a|0)!=0?(c[a+16>>2]|0)==3:0))a=0;i=b;return a|0}function wb(a){a=a|0;var b=0;b=i;if(!((a|0)!=0?(c[a+16>>2]|0)==1:0))a=0;i=b;return a|0}function xb(b){b=b|0;var d=0,e=0,f=0;f=i;i=i+16|0;e=f;if(!(c[b+36>>2]|0)){i=f;return}d=(a[b+20>>0]|0)!=0;if(a[b+40>>0]|0){if(!d){i=f;return}c[e>>2]=c[b+4>>2];mb(280,e);i=f;return}if(d){c[e>>2]=c[b+4>>2];mb(288,e)}else mb(304,e);c[2]=(c[2]|0)+1;i=f;return}function yb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;j=i;h=Ze(b|0)|0;d=c[a>>2]|0;f=a+8|0;e=c[f>>2]|0;if((h+2+d|0)>(e|0)){g=e+h<<1;g=1024-((g|0)%1024|0)+g|0;c[f>>2]=g;f=a+4|0;e=c[f>>2]|0;if(!e)e=Ee(g)|0;else{e=Ge(e,g)|0;d=c[a>>2]|0}c[f>>2]=e}else e=c[a+4>>2]|0;bf(e+d|0,b|0)|0;c[a>>2]=(c[a>>2]|0)+h;i=j;return a|0}function zb(b){b=b|0;var d=0;d=i;i=i+16|0;if(!(c[b+36>>2]|0)){i=d;return}if(a[b+40>>0]|0){i=d;return}c[2]=(c[2]|0)+-1;mb(312,d);i=d;return}function Ab(a){a=a|0;var b=0;b=i;a=c[a+4>>2]|0;if(a)Fe(a);i=b;return}function Bb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;j=k;xb(b);if(!(a[b+40>>0]|0)){e=c[b+24>>2]|0;h=b+28|0;if((e|0)!=(h|0)){g=144;while(1){f=c[e+16>>2]|0;if(!(c[82]|0)){c[j>>2]=g;c[j+4>>2]=f;mb(376,j)}else{c[j>>2]=g;c[j+4>>2]=f;mb(336,j)}c[2]=(c[2]|0)+1;g=c[e+20>>2]|0;Ya[c[(c[g>>2]|0)+8>>2]&7](g,d);c[2]=(c[2]|0)+-1;mb(272,j);e=sc(e)|0;if((e|0)==(h|0))break;else g=368}}}else{if(!(c[82]|0))mb(424,j);else mb(400,j);e=(c[2]|0)+1|0;c[2]=e;f=c[b+24>>2]|0;g=b+28|0;if((f|0)!=(g|0)){e=f;do{c[j>>2]=c[e+16>>2];mb(448,j);c[2]=(c[2]|0)+1;h=c[e+20>>2]|0;Ya[c[(c[h>>2]|0)+8>>2]&7](h,d);mb(264,j);c[2]=(c[2]|0)+-1;mb(272,j);e=sc(e)|0}while((e|0)!=(g|0));e=c[2]|0}c[2]=e+-1;mb(272,j)}zb(b);e=c[b+8>>2]|0;if(!e){i=k;return}Ya[c[(c[e>>2]|0)+8>>2]&7](e,d);i=k;return}function Cb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if(!(a[b+20>>0]|0))mb(488,e);else{c[e>>2]=c[b+4>>2];mb(464,e)}c[2]=(c[2]|0)+1;g=c[b+24>>2]|0;Ya[c[(c[g>>2]|0)+8>>2]&7](g,1);c[2]=(c[2]|0)+-1;mb(272,e);b=c[b+8>>2]|0;if(!b){i=f;return}Ya[c[(c[b>>2]|0)+8>>2]&7](b,d);i=f;return}function Db(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;h=j;c[h>>2]=c[(c[b+24>>2]|0)+52>>2];mb(24,h);if(a[b+20>>0]|0){c[h>>2]=c[b+4>>2];mb(280,h)}mb(488,h);c[2]=(c[2]|0)+1;mb(504,h);e=(c[2]|0)+1|0;c[2]=e;f=c[b+28>>2]|0;g=b+32|0;if((f|0)!=(g|0)){e=f;do{f=c[e+16>>2]|0;c[h>>2]=c[f+52>>2];mb(448,h);c[2]=(c[2]|0)+1;tb(f,d);mb(264,h);c[2]=(c[2]|0)+-1;mb(272,h);e=sc(e)|0}while((e|0)!=(g|0));e=c[2]|0}c[2]=e+-1;mb(272,h);c[2]=(c[2]|0)+-1;mb(272,h);e=c[b+8>>2]|0;if(!e){i=j;return}Ya[c[(c[e>>2]|0)+8>>2]&7](e,d);i=j;return}function Eb(a){a=a|0;var b=0,d=0,e=0;e=i;Rd(a);b=c[a+4>>2]|0;d=c[a+8>>2]|0;if((b|0)!=(d|0))do{be(c[b>>2]|0);b=b+4|0}while((b|0)!=(d|0));rc(a);i=e;return}function Fb(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;f=a+20|0;b=c[f>>2]|0;if(b){g=a+16|0;h=a+4|0;e=0;do{d=(c[g>>2]|0)+e|0;d=c[(c[(c[h>>2]|0)+(d>>>10<<2)>>2]|0)+((d&1023)<<2)>>2]|0;if(d){pb(d);be(d);b=c[f>>2]|0}e=e+1|0}while(e>>>0<b>>>0)}h=a+44|0;b=c[h>>2]|0;if(!b){h=a+24|0;Gb(h);Eb(a);i=j;return}g=a+40|0;f=a+28|0;e=0;do{d=(c[g>>2]|0)+e|0;d=c[(c[(c[f>>2]|0)+(d>>>10<<2)>>2]|0)+((d&1023)<<2)>>2]|0;if(d){Xa[c[(c[d>>2]|0)+4>>2]&31](d);b=c[h>>2]|0}e=e+1|0}while(e>>>0<b>>>0);h=a+24|0;Gb(h);Eb(a);i=j;return}function Gb(a){a=a|0;var b=0,d=0,e=0;e=i;Pd(a);b=c[a+4>>2]|0;d=c[a+8>>2]|0;if((b|0)!=(d|0))do{be(c[b>>2]|0);b=b+4|0}while((b|0)!=(d|0));qc(a);i=e;return}function Hb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;c[e>>2]=b;if((d|0)==-1){g=a+56|0;d=c[g>>2]|0;c[g>>2]=d+1}c[b+52>>2]=d;Ib(a,e);i=f;return}function Ib(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=i;i=i+16|0;f=g;d=c[a+8>>2]|0;e=c[a+4>>2]|0;if((d|0)==(e|0))d=0;else d=(d-e<<8)+-1|0;e=a+20|0;if((d-(c[a+16>>2]|0)|0)==(c[e>>2]|0))jc(a);kc(f,a);d=c[f+4>>2]|0;if(!d){b=c[e>>2]|0;b=b+1|0;c[e>>2]=b;i=g;return}c[d>>2]=c[b>>2];b=c[e>>2]|0;b=b+1|0;c[e>>2]=b;i=g;return}function Jb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;I=i;i=i+128|0;z=I+112|0;y=I+92|0;x=I+40|0;s=I+36|0;u=I+28|0;v=I+88|0;t=I+104|0;A=I+120|0;H=I+56|0;n=I+24|0;E=I+12|0;F=I+72|0;G=I;B=I+32|0;C=I+80|0;c[A>>2]=d;c[H>>2]=b;c[H+8>>2]=0;c[H+12>>2]=0;D=H+8|0;w=H+4|0;c[w>>2]=D;c[y>>2]=d;c[x>>2]=x;d=x+4|0;c[d>>2]=x;e=x+8|0;c[e>>2]=0;vd(x,y);if(c[e>>2]|0){f=H+4|0;do{g=c[(c[d>>2]|0)+8>>2]|0;c[s>>2]=g;wd(x);if((ic(f,s)|0)==0?(bc(z,f,s),h=c[g>>2]|0,j=g+4|0,(h|0)!=(j|0)):0){g=h;do{vd(x,g+16|0);g=sc(g)|0}while((g|0)!=(j|0))}}while((c[e>>2]|0)!=0)}Ad(x);h=b+20|0;d=c[h>>2]|0;if(d){f=b+16|0;e=b+4|0;k=H+4|0;j=0;do{g=(c[f>>2]|0)+j|0;g=c[(c[(c[e>>2]|0)+(g>>>10<<2)>>2]|0)+((g&1023)<<2)>>2]|0;c[n>>2]=g;if((ic(k,n)|0)!=0?(m=c[g>>2]|0,l=g+4|0,(m|0)!=(l|0)):0){g=m;do{bc(z,(c[g+16>>2]|0)+12|0,n);g=sc(g)|0}while((g|0)!=(l|0));d=c[h>>2]|0}j=j+1|0}while(j>>>0<d>>>0)}if(!(a[b+52>>0]|0)){q=H+4|0;f=c[q>>2]|0;g=(f|0)==(D|0);if(g)n=0;else{e=f;d=0;do{d=(Ze(c[(c[e+16>>2]|0)+56>>2]|0)|0)+d|0;e=sc(e)|0}while((e|0)!=(D|0));n=(d>>>0)/5|0}c[y+4>>2]=0;c[y+8>>2]=0;o=y+4|0;c[y>>2]=o;c[x+4>>2]=0;c[x+8>>2]=0;p=x+4|0;c[x>>2]=p;if(!g){do{g=c[f+16>>2]|0;c[s>>2]=g;d=c[g+20>>2]|0;if(((d>>>0>=2?(c[g+8>>2]|0)==0:0)?(Od(g,s)|0)==0:0)?(r=g+56|0,(ba(Ze(c[r>>2]|0)|0,d+-1|0)|0)>>>0<=n>>>0):0){j=c[g+12>>2]|0;d=g+16|0;if((j|0)==(d|0)){e=g+4|0;h=e}else{e=g+60|0;l=g+52|0;m=g+4|0;do{h=c[j+16>>2]|0;c[u>>2]=h;k=ae(68)|0;nb(k,c[r>>2]|0,c[e>>2]|0);c[v>>2]=k;Hb(c[H>>2]|0,k,c[l>>2]|0);bc(z,k+12|0,u);K=c[(sb(h,s)|0)>>2]|0;J=ae(20)|0;jb(J,c[K+12>>2]|0,c[K+16>>2]|0);c[(sb(h,v)|0)>>2]=J;dd(h,s)|0;h=c[g>>2]|0;if((h|0)!=(m|0))do{K=c[h+16>>2]|0;c[t>>2]=K;L=c[h+20>>2]|0;J=ae(20)|0;jb(J,c[L+12>>2]|0,c[L+16>>2]|0);c[(sb(k,t)|0)>>2]=J;bc(z,K+12|0,v);h=sc(h)|0}while((h|0)!=(m|0));bc(z,y,v);bc(z,x,s);j=sc(j)|0}while((j|0)!=(d|0));h=m;e=m}d=c[g>>2]|0;if((d|0)!=(e|0))do{id((c[d+16>>2]|0)+12|0,s)|0;d=sc(d)|0}while((d|0)!=(h|0))}f=sc(f)|0}while((f|0)!=(D|0));e=c[y>>2]|0;if((e|0)!=(o|0))do{bc(z,q,e+16|0);e=sc(e)|0}while((e|0)!=(o|0))}e=c[x>>2]|0;if((e|0)!=(p|0))do{id(q,e+16|0)|0;e=sc(e)|0}while((e|0)!=(p|0));Gd(x);Gd(y)}c[E+4>>2]=0;c[E+8>>2]=0;c[E>>2]=E+4;e=c[w>>2]|0;if((e|0)==(D|0)){L=G+4|0;c[L>>2]=0;L=G+8|0;c[L>>2]=0;L=G+4|0;c[G>>2]=L;bc(z,G,A);c[B>>2]=b;L=Kb(B,E,G)|0;K=b+48|0;c[K>>2]=L;c[C>>2]=b;K=C+4|0;c[K>>2]=0;Dc(L,0);Ec(L,0,0,0);Fc(C,L);Gd(G);Gd(E);L=H+4|0;Gd(L);i=I;return}do{c[F>>2]=c[e+16>>2];bc(z,E,F);e=sc(e)|0}while((e|0)!=(D|0));L=G+4|0;c[L>>2]=0;L=G+8|0;c[L>>2]=0;L=G+4|0;c[G>>2]=L;bc(z,G,A);c[B>>2]=b;L=Kb(B,E,G)|0;K=b+48|0;c[K>>2]=L;c[C>>2]=b;K=C+4|0;c[K>>2]=0;Dc(L,0);Ec(L,0,0,0);Fc(C,L);Gd(G);Gd(E);L=H+4|0;Gd(L);i=I;return}function Kb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0;oa=i;i=i+160|0;x=oa+88|0;y=oa+72|0;_=oa+56|0;$=oa+124|0;aa=oa+84|0;ba=oa+52|0;ca=oa+104|0;fa=oa+112|0;da=oa+120|0;ka=oa+136|0;Z=oa+148|0;ha=oa+96|0;z=oa+40|0;ma=oa;la=oa+24|0;ga=oa+100|0;M=oa+108|0;ia=oa+80|0;ea=oa+116|0;ja=oa+48|0;c[ma+4>>2]=0;c[ma+8>>2]=0;c[ma>>2]=ma+4;c[ma+16>>2]=0;c[ma+20>>2]=0;c[ma+12>>2]=ma+16;A=d+8|0;B=$+4|0;C=$+8|0;F=$+4|0;G=(d|0)==0;H=d+4|0;I=la+4|0;J=la+8|0;K=la+4|0;L=_+8|0;N=_+12|0;O=_+8|0;P=_+4|0;Q=$+4|0;R=$+8|0;S=_+4|0;T=_+4|0;U=_+8|0;V=_+4|0;W=ka+4|0;X=ka+8|0;Y=_+4|0;v=0;g=0;h=0;f=e;e=0;a:while(1){w=h;t=f;while(1){w=1-w|0;u=ma+(w*12|0)|0;Nd(u);f=c[t+8>>2]|0;if(!f){na=107;break a}else if((f|0)!=1)break;k=c[(c[t>>2]|0)+16>>2]|0;if(a[(c[b>>2]|0)+52>>0]|0){j=ae(40)|0;c[j+4>>2]=-1;c[j+8>>2]=0;c[j+16>>2]=3;c[j>>2]=744;f=j+32|0;c[f>>2]=0;c[j+36>>2]=0;h=j+28|0;c[h>>2]=f;a[j+20>>0]=1;Yc(b,j);c[j+24>>2]=k;f=c[d>>2]|0;if((f|0)!=(H|0))do{t=c[f+16>>2]|0;c[_>>2]=t;bc(x,h,_);c[t+48>>2]=j;Zc(t,2,j,d);f=sc(f)|0}while((f|0)!=(H|0));Nd(d);if(g)c[g+8>>2]=j;e=(e|0)==0?j:e;if(!(c[ma+(w*12|0)+8>>2]|0)){na=107;break a}else{g=j;t=u;continue}}if(c[k+20>>2]|0){f=Tc(b,d,t,u)|0;if(g)c[g+8>>2]=f;e=(e|0)==0?f:e;if(!(c[ma+(w*12|0)+8>>2]|0)){na=107;break a}else{g=f;t=u;continue}}c[_>>2]=k;l=ae(24)|0;c[l+4>>2]=-1;c[l+8>>2]=0;c[l+16>>2]=0;c[l>>2]=800;t=l+20|0;c[t>>2]=0;Yc(b,l);c[t>>2]=k;c[k+48>>2]=l;if((c[A>>2]|0)>>>0>1){id(d,_)|0;h=c[k>>2]|0;j=k+4|0;if((h|0)!=(j|0))do{f=h+16|0;if(!(!G?(ic(d,f)|0)==0:0))bc(z,u,f);h=sc(h)|0}while((h|0)!=(j|0));c[B>>2]=0;c[C>>2]=0;c[$>>2]=F;bc(x,$,_);f=c[u>>2]|0;h=ma+(w*12|0)+4|0;if((f|0)!=(h|0))do{Zc(c[f+16>>2]|0,0,l,$);f=sc(f)|0}while((f|0)!=(h|0));Gd($)}if(g)c[g+8>>2]=l;e=(e|0)==0?l:e;if(!(c[ma+(w*12|0)+8>>2]|0)){na=107;break a}else{g=l;t=u}}c[I>>2]=0;c[J>>2]=0;c[la>>2]=K;c[_>>2]=la;c[L>>2]=0;c[N>>2]=0;c[P>>2]=O;c[$>>2]=$;c[Q>>2]=$;c[R>>2]=0;f=c[t>>2]|0;s=t+4|0;if((f|0)!=(s|0)){do{r=c[f+16>>2]|0;c[aa>>2]=r;c[(ud(Y,aa)|0)>>2]=r;bc(x,Uc(la,aa)|0,aa);vd($,aa);f=sc(f)|0}while((f|0)!=(s|0));if(c[R>>2]|0)do{f=c[(c[Q>>2]|0)+8>>2]|0;c[ba>>2]=f;wd($);k=c[(ud(Y,ba)|0)>>2]|0;c[ca>>2]=k;if((k|0)!=0?(D=c[f>>2]|0,E=f+4|0,(D|0)!=(E|0)):0){j=D;do{h=c[j+16>>2]|0;c[fa>>2]=h;Bd(da,Y,fa);f=c[da>>2]|0;if((f|0)!=(O|0)){r=c[f+20>>2]|0;if(!((r|0)==0|(r|0)==(k|0)))xd(_,h)}else{c[(ud(Y,fa)|0)>>2]=k;bc(x,Uc(la,ca)|0,fa);vd($,fa)}j=sc(j)|0}while((j|0)!=(E|0))}}while((c[R>>2]|0)!=0)}f=c[t>>2]|0;if((f|0)!=(s|0)){do{l=Uc(la,f+16|0)|0;c[ka>>2]=ka;c[W>>2]=ka;c[X>>2]=0;h=c[l>>2]|0;l=l+4|0;if((h|0)!=(l|0))do{j=c[h+16>>2]|0;c[Z>>2]=j;k=c[j+12>>2]|0;j=j+16|0;if((k|0)!=(j|0))do{c[ha>>2]=c[k+16>>2];r=c[(ud(Y,ha)|0)>>2]|0;if((r|0)!=(c[(ud(Y,Z)|0)>>2]|0))vd(ka,Z);k=sc(k)|0}while((k|0)!=(j|0));h=sc(h)|0}while((h|0)!=(l|0));while(1){if(!(c[X>>2]|0))break;r=c[(c[W>>2]|0)+8>>2]|0;wd(ka);xd(_,r)}Ad(ka);f=sc(f)|0}while((f|0)!=(s|0));f=c[t>>2]|0;if((f|0)!=(s|0))do{h=f+16|0;if(!(c[(Uc(la,h)|0)+8>>2]|0))nd(la,h)|0;f=sc(f)|0}while((f|0)!=(s|0))}Ad($);yd(S);f=c[J>>2]|0;if(f){h=c[la>>2]|0;if((h|0)!=(K|0)){do{f=c[h+16>>2]|0;j=h;h=sc(h)|0;k=c[f+12>>2]|0;f=f+16|0;b:do if((k|0)!=(f|0)){l=j+20|0;while(1){c[ga>>2]=c[k+16>>2];if(!(ic(l,ga)|0))break;k=sc(k)|0;if((k|0)==(f|0))break b}c[_>>2]=j;c[x+0>>2]=c[_+0>>2];pd(M,la,x)}while(0)}while((h|0)!=(K|0));f=c[J>>2]|0}if((f|0)==2){k=c[la>>2]|0;j=c[k+16>>2]|0;c[ia>>2]=j;h=c[k+28>>2]|0;k=sc(k)|0;f=c[k+16>>2]|0;c[ea>>2]=f;k=c[k+28>>2]|0;c:do if((h|0)!=(k|0)){if((h|0)>(k|0)){c[ia>>2]=f;c[ea>>2]=j}j=Uc(la,ia)|0;h=c[j>>2]|0;f=j+4|0;if((h|0)!=(f|0))do{l=c[h+16>>2]|0;k=c[l>>2]|0;l=l+4|0;if((k|0)!=(l|0))do{c[ja>>2]=c[k+16>>2];if(!(ic(j,ja)|0))break c;k=sc(k)|0}while((k|0)!=(l|0));h=sc(h)|0}while((h|0)!=(f|0));nd(la,ea)|0}while(0);f=c[J>>2]|0}if(f){p=(Gc(g)|0)==0;r=ae(44)|0;Xc(r);Yc(b,r);c[T>>2]=0;c[U>>2]=0;c[_>>2]=V;k=c[la>>2]|0;if((k|0)!=(K|0)){q=r+24|0;do{m=c[k+16>>2]|0;c[$>>2]=m;n=k+20|0;Nd(_);bc(x,_,$);l=c[n>>2]|0;o=k+24|0;if((l|0)!=(o|0))do{f=c[l+16>>2]|0;c[aa>>2]=f;id(d,aa)|0;j=c[f>>2]|0;f=f+4|0;if((j|0)!=(f|0))do{h=c[j+16>>2]|0;c[ba>>2]=h;j=sc(j)|0;if(!(ic(n,ba)|0)){bc(x,u,ba);Zc(h,1,r,n)}}while((j|0)!=(f|0));l=sc(l)|0}while((l|0)!=(o|0));o=Kb(b,n,_)|0;c[(_c(q,m+52|0)|0)>>2]=o;if(p)a[m+64>>0]=1;k=sc(k)|0}while((k|0)!=(K|0))}h=c[t>>2]|0;if((h|0)!=(s|0))do{c[ca>>2]=c[h+16>>2];if(!($c(la,ca)|0))bc(y,u,ca);h=sc(h)|0}while((h|0)!=(s|0));if((c[r+32>>2]|0)>>>0>9){a[r+40>>0]=1;s=r+36|0;c[s>>2]=(c[s>>2]|0)+1}Gd(_);if(g)c[g+8>>2]=r;e=(e|0)==0?r:e;k=(c[ma+(w*12|0)+8>>2]|0)==0;f=k?e:v;if(k){e=f;na=106;break}else{g=k?g:r;j=k?t:u}}else na=102}else na=102;if((na|0)==102){na=0;k=Tc(b,d,t,u)|0;if(g)c[g+8>>2]=k;e=(e|0)==0?k:e;j=(c[ma+(w*12|0)+8>>2]|0)==0;f=j?e:v;if(j){e=f;na=106;break}else{g=j?g:k;j=j?t:u}}Vc(la);v=f;h=w;f=j}if((na|0)==106){Vc(la);na=e;la=ma+12|0;Gd(la);Gd(ma);i=oa;return na|0}else if((na|0)==107){na=ma+12|0;Gd(na);Gd(ma);i=oa;return e|0}return 0}function Lb(a){a=a|0;var b=0;b=i;Bc(a);i=b;return}function Mb(a,b){a=a|0;b=b|0;c[134]=a;c[132]=a;c[136]=b;c[138]=0;return}function Nb(a){a=a|0;var b=0,d=0;b=i;d=Ee(a)|0;c[134]=d;c[132]=d;c[136]=a;c[138]=0;i=b;return}function Ob(a){a=a|0;c[82]=a;return}function Pb(a,b){a=a|0;b=b|0;var c=0,d=0;d=i;c=ae(68)|0;nb(c,a,b);i=d;return c|0}function Qb(a,b){a=a|0;b=b|0;var c=0;c=i;qb(a,b);i=c;return}function Rb(a){a=a|0;var b=0;b=i;if(a){pb(a);be(a)}i=b;return}function Sb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;rb(a,b,c,d);i=e;return}function Tb(){var b=0,d=0,e=0,f=0,g=0;f=i;b=ae(64)|0;d=b+56|0;e=b+0|0;g=e+52|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(g|0));a[b+52>>0]=0;c[d>>2]=1;c[b+60>>2]=0;i=f;return b|0}function Ub(a){a=a|0;var b=0;b=i;if(a){Fb(a);be(a)}i=b;return}function Vb(a,b){a=a|0;b=b|0;var c=0;c=i;Hb(a,b,-1);i=c;return}function Wb(a,b){a=a|0;b=b|0;var c=0;c=i;Jb(a,b);i=c;return}function Xb(a){a=a|0;var b=0;b=i;c[134]=c[132];a=c[a+48>>2]|0;Ya[c[(c[a>>2]|0)+8>>2]&7](a,0);i=b;return}function Yb(a){a=a|0;var b=0;b=i;c[a>>2]=584;zc(a+24|0);i=b;return}function Zb(a){a=a|0;var b=0;b=i;c[a>>2]=584;zc(a+24|0);be(a);i=b;return}function _b(a){a=a|0;var b=0;b=i;be(a);i=b;return}function $b(a){a=a|0;var b=0;b=i;c[a>>2]=744;Gd(a+28|0);i=b;return}function ac(a){a=a|0;var b=0;b=i;c[a>>2]=744;Gd(a+28|0);be(a);i=b;return}function bc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;j=k+12|0;f=k;g=cc(d,j,e)|0;h=c[g>>2]|0;if(h){e=0;d=h;c[b>>2]=d;d=b+4|0;a[d>>0]=e;i=k;return}dc(f,d,e);h=c[f>>2]|0;c[f>>2]=0;ec(d,c[j>>2]|0,g,h);e=1;d=h;c[b>>2]=d;d=b+4|0;a[d>>0]=e;i=k;return}function cc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;e=c[a+4>>2]|0;if(!e){f=a+4|0;c[b>>2]=f;b=f;i=g;return b|0}f=c[d>>2]|0;while(1){d=c[e+16>>2]|0;if(f>>>0<d>>>0){d=c[e>>2]|0;if(!d){a=5;break}else{e=d;continue}}if(d>>>0>=f>>>0){a=9;break}d=e+4|0;a=c[d>>2]|0;if(!a){a=8;break}else e=a}if((a|0)==5){c[b>>2]=e;b=e;i=g;return b|0}else if((a|0)==8){c[b>>2]=e;b=d;i=g;return b|0}else if((a|0)==9){c[b>>2]=e;i=g;return b|0}return 0}function dc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=ae(20)|0;c[f+16>>2]=c[d>>2];c[a>>2]=f;a=a+4|0;c[a>>2]=b+4;c[a+4>>2]=1;i=e;return}function ec(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=b;c[d>>2]=e;b=c[c[a>>2]>>2]|0;if(b){c[a>>2]=b;e=c[d>>2]|0}fc(c[a+4>>2]|0,e);a=a+8|0;c[a>>2]=(c[a>>2]|0)+1;i=f;return}function fc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;j=(d|0)==(b|0);a[d+12>>0]=j&1;if(j){i=k;return}else h=d;while(1){e=c[h+8>>2]|0;g=e+12|0;if(a[g>>0]|0){f=17;break}j=e+8|0;d=c[j>>2]|0;f=c[d>>2]|0;if((f|0)==(e|0)){f=c[d+4>>2]|0;if(!f){f=7;break}f=f+12|0;if(a[f>>0]|0){f=7;break}a[g>>0]=1;a[d+12>>0]=(d|0)==(b|0)&1;a[f>>0]=1}else{if(!f){f=14;break}f=f+12|0;if(a[f>>0]|0){f=14;break}a[g>>0]=1;a[d+12>>0]=(d|0)==(b|0)&1;a[f>>0]=1}if((d|0)==(b|0)){f=17;break}else h=d}if((f|0)==7){if((c[e>>2]|0)!=(h|0)){gc(e);d=c[j>>2]|0;e=d;d=c[d+8>>2]|0}a[e+12>>0]=1;a[d+12>>0]=0;hc(d);i=k;return}else if((f|0)==14){if((c[e>>2]|0)==(h|0)){hc(e);d=c[j>>2]|0;e=d;d=c[d+8>>2]|0}a[e+12>>0]=1;a[d+12>>0]=0;gc(d);i=k;return}else if((f|0)==17){i=k;return}}function gc(a){a=a|0;var b=0,d=0,e=0,f=0;f=i;d=a+4|0;e=c[d>>2]|0;b=c[e>>2]|0;c[d>>2]=b;if(b)c[b+8>>2]=a;b=a+8|0;c[e+8>>2]=c[b>>2];d=c[b>>2]|0;if((c[d>>2]|0)==(a|0)){c[d>>2]=e;c[e>>2]=a;c[b>>2]=e;i=f;return}else{c[d+4>>2]=e;c[e>>2]=a;c[b>>2]=e;i=f;return}}function hc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;e=c[a>>2]|0;f=e+4|0;b=c[f>>2]|0;c[a>>2]=b;if(b)c[b+8>>2]=a;b=a+8|0;c[e+8>>2]=c[b>>2];d=c[b>>2]|0;if((c[d>>2]|0)==(a|0)){c[d>>2]=e;c[f>>2]=a;c[b>>2]=e;i=g;return}else{c[d+4>>2]=e;c[f>>2]=a;c[b>>2]=e;i=g;return}}function ic(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;a=c[a+4>>2]|0;if(!a){d=0;i=e;return d|0}d=c[b>>2]|0;while(1){b=c[a+16>>2]|0;if(d>>>0>=b>>>0){if(b>>>0>=d>>>0){a=1;b=8;break}a=a+4|0}a=c[a>>2]|0;if(!a){a=0;b=8;break}}if((b|0)==8){i=e;return a|0}return 0}function jc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=i;i=i+64|0;q=u+8|0;p=u+32|0;t=u+36|0;r=u+56|0;s=u+4|0;f=u;l=u+12|0;b=a+16|0;d=c[b>>2]|0;if(d>>>0>1023){c[b>>2]=d+-1024;g=a+4|0;h=c[g>>2]|0;j=c[h>>2]|0;e=h+4|0;c[g>>2]=e;k=a+8|0;b=c[k>>2]|0;f=a+12|0;do if((b|0)==(c[f>>2]|0)){d=c[a>>2]|0;if(e>>>0>d>>>0){t=e;a=((t-d>>2)+1|0)/-2|0;b=b-t|0;af(h+(a+1<<2)|0,e|0,b|0)|0;b=h+(a+(b>>2)+1<<2)|0;c[k>>2]=b;c[g>>2]=(c[g>>2]|0)+(a<<2);break}else{b=b-d>>1;b=(b|0)==0?1:b;mc(t,b,b>>>2,a+12|0);c[r>>2]=c[g>>2];c[s>>2]=c[k>>2];c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];pc(t,p,q);b=c[a>>2]|0;c[a>>2]=c[t>>2];c[t>>2]=b;b=t+4|0;a=c[g>>2]|0;c[g>>2]=c[b>>2];c[b>>2]=a;b=t+8|0;a=c[k>>2]|0;c[k>>2]=c[b>>2];c[b>>2]=a;b=t+12|0;a=c[f>>2]|0;c[f>>2]=c[b>>2];c[b>>2]=a;oc(t);b=c[k>>2]|0;break}}while(0);if(!b)b=0;else{c[b>>2]=j;b=c[k>>2]|0}c[k>>2]=b+4;i=u;return}o=a+8|0;k=c[o>>2]|0;m=a+4|0;h=k-(c[m>>2]|0)>>2;n=a+12|0;j=c[n>>2]|0;g=j-(c[a>>2]|0)|0;if(h>>>0>=g>>2>>>0){g=g>>1;mc(l,(g|0)==0?1:g,h,a+12|0);g=ae(4096)|0;f=l+8|0;b=c[f>>2]|0;e=l+12|0;do if((b|0)==(c[e>>2]|0)){k=l+4|0;j=c[k>>2]|0;h=c[l>>2]|0;if(j>>>0>h>>>0){r=j;s=((r-h>>2)+1|0)/-2|0;t=j+(s<<2)|0;b=b-r|0;af(t|0,j|0,b|0)|0;b=j+(s+(b>>2)<<2)|0;c[f>>2]=b;c[k>>2]=t;break}else{d=b-h>>1;d=(d|0)==0?1:d;mc(t,d,d>>>2,c[l+16>>2]|0);c[r>>2]=j;c[s>>2]=b;c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];pc(t,p,q);c[l>>2]=c[t>>2];c[t>>2]=h;r=t+4|0;c[k>>2]=c[r>>2];c[r>>2]=j;r=t+8|0;s=c[r>>2]|0;c[f>>2]=s;c[r>>2]=b;r=t+12|0;c[e>>2]=c[r>>2];c[r>>2]=b;oc(t);b=s;break}}while(0);if(!b)b=0;else c[b>>2]=g;c[f>>2]=b+4;b=c[o>>2]|0;while(1){if((b|0)==(c[m>>2]|0))break;t=b+-4|0;nc(l,t);b=t}t=c[a>>2]|0;c[a>>2]=c[l>>2];c[l>>2]=t;a=l+4|0;c[m>>2]=c[a>>2];c[a>>2]=b;a=c[o>>2]|0;c[o>>2]=c[f>>2];c[f>>2]=a;a=c[n>>2]|0;c[n>>2]=c[e>>2];c[e>>2]=a;oc(l);i=u;return}h=ae(4096)|0;if((j|0)==(k|0)){c[f>>2]=h;lc(a,f);e=c[m>>2]|0;h=c[e>>2]|0;d=e+4|0;c[m>>2]=d;b=c[o>>2]|0;do if((b|0)==(c[n>>2]|0)){f=c[a>>2]|0;if(d>>>0>f>>>0){t=d;a=((t-f>>2)+1|0)/-2|0;b=b-t|0;af(e+(a+1<<2)|0,d|0,b|0)|0;b=e+(a+(b>>2)+1<<2)|0;c[o>>2]=b;c[m>>2]=(c[m>>2]|0)+(a<<2);break}else{b=b-f>>1;b=(b|0)==0?1:b;mc(t,b,b>>>2,a+12|0);c[r>>2]=c[m>>2];c[s>>2]=c[o>>2];c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];pc(t,p,q);b=c[a>>2]|0;c[a>>2]=c[t>>2];c[t>>2]=b;b=t+4|0;a=c[m>>2]|0;c[m>>2]=c[b>>2];c[b>>2]=a;b=t+8|0;a=c[o>>2]|0;c[o>>2]=c[b>>2];c[b>>2]=a;b=t+12|0;a=c[n>>2]|0;c[n>>2]=c[b>>2];c[b>>2]=a;oc(t);b=c[o>>2]|0;break}}while(0);if(!b)b=0;else{c[b>>2]=h;b=c[o>>2]|0}c[o>>2]=b+4;i=u;return}else{b=c[o>>2]|0;do if((b|0)==(c[n>>2]|0)){d=c[m>>2]|0;e=c[a>>2]|0;if(d>>>0>e>>>0){t=d;a=((t-e>>2)+1|0)/-2|0;b=b-t|0;af(d+(a<<2)|0,d|0,b|0)|0;b=d+(a+(b>>2)<<2)|0;c[o>>2]=b;c[m>>2]=(c[m>>2]|0)+(a<<2);break}else{b=b-e>>1;b=(b|0)==0?1:b;mc(t,b,b>>>2,a+12|0);c[r>>2]=c[m>>2];c[s>>2]=c[o>>2];c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];pc(t,p,q);b=c[a>>2]|0;c[a>>2]=c[t>>2];c[t>>2]=b;b=t+4|0;a=c[m>>2]|0;c[m>>2]=c[b>>2];c[b>>2]=a;b=t+8|0;a=c[o>>2]|0;c[o>>2]=c[b>>2];c[b>>2]=a;b=t+12|0;a=c[n>>2]|0;c[n>>2]=c[b>>2];c[b>>2]=a;oc(t);b=c[o>>2]|0;break}}while(0);if(!b)b=0;else{c[b>>2]=h;b=c[o>>2]|0}c[o>>2]=b+4;i=u;return}}function kc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=(c[b+16>>2]|0)+(c[b+20>>2]|0)|0;f=c[b+4>>2]|0;e=f+(d>>>10<<2)|0;if((c[b+8>>2]|0)==(f|0))d=0;else d=(c[e>>2]|0)+((d&1023)<<2)|0;c[a>>2]=e;c[a+4>>2]=d;return}function lc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+48|0;e=p+32|0;d=p+28|0;o=p+8|0;f=p+4|0;g=p;j=a+4|0;k=c[j>>2]|0;if((k|0)!=(c[a>>2]|0)){a=k;a=a+-4|0;b=c[b>>2]|0;c[a>>2]=b;a=c[j>>2]|0;a=a+-4|0;c[j>>2]=a;i=p;return}l=a+8|0;m=c[l>>2]|0;n=a+12|0;q=c[n>>2]|0;h=q;if(m>>>0<q>>>0){o=m;a=((h-o>>2)+1|0)/2|0;o=o-k|0;q=m+(a-(o>>2)<<2)|0;af(q|0,k|0,o|0)|0;c[j>>2]=q;c[l>>2]=(c[l>>2]|0)+(a<<2);q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}else{q=h-k>>1;q=(q|0)==0?1:q;mc(o,q,(q+3|0)>>>2,a+12|0);c[f>>2]=c[j>>2];c[g>>2]=c[l>>2];c[d+0>>2]=c[f+0>>2];c[e+0>>2]=c[g+0>>2];pc(o,d,e);q=c[a>>2]|0;c[a>>2]=c[o>>2];c[o>>2]=q;q=o+4|0;a=c[j>>2]|0;c[j>>2]=c[q>>2];c[q>>2]=a;q=o+8|0;a=c[l>>2]|0;c[l>>2]=c[q>>2];c[q>>2]=a;q=o+12|0;a=c[n>>2]|0;c[n>>2]=c[q>>2];c[q>>2]=a;oc(o);q=c[j>>2]|0;q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}}function mc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;f=a+12|0;c[f>>2]=0;c[a+16>>2]=e;if(!b)e=0;else e=ae(b<<2)|0;c[a>>2]=e;d=e+(d<<2)|0;c[a+8>>2]=d;c[a+4>>2]=d;c[f>>2]=e+(b<<2);i=g;return}function nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+48|0;e=p+32|0;d=p+28|0;o=p+8|0;f=p+4|0;g=p;j=a+4|0;k=c[j>>2]|0;if((k|0)!=(c[a>>2]|0)){a=k;a=a+-4|0;b=c[b>>2]|0;c[a>>2]=b;a=c[j>>2]|0;a=a+-4|0;c[j>>2]=a;i=p;return}l=a+8|0;m=c[l>>2]|0;n=a+12|0;q=c[n>>2]|0;h=q;if(m>>>0<q>>>0){o=m;a=((h-o>>2)+1|0)/2|0;o=o-k|0;q=m+(a-(o>>2)<<2)|0;af(q|0,k|0,o|0)|0;c[j>>2]=q;c[l>>2]=(c[l>>2]|0)+(a<<2);q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}else{q=h-k>>1;q=(q|0)==0?1:q;mc(o,q,(q+3|0)>>>2,c[a+16>>2]|0);c[f>>2]=c[j>>2];c[g>>2]=c[l>>2];c[d+0>>2]=c[f+0>>2];c[e+0>>2]=c[g+0>>2];pc(o,d,e);q=c[a>>2]|0;c[a>>2]=c[o>>2];c[o>>2]=q;q=o+4|0;a=c[j>>2]|0;c[j>>2]=c[q>>2];c[q>>2]=a;q=o+8|0;a=c[l>>2]|0;c[l>>2]=c[q>>2];c[q>>2]=a;q=o+12|0;a=c[n>>2]|0;c[n>>2]=c[q>>2];c[q>>2]=a;oc(o);q=c[j>>2]|0;q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}}function oc(a){a=a|0;var b=0,d=0,e=0,f=0;f=i;b=c[a+4>>2]|0;d=a+8|0;e=c[d>>2]|0;if((e|0)!=(b|0))c[d>>2]=e+(~((e+-4-b|0)>>>2)<<2);b=c[a>>2]|0;if(!b){i=f;return}be(b);i=f;return}function pc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=i;h=c[b>>2]|0;g=c[d>>2]|0;if((h|0)==(g|0)){i=j;return}e=a+8|0;f=((g+-4-h|0)>>>2)+1|0;d=h;a=c[e>>2]|0;do{if(!a)a=0;else{c[a>>2]=c[d>>2];a=c[e>>2]|0}a=a+4|0;c[e>>2]=a;d=d+4|0}while((d|0)!=(g|0));c[b>>2]=h+(f<<2);i=j;return}function qc(a){a=a|0;var b=0,d=0,e=0,f=0;f=i;b=c[a+4>>2]|0;d=a+8|0;e=c[d>>2]|0;if((e|0)!=(b|0))c[d>>2]=e+(~((e+-4-b|0)>>>2)<<2);b=c[a>>2]|0;if(!b){i=f;return}be(b);i=f;return}function rc(a){a=a|0;var b=0,d=0,e=0,f=0;f=i;b=c[a+4>>2]|0;d=a+8|0;e=c[d>>2]|0;if((e|0)!=(b|0))c[d>>2]=e+(~((e+-4-b|0)>>>2)<<2);b=c[a>>2]|0;if(!b){i=f;return}be(b);i=f;return}function sc(a){a=a|0;var b=0,d=0;d=i;b=c[a+4>>2]|0;if(!b){while(1){b=c[a+8>>2]|0;if((c[b>>2]|0)==(a|0))break;else a=b}i=d;return b|0}else{while(1){a=c[b>>2]|0;if(!a)break;else b=a}i=d;return b|0}return 0}function tc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;g=f;e=b+4|0;uc(g,b,d,c[b+4>>2]|0,e);b=c[g>>2]|0;if((b|0)!=(e|0)?(c[d>>2]|0)>=(c[b+16>>2]|0):0){c[a>>2]=b;i=f;return}c[a>>2]=e;i=f;return}function uc(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;a:do if(e){g=c[d>>2]|0;d=f;b=e;while(1){f=b;while(1){if((c[f+16>>2]|0)>=(g|0))break;f=c[f+4>>2]|0;if(!f){f=d;break a}}b=c[f>>2]|0;if(!b)break;else d=f}}while(0);c[a>>2]=f;i=h;return}function vc(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;a=c[a+4>>2]|0;if(!a){d=0;i=e;return d|0}d=c[b>>2]|0;while(1){b=c[a+16>>2]|0;if((d|0)>=(b|0)){if((b|0)>=(d|0)){a=1;b=8;break}a=a+4|0}a=c[a>>2]|0;if(!a){a=0;b=8;break}}if((b|0)==8){i=e;return a|0}return 0}function wc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;e=c[a+4>>2]|0;if(!e){f=a+4|0;c[b>>2]=f;b=f;i=g;return b|0}f=c[d>>2]|0;while(1){d=c[e+16>>2]|0;if(f>>>0<d>>>0){d=c[e>>2]|0;if(!d){a=5;break}else{e=d;continue}}if(d>>>0>=f>>>0){a=9;break}d=e+4|0;a=c[d>>2]|0;if(!a){a=8;break}else e=a}if((a|0)==5){c[b>>2]=e;b=e;i=g;return b|0}else if((a|0)==8){c[b>>2]=e;b=d;i=g;return b|0}else if((a|0)==9){c[b>>2]=e;i=g;return b|0}return 0}function xc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=ae(24)|0;c[f+16>>2]=c[d>>2];c[f+20>>2]=0;c[a>>2]=f;a=a+4|0;c[a>>2]=b+4;c[a+4>>2]=257;i=e;return}function yc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=b;c[d>>2]=e;b=c[c[a>>2]>>2]|0;if(b){c[a>>2]=b;e=c[d>>2]|0}fc(c[a+4>>2]|0,e);a=a+8|0;c[a>>2]=(c[a>>2]|0)+1;i=f;return}function zc(a){a=a|0;var b=0;b=i;Ac(a,c[a+4>>2]|0);i=b;return}function Ac(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b){i=d;return}else{Ac(a,c[b>>2]|0);Ac(a,c[b+4>>2]|0);be(b);i=d;return}}function Bc(a){a=a|0;var b=0;b=i;Cc(a,c[a+4>>2]|0);i=b;return}function Cc(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b){i=d;return}else{Cc(a,c[b>>2]|0);Cc(a,c[b+4>>2]|0);be(b);i=d;return}}function Dc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=i;while(1){d=c[a+8>>2]|0;e=a+12|0;if(!d)c[e>>2]=b;else{c[e>>2]=d;Dc(d,b)}if(Gc(a)|0){a=11;break}d=wb(a)|0;if(d){a=7;break}b=Ic(a)|0;if(!b){a=11;break}a=c[b+24>>2]|0;b=a}if((a|0)==7){b=c[d+24>>2]|0;d=d+28|0;if((b|0)==(d|0)){i=f;return}do{Dc(c[b+20>>2]|0,c[e>>2]|0);b=sc(b)|0}while((b|0)!=(d|0));i=f;return}else if((a|0)==11){i=f;return}}function Ec(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+32|0;q=s+8|0;n=s+4|0;r=s;c[q+4>>2]=0;c[q+8>>2]=0;c[q>>2]=q+4;Sc(d,q);if(!b){Gd(q);i=s;return}else{k=e;d=b}a:while(1){m=f+1|0;while(1){e=Gc(d)|0;if(e)break;g=wb(d)|0;if(g){b=c[g+24>>2]|0;j=g+28|0;d=g+8|0;if((b|0)!=(j|0)){g=g+36|0;do{Ec(c[b+20>>2]|0,c[d>>2]|0,(c[g>>2]|0)!=0?0:k,m);b=sc(b)|0}while((b|0)!=(j|0))}}else{e=Ic(d)|0;if(!e){e=36;break a}d=c[e+24>>2]|0;Ec(d,d,e,m);d=e+8|0}d=c[d>>2]|0;if(!d){e=36;break a}}j=c[e+20>>2]|0;b=(c[j+60>>2]|0)==0;l=b?k:0;d=c[e+8>>2]|0;if(!d){e=18;break}if(!b){m=f;k=l;f=m;continue}if(!(f>>>0<20?(c[j+32>>2]|0)==2:0)){m=f;k=l;f=m;continue}e=c[j+24>>2]|0;k=j+28|0;b=(e|0)==(k|0);if(b){k=l;f=m;continue}else{f=e;g=0;h=0}while(1){c[n>>2]=c[f+16>>2];j=c[(c[f+20>>2]|0)+4>>2]|0;if((j|0)==1){j=g|(ic(q,n)|0)==0;h=1}else if(!j)j=g;else j=1;f=sc(f)|0;if((f|0)==(k|0))break;else g=j}if(j|h^1|b){k=l;f=m;continue}while(1){b=c[e+20>>2]|0;f=b+4|0;if((c[f>>2]|0)==1){c[f>>2]=0;f=wb(c[b>>2]|0)|0;if(f){j=f+36|0;c[j>>2]=(c[j>>2]|0)+-1}}else c[f>>2]=3;e=sc(e)|0;if((e|0)==(k|0)){k=l;f=m;continue a}}}if((e|0)==18){d=c[j+24>>2]|0;h=j+28|0;if((d|0)==(h|0)){Gd(q);i=s;return}j=(l|0)!=0;g=l+12|0;do{c[r>>2]=c[d+16>>2];f=c[d+20>>2]|0;e=f+4|0;b=c[e>>2]|0;do if(b){if(ic(q,r)|0){c[e>>2]=0;e=wb(c[f>>2]|0)|0;if(!e)break;n=e+36|0;c[n>>2]=(c[n>>2]|0)+-1;break}if(((b|0)==1&j?(o=c[f>>2]|0,(c[g>>2]|0)==(c[o+12>>2]|0)):0)?(a[f+8>>0]=0,p=wb(o)|0,(p|0)!=0):0){n=p+36|0;c[n>>2]=(c[n>>2]|0)+-1}}while(0);d=sc(d)|0}while((d|0)!=(h|0));Gd(q);i=s;return}else if((e|0)==36){Gd(q);i=s;return}}function Fc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;y=i;i=i+32|0;r=y+16|0;s=y+12|0;t=y+8|0;u=y+4|0;v=y;w=b+4|0;e=c[w>>2]|0;x=(e|0)==0;if(x){e=ae(24)|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[w>>2]=e}a:do if(d){o=e+20|0;p=e+16|0;q=e+4|0;j=d;do{f=Gc(j)|0;do if(f){d=j+8|0;m=wb(c[d>>2]|0)|0;n=(m|0)!=0;if(n?(c[m+36>>2]|0)!=0:0){c[r>>2]=m;Kc(e,r)}l=f+20|0;if(c[(c[l>>2]|0)+60>>2]|0){c[s>>2]=0;Kc(e,s)}if(n){if(a[m+40>>0]|0){c[t>>2]=0;Kc(e,t)}g=c[m+24>>2]|0;h=m+28|0;if((g|0)!=(h|0))do{Fc(b,c[g+20>>2]|0);g=sc(g)|0}while((g|0)!=(h|0))}f=c[l>>2]|0;h=c[f+24>>2]|0;k=f+28|0;if((h|0)!=(k|0))do{j=c[h+20>>2]|0;do if(((c[j+4>>2]|0)+-1|0)>>>0<2){g=c[j>>2]|0;z=(c[o>>2]|0)+-1+(c[p>>2]|0)|0;j=j+8|0;if((g|0)!=(c[(c[(c[q>>2]|0)+(z>>>10<<2)>>2]|0)+((z&1023)<<2)>>2]|0)?(a[j>>0]|0)!=0:0){a[(Hc(g)|0)+20>>0]=1;break}a[j>>0]=0}while(0);h=sc(h)|0}while((h|0)!=(k|0));if(n?(a[m+40>>0]|0)!=0:0){Jc(e);f=c[l>>2]|0}if(c[f+60>>2]|0)Jc(e);if(n){if(c[m+36>>2]|0)Jc(e);d=m+8|0}}else{f=wb(j)|0;if(!f){d=Ic(j)|0;if(!d)break a;c[v>>2]=d;Kc(e,v);Fc(b,c[d+24>>2]|0);Jc(e);d=j+8|0;break}h=f+36|0;if(c[h>>2]|0){c[u>>2]=f;Kc(e,u)}d=c[f+24>>2]|0;g=f+28|0;if((d|0)!=(g|0)){f=d;do{Fc(b,c[f+20>>2]|0);f=sc(f)|0}while((f|0)!=(g|0))}if(c[h>>2]|0)Jc(e);d=j+8|0}while(0);j=c[d>>2]|0}while((j|0)!=0)}while(0);if(!x){i=y;return}e=c[w>>2]|0;if(!e){i=y;return}Gb(e);be(e);i=y;return}function Gc(a){a=a|0;var b=0;b=i;if(!((a|0)!=0?(c[a+16>>2]|0)==0:0))a=0;i=b;return a|0}function Hc(a){a=a|0;var b=0;b=i;if((wb(a)|0)==0?(Ic(a)|0)==0:0){a=0;i=b;return a|0}i=b;return a|0}function Ic(a){a=a|0;var b=0;b=i;if(!((a|0)!=0?(c[a+16>>2]|0)==2:0))a=0;i=b;return a|0}function Jc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;e=a+20|0;d=(c[e>>2]|0)+-1|0;c[e>>2]=d;e=a+8|0;f=c[e>>2]|0;b=c[a+4>>2]|0;if((f|0)==(b|0))b=0;else b=(f-b<<8)+-1|0;if((b-(c[a+16>>2]|0)-d|0)>>>0<=2047){i=g;return}be(c[f+-4>>2]|0);c[e>>2]=(c[e>>2]|0)+-4;i=g;return}function Kc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=i;i=i+16|0;f=g;d=c[a+8>>2]|0;e=c[a+4>>2]|0;if((d|0)==(e|0))d=0;else d=(d-e<<8)+-1|0;e=a+20|0;if((d-(c[a+16>>2]|0)|0)==(c[e>>2]|0))Lc(a);Mc(f,a);d=c[f+4>>2]|0;if(!d){b=c[e>>2]|0;b=b+1|0;c[e>>2]=b;i=g;return}c[d>>2]=c[b>>2];b=c[e>>2]|0;b=b+1|0;c[e>>2]=b;i=g;return}function Lc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=i;i=i+64|0;q=u+8|0;p=u+32|0;t=u+36|0;r=u+56|0;s=u+4|0;f=u;l=u+12|0;b=a+16|0;d=c[b>>2]|0;if(d>>>0>1023){c[b>>2]=d+-1024;g=a+4|0;h=c[g>>2]|0;j=c[h>>2]|0;e=h+4|0;c[g>>2]=e;k=a+8|0;b=c[k>>2]|0;f=a+12|0;do if((b|0)==(c[f>>2]|0)){d=c[a>>2]|0;if(e>>>0>d>>>0){t=e;a=((t-d>>2)+1|0)/-2|0;b=b-t|0;af(h+(a+1<<2)|0,e|0,b|0)|0;b=h+(a+(b>>2)+1<<2)|0;c[k>>2]=b;c[g>>2]=(c[g>>2]|0)+(a<<2);break}else{b=b-d>>1;b=(b|0)==0?1:b;Oc(t,b,b>>>2,a+12|0);c[r>>2]=c[g>>2];c[s>>2]=c[k>>2];c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];Rc(t,p,q);b=c[a>>2]|0;c[a>>2]=c[t>>2];c[t>>2]=b;b=t+4|0;a=c[g>>2]|0;c[g>>2]=c[b>>2];c[b>>2]=a;b=t+8|0;a=c[k>>2]|0;c[k>>2]=c[b>>2];c[b>>2]=a;b=t+12|0;a=c[f>>2]|0;c[f>>2]=c[b>>2];c[b>>2]=a;Qc(t);b=c[k>>2]|0;break}}while(0);if(!b)b=0;else{c[b>>2]=j;b=c[k>>2]|0}c[k>>2]=b+4;i=u;return}o=a+8|0;k=c[o>>2]|0;m=a+4|0;h=k-(c[m>>2]|0)>>2;n=a+12|0;j=c[n>>2]|0;g=j-(c[a>>2]|0)|0;if(h>>>0>=g>>2>>>0){g=g>>1;Oc(l,(g|0)==0?1:g,h,a+12|0);g=ae(4096)|0;f=l+8|0;b=c[f>>2]|0;e=l+12|0;do if((b|0)==(c[e>>2]|0)){k=l+4|0;j=c[k>>2]|0;h=c[l>>2]|0;if(j>>>0>h>>>0){r=j;s=((r-h>>2)+1|0)/-2|0;t=j+(s<<2)|0;b=b-r|0;af(t|0,j|0,b|0)|0;b=j+(s+(b>>2)<<2)|0;c[f>>2]=b;c[k>>2]=t;break}else{d=b-h>>1;d=(d|0)==0?1:d;Oc(t,d,d>>>2,c[l+16>>2]|0);c[r>>2]=j;c[s>>2]=b;c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];Rc(t,p,q);c[l>>2]=c[t>>2];c[t>>2]=h;r=t+4|0;c[k>>2]=c[r>>2];c[r>>2]=j;r=t+8|0;s=c[r>>2]|0;c[f>>2]=s;c[r>>2]=b;r=t+12|0;c[e>>2]=c[r>>2];c[r>>2]=b;Qc(t);b=s;break}}while(0);if(!b)b=0;else c[b>>2]=g;c[f>>2]=b+4;b=c[o>>2]|0;while(1){if((b|0)==(c[m>>2]|0))break;t=b+-4|0;Pc(l,t);b=t}t=c[a>>2]|0;c[a>>2]=c[l>>2];c[l>>2]=t;a=l+4|0;c[m>>2]=c[a>>2];c[a>>2]=b;a=c[o>>2]|0;c[o>>2]=c[f>>2];c[f>>2]=a;a=c[n>>2]|0;c[n>>2]=c[e>>2];c[e>>2]=a;Qc(l);i=u;return}h=ae(4096)|0;if((j|0)==(k|0)){c[f>>2]=h;Nc(a,f);e=c[m>>2]|0;h=c[e>>2]|0;d=e+4|0;c[m>>2]=d;b=c[o>>2]|0;do if((b|0)==(c[n>>2]|0)){f=c[a>>2]|0;if(d>>>0>f>>>0){t=d;a=((t-f>>2)+1|0)/-2|0;b=b-t|0;af(e+(a+1<<2)|0,d|0,b|0)|0;b=e+(a+(b>>2)+1<<2)|0;c[o>>2]=b;c[m>>2]=(c[m>>2]|0)+(a<<2);break}else{b=b-f>>1;b=(b|0)==0?1:b;Oc(t,b,b>>>2,a+12|0);c[r>>2]=c[m>>2];c[s>>2]=c[o>>2];c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];Rc(t,p,q);b=c[a>>2]|0;c[a>>2]=c[t>>2];c[t>>2]=b;b=t+4|0;a=c[m>>2]|0;c[m>>2]=c[b>>2];c[b>>2]=a;b=t+8|0;a=c[o>>2]|0;c[o>>2]=c[b>>2];c[b>>2]=a;b=t+12|0;a=c[n>>2]|0;c[n>>2]=c[b>>2];c[b>>2]=a;Qc(t);b=c[o>>2]|0;break}}while(0);if(!b)b=0;else{c[b>>2]=h;b=c[o>>2]|0}c[o>>2]=b+4;i=u;return}else{b=c[o>>2]|0;do if((b|0)==(c[n>>2]|0)){d=c[m>>2]|0;e=c[a>>2]|0;if(d>>>0>e>>>0){t=d;a=((t-e>>2)+1|0)/-2|0;b=b-t|0;af(d+(a<<2)|0,d|0,b|0)|0;b=d+(a+(b>>2)<<2)|0;c[o>>2]=b;c[m>>2]=(c[m>>2]|0)+(a<<2);break}else{b=b-e>>1;b=(b|0)==0?1:b;Oc(t,b,b>>>2,a+12|0);c[r>>2]=c[m>>2];c[s>>2]=c[o>>2];c[p+0>>2]=c[r+0>>2];c[q+0>>2]=c[s+0>>2];Rc(t,p,q);b=c[a>>2]|0;c[a>>2]=c[t>>2];c[t>>2]=b;b=t+4|0;a=c[m>>2]|0;c[m>>2]=c[b>>2];c[b>>2]=a;b=t+8|0;a=c[o>>2]|0;c[o>>2]=c[b>>2];c[b>>2]=a;b=t+12|0;a=c[n>>2]|0;c[n>>2]=c[b>>2];c[b>>2]=a;Qc(t);b=c[o>>2]|0;break}}while(0);if(!b)b=0;else{c[b>>2]=h;b=c[o>>2]|0}c[o>>2]=b+4;i=u;return}}function Mc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=(c[b+16>>2]|0)+(c[b+20>>2]|0)|0;f=c[b+4>>2]|0;e=f+(d>>>10<<2)|0;if((c[b+8>>2]|0)==(f|0))d=0;else d=(c[e>>2]|0)+((d&1023)<<2)|0;c[a>>2]=e;c[a+4>>2]=d;return}function Nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+48|0;e=p+32|0;d=p+28|0;o=p+8|0;f=p+4|0;g=p;j=a+4|0;k=c[j>>2]|0;if((k|0)!=(c[a>>2]|0)){a=k;a=a+-4|0;b=c[b>>2]|0;c[a>>2]=b;a=c[j>>2]|0;a=a+-4|0;c[j>>2]=a;i=p;return}l=a+8|0;m=c[l>>2]|0;n=a+12|0;q=c[n>>2]|0;h=q;if(m>>>0<q>>>0){o=m;a=((h-o>>2)+1|0)/2|0;o=o-k|0;q=m+(a-(o>>2)<<2)|0;af(q|0,k|0,o|0)|0;c[j>>2]=q;c[l>>2]=(c[l>>2]|0)+(a<<2);q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}else{q=h-k>>1;q=(q|0)==0?1:q;Oc(o,q,(q+3|0)>>>2,a+12|0);c[f>>2]=c[j>>2];c[g>>2]=c[l>>2];c[d+0>>2]=c[f+0>>2];c[e+0>>2]=c[g+0>>2];Rc(o,d,e);q=c[a>>2]|0;c[a>>2]=c[o>>2];c[o>>2]=q;q=o+4|0;a=c[j>>2]|0;c[j>>2]=c[q>>2];c[q>>2]=a;q=o+8|0;a=c[l>>2]|0;c[l>>2]=c[q>>2];c[q>>2]=a;q=o+12|0;a=c[n>>2]|0;c[n>>2]=c[q>>2];c[q>>2]=a;Qc(o);q=c[j>>2]|0;q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}}function Oc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;f=a+12|0;c[f>>2]=0;c[a+16>>2]=e;if(!b)e=0;else e=ae(b<<2)|0;c[a>>2]=e;d=e+(d<<2)|0;c[a+8>>2]=d;c[a+4>>2]=d;c[f>>2]=e+(b<<2);i=g;return}function Pc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+48|0;e=p+32|0;d=p+28|0;o=p+8|0;f=p+4|0;g=p;j=a+4|0;k=c[j>>2]|0;if((k|0)!=(c[a>>2]|0)){a=k;a=a+-4|0;b=c[b>>2]|0;c[a>>2]=b;a=c[j>>2]|0;a=a+-4|0;c[j>>2]=a;i=p;return}l=a+8|0;m=c[l>>2]|0;n=a+12|0;q=c[n>>2]|0;h=q;if(m>>>0<q>>>0){o=m;a=((h-o>>2)+1|0)/2|0;o=o-k|0;q=m+(a-(o>>2)<<2)|0;af(q|0,k|0,o|0)|0;c[j>>2]=q;c[l>>2]=(c[l>>2]|0)+(a<<2);q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}else{q=h-k>>1;q=(q|0)==0?1:q;Oc(o,q,(q+3|0)>>>2,c[a+16>>2]|0);c[f>>2]=c[j>>2];c[g>>2]=c[l>>2];c[d+0>>2]=c[f+0>>2];c[e+0>>2]=c[g+0>>2];Rc(o,d,e);q=c[a>>2]|0;c[a>>2]=c[o>>2];c[o>>2]=q;q=o+4|0;a=c[j>>2]|0;c[j>>2]=c[q>>2];c[q>>2]=a;q=o+8|0;a=c[l>>2]|0;c[l>>2]=c[q>>2];c[q>>2]=a;q=o+12|0;a=c[n>>2]|0;c[n>>2]=c[q>>2];c[q>>2]=a;Qc(o);q=c[j>>2]|0;q=q+-4|0;a=c[b>>2]|0;c[q>>2]=a;q=c[j>>2]|0;q=q+-4|0;c[j>>2]=q;i=p;return}}function Qc(a){a=a|0;var b=0,d=0,e=0,f=0;f=i;b=c[a+4>>2]|0;d=a+8|0;e=c[d>>2]|0;if((e|0)!=(b|0))c[d>>2]=e+(~((e+-4-b|0)>>>2)<<2);b=c[a>>2]|0;if(!b){i=f;return}be(b);i=f;return}function Rc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=i;h=c[b>>2]|0;g=c[d>>2]|0;if((h|0)==(g|0)){i=j;return}e=a+8|0;f=((g+-4-h|0)>>>2)+1|0;d=h;a=c[e>>2]|0;do{if(!a)a=0;else{c[a>>2]=c[d>>2];a=c[e>>2]|0}a=a+4|0;c[e>>2]=a;d=d+4|0}while((d|0)!=(g|0));c[b>>2]=h+(f<<2);i=j;return}function Sc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=i;i=i+16|0;d=Gc(a)|0;if(d){bc(f,b,d+20|0);i=f;return}e=wb(a)|0;if(!e){d=Ic(a)|0;if(!d){i=f;return}Sc(c[d+24>>2]|0,b);i=f;return}else{d=c[e+24>>2]|0;a=e+28|0;if((d|0)!=(a|0))do{Sc(c[d+20>>2]|0,b);d=sc(d)|0}while((d|0)!=(a|0));Sc(c[e+8>>2]|0,b);i=f;return}}function Tc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=i;i=i+64|0;r=x+40|0;l=x+24|0;j=x+12|0;h=x+16|0;v=x+48|0;w=x;q=x+20|0;o=x+32|0;t=x+28|0;c[v+4>>2]=0;c[v+8>>2]=0;s=v+4|0;c[v>>2]=s;c[w+4>>2]=0;p=w+8|0;c[p>>2]=0;g=w+4|0;c[w>>2]=g;k=c[e>>2]|0;u=e+4|0;if((k|0)!=(u|0)){do{c[j>>2]=g;c[r+0>>2]=c[j+0>>2];Id(h,w,r,k+16|0);k=sc(k)|0}while((k|0)!=(u|0));if(c[p>>2]|0)do{j=c[w>>2]|0;k=c[j+16>>2]|0;c[q>>2]=k;c[l>>2]=j;c[r+0>>2]=c[l+0>>2];kd(o,w,r);if((ic(v,q)|0)==0?(bc(r,v,q),id(d,q)|0,m=c[k+12>>2]|0,n=k+16|0,(m|0)!=(n|0)):0){k=m;do{bc(r,w,k+16|0);k=sc(k)|0}while((k|0)!=(n|0))}}while((c[p>>2]|0)!=0)}h=c[v>>2]|0;if((h|0)!=(s|0))do{j=c[h+16>>2]|0;g=c[j>>2]|0;j=j+4|0;if((g|0)!=(j|0))do{c[t>>2]=c[g+16>>2];if(!(ic(v,t)|0))bc(r,f,t);g=sc(g)|0}while((g|0)!=(j|0));h=sc(h)|0}while((h|0)!=(s|0));j=ae(28)|0;c[j+4>>2]=-1;c[j+8>>2]=0;c[j+16>>2]=2;a[j+20>>0]=0;c[j>>2]=688;k=j+24|0;c[k>>2]=0;Yc(b,j);g=c[e>>2]|0;if((g|0)!=(u|0))do{Zc(c[g+16>>2]|0,2,j,v);g=sc(g)|0}while((g|0)!=(u|0));g=c[f>>2]|0;h=f+4|0;if((g|0)==(h|0)){b=Kb(b,v,e)|0;c[k>>2]=b;Gd(w);Gd(v);i=x;return j|0}do{Zc(c[g+16>>2]|0,1,j,v);g=sc(g)|0}while((g|0)!=(h|0));b=Kb(b,v,e)|0;c[k>>2]=b;Gd(w);Gd(v);i=x;return j|0}function Uc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;h=i;i=i+16|0;g=h+12|0;d=h;e=rd(a,g,b)|0;f=c[e>>2]|0;if(f){a=f;a=a+20|0;i=h;return a|0}sd(d,a,b);b=c[d>>2]|0;c[d>>2]=0;td(a,c[g>>2]|0,e,b);a=b;a=a+20|0;i=h;return a|0}function Vc(a){a=a|0;var b=0;b=i;Wc(a,c[a+4>>2]|0);i=b;return}function Wc(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b){i=d;return}else{Wc(a,c[b>>2]|0);Wc(a,c[b+4>>2]|0);Gd(b+20|0);be(b);i=d;return}}function Xc(b){b=b|0;c[b+4>>2]=-1;c[b+8>>2]=0;c[b+16>>2]=1;a[b+20>>0]=0;c[b>>2]=584;c[b+28>>2]=0;c[b+32>>2]=0;c[b+24>>2]=b+28;c[b+36>>2]=0;a[b+40>>0]=0;return}function Yc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+16|0;e=d;c[e>>2]=b;a=c[a>>2]|0;g=a+60|0;f=c[g>>2]|0;c[g>>2]=f+1;c[b+4>>2]=f;Kc(a+24|0,e);i=d;return}function Zc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+16|0;k=o+8|0;l=o+4|0;n=o;c[l>>2]=a;f=c[a+12>>2]|0;m=a+16|0;if((f|0)==(m|0)){i=o;return}do{j=c[f+16>>2]|0;c[n>>2]=j;if(!(ic(e,n)|0))f=sc(f)|0;else{g=c[(sb(j,l)|0)>>2]|0;c[g>>2]=d;c[g+4>>2]=b;h=wb(d)|0;if(h){h=h+36|0;c[h>>2]=(c[h>>2]|0)+1}f=sc(f)|0;id(a+12|0,n)|0;bc(k,a+36|0,n);dd(j,l)|0;c[(sb(j+24|0,l)|0)>>2]=g}}while((f|0)!=(m|0));i=o;return}function _c(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;h=i;i=i+16|0;g=h+12|0;d=h;e=ad(a,g,b)|0;f=c[e>>2]|0;if(f){a=f;a=a+20|0;i=h;return a|0}bd(d,a,b);b=c[d>>2]|0;c[d>>2]=0;cd(a,c[g>>2]|0,e,b);a=b;a=a+20|0;i=h;return a|0}function $c(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;a=c[a+4>>2]|0;if(!a){d=0;i=e;return d|0}d=c[b>>2]|0;while(1){b=c[a+16>>2]|0;if(d>>>0>=b>>>0){if(b>>>0>=d>>>0){a=1;b=8;break}a=a+4|0}a=c[a>>2]|0;if(!a){a=0;b=8;break}}if((b|0)==8){i=e;return a|0}return 0}function ad(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;e=c[a+4>>2]|0;if(!e){f=a+4|0;c[b>>2]=f;b=f;i=g;return b|0}f=c[d>>2]|0;while(1){d=c[e+16>>2]|0;if((f|0)<(d|0)){d=c[e>>2]|0;if(!d){a=5;break}else{e=d;continue}}if((d|0)>=(f|0)){a=9;break}d=e+4|0;a=c[d>>2]|0;if(!a){a=8;break}else e=a}if((a|0)==5){c[b>>2]=e;b=e;i=g;return b|0}else if((a|0)==8){c[b>>2]=e;b=d;i=g;return b|0}else if((a|0)==9){c[b>>2]=e;i=g;return b|0}return 0}function bd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=ae(24)|0;c[f+16>>2]=c[d>>2];c[f+20>>2]=0;c[a>>2]=f;a=a+4|0;c[a>>2]=b+4;c[a+4>>2]=257;i=e;return}function cd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=b;c[d>>2]=e;b=c[c[a>>2]>>2]|0;if(b){c[a>>2]=b;e=c[d>>2]|0}fc(c[a+4>>2]|0,e);a=a+8|0;c[a>>2]=(c[a>>2]|0)+1;i=f;return}function dd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;f=i;i=i+16|0;d=f+12|0;g=f+8|0;e=f+4|0;ed(g,a,b);b=c[g>>2]|0;if((b|0)==(a+4|0)){g=0;i=f;return g|0}c[e>>2]=b;c[d+0>>2]=c[e+0>>2];fd(f,a,d);g=1;i=f;return g|0}function ed(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;g=f;e=b+4|0;hd(g,b,d,c[b+4>>2]|0,e);b=c[g>>2]|0;if((b|0)!=(e|0)?(c[d>>2]|0)>>>0>=(c[b+16>>2]|0)>>>0:0){c[a>>2]=b;i=f;return}c[a>>2]=e;i=f;return}function fd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;d=c[d>>2]|0;e=sc(d)|0;c[a>>2]=e;if((c[b>>2]|0)==(d|0))c[b>>2]=e;a=b+8|0;c[a>>2]=(c[a>>2]|0)+-1;gd(c[b+4>>2]|0,d);be(d);i=f;return}function gd(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;o=i;e=c[d>>2]|0;if(e)if(!(c[d+4>>2]|0))n=d;else{n=sc(d)|0;e=c[n>>2]|0}else{e=0;n=d}m=n+4|0;k=c[((e|0)==0?m:n)>>2]|0;l=(k|0)==0;j=n+8|0;if(!l)c[k+8>>2]=c[j>>2];h=c[j>>2]|0;f=c[h>>2]|0;if((f|0)==(n|0)){c[h>>2]=k;if((n|0)==(b|0)){e=k;f=0}else{e=b;f=c[h+4>>2]|0}}else{c[h+4>>2]=k;e=b}b=n+12|0;g=(a[b>>0]|0)==0;if((n|0)!=(d|0)){p=d+8|0;h=c[p>>2]|0;c[j>>2]=h;if((c[c[p>>2]>>2]|0)==(d|0))c[h>>2]=n;else c[h+4>>2]=n;h=c[d>>2]|0;c[n>>2]=h;c[h+8>>2]=n;h=c[d+4>>2]|0;c[m>>2]=h;if(h)c[h+8>>2]=n;a[b>>0]=a[d+12>>0]|0;e=(e|0)==(d|0)?n:e}if(g|(e|0)==0){i=o;return}if(l)h=e;else{a[k+12>>0]=1;i=o;return}while(1){g=c[f+8>>2]|0;e=f+12|0;b=(a[e>>0]|0)!=0;if((c[g>>2]|0)==(f|0)){if(!b){a[e>>0]=1;a[g+12>>0]=0;hc(g);p=c[f+4>>2]|0;h=(h|0)==(p|0)?f:h;f=c[p>>2]|0}e=c[f>>2]|0;g=(e|0)==0;if(!g?(a[e+12>>0]|0)==0:0){b=46;break}p=c[f+4>>2]|0;if((p|0)!=0?(a[p+12>>0]|0)==0:0){b=45;break}a[f+12>>0]=0;e=c[f+8>>2]|0;f=e+12|0;if((a[f>>0]|0)==0|(e|0)==(h|0)){b=42;break}p=c[e+8>>2]|0;f=h;e=(c[p>>2]|0)==(e|0)?p+4|0:p}else{if(b)b=h;else{a[e>>0]=1;a[g+12>>0]=0;gc(g);p=c[f>>2]|0;b=(h|0)==(p|0)?f:h;f=c[p+4>>2]|0}h=c[f>>2]|0;if((h|0)!=0?(a[h+12>>0]|0)==0:0){b=31;break}e=c[f+4>>2]|0;if((e|0)!=0?(a[e+12>>0]|0)==0:0){b=32;break}a[f+12>>0]=0;e=c[f+8>>2]|0;if((e|0)==(b|0)){e=b;b=29;break}if(!(a[e+12>>0]|0)){b=29;break}p=c[e+8>>2]|0;f=b;e=(c[p>>2]|0)==(e|0)?p+4|0:p}h=f;f=c[e>>2]|0}if((b|0)==29){a[e+12>>0]=1;i=o;return}else if((b|0)==31){e=c[f+4>>2]|0;if(!e)b=33;else b=32}else if((b|0)==42){a[f>>0]=1;i=o;return}else if((b|0)==45)if(g)b=47;else b=46;if((b|0)==32)if(!(a[e+12>>0]|0))b=34;else b=33;else if((b|0)==46)if(!(a[e+12>>0]|0))b=48;else b=47;if((b|0)==33){a[h+12>>0]=1;a[f+12>>0]=0;hc(f);f=c[f+8>>2]|0;e=c[f+4>>2]|0;b=34}else if((b|0)==47){a[(c[f+4>>2]|0)+12>>0]=1;a[f+12>>0]=0;gc(f);f=c[f+8>>2]|0;e=c[f>>2]|0;b=48}if((b|0)==34){p=c[f+8>>2]|0;d=p+12|0;a[f+12>>0]=a[d>>0]|0;a[d>>0]=1;a[e+12>>0]=1;gc(p);i=o;return}else if((b|0)==48){p=c[f+8>>2]|0;d=p+12|0;a[f+12>>0]=a[d>>0]|0;a[d>>0]=1;a[e+12>>0]=1;hc(p);i=o;return}}function hd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;a:do if(e){g=c[d>>2]|0;d=f;b=e;while(1){f=b;while(1){if((c[f+16>>2]|0)>>>0>=g>>>0)break;f=c[f+4>>2]|0;if(!f){f=d;break a}}b=c[f>>2]|0;if(!b)break;else d=f}}while(0);c[a>>2]=f;i=h;return}function id(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;f=i;i=i+16|0;d=f+12|0;g=f+8|0;e=f+4|0;jd(g,a,b);b=c[g>>2]|0;if((b|0)==(a+4|0)){g=0;i=f;return g|0}c[e>>2]=b;c[d+0>>2]=c[e+0>>2];kd(f,a,d);g=1;i=f;return g|0}function jd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;g=f;e=b+4|0;ld(g,b,d,c[b+4>>2]|0,e);b=c[g>>2]|0;if((b|0)!=(e|0)?(c[d>>2]|0)>>>0>=(c[b+16>>2]|0)>>>0:0){c[a>>2]=b;i=f;return}c[a>>2]=e;i=f;return}function kd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;d=c[d>>2]|0;e=sc(d)|0;c[a>>2]=e;if((c[b>>2]|0)==(d|0))c[b>>2]=e;a=b+8|0;c[a>>2]=(c[a>>2]|0)+-1;gd(c[b+4>>2]|0,d);be(d);i=f;return}function ld(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;a:do if(e){g=c[d>>2]|0;d=f;b=e;while(1){f=b;while(1){if((c[f+16>>2]|0)>>>0>=g>>>0)break;f=c[f+4>>2]|0;if(!f){f=d;break a}}b=c[f>>2]|0;if(!b)break;else d=f}}while(0);c[a>>2]=f;i=h;return}function md(a){a=a|0;return}function nd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;f=i;i=i+16|0;d=f+12|0;g=f+8|0;e=f+4|0;od(g,a,b);b=c[g>>2]|0;if((b|0)==(a+4|0)){g=0;i=f;return g|0}c[e>>2]=b;c[d+0>>2]=c[e+0>>2];pd(f,a,d);g=1;i=f;return g|0}function od(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;g=f;e=b+4|0;qd(g,b,d,c[b+4>>2]|0,e);b=c[g>>2]|0;if((b|0)!=(e|0)?(c[d>>2]|0)>>>0>=(c[b+16>>2]|0)>>>0:0){c[a>>2]=b;i=f;return}c[a>>2]=e;i=f;return}function pd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;d=c[d>>2]|0;e=sc(d)|0;c[a>>2]=e;if((c[b>>2]|0)==(d|0))c[b>>2]=e;a=b+8|0;c[a>>2]=(c[a>>2]|0)+-1;gd(c[b+4>>2]|0,d);Gd(d+20|0);be(d);i=f;return}function qd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;a:do if(e){g=c[d>>2]|0;d=f;b=e;while(1){f=b;while(1){if((c[f+16>>2]|0)>>>0>=g>>>0)break;f=c[f+4>>2]|0;if(!f){f=d;break a}}b=c[f>>2]|0;if(!b)break;else d=f}}while(0);c[a>>2]=f;i=h;return}function rd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;e=c[a+4>>2]|0;if(!e){f=a+4|0;c[b>>2]=f;b=f;i=g;return b|0}f=c[d>>2]|0;while(1){d=c[e+16>>2]|0;if(f>>>0<d>>>0){d=c[e>>2]|0;if(!d){a=5;break}else{e=d;continue}}if(d>>>0>=f>>>0){a=9;break}d=e+4|0;a=c[d>>2]|0;if(!a){a=8;break}else e=a}if((a|0)==5){c[b>>2]=e;b=e;i=g;return b|0}else if((a|0)==8){c[b>>2]=e;b=d;i=g;return b|0}else if((a|0)==9){c[b>>2]=e;i=g;return b|0}return 0}function sd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=ae(32)|0;c[f+16>>2]=c[d>>2];d=f+24|0;c[d>>2]=0;c[f+28>>2]=0;c[f+20>>2]=d;c[a>>2]=f;a=a+4|0;c[a>>2]=b+4;c[a+4>>2]=257;i=e;return}function td(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=b;c[d>>2]=e;b=c[c[a>>2]>>2]|0;if(b){c[a>>2]=b;e=c[d>>2]|0}fc(c[a+4>>2]|0,e);a=a+8|0;c[a>>2]=(c[a>>2]|0)+1;i=f;return}function ud(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;h=i;i=i+16|0;g=h+12|0;d=h;e=Dd(a,g,b)|0;f=c[e>>2]|0;if(f){a=f;a=a+20|0;i=h;return a|0}Ed(d,a,b);b=c[d>>2]|0;c[d>>2]=0;Fd(a,c[g>>2]|0,e,b);a=b;a=a+20|0;i=h;return a|0}function vd(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=ae(12)|0;c[e+8>>2]=c[b>>2];c[e+4>>2]=a;b=c[a>>2]|0;c[e>>2]=b;c[b+4>>2]=e;c[a>>2]=e;a=a+8|0;c[a>>2]=(c[a>>2]|0)+1;i=d;return}function wd(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=c[a+4>>2]|0;e=d+4|0;f=c[d>>2]|0;c[f+4>>2]=c[e>>2];c[c[e>>2]>>2]=f;a=a+8|0;c[a>>2]=(c[a>>2]|0)+-1;be(d);i=b;return}function xd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+32|0;h=q+28|0;p=q+16|0;l=q+12|0;n=q+8|0;o=q+4|0;m=q;c[h>>2]=b;c[p>>2]=p;e=p+4|0;c[e>>2]=p;f=p+8|0;c[f>>2]=0;vd(p,h);if(!(c[f>>2]|0)){Ad(p);i=q;return}g=a+4|0;h=a+8|0;do{d=c[(c[e>>2]|0)+8>>2]|0;c[l>>2]=d;wd(p);c[n>>2]=c[(ud(g,l)|0)>>2];b=c[a>>2]|0;if($c(b,n)|0)id(Uc(b,n)|0,l)|0;if((c[(ud(g,l)|0)>>2]|0)!=0?(c[(ud(g,l)|0)>>2]=0,j=c[d>>2]|0,k=d+4|0,(j|0)!=(k|0)):0){b=j;do{c[o>>2]=c[b+16>>2];Bd(m,g,o);d=c[m>>2]|0;if((d|0)!=(h|0)?(c[d+20>>2]|0)!=0:0)vd(p,o);b=sc(b)|0}while((b|0)!=(k|0))}}while((c[f>>2]|0)!=0);Ad(p);i=q;return}function yd(a){a=a|0;var b=0;b=i;zd(a,c[a+4>>2]|0);i=b;return}function zd(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b){i=d;return}else{zd(a,c[b>>2]|0);zd(a,c[b+4>>2]|0);be(b);i=d;return}}function Ad(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;e=i;d=a+8|0;if(!(c[d>>2]|0)){i=e;return}b=c[a+4>>2]|0;f=(c[a>>2]|0)+4|0;g=c[b>>2]|0;c[g+4>>2]=c[f>>2];c[c[f>>2]>>2]=g;c[d>>2]=0;if((b|0)==(a|0)){i=e;return}do{g=b;b=c[b+4>>2]|0;be(g)}while((b|0)!=(a|0));i=e;return}function Bd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;g=f;e=b+4|0;Cd(g,b,d,c[b+4>>2]|0,e);b=c[g>>2]|0;if((b|0)!=(e|0)?(c[d>>2]|0)>>>0>=(c[b+16>>2]|0)>>>0:0){c[a>>2]=b;i=f;return}c[a>>2]=e;i=f;return}function Cd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;a:do if(e){g=c[d>>2]|0;d=f;b=e;while(1){f=b;while(1){if((c[f+16>>2]|0)>>>0>=g>>>0)break;f=c[f+4>>2]|0;if(!f){f=d;break a}}b=c[f>>2]|0;if(!b)break;else d=f}}while(0);c[a>>2]=f;i=h;return}function Dd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;e=c[a+4>>2]|0;if(!e){f=a+4|0;c[b>>2]=f;b=f;i=g;return b|0}f=c[d>>2]|0;while(1){d=c[e+16>>2]|0;if(f>>>0<d>>>0){d=c[e>>2]|0;if(!d){a=5;break}else{e=d;continue}}if(d>>>0>=f>>>0){a=9;break}d=e+4|0;a=c[d>>2]|0;if(!a){a=8;break}else e=a}if((a|0)==5){c[b>>2]=e;b=e;i=g;return b|0}else if((a|0)==8){c[b>>2]=e;b=d;i=g;return b|0}else if((a|0)==9){c[b>>2]=e;i=g;return b|0}return 0}function Ed(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=ae(24)|0;c[f+16>>2]=c[d>>2];c[f+20>>2]=0;c[a>>2]=f;a=a+4|0;c[a>>2]=b+4;c[a+4>>2]=257;i=e;return}function Fd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=b;c[d>>2]=e;b=c[c[a>>2]>>2]|0;if(b){c[a>>2]=b;e=c[d>>2]|0}fc(c[a+4>>2]|0,e);a=a+8|0;c[a>>2]=(c[a>>2]|0)+1;i=f;return}function Gd(a){a=a|0;var b=0;b=i;Hd(a,c[a+4>>2]|0);i=b;return}function Hd(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b){i=d;return}else{Hd(a,c[b>>2]|0);Hd(a,c[b+4>>2]|0);be(b);i=d;return}}function Id(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;j=i;i=i+32|0;f=j+20|0;h=j+16|0;k=j+12|0;g=j;c[k>>2]=c[d>>2];c[f+0>>2]=c[k+0>>2];d=Jd(b,f,h,e)|0;f=c[d>>2]|0;if(f){k=f;c[a>>2]=k;i=j;return}dc(g,b,e);k=c[g>>2]|0;c[g>>2]=0;ec(b,c[h>>2]|0,d,k);c[a>>2]=k;i=j;return}function Jd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;g=a+4|0;j=c[b>>2]|0;if((j|0)!=(g|0)?(h=c[e>>2]|0,f=c[j+16>>2]|0,h>>>0>=f>>>0):0){if(f>>>0>=h>>>0){c[d>>2]=j;i=k;return d|0}f=sc(j)|0;if((f|0)!=(g|0)?h>>>0>=(c[f+16>>2]|0)>>>0:0){d=cc(a,d,e)|0;i=k;return d|0}b=j+4|0;if(!(c[b>>2]|0)){c[d>>2]=j;d=b;i=k;return d|0}else{c[d>>2]=f;d=f;i=k;return d|0}}if((j|0)!=(c[a>>2]|0)){b=Kd(j)|0;if((c[b+16>>2]|0)>>>0>=(c[e>>2]|0)>>>0){d=cc(a,d,e)|0;i=k;return d|0}}else b=j;if(!(c[j>>2]|0)){c[d>>2]=j;d=j;i=k;return d|0}else{c[d>>2]=b;d=b+4|0;i=k;return d|0}return 0}function Kd(a){a=a|0;var b=0,d=0;d=i;b=c[a>>2]|0;if(!b){while(1){b=c[a+8>>2]|0;if((c[b>>2]|0)==(a|0))a=b;else break}i=d;return b|0}else{while(1){a=c[b+4>>2]|0;if(!a)break;else b=a}i=d;return b|0}return 0}function Ld(a){a=a|0;var b=0;b=i;be(a);i=b;return}function Md(a,b){a=a|0;b=b|0;var d=0;d=i;tb(c[a+20>>2]|0,b);a=c[a+8>>2]|0;if(!a){i=d;return}Ya[c[(c[a>>2]|0)+8>>2]&7](a,b);i=d;return}function Nd(a){a=a|0;var b=0,d=0;b=i;Hd(a,c[a+4>>2]|0);c[a+8>>2]=0;d=a+4|0;c[a>>2]=d;c[d>>2]=0;i=b;return}function Od(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;a=c[a+4>>2]|0;if(!a){d=0;i=e;return d|0}d=c[b>>2]|0;while(1){b=c[a+16>>2]|0;if(d>>>0>=b>>>0){if(b>>>0>=d>>>0){a=1;b=8;break}a=a+4|0}a=c[a>>2]|0;if(!a){a=0;b=8;break}}if((b|0)==8){i=e;return a|0}return 0}function Pd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;h=j+8|0;g=j;Qd(h,a);Mc(g,a);b=h+4|0;d=c[b>>2]|0;g=c[g+4>>2]|0;if((d|0)!=(g|0)){e=c[h>>2]|0;f=e;e=c[e>>2]|0;do{d=d+4|0;if((d-e|0)==4096){f=f+4|0;c[h>>2]=f;e=c[f>>2]|0;d=e}}while((d|0)!=(g|0));c[b>>2]=g}c[a+20>>2]=0;e=a+8|0;f=a+4|0;d=c[f>>2]|0;b=(c[e>>2]|0)-d>>2;if(b>>>0>2)do{be(c[d>>2]|0);d=(c[f>>2]|0)+4|0;c[f>>2]=d;b=(c[e>>2]|0)-d>>2}while(b>>>0>2);if((b|0)==1){c[a+16>>2]=512;i=j;return}else if((b|0)==2){c[a+16>>2]=1024;i=j;return}else{i=j;return}}function Qd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=c[b+4>>2]|0;d=c[b+16>>2]|0;e=f+(d>>>10<<2)|0;if((c[b+8>>2]|0)==(f|0))d=0;else d=(c[e>>2]|0)+((d&1023)<<2)|0;c[a>>2]=e;c[a+4>>2]=d;return}function Rd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;h=j+8|0;g=j;Sd(h,a);kc(g,a);b=h+4|0;d=c[b>>2]|0;g=c[g+4>>2]|0;if((d|0)!=(g|0)){e=c[h>>2]|0;f=e;e=c[e>>2]|0;do{d=d+4|0;if((d-e|0)==4096){f=f+4|0;c[h>>2]=f;e=c[f>>2]|0;d=e}}while((d|0)!=(g|0));c[b>>2]=g}c[a+20>>2]=0;e=a+8|0;f=a+4|0;d=c[f>>2]|0;b=(c[e>>2]|0)-d>>2;if(b>>>0>2)do{be(c[d>>2]|0);d=(c[f>>2]|0)+4|0;c[f>>2]=d;b=(c[e>>2]|0)-d>>2}while(b>>>0>2);if((b|0)==1){c[a+16>>2]=512;i=j;return}else if((b|0)==2){c[a+16>>2]=1024;i=j;return}else{i=j;return}}function Sd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=c[b+4>>2]|0;d=c[b+16>>2]|0;e=f+(d>>>10<<2)|0;if((c[b+8>>2]|0)==(f|0))d=0;else d=(c[e>>2]|0)+((d&1023)<<2)|0;c[a>>2]=e;c[a+4>>2]=d;return}function Td(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;h=i;b=c[136]|0;g=c[132]|0;d=c[134]|0;e=g;f=b-d+e|0;if((c[138]|0)==0|(a+1|0)<(f|0)){g=1;i=h;return g|0}e=d-e|0;d=a+10241+b-f|0;if((b|0)<(d|0))do b=((b|0)/2|0)+b|0;while((b|0)<(d|0));g=Ge(g,b)|0;c[132]=g;c[134]=g+e;c[136]=b;g=0;i=h;return g|0}function Ud(a){a=a|0;var b=0;b=i;Vd(a,c[a+4>>2]|0);i=b;return}function Vd(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b){i=d;return}else{Vd(a,c[b>>2]|0);Vd(a,c[b+4>>2]|0);be(b);i=d;return}}function Wd(){var a=0;a=i;c[141]=0;c[142]=0;c[140]=564;Ka(15,560,o|0)|0;i=a;return}function Xd(b,c){b=b|0;c=c|0;var d=0;d=i;b=Yd(b,c)|0;i=d;return ((a[b>>0]|0)==(c&255)<<24>>24?b:0)|0}function Yd(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;h=i;g=d&255;if(!g){d=b+(Ze(b|0)|0)|0;i=h;return d|0}a:do if(b&3){f=d&255;e=b;while(1){j=a[e>>0]|0;b=e+1|0;if(j<<24>>24==0?1:j<<24>>24==f<<24>>24){b=e;break}if(!(b&3))break a;else e=b}i=h;return b|0}while(0);g=ba(g,16843009)|0;e=c[b>>2]|0;b:do if(!((e&-2139062144^-2139062144)&e+-16843009)){f=b;while(1){j=e^g;b=f+4|0;if((j&-2139062144^-2139062144)&j+-16843009){b=f;break b}e=c[b>>2]|0;if((e&-2139062144^-2139062144)&e+-16843009)break;else f=b}}while(0);e=d&255;while(1){j=a[b>>0]|0;if(j<<24>>24==0?1:j<<24>>24==e<<24>>24)break;else b=b+1|0}i=h;return b|0}function Zd(a){a=a|0;var b=0,c=0,d=0;d=i;b=(Ze(a|0)|0)+1|0;c=Ee(b)|0;if(!c){a=0;i=d;return a|0}_e(c|0,a|0,b|0)|0;a=c;i=d;return a|0}function _d(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+16|0;c[d>>2]=b;b=c[p>>2]|0;pa(b|0,a|0,d|0)|0;La(10,b|0)|0;Na()}function $d(){var a=0,b=0;a=i;i=i+16|0;if(!(Ea(1040,2)|0)){b=Ca(c[258]|0)|0;i=a;return b|0}else _d(1048,a);return 0}function ae(a){a=a|0;var b=0,d=0;d=i;b=(a|0)==0?1:a;a=Ee(b)|0;if(a){b=a;i=d;return b|0}while(1){a=he()|0;if(!a){b=4;break}_a[a&3]();a=Ee(b)|0;if(a){b=5;break}}if((b|0)==4){d=qa(4)|0;c[d>>2]=1224;Ma(d|0,1272,8)}else if((b|0)==5){i=d;return a|0}return 0}function be(a){a=a|0;var b=0;b=i;Fe(a);i=b;return}function ce(a){a=a|0;var b=0;b=i;be(a);i=b;return}function de(a){a=a|0;return}function ee(a){a=a|0;return 1240}function fe(a){a=a|0;var b=0;b=i;i=i+16|0;_a[a&3]();_d(1288,b)}function ge(){var a=0,b=0;a=$d()|0;if(((a|0)!=0?(b=c[a>>2]|0,(b|0)!=0):0)?(a=b+48|0,(c[a>>2]&-256|0)==1126902528?(c[a+4>>2]|0)==1129074247:0):0)fe(c[b+12>>2]|0);b=c[212]|0;c[212]=b+0;fe(b)}function he(){var a=0;a=c[346]|0;c[346]=a+0;return a|0}function ie(a){a=a|0;return}function je(a){a=a|0;return}function ke(a){a=a|0;return}function le(a){a=a|0;return}function me(a){a=a|0;return}function ne(a){a=a|0;var b=0;b=i;be(a);i=b;return}function oe(a){a=a|0;var b=0;b=i;be(a);i=b;return}function pe(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+64|0;g=h;if((a|0)==(b|0)){a=1;i=h;return a|0}if(!b){a=0;i=h;return a|0}b=te(b,1480,1536,0)|0;if(!b){a=0;i=h;return a|0}e=g+0|0;f=e+56|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));c[g>>2]=b;c[g+8>>2]=a;c[g+12>>2]=-1;c[g+48>>2]=1;ab[c[(c[b>>2]|0)+28>>2]&3](b,g,c[d>>2]|0,1);if((c[g+24>>2]|0)!=1){a=0;i=h;return a|0}c[d>>2]=c[g+16>>2];a=1;i=h;return a|0}function qe(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;b=d+16|0;g=c[b>>2]|0;if(!g){c[b>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=h;return}if((g|0)!=(e|0)){f=d+36|0;c[f>>2]=(c[f>>2]|0)+1;c[d+24>>2]=2;a[d+54>>0]=1;i=h;return}b=d+24|0;if((c[b>>2]|0)!=2){i=h;return}c[b>>2]=f;i=h;return}function re(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((c[b+8>>2]|0)!=(a|0)){i=f;return}qe(0,b,d,e);i=f;return}function se(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==(c[b+8>>2]|0)){qe(0,b,d,e);i=f;return}else{a=c[a+8>>2]|0;ab[c[(c[a>>2]|0)+28>>2]&3](a,b,d,e);i=f;return}}function te(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+64|0;q=r;p=c[d>>2]|0;o=d+(c[p+-8>>2]|0)|0;p=c[p+-4>>2]|0;c[q>>2]=f;c[q+4>>2]=d;c[q+8>>2]=e;c[q+12>>2]=g;h=q+16|0;j=q+20|0;k=q+24|0;l=q+28|0;m=q+32|0;n=q+40|0;e=(p|0)==(f|0);d=h+0|0;g=d+36|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(g|0));b[h+36>>1]=0;a[h+38>>0]=0;if(e){c[q+48>>2]=1;$a[c[(c[p>>2]|0)+20>>2]&3](p,q,o,o,1,0);q=(c[k>>2]|0)==1?o:0;i=r;return q|0}Wa[c[(c[p>>2]|0)+24>>2]&3](p,q,o,1,0);g=c[q+36>>2]|0;if(!g){q=(c[n>>2]|0)==1&(c[l>>2]|0)==1&(c[m>>2]|0)==1?c[j>>2]|0:0;i=r;return q|0}else if((g|0)==1){if((c[k>>2]|0)!=1?!((c[n>>2]|0)==0&(c[l>>2]|0)==1&(c[m>>2]|0)==1):0){q=0;i=r;return q|0}q=c[h>>2]|0;i=r;return q|0}else{q=0;i=r;return q|0}return 0}function ue(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;a[d+53>>0]=1;if((c[d+4>>2]|0)!=(f|0)){i=h;return}a[d+52>>0]=1;b=d+16|0;f=c[b>>2]|0;if(!f){c[b>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((g|0)==1?(c[d+48>>2]|0)==1:0)){i=h;return}a[d+54>>0]=1;i=h;return}if((f|0)!=(e|0)){g=d+36|0;c[g>>2]=(c[g>>2]|0)+1;a[d+54>>0]=1;i=h;return}b=d+24|0;f=c[b>>2]|0;if((f|0)==2){c[b>>2]=g;f=g}if(!((f|0)==1?(c[d+48>>2]|0)==1:0)){i=h;return}a[d+54>>0]=1;i=h;return}function ve(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;l=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=l;return}h=d+28|0;if((c[h>>2]|0)==1){i=l;return}c[h>>2]=f;i=l;return}if((b|0)!=(c[d>>2]|0)){k=c[b+8>>2]|0;Wa[c[(c[k>>2]|0)+24>>2]&3](k,d,e,f,g);i=l;return}if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;f=d+44|0;if((c[f>>2]|0)==4){i=l;return}h=d+52|0;a[h>>0]=0;m=d+53|0;a[m>>0]=0;b=c[b+8>>2]|0;$a[c[(c[b>>2]|0)+20>>2]&3](b,d,e,e,1,g);if(a[m>>0]|0){if(!(a[h>>0]|0)){h=1;k=13}}else{h=0;k=13}do if((k|0)==13){c[j>>2]=e;m=d+40|0;c[m>>2]=(c[m>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(h)break}else k=16;if((k|0)==16?h:0)break;c[f>>2]=4;i=l;return}while(0);c[f>>2]=3;i=l;return}if((f|0)!=1){i=l;return}c[d+32>>2]=1;i=l;return}function we(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;j=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=j;return}g=d+28|0;if((c[g>>2]|0)==1){i=j;return}c[g>>2]=f;i=j;return}if((c[d>>2]|0)!=(b|0)){i=j;return}if((c[d+16>>2]|0)!=(e|0)?(h=d+20|0,(c[h>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[h>>2]=e;f=d+40|0;c[f>>2]=(c[f>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;i=j;return}if((f|0)!=1){i=j;return}c[d+32>>2]=1;i=j;return}function xe(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((a|0)==(c[b+8>>2]|0)){ue(0,b,d,e,f);i=h;return}else{a=c[a+8>>2]|0;$a[c[(c[a>>2]|0)+20>>2]&3](a,b,d,e,f,g);i=h;return}}function ye(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=i;if((c[b+8>>2]|0)!=(a|0)){i=g;return}ue(0,b,d,e,f);i=g;return}function ze(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;c[e>>2]=c[d>>2];b=Va[c[(c[a>>2]|0)+16>>2]&3](a,b,e)|0;a=b&1;if(!b){i=f;return a|0}c[d>>2]=c[e>>2];i=f;return a|0}function Ae(a){a=a|0;var b=0;b=i;if(!a)a=0;else a=(te(a,1480,1648,0)|0)!=0;i=b;return a&1|0}function Be(){var a=0,b=0,d=0,e=0,f=0;e=i;i=i+16|0;f=e;e=e+12|0;a=$d()|0;if(!a)_d(1016,f);d=c[a>>2]|0;if(!d)_d(1016,f);a=d+48|0;b=c[a>>2]|0;a=c[a+4>>2]|0;if(!((b&-256|0)==1126902528&(a|0)==1129074247)){c[f>>2]=c[214];_d(976,f)}if((b|0)==1126902529&(a|0)==1129074247)a=c[d+44>>2]|0;else a=d+80|0;c[e>>2]=a;d=c[d>>2]|0;a=c[d+4>>2]|0;if(Va[c[(c[1408>>2]|0)+16>>2]&3](1408,d,e)|0){e=c[e>>2]|0;d=c[214]|0;e=Za[c[(c[e>>2]|0)+8>>2]&1](e)|0;c[f>>2]=d;c[f+4>>2]=a;c[f+8>>2]=e;_d(880,f)}else{c[f>>2]=c[214];c[f+4>>2]=a;_d(928,f)}}function Ce(){var a=0;a=i;i=i+16|0;if(!(Ga(1032,16)|0)){i=a;return}else _d(1104,a)}function De(a){a=a|0;var b=0;b=i;i=i+16|0;Fe(a);if(!(Ja(c[258]|0,0)|0)){i=b;return}else _d(1160,b)}function Ee(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;L=i;do if(a>>>0<245){if(a>>>0<11)p=16;else p=a+11&-8;a=p>>>3;l=c[450]|0;k=l>>>a;if(k&3){e=(k&1^1)+a|0;f=e<<1;b=1840+(f<<2)|0;f=1840+(f+2<<2)|0;g=c[f>>2]|0;h=g+8|0;j=c[h>>2]|0;do if((b|0)!=(j|0)){if(j>>>0<(c[454]|0)>>>0)Na();d=j+12|0;if((c[d>>2]|0)==(g|0)){c[d>>2]=b;c[f>>2]=j;break}else Na()}else c[450]=l&~(1<<e);while(0);K=e<<3;c[g+4>>2]=K|3;K=g+(K|4)|0;c[K>>2]=c[K>>2]|1;K=h;i=L;return K|0}j=c[452]|0;if(p>>>0>j>>>0){if(k){f=2<<a;f=k<<a&(f|0-f);f=(f&0-f)+-1|0;a=f>>>12&16;f=f>>>a;e=f>>>5&8;f=f>>>e;d=f>>>2&4;f=f>>>d;g=f>>>1&2;f=f>>>g;h=f>>>1&1;h=(e|a|d|g|h)+(f>>>h)|0;f=h<<1;g=1840+(f<<2)|0;f=1840+(f+2<<2)|0;d=c[f>>2]|0;a=d+8|0;e=c[a>>2]|0;do if((g|0)!=(e|0)){if(e>>>0<(c[454]|0)>>>0)Na();j=e+12|0;if((c[j>>2]|0)==(d|0)){c[j>>2]=g;c[f>>2]=e;m=c[452]|0;break}else Na()}else{c[450]=l&~(1<<h);m=j}while(0);K=h<<3;b=K-p|0;c[d+4>>2]=p|3;k=d+p|0;c[d+(p|4)>>2]=b|1;c[d+K>>2]=b;if(m){e=c[455]|0;g=m>>>3;j=g<<1;f=1840+(j<<2)|0;h=c[450]|0;g=1<<g;if(h&g){h=1840+(j+2<<2)|0;j=c[h>>2]|0;if(j>>>0<(c[454]|0)>>>0)Na();else{n=h;o=j}}else{c[450]=h|g;n=1840+(j+2<<2)|0;o=f}c[n>>2]=e;c[o+12>>2]=e;c[e+8>>2]=o;c[e+12>>2]=f}c[452]=b;c[455]=k;K=a;i=L;return K|0}k=c[451]|0;if(k){l=(k&0-k)+-1|0;J=l>>>12&16;l=l>>>J;I=l>>>5&8;l=l>>>I;K=l>>>2&4;l=l>>>K;j=l>>>1&2;l=l>>>j;m=l>>>1&1;m=c[2104+((I|J|K|j|m)+(l>>>m)<<2)>>2]|0;l=(c[m+4>>2]&-8)-p|0;j=m;while(1){d=c[j+16>>2]|0;if(!d){d=c[j+20>>2]|0;if(!d)break}j=(c[d+4>>2]&-8)-p|0;K=j>>>0<l>>>0;l=K?j:l;j=d;m=K?d:m}k=c[454]|0;if(m>>>0<k>>>0)Na();b=m+p|0;if(m>>>0>=b>>>0)Na();a=c[m+24>>2]|0;g=c[m+12>>2]|0;do if((g|0)==(m|0)){h=m+20|0;j=c[h>>2]|0;if(!j){h=m+16|0;j=c[h>>2]|0;if(!j){e=0;break}}while(1){g=j+20|0;f=c[g>>2]|0;if(f){j=f;h=g;continue}g=j+16|0;f=c[g>>2]|0;if(!f)break;else{j=f;h=g}}if(h>>>0<k>>>0)Na();else{c[h>>2]=0;e=j;break}}else{f=c[m+8>>2]|0;if(f>>>0<k>>>0)Na();j=f+12|0;if((c[j>>2]|0)!=(m|0))Na();h=g+8|0;if((c[h>>2]|0)==(m|0)){c[j>>2]=g;c[h>>2]=f;e=g;break}else Na()}while(0);do if(a){j=c[m+28>>2]|0;h=2104+(j<<2)|0;if((m|0)==(c[h>>2]|0)){c[h>>2]=e;if(!e){c[451]=c[451]&~(1<<j);break}}else{if(a>>>0<(c[454]|0)>>>0)Na();j=a+16|0;if((c[j>>2]|0)==(m|0))c[j>>2]=e;else c[a+20>>2]=e;if(!e)break}h=c[454]|0;if(e>>>0<h>>>0)Na();c[e+24>>2]=a;j=c[m+16>>2]|0;do if(j)if(j>>>0<h>>>0)Na();else{c[e+16>>2]=j;c[j+24>>2]=e;break}while(0);j=c[m+20>>2]|0;if(j)if(j>>>0<(c[454]|0)>>>0)Na();else{c[e+20>>2]=j;c[j+24>>2]=e;break}}while(0);if(l>>>0<16){K=l+p|0;c[m+4>>2]=K|3;K=m+(K+4)|0;c[K>>2]=c[K>>2]|1}else{c[m+4>>2]=p|3;c[m+(p|4)>>2]=l|1;c[m+(l+p)>>2]=l;d=c[452]|0;if(d){e=c[455]|0;g=d>>>3;j=g<<1;f=1840+(j<<2)|0;h=c[450]|0;g=1<<g;if(h&g){j=1840+(j+2<<2)|0;h=c[j>>2]|0;if(h>>>0<(c[454]|0)>>>0)Na();else{r=j;q=h}}else{c[450]=h|g;r=1840+(j+2<<2)|0;q=f}c[r>>2]=e;c[q+12>>2]=e;c[e+8>>2]=q;c[e+12>>2]=f}c[452]=l;c[455]=b}K=m+8|0;i=L;return K|0}}}else if(a>>>0<=4294967231){a=a+11|0;p=a&-8;m=c[451]|0;if(m){j=0-p|0;a=a>>>8;if(a)if(p>>>0>16777215)l=31;else{q=(a+1048320|0)>>>16&8;r=a<<q;o=(r+520192|0)>>>16&4;r=r<<o;l=(r+245760|0)>>>16&2;l=14-(o|q|l)+(r<<l>>>15)|0;l=p>>>(l+7|0)&1|l<<1}else l=0;h=c[2104+(l<<2)>>2]|0;a:do if(!h){a=0;k=0}else{if((l|0)==31)k=0;else k=25-(l>>>1)|0;f=j;a=0;e=p<<k;k=0;while(1){g=c[h+4>>2]&-8;j=g-p|0;if(j>>>0<f>>>0)if((g|0)==(p|0)){a=h;k=h;break a}else k=h;else j=f;r=c[h+20>>2]|0;h=c[h+(e>>>31<<2)+16>>2]|0;a=(r|0)==0|(r|0)==(h|0)?a:r;if(!h)break;else{f=j;e=e<<1}}}while(0);if((a|0)==0&(k|0)==0){a=2<<l;a=m&(a|0-a);if(!a)break;r=(a&0-a)+-1|0;n=r>>>12&16;r=r>>>n;m=r>>>5&8;r=r>>>m;o=r>>>2&4;r=r>>>o;q=r>>>1&2;r=r>>>q;a=r>>>1&1;a=c[2104+((m|n|o|q|a)+(r>>>a)<<2)>>2]|0}if(!a){n=j;m=k}else while(1){r=(c[a+4>>2]&-8)-p|0;h=r>>>0<j>>>0;j=h?r:j;k=h?a:k;h=c[a+16>>2]|0;if(h){a=h;continue}a=c[a+20>>2]|0;if(!a){n=j;m=k;break}}if((m|0)!=0?n>>>0<((c[452]|0)-p|0)>>>0:0){k=c[454]|0;if(m>>>0<k>>>0)Na();o=m+p|0;if(m>>>0>=o>>>0)Na();a=c[m+24>>2]|0;g=c[m+12>>2]|0;do if((g|0)==(m|0)){h=m+20|0;j=c[h>>2]|0;if(!j){h=m+16|0;j=c[h>>2]|0;if(!j){d=0;break}}while(1){g=j+20|0;f=c[g>>2]|0;if(f){j=f;h=g;continue}g=j+16|0;f=c[g>>2]|0;if(!f)break;else{j=f;h=g}}if(h>>>0<k>>>0)Na();else{c[h>>2]=0;d=j;break}}else{f=c[m+8>>2]|0;if(f>>>0<k>>>0)Na();j=f+12|0;if((c[j>>2]|0)!=(m|0))Na();h=g+8|0;if((c[h>>2]|0)==(m|0)){c[j>>2]=g;c[h>>2]=f;d=g;break}else Na()}while(0);do if(a){j=c[m+28>>2]|0;h=2104+(j<<2)|0;if((m|0)==(c[h>>2]|0)){c[h>>2]=d;if(!d){c[451]=c[451]&~(1<<j);break}}else{if(a>>>0<(c[454]|0)>>>0)Na();j=a+16|0;if((c[j>>2]|0)==(m|0))c[j>>2]=d;else c[a+20>>2]=d;if(!d)break}h=c[454]|0;if(d>>>0<h>>>0)Na();c[d+24>>2]=a;j=c[m+16>>2]|0;do if(j)if(j>>>0<h>>>0)Na();else{c[d+16>>2]=j;c[j+24>>2]=d;break}while(0);j=c[m+20>>2]|0;if(j)if(j>>>0<(c[454]|0)>>>0)Na();else{c[d+20>>2]=j;c[j+24>>2]=d;break}}while(0);b:do if(n>>>0>=16){c[m+4>>2]=p|3;c[m+(p|4)>>2]=n|1;c[m+(n+p)>>2]=n;j=n>>>3;if(n>>>0<256){h=j<<1;f=1840+(h<<2)|0;g=c[450]|0;j=1<<j;do if(!(g&j)){c[450]=g|j;b=1840+(h+2<<2)|0;t=f}else{j=1840+(h+2<<2)|0;h=c[j>>2]|0;if(h>>>0>=(c[454]|0)>>>0){b=j;t=h;break}Na()}while(0);c[b>>2]=o;c[t+12>>2]=o;c[m+(p+8)>>2]=t;c[m+(p+12)>>2]=f;break}d=n>>>8;if(d)if(n>>>0>16777215)f=31;else{J=(d+1048320|0)>>>16&8;K=d<<J;I=(K+520192|0)>>>16&4;K=K<<I;f=(K+245760|0)>>>16&2;f=14-(I|J|f)+(K<<f>>>15)|0;f=n>>>(f+7|0)&1|f<<1}else f=0;j=2104+(f<<2)|0;c[m+(p+28)>>2]=f;c[m+(p+20)>>2]=0;c[m+(p+16)>>2]=0;h=c[451]|0;g=1<<f;if(!(h&g)){c[451]=h|g;c[j>>2]=o;c[m+(p+24)>>2]=j;c[m+(p+12)>>2]=o;c[m+(p+8)>>2]=o;break}j=c[j>>2]|0;if((f|0)==31)d=0;else d=25-(f>>>1)|0;c:do if((c[j+4>>2]&-8|0)!=(n|0)){f=n<<d;while(1){g=j+(f>>>31<<2)+16|0;h=c[g>>2]|0;if(!h)break;if((c[h+4>>2]&-8|0)==(n|0)){v=h;break c}else{f=f<<1;j=h}}if(g>>>0<(c[454]|0)>>>0)Na();else{c[g>>2]=o;c[m+(p+24)>>2]=j;c[m+(p+12)>>2]=o;c[m+(p+8)>>2]=o;break b}}else v=j;while(0);d=v+8|0;b=c[d>>2]|0;K=c[454]|0;if(v>>>0>=K>>>0&b>>>0>=K>>>0){c[b+12>>2]=o;c[d>>2]=o;c[m+(p+8)>>2]=b;c[m+(p+12)>>2]=v;c[m+(p+24)>>2]=0;break}else Na()}else{K=n+p|0;c[m+4>>2]=K|3;K=m+(K+4)|0;c[K>>2]=c[K>>2]|1}while(0);K=m+8|0;i=L;return K|0}}}else p=-1;while(0);k=c[452]|0;if(k>>>0>=p>>>0){b=k-p|0;d=c[455]|0;if(b>>>0>15){c[455]=d+p;c[452]=b;c[d+(p+4)>>2]=b|1;c[d+k>>2]=b;c[d+4>>2]=p|3}else{c[452]=0;c[455]=0;c[d+4>>2]=k|3;K=d+(k+4)|0;c[K>>2]=c[K>>2]|1}K=d+8|0;i=L;return K|0}k=c[453]|0;if(k>>>0>p>>>0){J=k-p|0;c[453]=J;K=c[456]|0;c[456]=K+p;c[K+(p+4)>>2]=J|1;c[K+4>>2]=p|3;K=K+8|0;i=L;return K|0}do if(!(c[568]|0)){k=Ba(30)|0;if(!(k+-1&k)){c[570]=k;c[569]=k;c[571]=-1;c[572]=-1;c[573]=0;c[561]=0;c[568]=(Pa(0)|0)&-16^1431655768;break}else Na()}while(0);l=p+48|0;g=c[570]|0;f=p+47|0;h=g+f|0;g=0-g|0;m=h&g;if(m>>>0<=p>>>0){K=0;i=L;return K|0}a=c[560]|0;if((a|0)!=0?(t=c[558]|0,v=t+m|0,v>>>0<=t>>>0|v>>>0>a>>>0):0){K=0;i=L;return K|0}d:do if(!(c[561]&4)){j=c[456]|0;e:do if(j){a=2248|0;while(1){k=c[a>>2]|0;if(k>>>0<=j>>>0?(s=a+4|0,(k+(c[s>>2]|0)|0)>>>0>j>>>0):0)break;a=c[a+8>>2]|0;if(!a){A=181;break e}}if(a){k=h-(c[453]|0)&g;if(k>>>0<2147483647){j=va(k|0)|0;if((j|0)==((c[a>>2]|0)+(c[s>>2]|0)|0))A=190;else A=191}else k=0}else A=181}else A=181;while(0);do if((A|0)==181){j=va(0)|0;if((j|0)!=(-1|0)){a=j;k=c[569]|0;h=k+-1|0;if(!(h&a))k=m;else k=m-a+(h+a&0-k)|0;a=c[558]|0;h=a+k|0;if(k>>>0>p>>>0&k>>>0<2147483647){v=c[560]|0;if((v|0)!=0?h>>>0<=a>>>0|h>>>0>v>>>0:0){k=0;break}h=va(k|0)|0;if((h|0)==(j|0))A=190;else{j=h;A=191}}else k=0}else k=0}while(0);f:do if((A|0)==190){if((j|0)!=(-1|0)){w=j;s=k;A=201;break d}}else if((A|0)==191){h=0-k|0;do if((j|0)!=(-1|0)&k>>>0<2147483647&l>>>0>k>>>0?(u=c[570]|0,u=f-k+u&0-u,u>>>0<2147483647):0)if((va(u|0)|0)==(-1|0)){va(h|0)|0;k=0;break f}else{k=u+k|0;break}while(0);if((j|0)==(-1|0))k=0;else{w=j;s=k;A=201;break d}}while(0);c[561]=c[561]|4;A=198}else{k=0;A=198}while(0);if((((A|0)==198?m>>>0<2147483647:0)?(w=va(m|0)|0,x=va(0)|0,(w|0)!=(-1|0)&(x|0)!=(-1|0)&w>>>0<x>>>0):0)?(y=x-w|0,z=y>>>0>(p+40|0)>>>0,z):0){s=z?y:k;A=201}if((A|0)==201){j=(c[558]|0)+s|0;c[558]=j;if(j>>>0>(c[559]|0)>>>0)c[559]=j;o=c[456]|0;g:do if(o){f=2248|0;while(1){k=c[f>>2]|0;j=f+4|0;h=c[j>>2]|0;if((w|0)==(k+h|0)){A=213;break}g=c[f+8>>2]|0;if(!g)break;else f=g}if(((A|0)==213?(c[f+12>>2]&8|0)==0:0)?o>>>0>=k>>>0&o>>>0<w>>>0:0){c[j>>2]=h+s;b=(c[453]|0)+s|0;d=o+8|0;if(!(d&7))d=0;else d=0-d&7;K=b-d|0;c[456]=o+d;c[453]=K;c[o+(d+4)>>2]=K|1;c[o+(b+4)>>2]=40;c[457]=c[572];break}k=c[454]|0;if(w>>>0<k>>>0){c[454]=w;k=w}j=w+s|0;g=2248|0;while(1){if((c[g>>2]|0)==(j|0)){A=223;break}h=c[g+8>>2]|0;if(!h)break;else g=h}if((A|0)==223?(c[g+12>>2]&8|0)==0:0){c[g>>2]=w;j=g+4|0;c[j>>2]=(c[j>>2]|0)+s;j=w+8|0;if(!(j&7))r=0;else r=0-j&7;j=w+(s+8)|0;if(!(j&7))l=0;else l=0-j&7;j=w+(l+s)|0;n=r+p|0;q=w+n|0;b=j-(w+r)-p|0;c[w+(r+4)>>2]=p|3;h:do if((j|0)!=(o|0)){if((j|0)==(c[455]|0)){K=(c[452]|0)+b|0;c[452]=K;c[455]=q;c[w+(n+4)>>2]=K|1;c[w+(K+n)>>2]=K;break}d=s+4|0;h=c[w+(d+l)>>2]|0;if((h&3|0)==1){m=h&-8;e=h>>>3;i:do if(h>>>0>=256){a=c[w+((l|24)+s)>>2]|0;g=c[w+(s+12+l)>>2]|0;do if((g|0)==(j|0)){g=l|16;f=w+(d+g)|0;h=c[f>>2]|0;if(!h){g=w+(g+s)|0;h=c[g>>2]|0;if(!h){H=0;break}}else g=f;while(1){f=h+20|0;e=c[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=c[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<k>>>0)Na();else{c[g>>2]=0;H=h;break}}else{f=c[w+((l|8)+s)>>2]|0;if(f>>>0<k>>>0)Na();k=f+12|0;if((c[k>>2]|0)!=(j|0))Na();h=g+8|0;if((c[h>>2]|0)==(j|0)){c[k>>2]=g;c[h>>2]=f;H=g;break}else Na()}while(0);if(!a)break;k=c[w+(s+28+l)>>2]|0;h=2104+(k<<2)|0;do if((j|0)!=(c[h>>2]|0)){if(a>>>0<(c[454]|0)>>>0)Na();k=a+16|0;if((c[k>>2]|0)==(j|0))c[k>>2]=H;else c[a+20>>2]=H;if(!H)break i}else{c[h>>2]=H;if(H)break;c[451]=c[451]&~(1<<k);break i}while(0);h=c[454]|0;if(H>>>0<h>>>0)Na();c[H+24>>2]=a;k=l|16;j=c[w+(k+s)>>2]|0;do if(j)if(j>>>0<h>>>0)Na();else{c[H+16>>2]=j;c[j+24>>2]=H;break}while(0);j=c[w+(d+k)>>2]|0;if(!j)break;if(j>>>0<(c[454]|0)>>>0)Na();else{c[H+20>>2]=j;c[j+24>>2]=H;break}}else{g=c[w+((l|8)+s)>>2]|0;f=c[w+(s+12+l)>>2]|0;h=1840+(e<<1<<2)|0;do if((g|0)!=(h|0)){if(g>>>0<k>>>0)Na();if((c[g+12>>2]|0)==(j|0))break;Na()}while(0);if((f|0)==(g|0)){c[450]=c[450]&~(1<<e);break}do if((f|0)==(h|0))D=f+8|0;else{if(f>>>0<k>>>0)Na();k=f+8|0;if((c[k>>2]|0)==(j|0)){D=k;break}Na()}while(0);c[g+12>>2]=f;c[D>>2]=g}while(0);j=w+((m|l)+s)|0;k=m+b|0}else k=b;j=j+4|0;c[j>>2]=c[j>>2]&-2;c[w+(n+4)>>2]=k|1;c[w+(k+n)>>2]=k;j=k>>>3;if(k>>>0<256){h=j<<1;f=1840+(h<<2)|0;g=c[450]|0;j=1<<j;do if(!(g&j)){c[450]=g|j;I=1840+(h+2<<2)|0;J=f}else{j=1840+(h+2<<2)|0;h=c[j>>2]|0;if(h>>>0>=(c[454]|0)>>>0){I=j;J=h;break}Na()}while(0);c[I>>2]=q;c[J+12>>2]=q;c[w+(n+8)>>2]=J;c[w+(n+12)>>2]=f;break}d=k>>>8;do if(!d)f=0;else{if(k>>>0>16777215){f=31;break}I=(d+1048320|0)>>>16&8;J=d<<I;H=(J+520192|0)>>>16&4;J=J<<H;f=(J+245760|0)>>>16&2;f=14-(H|I|f)+(J<<f>>>15)|0;f=k>>>(f+7|0)&1|f<<1}while(0);j=2104+(f<<2)|0;c[w+(n+28)>>2]=f;c[w+(n+20)>>2]=0;c[w+(n+16)>>2]=0;h=c[451]|0;g=1<<f;if(!(h&g)){c[451]=h|g;c[j>>2]=q;c[w+(n+24)>>2]=j;c[w+(n+12)>>2]=q;c[w+(n+8)>>2]=q;break}h=c[j>>2]|0;if((f|0)==31)j=0;else j=25-(f>>>1)|0;j:do if((c[h+4>>2]&-8|0)!=(k|0)){f=k<<j;while(1){g=h+(f>>>31<<2)+16|0;j=c[g>>2]|0;if(!j)break;if((c[j+4>>2]&-8|0)==(k|0)){K=j;break j}else{f=f<<1;h=j}}if(g>>>0<(c[454]|0)>>>0)Na();else{c[g>>2]=q;c[w+(n+24)>>2]=h;c[w+(n+12)>>2]=q;c[w+(n+8)>>2]=q;break h}}else K=h;while(0);d=K+8|0;b=c[d>>2]|0;J=c[454]|0;if(K>>>0>=J>>>0&b>>>0>=J>>>0){c[b+12>>2]=q;c[d>>2]=q;c[w+(n+8)>>2]=b;c[w+(n+12)>>2]=K;c[w+(n+24)>>2]=0;break}else Na()}else{K=(c[453]|0)+b|0;c[453]=K;c[456]=q;c[w+(n+4)>>2]=K|1}while(0);K=w+(r|8)|0;i=L;return K|0}j=2248|0;while(1){h=c[j>>2]|0;if(h>>>0<=o>>>0?(B=c[j+4>>2]|0,C=h+B|0,C>>>0>o>>>0):0)break;j=c[j+8>>2]|0}j=h+(B+-39)|0;if(!(j&7))j=0;else j=0-j&7;g=h+(B+-47+j)|0;g=g>>>0<(o+16|0)>>>0?o:g;h=g+8|0;j=w+8|0;if(!(j&7))j=0;else j=0-j&7;K=s+-40-j|0;c[456]=w+j;c[453]=K;c[w+(j+4)>>2]=K|1;c[w+(s+-36)>>2]=40;c[457]=c[572];c[g+4>>2]=27;c[h+0>>2]=c[562];c[h+4>>2]=c[563];c[h+8>>2]=c[564];c[h+12>>2]=c[565];c[562]=w;c[563]=s;c[565]=0;c[564]=h;j=g+28|0;c[j>>2]=7;if((g+32|0)>>>0<C>>>0)do{K=j;j=j+4|0;c[j>>2]=7}while((K+8|0)>>>0<C>>>0);if((g|0)!=(o|0)){k=g-o|0;j=o+(k+4)|0;c[j>>2]=c[j>>2]&-2;c[o+4>>2]=k|1;c[o+k>>2]=k;j=k>>>3;if(k>>>0<256){h=j<<1;f=1840+(h<<2)|0;g=c[450]|0;j=1<<j;do if(!(g&j)){c[450]=g|j;E=1840+(h+2<<2)|0;F=f}else{d=1840+(h+2<<2)|0;b=c[d>>2]|0;if(b>>>0>=(c[454]|0)>>>0){E=d;F=b;break}Na()}while(0);c[E>>2]=o;c[F+12>>2]=o;c[o+8>>2]=F;c[o+12>>2]=f;break}d=k>>>8;if(d)if(k>>>0>16777215)j=31;else{J=(d+1048320|0)>>>16&8;K=d<<J;I=(K+520192|0)>>>16&4;K=K<<I;j=(K+245760|0)>>>16&2;j=14-(I|J|j)+(K<<j>>>15)|0;j=k>>>(j+7|0)&1|j<<1}else j=0;d=2104+(j<<2)|0;c[o+28>>2]=j;c[o+20>>2]=0;c[o+16>>2]=0;b=c[451]|0;e=1<<j;if(!(b&e)){c[451]=b|e;c[d>>2]=o;c[o+24>>2]=d;c[o+12>>2]=o;c[o+8>>2]=o;break}e=c[d>>2]|0;if((j|0)==31)d=0;else d=25-(j>>>1)|0;k:do if((c[e+4>>2]&-8|0)!=(k|0)){j=k<<d;while(1){b=e+(j>>>31<<2)+16|0;d=c[b>>2]|0;if(!d)break;if((c[d+4>>2]&-8|0)==(k|0)){G=d;break k}else{j=j<<1;e=d}}if(b>>>0<(c[454]|0)>>>0)Na();else{c[b>>2]=o;c[o+24>>2]=e;c[o+12>>2]=o;c[o+8>>2]=o;break g}}else G=e;while(0);d=G+8|0;b=c[d>>2]|0;K=c[454]|0;if(G>>>0>=K>>>0&b>>>0>=K>>>0){c[b+12>>2]=o;c[d>>2]=o;c[o+8>>2]=b;c[o+12>>2]=G;c[o+24>>2]=0;break}else Na()}}else{K=c[454]|0;if((K|0)==0|w>>>0<K>>>0)c[454]=w;c[562]=w;c[563]=s;c[565]=0;c[459]=c[568];c[458]=-1;d=0;do{K=d<<1;J=1840+(K<<2)|0;c[1840+(K+3<<2)>>2]=J;c[1840+(K+2<<2)>>2]=J;d=d+1|0}while((d|0)!=32);d=w+8|0;if(!(d&7))d=0;else d=0-d&7;K=s+-40-d|0;c[456]=w+d;c[453]=K;c[w+(d+4)>>2]=K|1;c[w+(s+-36)>>2]=40;c[457]=c[572]}while(0);b=c[453]|0;if(b>>>0>p>>>0){J=b-p|0;c[453]=J;K=c[456]|0;c[456]=K+p;c[K+(p+4)>>2]=J|1;c[K+4>>2]=p|3;K=K+8|0;i=L;return K|0}}c[(Ia()|0)>>2]=12;K=0;i=L;return K|0}function Fe(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;if(!a){i=w;return}g=a+-8|0;h=c[454]|0;if(g>>>0<h>>>0)Na();f=c[a+-4>>2]|0;e=f&3;if((e|0)==1)Na();p=f&-8;r=a+(p+-8)|0;do if(!(f&1)){g=c[g>>2]|0;if(!e){i=w;return}j=-8-g|0;m=a+j|0;n=g+p|0;if(m>>>0<h>>>0)Na();if((m|0)==(c[455]|0)){g=a+(p+-4)|0;f=c[g>>2]|0;if((f&3|0)!=3){v=m;l=n;break}c[452]=n;c[g>>2]=f&-2;c[a+(j+4)>>2]=n|1;c[r>>2]=n;i=w;return}d=g>>>3;if(g>>>0<256){e=c[a+(j+8)>>2]|0;f=c[a+(j+12)>>2]|0;g=1840+(d<<1<<2)|0;if((e|0)!=(g|0)){if(e>>>0<h>>>0)Na();if((c[e+12>>2]|0)!=(m|0))Na()}if((f|0)==(e|0)){c[450]=c[450]&~(1<<d);v=m;l=n;break}if((f|0)!=(g|0)){if(f>>>0<h>>>0)Na();g=f+8|0;if((c[g>>2]|0)==(m|0))b=g;else Na()}else b=f+8|0;c[e+12>>2]=f;c[b>>2]=e;v=m;l=n;break}b=c[a+(j+24)>>2]|0;e=c[a+(j+12)>>2]|0;do if((e|0)==(m|0)){f=a+(j+20)|0;g=c[f>>2]|0;if(!g){f=a+(j+16)|0;g=c[f>>2]|0;if(!g){k=0;break}}while(1){e=g+20|0;d=c[e>>2]|0;if(d){g=d;f=e;continue}e=g+16|0;d=c[e>>2]|0;if(!d)break;else{g=d;f=e}}if(f>>>0<h>>>0)Na();else{c[f>>2]=0;k=g;break}}else{d=c[a+(j+8)>>2]|0;if(d>>>0<h>>>0)Na();g=d+12|0;if((c[g>>2]|0)!=(m|0))Na();f=e+8|0;if((c[f>>2]|0)==(m|0)){c[g>>2]=e;c[f>>2]=d;k=e;break}else Na()}while(0);if(b){g=c[a+(j+28)>>2]|0;f=2104+(g<<2)|0;if((m|0)==(c[f>>2]|0)){c[f>>2]=k;if(!k){c[451]=c[451]&~(1<<g);v=m;l=n;break}}else{if(b>>>0<(c[454]|0)>>>0)Na();g=b+16|0;if((c[g>>2]|0)==(m|0))c[g>>2]=k;else c[b+20>>2]=k;if(!k){v=m;l=n;break}}f=c[454]|0;if(k>>>0<f>>>0)Na();c[k+24>>2]=b;g=c[a+(j+16)>>2]|0;do if(g)if(g>>>0<f>>>0)Na();else{c[k+16>>2]=g;c[g+24>>2]=k;break}while(0);g=c[a+(j+20)>>2]|0;if(g)if(g>>>0<(c[454]|0)>>>0)Na();else{c[k+20>>2]=g;c[g+24>>2]=k;v=m;l=n;break}else{v=m;l=n}}else{v=m;l=n}}else{v=g;l=p}while(0);if(v>>>0>=r>>>0)Na();g=a+(p+-4)|0;f=c[g>>2]|0;if(!(f&1))Na();if(!(f&2)){if((r|0)==(c[456]|0)){u=(c[453]|0)+l|0;c[453]=u;c[456]=v;c[v+4>>2]=u|1;if((v|0)!=(c[455]|0)){i=w;return}c[455]=0;c[452]=0;i=w;return}if((r|0)==(c[455]|0)){u=(c[452]|0)+l|0;c[452]=u;c[455]=v;c[v+4>>2]=u|1;c[v+u>>2]=u;i=w;return}h=(f&-8)+l|0;b=f>>>3;do if(f>>>0>=256){b=c[a+(p+16)>>2]|0;g=c[a+(p|4)>>2]|0;do if((g|0)==(r|0)){f=a+(p+12)|0;g=c[f>>2]|0;if(!g){f=a+(p+8)|0;g=c[f>>2]|0;if(!g){q=0;break}}while(1){e=g+20|0;d=c[e>>2]|0;if(d){g=d;f=e;continue}e=g+16|0;d=c[e>>2]|0;if(!d)break;else{g=d;f=e}}if(f>>>0<(c[454]|0)>>>0)Na();else{c[f>>2]=0;q=g;break}}else{f=c[a+p>>2]|0;if(f>>>0<(c[454]|0)>>>0)Na();e=f+12|0;if((c[e>>2]|0)!=(r|0))Na();d=g+8|0;if((c[d>>2]|0)==(r|0)){c[e>>2]=g;c[d>>2]=f;q=g;break}else Na()}while(0);if(b){g=c[a+(p+20)>>2]|0;f=2104+(g<<2)|0;if((r|0)==(c[f>>2]|0)){c[f>>2]=q;if(!q){c[451]=c[451]&~(1<<g);break}}else{if(b>>>0<(c[454]|0)>>>0)Na();g=b+16|0;if((c[g>>2]|0)==(r|0))c[g>>2]=q;else c[b+20>>2]=q;if(!q)break}g=c[454]|0;if(q>>>0<g>>>0)Na();c[q+24>>2]=b;f=c[a+(p+8)>>2]|0;do if(f)if(f>>>0<g>>>0)Na();else{c[q+16>>2]=f;c[f+24>>2]=q;break}while(0);d=c[a+(p+12)>>2]|0;if(d)if(d>>>0<(c[454]|0)>>>0)Na();else{c[q+20>>2]=d;c[d+24>>2]=q;break}}}else{d=c[a+p>>2]|0;e=c[a+(p|4)>>2]|0;g=1840+(b<<1<<2)|0;if((d|0)!=(g|0)){if(d>>>0<(c[454]|0)>>>0)Na();if((c[d+12>>2]|0)!=(r|0))Na()}if((e|0)==(d|0)){c[450]=c[450]&~(1<<b);break}if((e|0)!=(g|0)){if(e>>>0<(c[454]|0)>>>0)Na();f=e+8|0;if((c[f>>2]|0)==(r|0))o=f;else Na()}else o=e+8|0;c[d+12>>2]=e;c[o>>2]=d}while(0);c[v+4>>2]=h|1;c[v+h>>2]=h;if((v|0)==(c[455]|0)){c[452]=h;i=w;return}else g=h}else{c[g>>2]=f&-2;c[v+4>>2]=l|1;c[v+l>>2]=l;g=l}f=g>>>3;if(g>>>0<256){e=f<<1;g=1840+(e<<2)|0;b=c[450]|0;d=1<<f;if(b&d){d=1840+(e+2<<2)|0;b=c[d>>2]|0;if(b>>>0<(c[454]|0)>>>0)Na();else{s=d;t=b}}else{c[450]=b|d;s=1840+(e+2<<2)|0;t=g}c[s>>2]=v;c[t+12>>2]=v;c[v+8>>2]=t;c[v+12>>2]=g;i=w;return}b=g>>>8;if(b)if(g>>>0>16777215)f=31;else{s=(b+1048320|0)>>>16&8;t=b<<s;r=(t+520192|0)>>>16&4;t=t<<r;f=(t+245760|0)>>>16&2;f=14-(r|s|f)+(t<<f>>>15)|0;f=g>>>(f+7|0)&1|f<<1}else f=0;d=2104+(f<<2)|0;c[v+28>>2]=f;c[v+20>>2]=0;c[v+16>>2]=0;b=c[451]|0;e=1<<f;a:do if(b&e){e=c[d>>2]|0;if((f|0)==31)d=0;else d=25-(f>>>1)|0;b:do if((c[e+4>>2]&-8|0)!=(g|0)){f=g<<d;while(1){b=e+(f>>>31<<2)+16|0;d=c[b>>2]|0;if(!d)break;if((c[d+4>>2]&-8|0)==(g|0)){u=d;break b}else{f=f<<1;e=d}}if(b>>>0<(c[454]|0)>>>0)Na();else{c[b>>2]=v;c[v+24>>2]=e;c[v+12>>2]=v;c[v+8>>2]=v;break a}}else u=e;while(0);b=u+8|0;d=c[b>>2]|0;t=c[454]|0;if(u>>>0>=t>>>0&d>>>0>=t>>>0){c[d+12>>2]=v;c[b>>2]=v;c[v+8>>2]=d;c[v+12>>2]=u;c[v+24>>2]=0;break}else Na()}else{c[451]=b|e;c[d>>2]=v;c[v+24>>2]=d;c[v+12>>2]=v;c[v+8>>2]=v}while(0);v=(c[458]|0)+-1|0;c[458]=v;if(!v)b=2256|0;else{i=w;return}while(1){b=c[b>>2]|0;if(!b)break;else b=b+8|0}c[458]=-1;i=w;return}function Ge(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=i;do if(a){if(b>>>0>4294967231){c[(Ia()|0)>>2]=12;d=0;break}if(b>>>0<11)d=16;else d=b+11&-8;d=Re(a+-8|0,d)|0;if(d){d=d+8|0;break}d=Ee(b)|0;if(!d)d=0;else{f=c[a+-4>>2]|0;f=(f&-8)-((f&3|0)==0?8:4)|0;_e(d|0,a|0,(f>>>0<b>>>0?f:b)|0)|0;Fe(a)}}else d=Ee(b)|0;while(0);i=e;return d|0}function He(a,b){a=+a;b=b|0;var d=0,e=0,f=0,g=0;g=i;h[k>>3]=a;d=c[k>>2]|0;e=c[k+4>>2]|0;f=Xe(d|0,e|0,52)|0;f=f&2047;if(!f){if(a!=0.0){a=+He(a*18446744073709551616.0,b);d=(c[b>>2]|0)+-64|0}else d=0;c[b>>2]=d;i=g;return +a}else if((f|0)==2047){i=g;return +a}else{c[b>>2]=f+-1022;c[k>>2]=d;c[k+4>>2]=e&-2146435073|1071644672;a=+h[k>>3];i=g;return +a}return 0.0}function Ie(a,b){a=+a;b=b|0;var c=0;c=i;a=+He(a,b);i=c;return +a}function Je(a,b){a=a|0;b=b|0;var c=0;c=i;if(!a)a=0;else a=Ke(a,b,0)|0;i=c;return a|0}function Ke(b,d,e){b=b|0;d=d|0;e=e|0;e=i;if(!b){d=1;i=e;return d|0}if(d>>>0<128){a[b>>0]=d;d=1;i=e;return d|0}if(d>>>0<2048){a[b>>0]=d>>>6|192;a[b+1>>0]=d&63|128;d=2;i=e;return d|0}if(d>>>0<55296|(d&-8192|0)==57344){a[b>>0]=d>>>12|224;a[b+1>>0]=d>>>6&63|128;a[b+2>>0]=d&63|128;d=3;i=e;return d|0}if((d+-65536|0)>>>0<1048576){a[b>>0]=d>>>18|240;a[b+1>>0]=d>>>12&63|128;a[b+2>>0]=d>>>6&63|128;a[b+3>>0]=d&63|128;d=4;i=e;return d|0}else{c[(Ia()|0)>>2]=84;d=-1;i=e;return d|0}return 0}function Le(b){b=b|0;var d=0,e=0,f=0;e=i;d=b+74|0;f=a[d>>0]|0;a[d>>0]=f+255|f;d=c[b>>2]|0;if(!(d&8)){c[b+8>>2]=0;c[b+4>>2]=0;f=c[b+44>>2]|0;c[b+28>>2]=f;c[b+20>>2]=f;c[b+16>>2]=f+(c[b+48>>2]|0);f=0;i=e;return f|0}else{c[b>>2]=d|32;f=-1;i=e;return f|0}return 0}function Me(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;f=e+16|0;g=c[f>>2]|0;do if(!g)if(!(Le(e)|0)){g=c[f>>2]|0;break}else{j=0;i=k;return j|0}while(0);j=e+20|0;f=c[j>>2]|0;if((g-f|0)>>>0<d>>>0){j=Va[c[e+36>>2]&3](e,b,d)|0;i=k;return j|0}a:do if((a[e+75>>0]|0)>-1){g=d;while(1){if(!g){h=d;g=0;break a}h=g+-1|0;if((a[b+h>>0]|0)==10)break;else g=h}if((Va[c[e+36>>2]&3](e,b,g)|0)>>>0<g>>>0){j=g;i=k;return j|0}else{h=d-g|0;b=b+g|0;f=c[j>>2]|0;break}}else{h=d;g=0}while(0);_e(f|0,b|0,h|0)|0;c[j>>2]=(c[j>>2]|0)+h;j=g+h|0;i=k;return j|0}function Ne(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;i=i+224|0;l=p+120|0;o=p+80|0;n=p;m=p+136|0;e=o+0|0;f=e+40|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));c[l>>2]=c[d>>2];if((Te(0,b,l,n,o)|0)<0){a=-1;i=p;return a|0}e=a+48|0;if(!(c[e>>2]|0)){g=a+44|0;h=c[g>>2]|0;c[g>>2]=m;j=a+28|0;c[j>>2]=m;k=a+20|0;c[k>>2]=m;c[e>>2]=80;f=a+16|0;c[f>>2]=m+80;d=Te(a,b,l,n,o)|0;if(h){Va[c[a+36>>2]&3](a,0,0)|0;d=(c[k>>2]|0)==0?-1:d;c[g>>2]=h;c[e>>2]=0;c[f>>2]=0;c[j>>2]=0;c[k>>2]=0}}else d=Te(a,b,l,n,o)|0;a=d;i=p;return a|0}function Oe(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+128|0;g=m+112|0;l=m;h=l+0|0;j=2864|0;k=h+112|0;do{c[h>>2]=c[j>>2];h=h+4|0;j=j+4|0}while((h|0)<(k|0));if((d+-1|0)>>>0>2147483646)if(!d)d=1;else{c[(Ia()|0)>>2]=75;e=-1;i=m;return e|0}else g=b;k=-2-g|0;k=d>>>0>k>>>0?k:d;c[l+48>>2]=k;b=l+20|0;c[b>>2]=g;c[l+44>>2]=g;d=g+k|0;g=l+16|0;c[g>>2]=d;c[l+28>>2]=d;d=Ne(l,e,f)|0;if(!k){e=d;i=m;return e|0}e=c[b>>2]|0;a[e+(((e|0)==(c[g>>2]|0))<<31>>31)>>0]=0;e=d;i=m;return e|0}function Pe(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;j=i;h=d&255;f=(e|0)!=0;a:do if((b&3|0)!=0&f){g=d&255;while(1){if((a[b>>0]|0)==g<<24>>24){g=6;break a}b=b+1|0;e=e+-1|0;f=(e|0)!=0;if(!((b&3|0)!=0&f)){g=5;break}}}else g=5;while(0);if((g|0)==5)if(f)g=6;else e=0;b:do if((g|0)==6){g=d&255;if((a[b>>0]|0)!=g<<24>>24){f=ba(h,16843009)|0;c:do if(e>>>0>3)do{h=c[b>>2]^f;if((h&-2139062144^-2139062144)&h+-16843009)break c;b=b+4|0;e=e+-4|0}while(e>>>0>3);while(0);if(!e)e=0;else while(1){if((a[b>>0]|0)==g<<24>>24)break b;b=b+1|0;e=e+-1|0;if(!e){e=0;break}}}}while(0);i=j;return ((e|0)!=0?b:0)|0}function Qe(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=a+20|0;g=c[f>>2]|0;a=(c[a+16>>2]|0)-g|0;a=a>>>0>d>>>0?d:a;_e(g|0,b|0,a|0)|0;c[f>>2]=(c[f>>2]|0)+a;i=e;return d|0}function Re(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;p=a+4|0;q=c[p>>2]|0;k=q&-8;m=a+k|0;j=c[454]|0;e=q&3;if(!((e|0)!=1&a>>>0>=j>>>0&a>>>0<m>>>0))Na();d=a+(k|4)|0;g=c[d>>2]|0;if(!(g&1))Na();if(!e){if(b>>>0<256){a=0;i=r;return a|0}if(k>>>0>=(b+4|0)>>>0?(k-b|0)>>>0<=c[570]<<1>>>0:0){i=r;return a|0}a=0;i=r;return a|0}if(k>>>0>=b>>>0){e=k-b|0;if(e>>>0<=15){i=r;return a|0}c[p>>2]=q&1|b|2;c[a+(b+4)>>2]=e|3;c[d>>2]=c[d>>2]|1;Se(a+b|0,e);i=r;return a|0}if((m|0)==(c[456]|0)){e=(c[453]|0)+k|0;if(e>>>0<=b>>>0){a=0;i=r;return a|0}o=e-b|0;c[p>>2]=q&1|b|2;c[a+(b+4)>>2]=o|1;c[456]=a+b;c[453]=o;i=r;return a|0}if((m|0)==(c[455]|0)){e=(c[452]|0)+k|0;if(e>>>0<b>>>0){a=0;i=r;return a|0}d=e-b|0;if(d>>>0>15){c[p>>2]=q&1|b|2;c[a+(b+4)>>2]=d|1;c[a+e>>2]=d;e=a+(e+4)|0;c[e>>2]=c[e>>2]&-2;e=a+b|0}else{c[p>>2]=q&1|e|2;e=a+(e+4)|0;c[e>>2]=c[e>>2]|1;e=0;d=0}c[452]=d;c[455]=e;i=r;return a|0}if(g&2){a=0;i=r;return a|0}n=(g&-8)+k|0;if(n>>>0<b>>>0){a=0;i=r;return a|0}o=n-b|0;f=g>>>3;do if(g>>>0>=256){h=c[a+(k+24)>>2]|0;g=c[a+(k+12)>>2]|0;do if((g|0)==(m|0)){d=a+(k+20)|0;e=c[d>>2]|0;if(!e){d=a+(k+16)|0;e=c[d>>2]|0;if(!e){l=0;break}}while(1){f=e+20|0;g=c[f>>2]|0;if(g){e=g;d=f;continue}g=e+16|0;f=c[g>>2]|0;if(!f)break;else{e=f;d=g}}if(d>>>0<j>>>0)Na();else{c[d>>2]=0;l=e;break}}else{f=c[a+(k+8)>>2]|0;if(f>>>0<j>>>0)Na();e=f+12|0;if((c[e>>2]|0)!=(m|0))Na();d=g+8|0;if((c[d>>2]|0)==(m|0)){c[e>>2]=g;c[d>>2]=f;l=g;break}else Na()}while(0);if(h){e=c[a+(k+28)>>2]|0;d=2104+(e<<2)|0;if((m|0)==(c[d>>2]|0)){c[d>>2]=l;if(!l){c[451]=c[451]&~(1<<e);break}}else{if(h>>>0<(c[454]|0)>>>0)Na();e=h+16|0;if((c[e>>2]|0)==(m|0))c[e>>2]=l;else c[h+20>>2]=l;if(!l)break}d=c[454]|0;if(l>>>0<d>>>0)Na();c[l+24>>2]=h;e=c[a+(k+16)>>2]|0;do if(e)if(e>>>0<d>>>0)Na();else{c[l+16>>2]=e;c[e+24>>2]=l;break}while(0);e=c[a+(k+20)>>2]|0;if(e)if(e>>>0<(c[454]|0)>>>0)Na();else{c[l+20>>2]=e;c[e+24>>2]=l;break}}}else{g=c[a+(k+8)>>2]|0;d=c[a+(k+12)>>2]|0;e=1840+(f<<1<<2)|0;if((g|0)!=(e|0)){if(g>>>0<j>>>0)Na();if((c[g+12>>2]|0)!=(m|0))Na()}if((d|0)==(g|0)){c[450]=c[450]&~(1<<f);break}if((d|0)!=(e|0)){if(d>>>0<j>>>0)Na();e=d+8|0;if((c[e>>2]|0)==(m|0))h=e;else Na()}else h=d+8|0;c[g+12>>2]=d;c[h>>2]=g}while(0);if(o>>>0<16){c[p>>2]=n|q&1|2;b=a+(n|4)|0;c[b>>2]=c[b>>2]|1;i=r;return a|0}else{c[p>>2]=q&1|b|2;c[a+(b+4)>>2]=o|3;q=a+(n|4)|0;c[q>>2]=c[q>>2]|1;Se(a+b|0,o);i=r;return a|0}return 0}function Se(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;r=a+b|0;h=c[a+4>>2]|0;do if(!(h&1)){k=c[a>>2]|0;if(!(h&3)){i=v;return}o=a+(0-k)|0;n=k+b|0;j=c[454]|0;if(o>>>0<j>>>0)Na();if((o|0)==(c[455]|0)){g=a+(b+4)|0;h=c[g>>2]|0;if((h&3|0)!=3){u=o;m=n;break}c[452]=n;c[g>>2]=h&-2;c[a+(4-k)>>2]=n|1;c[r>>2]=n;i=v;return}e=k>>>3;if(k>>>0<256){f=c[a+(8-k)>>2]|0;g=c[a+(12-k)>>2]|0;h=1840+(e<<1<<2)|0;if((f|0)!=(h|0)){if(f>>>0<j>>>0)Na();if((c[f+12>>2]|0)!=(o|0))Na()}if((g|0)==(f|0)){c[450]=c[450]&~(1<<e);u=o;m=n;break}if((g|0)!=(h|0)){if(g>>>0<j>>>0)Na();h=g+8|0;if((c[h>>2]|0)==(o|0))d=h;else Na()}else d=g+8|0;c[f+12>>2]=g;c[d>>2]=f;u=o;m=n;break}d=c[a+(24-k)>>2]|0;f=c[a+(12-k)>>2]|0;do if((f|0)==(o|0)){g=16-k|0;f=a+(g+4)|0;h=c[f>>2]|0;if(!h){g=a+g|0;h=c[g>>2]|0;if(!h){l=0;break}}else g=f;while(1){f=h+20|0;e=c[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=c[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<j>>>0)Na();else{c[g>>2]=0;l=h;break}}else{e=c[a+(8-k)>>2]|0;if(e>>>0<j>>>0)Na();h=e+12|0;if((c[h>>2]|0)!=(o|0))Na();g=f+8|0;if((c[g>>2]|0)==(o|0)){c[h>>2]=f;c[g>>2]=e;l=f;break}else Na()}while(0);if(d){h=c[a+(28-k)>>2]|0;g=2104+(h<<2)|0;if((o|0)==(c[g>>2]|0)){c[g>>2]=l;if(!l){c[451]=c[451]&~(1<<h);u=o;m=n;break}}else{if(d>>>0<(c[454]|0)>>>0)Na();h=d+16|0;if((c[h>>2]|0)==(o|0))c[h>>2]=l;else c[d+20>>2]=l;if(!l){u=o;m=n;break}}f=c[454]|0;if(l>>>0<f>>>0)Na();c[l+24>>2]=d;h=16-k|0;g=c[a+h>>2]|0;do if(g)if(g>>>0<f>>>0)Na();else{c[l+16>>2]=g;c[g+24>>2]=l;break}while(0);h=c[a+(h+4)>>2]|0;if(h)if(h>>>0<(c[454]|0)>>>0)Na();else{c[l+20>>2]=h;c[h+24>>2]=l;u=o;m=n;break}else{u=o;m=n}}else{u=o;m=n}}else{u=a;m=b}while(0);j=c[454]|0;if(r>>>0<j>>>0)Na();h=a+(b+4)|0;g=c[h>>2]|0;if(!(g&2)){if((r|0)==(c[456]|0)){t=(c[453]|0)+m|0;c[453]=t;c[456]=u;c[u+4>>2]=t|1;if((u|0)!=(c[455]|0)){i=v;return}c[455]=0;c[452]=0;i=v;return}if((r|0)==(c[455]|0)){t=(c[452]|0)+m|0;c[452]=t;c[455]=u;c[u+4>>2]=t|1;c[u+t>>2]=t;i=v;return}k=(g&-8)+m|0;d=g>>>3;do if(g>>>0>=256){d=c[a+(b+24)>>2]|0;f=c[a+(b+12)>>2]|0;do if((f|0)==(r|0)){g=a+(b+20)|0;h=c[g>>2]|0;if(!h){g=a+(b+16)|0;h=c[g>>2]|0;if(!h){q=0;break}}while(1){f=h+20|0;e=c[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=c[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<j>>>0)Na();else{c[g>>2]=0;q=h;break}}else{e=c[a+(b+8)>>2]|0;if(e>>>0<j>>>0)Na();h=e+12|0;if((c[h>>2]|0)!=(r|0))Na();g=f+8|0;if((c[g>>2]|0)==(r|0)){c[h>>2]=f;c[g>>2]=e;q=f;break}else Na()}while(0);if(d){h=c[a+(b+28)>>2]|0;g=2104+(h<<2)|0;if((r|0)==(c[g>>2]|0)){c[g>>2]=q;if(!q){c[451]=c[451]&~(1<<h);break}}else{if(d>>>0<(c[454]|0)>>>0)Na();g=d+16|0;if((c[g>>2]|0)==(r|0))c[g>>2]=q;else c[d+20>>2]=q;if(!q)break}f=c[454]|0;if(q>>>0<f>>>0)Na();c[q+24>>2]=d;g=c[a+(b+16)>>2]|0;do if(g)if(g>>>0<f>>>0)Na();else{c[q+16>>2]=g;c[g+24>>2]=q;break}while(0);f=c[a+(b+20)>>2]|0;if(f)if(f>>>0<(c[454]|0)>>>0)Na();else{c[q+20>>2]=f;c[f+24>>2]=q;break}}}else{e=c[a+(b+8)>>2]|0;f=c[a+(b+12)>>2]|0;h=1840+(d<<1<<2)|0;if((e|0)!=(h|0)){if(e>>>0<j>>>0)Na();if((c[e+12>>2]|0)!=(r|0))Na()}if((f|0)==(e|0)){c[450]=c[450]&~(1<<d);break}if((f|0)!=(h|0)){if(f>>>0<j>>>0)Na();g=f+8|0;if((c[g>>2]|0)==(r|0))p=g;else Na()}else p=f+8|0;c[e+12>>2]=f;c[p>>2]=e}while(0);c[u+4>>2]=k|1;c[u+k>>2]=k;if((u|0)==(c[455]|0)){c[452]=k;i=v;return}else h=k}else{c[h>>2]=g&-2;c[u+4>>2]=m|1;c[u+m>>2]=m;h=m}g=h>>>3;if(h>>>0<256){e=g<<1;h=1840+(e<<2)|0;d=c[450]|0;f=1<<g;if(d&f){f=1840+(e+2<<2)|0;e=c[f>>2]|0;if(e>>>0<(c[454]|0)>>>0)Na();else{s=f;t=e}}else{c[450]=d|f;s=1840+(e+2<<2)|0;t=h}c[s>>2]=u;c[t+12>>2]=u;c[u+8>>2]=t;c[u+12>>2]=h;i=v;return}d=h>>>8;if(d)if(h>>>0>16777215)g=31;else{s=(d+1048320|0)>>>16&8;t=d<<s;r=(t+520192|0)>>>16&4;t=t<<r;g=(t+245760|0)>>>16&2;g=14-(r|s|g)+(t<<g>>>15)|0;g=h>>>(g+7|0)&1|g<<1}else g=0;f=2104+(g<<2)|0;c[u+28>>2]=g;c[u+20>>2]=0;c[u+16>>2]=0;e=c[451]|0;d=1<<g;if(!(e&d)){c[451]=e|d;c[f>>2]=u;c[u+24>>2]=f;c[u+12>>2]=u;c[u+8>>2]=u;i=v;return}f=c[f>>2]|0;if((g|0)==31)d=0;else d=25-(g>>>1)|0;a:do if((c[f+4>>2]&-8|0)!=(h|0)){g=h<<d;d=f;while(1){e=d+(g>>>31<<2)+16|0;f=c[e>>2]|0;if(!f)break;if((c[f+4>>2]&-8|0)==(h|0))break a;else{g=g<<1;d=f}}if(e>>>0<(c[454]|0)>>>0)Na();c[e>>2]=u;c[u+24>>2]=d;c[u+12>>2]=u;c[u+8>>2]=u;i=v;return}while(0);d=f+8|0;e=c[d>>2]|0;t=c[454]|0;if(!(f>>>0>=t>>>0&e>>>0>=t>>>0))Na();c[e+12>>2]=u;c[d>>2]=u;c[u+8>>2]=e;c[u+12>>2]=f;c[u+24>>2]=0;i=v;return}
function Te(e,f,g,j,l){e=e|0;f=f|0;g=g|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0;fb=i;i=i+864|0;Oa=fb+16|0;Qa=fb+8|0;Pa=fb+560|0;ka=Pa;La=fb+840|0;Xa=fb+584|0;Ga=fb+520|0;bb=fb;Ua=fb+852|0;la=(e|0)!=0;Ba=Ga+40|0;Fa=Ba;Ga=Ga+39|0;Ha=bb+4|0;Ja=bb;Ka=La+12|0;La=La+11|0;Ma=Ka;ma=Ma-ka|0;ta=-2-ka|0;ua=Ma+2|0;va=Oa+288|0;wa=Pa+9|0;xa=wa;ya=Pa+8|0;B=0;A=0;v=0;p=0;D=0;a:while(1){do if((v|0)>-1)if((p|0)>(2147483647-v|0)){c[(Ia()|0)>>2]=75;_=-1;break}else{_=p+v|0;break}else _=v;while(0);p=a[f>>0]|0;if(!(p<<24>>24)){N=352;break}else o=f;while(1){if(!(p<<24>>24)){ia=o;ea=o;break}else if(p<<24>>24==37){Ta=o;cb=o;N=9;break}M=o+1|0;p=a[M>>0]|0;o=M}b:do if((N|0)==9)while(1){N=0;if((a[Ta+1>>0]|0)!=37){ia=Ta;ea=cb;break b}o=cb+1|0;p=Ta+2|0;if((a[p>>0]|0)==37){Ta=p;cb=o}else{ia=p;ea=o;break}}while(0);p=ea-f|0;if(la)Me(f,p,e)|0;if((ea|0)!=(f|0)){v=_;f=ia;continue}s=ia+1|0;r=a[s>>0]|0;o=(r<<24>>24)+-48|0;if(o>>>0<10?(a[ia+2>>0]|0)==36:0){s=ia+3|0;r=a[s>>0]|0;y=1}else{o=-1;y=D}t=r<<24>>24;c:do if((t&-32|0)==32){u=0;do{t=1<<t+-32;if(!(t&75913))break c;u=t|u;s=s+1|0;r=a[s>>0]|0;t=r<<24>>24}while((t&-32|0)==32)}else u=0;while(0);do if(r<<24>>24==42){r=s+1|0;t=(a[r>>0]|0)+-48|0;if(t>>>0<10?(a[s+2>>0]|0)==36:0){c[l+(t<<2)>>2]=10;v=1;s=s+3|0;t=c[j+((a[r>>0]|0)+-48<<3)>>2]|0}else{if(y){db=-1;N=370;break a}if(!la){s=r;M=0;K=0;break}v=c[g>>2]|0;t=c[v>>2]|0;c[g>>2]=v+4;v=0;s=r}if((t|0)<0){u=u|8192;M=v;K=0-t|0}else{M=v;K=t}}else{r=r<<24>>24;if((r+-48|0)>>>0<10){v=0;do{v=r+-48+(v*10|0)|0;s=s+1|0;r=a[s>>0]|0}while((r+-48|0)>>>0<10);if((v|0)<0){db=-1;N=370;break a}else{M=y;K=v}}else{M=y;K=0}}while(0);d:do if((a[s>>0]|0)==46){v=s+1|0;t=a[v>>0]|0;if(t<<24>>24!=42){r=t<<24>>24;if((r+-48|0)>>>0<10){s=v;t=0}else{s=v;E=0;break}while(1){t=r+-48+(t*10|0)|0;s=s+1|0;r=a[s>>0]|0;if((r+-48|0)>>>0>=10){E=t;break d}}}r=s+2|0;t=(a[r>>0]|0)+-48|0;if(t>>>0<10?(a[s+3>>0]|0)==36:0){c[l+(t<<2)>>2]=10;s=s+4|0;E=c[j+((a[r>>0]|0)+-48<<3)>>2]|0;break}if(M){db=-1;N=370;break a}if(la){s=c[g>>2]|0;E=c[s>>2]|0;c[g>>2]=s+4;s=r}else{s=r;E=0}}else E=-1;while(0);y=0;while(1){w=a[s>>0]|0;v=(w<<24>>24)+-65|0;if(v>>>0>57){db=-1;N=370;break a}L=s+1|0;v=a[2296+(y*58|0)+v>>0]|0;t=v&255;if((t+-1|0)>>>0<8){s=L;y=t}else break}if(!(v<<24>>24)){db=-1;N=370;break}r=(o|0)>-1;e:do if(v<<24>>24==19)if(r){db=-1;N=370;break a}else{na=B;oa=A;N=63}else{if(r){c[l+(o<<2)>>2]=t;oa=j+(o<<3)|0;na=c[oa>>2]|0;oa=c[oa+4>>2]|0;N=63;break}if(!la){db=0;N=370;break a}if((v&255)>20){za=w;Aa=B;Ca=A}else do switch(t|0){case 9:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=A;N=64;break e}case 10:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=((qa|0)<0)<<31>>31;N=64;break e}case 11:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=0;N=64;break e}case 12:{N=c[g>>2]|0;pa=N;qa=c[pa>>2]|0;pa=c[pa+4>>2]|0;c[g>>2]=N+8;N=64;break e}case 13:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=(((qa&65535)<<16>>16|0)<0)<<31>>31;qa=qa<<16>>16;N=64;break e}case 14:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=0;qa=qa&65535;N=64;break e}case 15:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=(((qa&255)<<24>>24|0)<0)<<31>>31;qa=qa<<24>>24;N=64;break e}case 16:{pa=c[g>>2]|0;qa=c[pa>>2]|0;c[g>>2]=pa+4;pa=0;qa=qa&255;N=64;break e}case 17:{pa=c[g>>2]|0;c[k>>2]=c[pa>>2];c[k+4>>2]=c[pa+4>>2];x=+h[k>>3];c[g>>2]=pa+8;h[k>>3]=x;pa=c[k+4>>2]|0;qa=c[k>>2]|0;N=64;break e}case 18:{na=c[g>>2]|0;c[k>>2]=c[na>>2];c[k+4>>2]=c[na+4>>2];x=+h[k>>3];c[g>>2]=na+8;h[k>>3]=x;na=c[k>>2]|0;oa=c[k+4>>2]|0;N=63;break e}default:{pa=A;qa=B;N=64;break e}}while(0)}while(0);if((N|0)==63){N=0;if(la){pa=oa;qa=na;N=64}else{B=na;A=oa;v=_;f=L;D=M;continue}}if((N|0)==64){N=0;za=a[s>>0]|0;Aa=qa;Ca=pa}B=za<<24>>24;B=(y|0)!=0&(B&15|0)==3?B&-33:B;v=u&-65537;J=(u&8192|0)==0?u:v;f:do switch(B|0){case 111:{o=(Aa|0)==0&(Ca|0)==0;if(o)n=Ba;else{n=Ba;f=Aa;p=Ca;do{n=n+-1|0;a[n>>0]=f&7|48;f=Xe(f|0,p|0,3)|0;p=F}while(!((f|0)==0&(p|0)==0))}R=(J&8|0)==0|o;U=Aa;V=Ca;O=J;P=E;Q=R&1^1;R=R?2760:2765;N=91;break}case 105:case 100:{if((Ca|0)<0){Ea=Ve(0,0,Aa|0,Ca|0)|0;Da=F;Ya=1;Za=2760;N=86;break f}if(!(J&2048)){Za=J&1;Da=Ca;Ea=Aa;Ya=Za;Za=(Za|0)==0?2760:2762;N=86}else{Da=Ca;Ea=Aa;Ya=1;Za=2761;N=86}break}case 117:{Da=Ca;Ea=Aa;Ya=0;Za=2760;N=86;break}case 99:{a[Ga>>0]=Aa;fa=Aa;ga=Ca;ha=Ga;m=v;aa=1;ca=0;da=2760;$=Ba;break}case 109:{Na=Ra(c[(Ia()|0)>>2]|0)|0;N=96;break}case 115:{Na=(Aa|0)==0?2776:Aa;N=96;break}case 67:{c[bb>>2]=Aa;c[Ha>>2]=0;ra=bb;sa=Ja;Wa=-1;N=101;break}case 83:{f=Aa;if(!E){Y=Aa;Z=f;X=0;N=106}else{ra=f;sa=Aa;Wa=E;N=101}break}case 110:switch(y|0){case 0:{c[Aa>>2]=_;B=Aa;A=Ca;v=_;f=L;D=M;continue a}case 1:{c[Aa>>2]=_;B=Aa;A=Ca;v=_;f=L;D=M;continue a}case 2:{B=Aa;c[B>>2]=_;c[B+4>>2]=((_|0)<0)<<31>>31;B=Aa;A=Ca;v=_;f=L;D=M;continue a}case 3:{b[Aa>>1]=_;B=Aa;A=Ca;v=_;f=L;D=M;continue a}case 4:{a[Aa>>0]=_;B=Aa;A=Ca;v=_;f=L;D=M;continue a}case 6:{c[Aa>>2]=_;B=Aa;A=Ca;v=_;f=L;D=M;continue a}case 7:{B=Aa;c[B>>2]=_;c[B+4>>2]=((_|0)<0)<<31>>31;B=Aa;A=Ca;v=_;f=L;D=M;continue a}default:{B=Aa;A=Ca;v=_;f=L;D=M;continue a}}case 112:{Sa=J|8;Va=E>>>0>8?E:8;ab=120;N=75;break}case 88:case 120:{Sa=J;Va=E;ab=B;N=75;break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{c[k>>2]=Aa;c[k+4>>2]=Ca;q=+h[k>>3];c[Qa>>2]=0;if((Ca|0)>=0)if(!(J&2048)){I=J&1;G=I;I=(I|0)==0?2785:2790}else{G=1;I=2787}else{q=-q;G=1;I=2784}h[k>>3]=q;H=c[k+4>>2]&2146435072;if(!(H>>>0<2146435072|(H|0)==2146435072&0<0)){r=(B&32|0)!=0;if(q!=q|0.0!=0.0){s=0;t=r?2824:2832}else{s=G;t=r?2808:2816}u=s+3|0;o=(K|0)>(u|0);if((J&8192|0)==0&o){r=K-u|0;We(Xa|0,32,(r>>>0>256?256:r)|0)|0;if(r>>>0>255){f=r;do{Me(Xa,256,e)|0;f=f+-256|0}while(f>>>0>255);r=r&255}Me(Xa,r,e)|0}Me(I,s,e)|0;Me(t,3,e)|0;if((J&73728|0)==8192&o){f=K-u|0;We(Xa|0,32,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0}B=Aa;A=Ca;v=_;f=L;p=o?K:u;D=M;continue a}x=+Ie(q,Qa)*2.0;t=x!=0.0;if(t)c[Qa>>2]=(c[Qa>>2]|0)+-1;D=B|32;if((D|0)==97){y=B&32;z=(y|0)==0?I:I+9|0;p=G|2;t=E>>>0>11?0:12-E|0;do if(t){q=8.0;do{t=t+-1|0;q=q*16.0}while((t|0)!=0);if((a[z>>0]|0)==45){q=-(q+(-x-q));break}else{q=x+q-q;break}}else q=x;while(0);s=c[Qa>>2]|0;s=(s|0)<0?0-s|0:s;if((s|0)<0){r=Ka;t=s;s=((s|0)<0)<<31>>31;while(1){I=lf(t|0,s|0,10,0)|0;r=r+-1|0;a[r>>0]=I|48;I=t;t=kf(t|0,s|0,10,0)|0;if(!(s>>>0>9|(s|0)==9&I>>>0>4294967295))break;else s=F}}else{r=Ka;t=s}if(t)while(1){r=r+-1|0;a[r>>0]=(t>>>0)%10|0|48;if(t>>>0<10)break;else t=(t>>>0)/10|0}if((r|0)==(Ka|0)){a[La>>0]=48;r=La}a[r+-1>>0]=(c[Qa>>2]>>31&2)+43;w=r+-2|0;a[w>>0]=B+15;if((E|0)<1)if(!(J&8)){r=Pa;do{I=~~q;t=r+1|0;a[r>>0]=d[2840+I>>0]|y;q=(q-+(I|0))*16.0;if((t-ka|0)!=1|q==0.0)r=t;else{a[t>>0]=46;r=r+2|0}}while(q!=0.0)}else{r=Pa;do{I=~~q;t=r+1|0;a[r>>0]=d[2840+I>>0]|y;q=(q-+(I|0))*16.0;if((t-ka|0)==1){a[t>>0]=46;r=r+2|0}else r=t}while(q!=0.0)}else{r=Pa;do{I=~~q;t=r+1|0;a[r>>0]=d[2840+I>>0]|y;q=(q-+(I|0))*16.0;if((t-ka|0)==1){a[t>>0]=46;r=r+2|0}else r=t}while(q!=0.0)}f=w;if((E|0)!=0&(ta+r|0)<(E|0))v=ua+E-f|0;else v=ma-f+r|0;o=v+p|0;u=J&73728;y=(K|0)>(o|0);if((u|0)==0&y){t=K-o|0;We(Xa|0,32,(t>>>0>256?256:t)|0)|0;if(t>>>0>255){s=t;do{Me(Xa,256,e)|0;s=s+-256|0}while(s>>>0>255);t=t&255}Me(Xa,t,e)|0}Me(z,p,e)|0;if((u|0)==65536&y){f=K-o|0;We(Xa|0,48,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0}r=r-ka|0;Me(Pa,r,e)|0;t=Ma-w|0;r=v-t-r|0;if((r|0)>0){We(Xa|0,48,(r>>>0>256?256:r)|0)|0;if(r>>>0>255){f=r;do{Me(Xa,256,e)|0;f=f+-256|0}while(f>>>0>255);r=r&255}Me(Xa,r,e)|0}Me(w,t,e)|0;if((u|0)==8192&y){f=K-o|0;We(Xa|0,32,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0}B=Aa;A=Ca;v=_;f=L;p=y?K:o;D=M;continue a}f=(E|0)<0?6:E;if(t){t=(c[Qa>>2]|0)+-28|0;c[Qa>>2]=t;q=x*268435456.0}else{q=x;t=c[Qa>>2]|0}H=(t|0)<0?Oa:va;C=H;v=H;do{E=~~q>>>0;c[v>>2]=E;v=v+4|0;q=(q-+(E>>>0))*1.0e9}while(q!=0.0);t=c[Qa>>2]|0;if((t|0)>0){u=t;t=H;while(1){r=(u|0)>29?29:u;u=v+-4|0;do if(u>>>0>=t>>>0){s=0;do{A=Ye(c[u>>2]|0,0,r|0)|0;A=$e(A|0,F|0,s|0,0)|0;E=F;z=lf(A|0,E|0,1e9,0)|0;c[u>>2]=z;s=kf(A|0,E|0,1e9,0)|0;u=u+-4|0}while(u>>>0>=t>>>0);if(!s)break;t=t+-4|0;c[t>>2]=s}while(0);s=v;while(1){if(s>>>0<=t>>>0)break;v=s+-4|0;if(!(c[v>>2]|0))s=v;else break}u=(c[Qa>>2]|0)-r|0;c[Qa>>2]=u;if((u|0)>0)v=s;else{v=s;break}}}else{u=t;t=H}g:do if((u|0)<0){w=((f+25|0)/9|0)+1|0;if((D|0)==102){o=H+(w<<2)|0;while(1){y=0-u|0;y=(y|0)>9?9:y;do if(t>>>0<v>>>0){u=(1<<y)+-1|0;s=1e9>>>y;p=0;r=t;do{E=c[r>>2]|0;c[r>>2]=(E>>>y)+p;p=ba(E&u,s)|0;r=r+4|0}while(r>>>0<v>>>0);t=(c[t>>2]|0)==0?t+4|0:t;if(!p)break;c[v>>2]=p;v=v+4|0}else t=(c[t>>2]|0)==0?t+4|0:t;while(0);v=(v-C>>2|0)>(w|0)?o:v;u=(c[Qa>>2]|0)+y|0;c[Qa>>2]=u;if((u|0)>=0){z=v;break g}}}do{y=0-u|0;y=(y|0)>9?9:y;do if(t>>>0<v>>>0){u=(1<<y)+-1|0;s=1e9>>>y;p=0;r=t;do{E=c[r>>2]|0;c[r>>2]=(E>>>y)+p;p=ba(E&u,s)|0;r=r+4|0}while(r>>>0<v>>>0);t=(c[t>>2]|0)==0?t+4|0:t;if(!p)break;c[v>>2]=p;v=v+4|0}else t=(c[t>>2]|0)==0?t+4|0:t;while(0);if((v-t>>2|0)>(w|0))v=t+(w<<2)|0;u=(c[Qa>>2]|0)+y|0;c[Qa>>2]=u}while((u|0)<0);z=v}else z=v;while(0);do if(t>>>0<z>>>0){v=(C-t>>2)*9|0;s=c[t>>2]|0;if(s>>>0<10)break;else u=10;do{u=u*10|0;v=v+1|0}while(s>>>0>=u>>>0)}else v=0;while(0);w=(D|0)==103;u=f-((D|0)!=102?v:0)+((w&(f|0)!=0)<<31>>31)|0;if((u|0)<(((z-C>>2)*9|0)+-9|0)){r=u+9216|0;p=(r|0)/9|0;s=H+(p+-1023<<2)|0;r=((r|0)%9|0)+1|0;if((r|0)<9){u=10;do{u=u*10|0;r=r+1|0}while((r|0)!=9);o=u}else o=10;y=c[s>>2]|0;r=(y>>>0)%(o>>>0)|0;if((r|0)==0?(H+(p+-1022<<2)|0)==(z|0):0){W=t;T=s;S=v}else N=232;do if((N|0)==232){N=0;q=(((y>>>0)/(o>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;u=(o|0)/2|0;do if(r>>>0<u>>>0)x=.5;else{if((r|0)==(u|0)?(H+(p+-1022<<2)|0)==(z|0):0){x=1.0;break}x=1.5}while(0);do if(G){if((a[I>>0]|0)!=45)break;q=q*-1.0;x=x*-1.0}while(0);u=y-r|0;c[s>>2]=u;if(!(q+x!=q)){W=t;T=s;S=v;break}W=u+o|0;c[s>>2]=W;if(W>>>0>999999999)while(1){u=s+-4|0;c[s>>2]=0;if(u>>>0<t>>>0){t=t+-4|0;c[t>>2]=0}W=(c[u>>2]|0)+1|0;c[u>>2]=W;if(W>>>0>999999999)s=u;else{s=u;break}}v=(C-t>>2)*9|0;r=c[t>>2]|0;if(r>>>0<10){W=t;T=s;S=v;break}else u=10;do{u=u*10|0;v=v+1|0}while(r>>>0>=u>>>0);W=t;T=s;S=v}while(0);u=T+4|0;t=W;v=S;u=z>>>0>u>>>0?u:z}else u=z;o=0-v|0;E=u;while(1){if(E>>>0<=t>>>0){A=0;break}u=E+-4|0;if(!(c[u>>2]|0))E=u;else{A=1;break}}do if(w){u=((f|0)==0&1)+f|0;if((u|0)>(v|0)&(v|0)>-5){y=B+-1|0;f=u+-1-v|0}else{y=B+-2|0;f=u+-1|0}if(J&8)break;do if(A){u=c[E+-4>>2]|0;if(!u){s=9;break}if(!((u>>>0)%10|0)){r=10;s=0}else{s=0;break}do{r=r*10|0;s=s+1|0}while(((u>>>0)%(r>>>0)|0|0)==0)}else s=9;while(0);u=((E-C>>2)*9|0)+-9|0;if((y|32|0)==102){D=u-s|0;D=(D|0)<0?0:D;f=(f|0)<(D|0)?f:D;break}else{D=u+v-s|0;D=(D|0)<0?0:D;f=(f|0)<(D|0)?f:D;break}}else y=B;while(0);z=(f|0)!=0;if(z)u=1;else u=(J&8|0)!=0;p=u&1;w=(y|32|0)==102;if(w){v=(v|0)>0?v:0;o=0}else{r=(v|0)<0?o:v;if((r|0)<0){u=Ka;s=r;r=((r|0)<0)<<31>>31;while(1){D=lf(s|0,r|0,10,0)|0;u=u+-1|0;a[u>>0]=D|48;D=s;s=kf(s|0,r|0,10,0)|0;if(!(r>>>0>9|(r|0)==9&D>>>0>4294967295))break;else r=F}}else{u=Ka;s=r}if(s)while(1){u=u+-1|0;a[u>>0]=(s>>>0)%10|0|48;if(s>>>0<10)break;else s=(s>>>0)/10|0}if((Ma-u|0)<2)do{u=u+-1|0;a[u>>0]=48}while((Ma-u|0)<2);a[u+-1>>0]=(v>>31&2)+43;o=u+-2|0;a[o>>0]=y;v=Ma-o|0}C=G+1+f+p+v|0;B=J&73728;D=(K|0)>(C|0);if((B|0)==0&D){v=K-C|0;We(Xa|0,32,(v>>>0>256?256:v)|0)|0;if(v>>>0>255){u=v;do{Me(Xa,256,e)|0;u=u+-256|0}while(u>>>0>255);v=v&255}Me(Xa,v,e)|0}Me(I,G,e)|0;if((B|0)==65536&D){v=K-C|0;We(Xa|0,48,(v>>>0>256?256:v)|0)|0;if(v>>>0>255){u=v;do{Me(Xa,256,e)|0;u=u+-256|0}while(u>>>0>255);v=v&255}Me(Xa,v,e)|0}do if(w){s=t>>>0>H>>>0?H:t;v=s;do{u=c[v>>2]|0;if(!u)t=wa;else{t=wa;while(1){t=t+-1|0;a[t>>0]=(u>>>0)%10|0|48;if(u>>>0<10)break;else u=(u>>>0)/10|0}}do if((v|0)==(s|0)){if((t|0)!=(wa|0))break;a[ya>>0]=48;t=ya}else{if(t>>>0<=Pa>>>0)break;do{t=t+-1|0;a[t>>0]=48}while(t>>>0>Pa>>>0)}while(0);Me(t,xa-t|0,e)|0;v=v+4|0}while(v>>>0<=H>>>0);if(!((J&8|0)==0&(z^1)))Me(2856,1,e)|0;if(v>>>0<E>>>0&(f|0)>0)do{t=c[v>>2]|0;if(t){s=wa;while(1){s=s+-1|0;a[s>>0]=(t>>>0)%10|0|48;if(t>>>0<10)break;else t=(t>>>0)/10|0}if(s>>>0>Pa>>>0){_a=s;N=301}else ja=s}else{_a=wa;N=301}if((N|0)==301)while(1){N=0;r=_a+-1|0;a[r>>0]=48;if(r>>>0>Pa>>>0)_a=r;else{ja=r;break}}Me(ja,(f|0)>9?9:f,e)|0;v=v+4|0;f=f+-9|0}while(v>>>0<E>>>0&(f|0)>0);if((f|0)<=0)break;We(Xa|0,48,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){r=f;do{Me(Xa,256,e)|0;r=r+-256|0}while(r>>>0>255);f=f&255}Me(Xa,f,e)|0}else{y=A?E:t+4|0;do if((f|0)>-1){p=(J&8|0)==0;r=t;do{u=c[r>>2]|0;if(u){v=wa;while(1){v=v+-1|0;a[v>>0]=(u>>>0)%10|0|48;if(u>>>0<10)break;else u=(u>>>0)/10|0}if((v|0)!=(wa|0))$a=v;else N=313}else N=313;if((N|0)==313){N=0;a[ya>>0]=48;$a=ya}do if((r|0)==(t|0)){s=$a+1|0;Me($a,1,e)|0;if((f|0)<1&p)break;Me(2856,1,e)|0}else{if($a>>>0>Pa>>>0)s=$a;else{s=$a;break}do{s=s+-1|0;a[s>>0]=48}while(s>>>0>Pa>>>0)}while(0);I=xa-s|0;Me(s,(f|0)>(I|0)?I:f,e)|0;f=f-I|0;r=r+4|0}while(r>>>0<y>>>0&(f|0)>-1);if((f|0)<=0)break;We(Xa|0,48,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){r=f;do{Me(Xa,256,e)|0;r=r+-256|0}while(r>>>0>255);f=f&255}Me(Xa,f,e)|0}while(0);Me(o,Ma-o|0,e)|0}while(0);if((B|0)==8192&D){f=K-C|0;We(Xa|0,32,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0}B=Aa;A=Ca;v=_;f=L;p=D?K:C;D=M;continue a}default:{fa=Aa;ga=Ca;ha=f;m=J;aa=E;ca=0;da=2760;$=Ba}}while(0);do if((N|0)==75){o=ab&32;if(!((Aa|0)==0&(Ca|0)==0)){n=Ba;p=Aa;f=Ca;do{n=n+-1|0;a[n>>0]=d[2840+(p&15)>>0]|o;p=Xe(p|0,f|0,4)|0;f=F}while(!((p|0)==0&(f|0)==0));if(!(Sa&8)){U=Aa;V=Ca;O=Sa;P=Va;Q=0;R=2760;N=91}else{U=Aa;V=Ca;O=Sa;P=Va;Q=2;R=2760+(ab>>4)|0;N=91}}else{U=Aa;V=Ca;n=Ba;O=Sa;P=Va;Q=0;R=2760;N=91}}else if((N|0)==86){if(Da>>>0>0|(Da|0)==0&Ea>>>0>4294967295){n=Ba;o=Ea;f=Da;while(1){V=lf(o|0,f|0,10,0)|0;n=n+-1|0;a[n>>0]=V|48;V=o;o=kf(o|0,f|0,10,0)|0;if(!(f>>>0>9|(f|0)==9&V>>>0>4294967295))break;else f=F}}else{n=Ba;o=Ea}if(!o){U=Ea;V=Da;O=J;P=E;Q=Ya;R=Za;N=91}else while(1){n=n+-1|0;a[n>>0]=(o>>>0)%10|0|48;if(o>>>0<10){U=Ea;V=Da;O=J;P=E;Q=Ya;R=Za;N=91;break}else o=(o>>>0)/10|0}}else if((N|0)==96){N=0;f=Pe(Na,0,E)|0;if(!f){fa=Aa;ga=Ca;ha=Na;m=v;aa=E;ca=0;da=2760;$=Na+E|0;break}else{fa=Aa;ga=Ca;ha=Na;m=v;aa=f-Na|0;ca=0;da=2760;$=f;break}}else if((N|0)==101){p=0;f=0;r=ra;while(1){o=c[r>>2]|0;if(!o)break;f=Je(Ua,o)|0;if((f|0)<0|f>>>0>(Wa-p|0)>>>0)break;p=f+p|0;if(Wa>>>0>p>>>0)r=r+4|0;else break}if((f|0)<0){db=-1;N=370;break a}else{Y=sa;Z=ra;X=p;N=106}}while(0);if((N|0)==91){N=0;m=(P|0)>-1?O&-65537:O;o=(U|0)!=0|(V|0)!=0;if(o|(P|0)!=0){aa=(o&1^1)+(Fa-n)|0;fa=U;ga=V;ha=n;aa=(P|0)>(aa|0)?P:aa;ca=Q;da=R;$=Ba}else{fa=U;ga=V;ha=Ba;aa=0;ca=Q;da=R;$=Ba}}else if((N|0)==106){N=0;t=J&73728;u=(K|0)>(X|0);if((t|0)==0&u){f=K-X|0;We(Xa|0,32,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0}h:do if(X){f=0;p=Z;while(1){r=c[p>>2]|0;if(!r)break h;r=Je(Ua,r)|0;f=r+f|0;if((f|0)>(X|0))break h;Me(Ua,r,e)|0;if(f>>>0>=X>>>0)break;else p=p+4|0}}while(0);if((t|0)==8192&u){f=K-X|0;We(Xa|0,32,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0}B=Y;A=Ca;v=_;f=L;p=u?K:X;D=M;continue}s=$-ha|0;v=(aa|0)<(s|0)?s:aa;p=ca+v|0;y=(K|0)<(p|0)?p:K;u=m&73728;t=(y|0)>(p|0);if((u|0)==0&t){r=y-p|0;We(Xa|0,32,(r>>>0>256?256:r)|0)|0;if(r>>>0>255){f=r;do{Me(Xa,256,e)|0;f=f+-256|0}while(f>>>0>255);r=r&255}Me(Xa,r,e)|0}Me(da,ca,e)|0;if((u|0)==65536&t){r=y-p|0;We(Xa|0,48,(r>>>0>256?256:r)|0)|0;if(r>>>0>255){f=r;do{Me(Xa,256,e)|0;f=f+-256|0}while(f>>>0>255);r=r&255}Me(Xa,r,e)|0}if((v|0)>(s|0)){r=v-s|0;We(Xa|0,48,(r>>>0>256?256:r)|0)|0;if(r>>>0>255){f=r;do{Me(Xa,256,e)|0;f=f+-256|0}while(f>>>0>255);r=r&255}Me(Xa,r,e)|0}Me(ha,s,e)|0;if(!((u|0)==8192&t)){B=fa;A=ga;v=_;f=L;p=y;D=M;continue}f=y-p|0;We(Xa|0,32,(f>>>0>256?256:f)|0)|0;if(f>>>0>255){p=f;do{Me(Xa,256,e)|0;p=p+-256|0}while(p>>>0>255);f=f&255}Me(Xa,f,e)|0;B=fa;A=ga;v=_;f=L;p=y;D=M}if((N|0)==352){if(e){l=_;i=fb;return l|0}if(!D){l=0;i=fb;return l|0}else o=1;while(1){m=c[l+(o<<2)>>2]|0;if(!m){eb=o;break}n=j+(o<<3)|0;i:do if(m>>>0<=20)do switch(m|0){case 9:{bb=c[g>>2]|0;cb=c[bb>>2]|0;c[g>>2]=bb+4;c[n>>2]=cb;break i}case 10:{cb=c[g>>2]|0;bb=c[cb>>2]|0;c[g>>2]=cb+4;cb=n;c[cb>>2]=bb;c[cb+4>>2]=((bb|0)<0)<<31>>31;break i}case 11:{cb=c[g>>2]|0;bb=c[cb>>2]|0;c[g>>2]=cb+4;cb=n;c[cb>>2]=bb;c[cb+4>>2]=0;break i}case 12:{cb=c[g>>2]|0;bb=cb;ab=c[bb>>2]|0;bb=c[bb+4>>2]|0;c[g>>2]=cb+8;cb=n;c[cb>>2]=ab;c[cb+4>>2]=bb;break i}case 13:{cb=c[g>>2]|0;bb=c[cb>>2]|0;c[g>>2]=cb+4;bb=(bb&65535)<<16>>16;cb=n;c[cb>>2]=bb;c[cb+4>>2]=((bb|0)<0)<<31>>31;break i}case 14:{cb=c[g>>2]|0;bb=c[cb>>2]|0;c[g>>2]=cb+4;cb=n;c[cb>>2]=bb&65535;c[cb+4>>2]=0;break i}case 15:{cb=c[g>>2]|0;bb=c[cb>>2]|0;c[g>>2]=cb+4;bb=(bb&255)<<24>>24;cb=n;c[cb>>2]=bb;c[cb+4>>2]=((bb|0)<0)<<31>>31;break i}case 16:{cb=c[g>>2]|0;bb=c[cb>>2]|0;c[g>>2]=cb+4;cb=n;c[cb>>2]=bb&255;c[cb+4>>2]=0;break i}case 17:{cb=c[g>>2]|0;c[k>>2]=c[cb>>2];c[k+4>>2]=c[cb+4>>2];x=+h[k>>3];c[g>>2]=cb+8;h[n>>3]=x;break i}case 18:{cb=c[g>>2]|0;c[k>>2]=c[cb>>2];c[k+4>>2]=c[cb+4>>2];x=+h[k>>3];c[g>>2]=cb+8;h[n>>3]=x;break i}default:break i}while(0);while(0);o=o+1|0;if((o|0)>=10){db=1;N=370;break}}if((N|0)==370){i=fb;return db|0}while(1){if(c[l+(eb<<2)>>2]|0){db=-1;N=370;break}eb=eb+1|0;if((eb|0)>=10){db=1;N=370;break}}if((N|0)==370){i=fb;return db|0}}else if((N|0)==370){i=fb;return db|0}return 0}function Ue(){}function Ve(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (F=d,a-c>>>0|0)|0}function We(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;h=b&3;i=d|d<<8|d<<16|d<<24;g=f&~3;if(h){h=b+4-h|0;while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=i;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function Xe(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}F=0;return b>>>c-32|0}function Ye(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}F=a<<c-32;return 0}function Ze(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function _e(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return xa(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function $e(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (F=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function af(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else _e(b,c,d)|0;return b|0}function bf(b,c){b=b|0;c=c|0;var d=0;do{a[b+d>>0]=a[c+d>>0];d=d+1|0}while(a[c+(d-1)>>0]|0);return b|0}function cf(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}F=(b|0)<0?-1:0;return b>>c-32|0}function df(b){b=b|0;var c=0;c=a[n+(b>>>24)>>0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[n+(b&255)>>0]|0)+24|0}function ef(b){b=b|0;var c=0;c=a[m+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[m+(b>>>24)>>0]|0)+24|0}function ff(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=ba(e,f)|0;d=a>>>16;a=(c>>>16)+(ba(e,d)|0)|0;e=b>>>16;b=ba(e,f)|0;return (F=(a>>>16)+(ba(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function gf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=Ve(j^a,i^b,j,i)|0;g=F;a=f^j;b=e^i;d=Ve((mf(h,g,Ve(f^c,e^d,f,e)|0,F,0)|0)^a,F^b,a,b)|0;return d|0}function hf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+8|0;j=f|0;h=b>>31|((b|0)<0?-1:0)<<1;g=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;l=e>>31|((e|0)<0?-1:0)<<1;k=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;a=Ve(h^a,g^b,h,g)|0;b=F;mf(a,b,Ve(l^d,k^e,l,k)|0,F,j)|0;e=Ve(c[j>>2]^h,c[j+4>>2]^g,h,g)|0;d=F;i=f;return (F=d,e)|0}function jf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=ff(e,f)|0;a=F;return (F=(ba(b,f)|0)+(ba(d,e)|0)+a|a&0,c|0|0)|0}function kf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=mf(a,b,c,d,0)|0;return d|0}function lf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+8|0;f=g|0;mf(a,b,d,e,f)|0;i=g;return (F=c[f+4>>2]|0,c[f>>2]|0)|0}function mf(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;n=a;l=b;m=l;k=d;o=e;i=o;if(!m){g=(f|0)!=0;if(!i){if(g){c[f>>2]=(n>>>0)%(k>>>0);c[f+4>>2]=0}o=0;f=(n>>>0)/(k>>>0)>>>0;return (F=o,f)|0}else{if(!g){o=0;f=0;return (F=o,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;o=0;f=0;return (F=o,f)|0}}j=(i|0)==0;do if(k){if(!j){h=(df(i|0)|0)-(df(m|0)|0)|0;if(h>>>0<=31){g=h+1|0;l=31-h|0;k=h-31>>31;i=g;j=n>>>(g>>>0)&k|m<<l;k=m>>>(g>>>0)&k;g=0;h=n<<l;break}if(!f){o=0;f=0;return (F=o,f)|0}c[f>>2]=a|0;c[f+4>>2]=l|b&0;o=0;f=0;return (F=o,f)|0}j=k-1|0;if(j&k){h=(df(k|0)|0)+33-(df(m|0)|0)|0;p=64-h|0;l=32-h|0;a=l>>31;b=h-32|0;k=b>>31;i=h;j=l-1>>31&m>>>(b>>>0)|(m<<l|n>>>(h>>>0))&k;k=k&m>>>(h>>>0);g=n<<p&a;h=(m<<p|n>>>(b>>>0))&a|n<<l&h-33>>31;break}if(f){c[f>>2]=j&n;c[f+4>>2]=0}if((k|0)==1){f=l|b&0;p=a|0|0;return (F=f,p)|0}else{p=ef(k|0)|0;f=m>>>(p>>>0)|0;p=m<<32-p|n>>>(p>>>0)|0;return (F=f,p)|0}}else{if(j){if(f){c[f>>2]=(m>>>0)%(k>>>0);c[f+4>>2]=0}f=0;p=(m>>>0)/(k>>>0)>>>0;return (F=f,p)|0}if(!n){if(f){c[f>>2]=0;c[f+4>>2]=(m>>>0)%(i>>>0)}f=0;p=(m>>>0)/(i>>>0)>>>0;return (F=f,p)|0}j=i-1|0;if(!(j&i)){if(f){c[f>>2]=a|0;c[f+4>>2]=j&m|b&0}f=0;p=m>>>((ef(i|0)|0)>>>0);return (F=f,p)|0}h=(df(i|0)|0)-(df(m|0)|0)|0;if(h>>>0<=30){k=h+1|0;h=31-h|0;i=k;j=m<<h|n>>>(k>>>0);k=m>>>(k>>>0);g=0;h=n<<h;break}if(!f){f=0;p=0;return (F=f,p)|0}c[f>>2]=a|0;c[f+4>>2]=l|b&0;f=0;p=0;return (F=f,p)|0}while(0);if(!i){l=h;i=0;h=0}else{m=d|0|0;l=o|e&0;b=$e(m,l,-1,-1)|0;a=F;d=h;h=0;do{n=d;d=g>>>31|d<<1;g=h|g<<1;n=j<<1|n>>>31|0;e=j>>>31|k<<1|0;Ve(b,a,n,e)|0;p=F;o=p>>31|((p|0)<0?-1:0)<<1;h=o&1;j=Ve(n,e,o&m,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l)|0;k=F;i=i-1|0}while((i|0)!=0);l=d;i=0}d=0;if(f){c[f>>2]=j;c[f+4>>2]=k}f=(g|0)>>>31|(l|d)<<1|(d<<1|g>>>31)&0|i;p=(g<<1|0>>>31)&-2|h;return (F=f,p)|0}function nf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Va[a&3](b|0,c|0,d|0)|0}function of(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Wa[a&3](b|0,c|0,d|0,e|0,f|0)}function pf(a,b){a=a|0;b=b|0;Xa[a&31](b|0)}function qf(a,b,c){a=a|0;b=b|0;c=c|0;Ya[a&7](b|0,c|0)}function rf(a,b){a=a|0;b=b|0;return Za[a&1](b|0)|0}function sf(a){a=a|0;_a[a&3]()}function tf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;$a[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function uf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ab[a&3](b|0,c|0,d|0,e|0)}function vf(a,b,c){a=a|0;b=b|0;c=c|0;ca(0);return 0}function wf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(1)}function xf(a){a=a|0;ca(2)}function yf(a,b){a=a|0;b=b|0;ca(3)}function zf(a){a=a|0;ca(4);return 0}function Af(){ca(5)}function Bf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(6)}function Cf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(7)}

// EMSCRIPTEN_END_FUNCS
var Va=[vf,pe,Qe,vf];var Wa=[wf,we,ve,wf];var Xa=[xf,Yb,Zb,md,_b,$b,ac,Ld,de,ce,ke,ne,le,me,oe,Lb,De,xf,xf,xf,xf,xf,xf,xf,xf,xf,xf,xf,xf,xf,xf,xf];var Ya=[yf,Bb,Cb,Db,Md,yf,yf,yf];var Za=[zf,ee];var _a=[Af,Be,Ce,Af];var $a=[Bf,ye,xe,Bf];var ab=[Cf,re,se,Cf];return{_strlen:Ze,_rl_new_block:Pb,_rl_block_add_branch_to:Sb,_rl_relooper_calculate:Wb,_rl_set_output_buffer:Mb,_rl_make_output_buffer:Nb,_bitshift64Lshr:Xe,_rl_relooper_render:Xb,_bitshift64Shl:Ye,_rl_relooper_add_block:Vb,___cxa_is_pointer_type:Ae,_rl_set_block_code:Qb,_memset:We,_memcpy:_e,_rl_delete_relooper:Ub,_rl_set_asm_js_mode:Ob,_i64Subtract:Ve,_realloc:Ge,_i64Add:$e,___cxa_can_catch:ze,_free:Fe,_memmove:af,_malloc:Ee,_rl_new_relooper:Tb,_rl_delete_block:Rb,_strcpy:bf,__GLOBAL__I_a:Wd,runPostSets:Ue,stackAlloc:bb,stackSave:cb,stackRestore:db,setThrew:eb,setTempRet0:hb,getTempRet0:ib,dynCall_iiii:nf,dynCall_viiiii:of,dynCall_vi:pf,dynCall_vii:qf,dynCall_ii:rf,dynCall_v:sf,dynCall_viiiiii:tf,dynCall_viiii:uf}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _strlen=Module["_strlen"]=asm["_strlen"];var _rl_new_block=Module["_rl_new_block"]=asm["_rl_new_block"];var _rl_block_add_branch_to=Module["_rl_block_add_branch_to"]=asm["_rl_block_add_branch_to"];var _rl_relooper_calculate=Module["_rl_relooper_calculate"]=asm["_rl_relooper_calculate"];var _rl_set_output_buffer=Module["_rl_set_output_buffer"]=asm["_rl_set_output_buffer"];var _rl_make_output_buffer=Module["_rl_make_output_buffer"]=asm["_rl_make_output_buffer"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _rl_relooper_render=Module["_rl_relooper_render"]=asm["_rl_relooper_render"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _rl_relooper_add_block=Module["_rl_relooper_add_block"]=asm["_rl_relooper_add_block"];var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=asm["___cxa_is_pointer_type"];var _rl_set_block_code=Module["_rl_set_block_code"]=asm["_rl_set_block_code"];var _memset=Module["_memset"]=asm["_memset"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _rl_delete_relooper=Module["_rl_delete_relooper"]=asm["_rl_delete_relooper"];var _rl_set_asm_js_mode=Module["_rl_set_asm_js_mode"]=asm["_rl_set_asm_js_mode"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _realloc=Module["_realloc"]=asm["_realloc"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var ___cxa_can_catch=Module["___cxa_can_catch"]=asm["___cxa_can_catch"];var _free=Module["_free"]=asm["_free"];var _memmove=Module["_memmove"]=asm["_memmove"];var _malloc=Module["_malloc"]=asm["_malloc"];var _rl_new_relooper=Module["_rl_new_relooper"]=asm["_rl_new_relooper"];var _rl_delete_block=Module["_rl_delete_block"]=asm["_rl_delete_block"];var _strcpy=Module["_strcpy"]=asm["_strcpy"];var __GLOBAL__I_a=Module["__GLOBAL__I_a"]=asm["__GLOBAL__I_a"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];var i64Math=(function(){var goog={math:{}};goog.math.Long=(function(low,high){this.low_=low|0;this.high_=high|0});goog.math.Long.IntCache_={};goog.math.Long.fromInt=(function(value){if(-128<=value&&value<128){var cachedObj=goog.math.Long.IntCache_[value];if(cachedObj){return cachedObj}}var obj=new goog.math.Long(value|0,value<0?-1:0);if(-128<=value&&value<128){goog.math.Long.IntCache_[value]=obj}return obj});goog.math.Long.fromNumber=(function(value){if(isNaN(value)||!isFinite(value)){return goog.math.Long.ZERO}else if(value<=-goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MIN_VALUE}else if(value+1>=goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MAX_VALUE}else if(value<0){return goog.math.Long.fromNumber(-value).negate()}else{return new goog.math.Long(value%goog.math.Long.TWO_PWR_32_DBL_|0,value/goog.math.Long.TWO_PWR_32_DBL_|0)}});goog.math.Long.fromBits=(function(lowBits,highBits){return new goog.math.Long(lowBits,highBits)});goog.math.Long.fromString=(function(str,opt_radix){if(str.length==0){throw Error("number format error: empty string")}var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(str.charAt(0)=="-"){return goog.math.Long.fromString(str.substring(1),radix).negate()}else if(str.indexOf("-")>=0){throw Error('number format error: interior "-" character: '+str)}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,8));var result=goog.math.Long.ZERO;for(var i=0;i<str.length;i+=8){var size=Math.min(8,str.length-i);var value=parseInt(str.substring(i,i+size),radix);if(size<8){var power=goog.math.Long.fromNumber(Math.pow(radix,size));result=result.multiply(power).add(goog.math.Long.fromNumber(value))}else{result=result.multiply(radixToPower);result=result.add(goog.math.Long.fromNumber(value))}}return result});goog.math.Long.TWO_PWR_16_DBL_=1<<16;goog.math.Long.TWO_PWR_24_DBL_=1<<24;goog.math.Long.TWO_PWR_32_DBL_=goog.math.Long.TWO_PWR_16_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_31_DBL_=goog.math.Long.TWO_PWR_32_DBL_/2;goog.math.Long.TWO_PWR_48_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_64_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_32_DBL_;goog.math.Long.TWO_PWR_63_DBL_=goog.math.Long.TWO_PWR_64_DBL_/2;goog.math.Long.ZERO=goog.math.Long.fromInt(0);goog.math.Long.ONE=goog.math.Long.fromInt(1);goog.math.Long.NEG_ONE=goog.math.Long.fromInt(-1);goog.math.Long.MAX_VALUE=goog.math.Long.fromBits(4294967295|0,2147483647|0);goog.math.Long.MIN_VALUE=goog.math.Long.fromBits(0,2147483648|0);goog.math.Long.TWO_PWR_24_=goog.math.Long.fromInt(1<<24);goog.math.Long.prototype.toInt=(function(){return this.low_});goog.math.Long.prototype.toNumber=(function(){return this.high_*goog.math.Long.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()});goog.math.Long.prototype.toString=(function(opt_radix){var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(this.isZero()){return"0"}if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){var radixLong=goog.math.Long.fromNumber(radix);var div=this.div(radixLong);var rem=div.multiply(radixLong).subtract(this);return div.toString(radix)+rem.toInt().toString(radix)}else{return"-"+this.negate().toString(radix)}}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,6));var rem=this;var result="";while(true){var remDiv=rem.div(radixToPower);var intval=rem.subtract(remDiv.multiply(radixToPower)).toInt();var digits=intval.toString(radix);rem=remDiv;if(rem.isZero()){return digits+result}else{while(digits.length<6){digits="0"+digits}result=""+digits+result}}});goog.math.Long.prototype.getHighBits=(function(){return this.high_});goog.math.Long.prototype.getLowBits=(function(){return this.low_});goog.math.Long.prototype.getLowBitsUnsigned=(function(){return this.low_>=0?this.low_:goog.math.Long.TWO_PWR_32_DBL_+this.low_});goog.math.Long.prototype.getNumBitsAbs=(function(){if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){return 64}else{return this.negate().getNumBitsAbs()}}else{var val=this.high_!=0?this.high_:this.low_;for(var bit=31;bit>0;bit--){if((val&1<<bit)!=0){break}}return this.high_!=0?bit+33:bit+1}});goog.math.Long.prototype.isZero=(function(){return this.high_==0&&this.low_==0});goog.math.Long.prototype.isNegative=(function(){return this.high_<0});goog.math.Long.prototype.isOdd=(function(){return(this.low_&1)==1});goog.math.Long.prototype.equals=(function(other){return this.high_==other.high_&&this.low_==other.low_});goog.math.Long.prototype.notEquals=(function(other){return this.high_!=other.high_||this.low_!=other.low_});goog.math.Long.prototype.lessThan=(function(other){return this.compare(other)<0});goog.math.Long.prototype.lessThanOrEqual=(function(other){return this.compare(other)<=0});goog.math.Long.prototype.greaterThan=(function(other){return this.compare(other)>0});goog.math.Long.prototype.greaterThanOrEqual=(function(other){return this.compare(other)>=0});goog.math.Long.prototype.compare=(function(other){if(this.equals(other)){return 0}var thisNeg=this.isNegative();var otherNeg=other.isNegative();if(thisNeg&&!otherNeg){return-1}if(!thisNeg&&otherNeg){return 1}if(this.subtract(other).isNegative()){return-1}else{return 1}});goog.math.Long.prototype.negate=(function(){if(this.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.MIN_VALUE}else{return this.not().add(goog.math.Long.ONE)}});goog.math.Long.prototype.add=(function(other){var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00+b00;c16+=c00>>>16;c00&=65535;c16+=a16+b16;c32+=c16>>>16;c16&=65535;c32+=a32+b32;c48+=c32>>>16;c32&=65535;c48+=a48+b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.subtract=(function(other){return this.add(other.negate())});goog.math.Long.prototype.multiply=(function(other){if(this.isZero()){return goog.math.Long.ZERO}else if(other.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){return other.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}else if(other.equals(goog.math.Long.MIN_VALUE)){return this.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().multiply(other.negate())}else{return this.negate().multiply(other).negate()}}else if(other.isNegative()){return this.multiply(other.negate()).negate()}if(this.lessThan(goog.math.Long.TWO_PWR_24_)&&other.lessThan(goog.math.Long.TWO_PWR_24_)){return goog.math.Long.fromNumber(this.toNumber()*other.toNumber())}var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00*b00;c16+=c00>>>16;c00&=65535;c16+=a16*b00;c32+=c16>>>16;c16&=65535;c16+=a00*b16;c32+=c16>>>16;c16&=65535;c32+=a32*b00;c48+=c32>>>16;c32&=65535;c32+=a16*b16;c48+=c32>>>16;c32&=65535;c32+=a00*b32;c48+=c32>>>16;c32&=65535;c48+=a48*b00+a32*b16+a16*b32+a00*b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.div=(function(other){if(other.isZero()){throw Error("division by zero")}else if(this.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){if(other.equals(goog.math.Long.ONE)||other.equals(goog.math.Long.NEG_ONE)){return goog.math.Long.MIN_VALUE}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ONE}else{var halfThis=this.shiftRight(1);var approx=halfThis.div(other).shiftLeft(1);if(approx.equals(goog.math.Long.ZERO)){return other.isNegative()?goog.math.Long.ONE:goog.math.Long.NEG_ONE}else{var rem=this.subtract(other.multiply(approx));var result=approx.add(rem.div(other));return result}}}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().div(other.negate())}else{return this.negate().div(other).negate()}}else if(other.isNegative()){return this.div(other.negate()).negate()}var res=goog.math.Long.ZERO;var rem=this;while(rem.greaterThanOrEqual(other)){var approx=Math.max(1,Math.floor(rem.toNumber()/other.toNumber()));var log2=Math.ceil(Math.log(approx)/Math.LN2);var delta=log2<=48?1:Math.pow(2,log2-48);var approxRes=goog.math.Long.fromNumber(approx);var approxRem=approxRes.multiply(other);while(approxRem.isNegative()||approxRem.greaterThan(rem)){approx-=delta;approxRes=goog.math.Long.fromNumber(approx);approxRem=approxRes.multiply(other)}if(approxRes.isZero()){approxRes=goog.math.Long.ONE}res=res.add(approxRes);rem=rem.subtract(approxRem)}return res});goog.math.Long.prototype.modulo=(function(other){return this.subtract(this.div(other).multiply(other))});goog.math.Long.prototype.not=(function(){return goog.math.Long.fromBits(~this.low_,~this.high_)});goog.math.Long.prototype.and=(function(other){return goog.math.Long.fromBits(this.low_&other.low_,this.high_&other.high_)});goog.math.Long.prototype.or=(function(other){return goog.math.Long.fromBits(this.low_|other.low_,this.high_|other.high_)});goog.math.Long.prototype.xor=(function(other){return goog.math.Long.fromBits(this.low_^other.low_,this.high_^other.high_)});goog.math.Long.prototype.shiftLeft=(function(numBits){numBits&=63;if(numBits==0){return this}else{var low=this.low_;if(numBits<32){var high=this.high_;return goog.math.Long.fromBits(low<<numBits,high<<numBits|low>>>32-numBits)}else{return goog.math.Long.fromBits(0,low<<numBits-32)}}});goog.math.Long.prototype.shiftRight=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>numBits)}else{return goog.math.Long.fromBits(high>>numBits-32,high>=0?0:-1)}}});goog.math.Long.prototype.shiftRightUnsigned=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>>numBits)}else if(numBits==32){return goog.math.Long.fromBits(high,0)}else{return goog.math.Long.fromBits(high>>>numBits-32,0)}}});var navigator={appName:"Modern Browser"};var dbits;var canary=0xdeadbeefcafe;var j_lm=(canary&16777215)==15715070;function BigInteger(a,b,c){if(a!=null)if("number"==typeof a)this.fromNumber(a,b,c);else if(b==null&&"string"!=typeof a)this.fromString(a,256);else this.fromString(a,b)}function nbi(){return new BigInteger(null)}function am1(i,x,w,j,c,n){while(--n>=0){var v=x*this[i++]+w[j]+c;c=Math.floor(v/67108864);w[j++]=v&67108863}return c}function am2(i,x,w,j,c,n){var xl=x&32767,xh=x>>15;while(--n>=0){var l=this[i]&32767;var h=this[i++]>>15;var m=xh*l+h*xl;l=xl*l+((m&32767)<<15)+w[j]+(c&1073741823);c=(l>>>30)+(m>>>15)+xh*h+(c>>>30);w[j++]=l&1073741823}return c}function am3(i,x,w,j,c,n){var xl=x&16383,xh=x>>14;while(--n>=0){var l=this[i]&16383;var h=this[i++]>>14;var m=xh*l+h*xl;l=xl*l+((m&16383)<<14)+w[j]+c;c=(l>>28)+(m>>14)+xh*h;w[j++]=l&268435455}return c}if(j_lm&&navigator.appName=="Microsoft Internet Explorer"){BigInteger.prototype.am=am2;dbits=30}else if(j_lm&&navigator.appName!="Netscape"){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=(1<<dbits)-1;BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array;var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv)BI_RC[rr++]=vv;rr="a".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;rr="A".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;function int2char(n){return BI_RM.charAt(n)}function intAt(s,i){var c=BI_RC[s.charCodeAt(i)];return c==null?-1:c}function bnpCopyTo(r){for(var i=this.t-1;i>=0;--i)r[i]=this[i];r.t=this.t;r.s=this.s}function bnpFromInt(x){this.t=1;this.s=x<0?-1:0;if(x>0)this[0]=x;else if(x<-1)this[0]=x+DV;else this.t=0}function nbv(i){var r=nbi();r.fromInt(i);return r}function bnpFromString(s,b){var k;if(b==16)k=4;else if(b==8)k=3;else if(b==256)k=8;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else{this.fromRadix(s,b);return}this.t=0;this.s=0;var i=s.length,mi=false,sh=0;while(--i>=0){var x=k==8?s[i]&255:intAt(s,i);if(x<0){if(s.charAt(i)=="-")mi=true;continue}mi=false;if(sh==0)this[this.t++]=x;else if(sh+k>this.DB){this[this.t-1]|=(x&(1<<this.DB-sh)-1)<<sh;this[this.t++]=x>>this.DB-sh}else this[this.t-1]|=x<<sh;sh+=k;if(sh>=this.DB)sh-=this.DB}if(k==8&&(s[0]&128)!=0){this.s=-1;if(sh>0)this[this.t-1]|=(1<<this.DB-sh)-1<<sh}this.clamp();if(mi)BigInteger.ZERO.subTo(this,this)}function bnpClamp(){var c=this.s&this.DM;while(this.t>0&&this[this.t-1]==c)--this.t}function bnToString(b){if(this.s<0)return"-"+this.negate().toString(b);var k;if(b==16)k=4;else if(b==8)k=3;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else return this.toRadix(b);var km=(1<<k)-1,d,m=false,r="",i=this.t;var p=this.DB-i*this.DB%k;if(i-->0){if(p<this.DB&&(d=this[i]>>p)>0){m=true;r=int2char(d)}while(i>=0){if(p<k){d=(this[i]&(1<<p)-1)<<k-p;d|=this[--i]>>(p+=this.DB-k)}else{d=this[i]>>(p-=k)&km;if(p<=0){p+=this.DB;--i}}if(d>0)m=true;if(m)r+=int2char(d)}}return m?r:"0"}function bnNegate(){var r=nbi();BigInteger.ZERO.subTo(this,r);return r}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(a){var r=this.s-a.s;if(r!=0)return r;var i=this.t;r=i-a.t;if(r!=0)return this.s<0?-r:r;while(--i>=0)if((r=this[i]-a[i])!=0)return r;return 0}function nbits(x){var r=1,t;if((t=x>>>16)!=0){x=t;r+=16}if((t=x>>8)!=0){x=t;r+=8}if((t=x>>4)!=0){x=t;r+=4}if((t=x>>2)!=0){x=t;r+=2}if((t=x>>1)!=0){x=t;r+=1}return r}function bnBitLength(){if(this.t<=0)return 0;return this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnpDLShiftTo(n,r){var i;for(i=this.t-1;i>=0;--i)r[i+n]=this[i];for(i=n-1;i>=0;--i)r[i]=0;r.t=this.t+n;r.s=this.s}function bnpDRShiftTo(n,r){for(var i=n;i<this.t;++i)r[i-n]=this[i];r.t=Math.max(this.t-n,0);r.s=this.s}function bnpLShiftTo(n,r){var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<cbs)-1;var ds=Math.floor(n/this.DB),c=this.s<<bs&this.DM,i;for(i=this.t-1;i>=0;--i){r[i+ds+1]=this[i]>>cbs|c;c=(this[i]&bm)<<bs}for(i=ds-1;i>=0;--i)r[i]=0;r[ds]=c;r.t=this.t+ds+1;r.s=this.s;r.clamp()}function bnpRShiftTo(n,r){r.s=this.s;var ds=Math.floor(n/this.DB);if(ds>=this.t){r.t=0;return}var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<bs)-1;r[0]=this[ds]>>bs;for(var i=ds+1;i<this.t;++i){r[i-ds-1]|=(this[i]&bm)<<cbs;r[i-ds]=this[i]>>bs}if(bs>0)r[this.t-ds-1]|=(this.s&bm)<<cbs;r.t=this.t-ds;r.clamp()}function bnpSubTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]-a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c-=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c-=a[i];r[i++]=c&this.DM;c>>=this.DB}c-=a.s}r.s=c<0?-1:0;if(c<-1)r[i++]=this.DV+c;else if(c>0)r[i++]=c;r.t=i;r.clamp()}function bnpMultiplyTo(a,r){var x=this.abs(),y=a.abs();var i=x.t;r.t=i+y.t;while(--i>=0)r[i]=0;for(i=0;i<y.t;++i)r[i+x.t]=x.am(0,y[i],r,i,0,x.t);r.s=0;r.clamp();if(this.s!=a.s)BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(r){var x=this.abs();var i=r.t=2*x.t;while(--i>=0)r[i]=0;for(i=0;i<x.t-1;++i){var c=x.am(i,x[i],r,2*i,0,1);if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1))>=x.DV){r[i+x.t]-=x.DV;r[i+x.t+1]=1}}if(r.t>0)r[r.t-1]+=x.am(i,x[i],r,2*i,0,1);r.s=0;r.clamp()}function bnpDivRemTo(m,q,r){var pm=m.abs();if(pm.t<=0)return;var pt=this.abs();if(pt.t<pm.t){if(q!=null)q.fromInt(0);if(r!=null)this.copyTo(r);return}if(r==null)r=nbi();var y=nbi(),ts=this.s,ms=m.s;var nsh=this.DB-nbits(pm[pm.t-1]);if(nsh>0){pm.lShiftTo(nsh,y);pt.lShiftTo(nsh,r)}else{pm.copyTo(y);pt.copyTo(r)}var ys=y.t;var y0=y[ys-1];if(y0==0)return;var yt=y0*(1<<this.F1)+(ys>1?y[ys-2]>>this.F2:0);var d1=this.FV/yt,d2=(1<<this.F1)/yt,e=1<<this.F2;var i=r.t,j=i-ys,t=q==null?nbi():q;y.dlShiftTo(j,t);if(r.compareTo(t)>=0){r[r.t++]=1;r.subTo(t,r)}BigInteger.ONE.dlShiftTo(ys,t);t.subTo(y,y);while(y.t<ys)y[y.t++]=0;while(--j>=0){var qd=r[--i]==y0?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);if((r[i]+=y.am(0,qd,r,j,0,ys))<qd){y.dlShiftTo(j,t);r.subTo(t,r);while(r[i]<--qd)r.subTo(t,r)}}if(q!=null){r.drShiftTo(ys,q);if(ts!=ms)BigInteger.ZERO.subTo(q,q)}r.t=ys;r.clamp();if(nsh>0)r.rShiftTo(nsh,r);if(ts<0)BigInteger.ZERO.subTo(r,r)}function bnMod(a){var r=nbi();this.abs().divRemTo(a,null,r);if(this.s<0&&r.compareTo(BigInteger.ZERO)>0)a.subTo(r,r);return r}function Classic(m){this.m=m}function cConvert(x){if(x.s<0||x.compareTo(this.m)>=0)return x.mod(this.m);else return x}function cRevert(x){return x}function cReduce(x){x.divRemTo(this.m,null,x)}function cMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}function cSqrTo(x,r){x.squareTo(r);this.reduce(r)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1)return 0;var x=this[0];if((x&1)==0)return 0;var y=x&3;y=y*(2-(x&15)*y)&15;y=y*(2-(x&255)*y)&255;y=y*(2-((x&65535)*y&65535))&65535;y=y*(2-x*y%this.DV)%this.DV;return y>0?this.DV-y:-y}function Montgomery(m){this.m=m;this.mp=m.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<m.DB-15)-1;this.mt2=2*m.t}function montConvert(x){var r=nbi();x.abs().dlShiftTo(this.m.t,r);r.divRemTo(this.m,null,r);if(x.s<0&&r.compareTo(BigInteger.ZERO)>0)this.m.subTo(r,r);return r}function montRevert(x){var r=nbi();x.copyTo(r);this.reduce(r);return r}function montReduce(x){while(x.t<=this.mt2)x[x.t++]=0;for(var i=0;i<this.m.t;++i){var j=x[i]&32767;var u0=j*this.mpl+((j*this.mph+(x[i]>>15)*this.mpl&this.um)<<15)&x.DM;j=i+this.m.t;x[j]+=this.m.am(0,u0,x,i,0,this.m.t);while(x[j]>=x.DV){x[j]-=x.DV;x[++j]++}}x.clamp();x.drShiftTo(this.m.t,x);if(x.compareTo(this.m)>=0)x.subTo(this.m,x)}function montSqrTo(x,r){x.squareTo(r);this.reduce(r)}function montMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return(this.t>0?this[0]&1:this.s)==0}function bnpExp(e,z){if(e>4294967295||e<1)return BigInteger.ONE;var r=nbi(),r2=nbi(),g=z.convert(this),i=nbits(e)-1;g.copyTo(r);while(--i>=0){z.sqrTo(r,r2);if((e&1<<i)>0)z.mulTo(r2,g,r);else{var t=r;r=r2;r2=t}}return z.revert(r)}function bnModPowInt(e,m){var z;if(e<256||m.isEven())z=new Classic(m);else z=new Montgomery(m);return this.exp(e,z)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);function bnpFromRadix(s,b){this.fromInt(0);if(b==null)b=10;var cs=this.chunkSize(b);var d=Math.pow(b,cs),mi=false,j=0,w=0;for(var i=0;i<s.length;++i){var x=intAt(s,i);if(x<0){if(s.charAt(i)=="-"&&this.signum()==0)mi=true;continue}w=b*w+x;if(++j>=cs){this.dMultiply(d);this.dAddOffset(w,0);j=0;w=0}}if(j>0){this.dMultiply(Math.pow(b,j));this.dAddOffset(w,0)}if(mi)BigInteger.ZERO.subTo(this,this)}function bnpChunkSize(r){return Math.floor(Math.LN2*this.DB/Math.log(r))}function bnSigNum(){if(this.s<0)return-1;else if(this.t<=0||this.t==1&&this[0]<=0)return 0;else return 1}function bnpDMultiply(n){this[this.t]=this.am(0,n-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(n,w){if(n==0)return;while(this.t<=w)this[this.t++]=0;this[w]+=n;while(this[w]>=this.DV){this[w]-=this.DV;if(++w>=this.t)this[this.t++]=0;++this[w]}}function bnpToRadix(b){if(b==null)b=10;if(this.signum()==0||b<2||b>36)return"0";var cs=this.chunkSize(b);var a=Math.pow(b,cs);var d=nbv(a),y=nbi(),z=nbi(),r="";this.divRemTo(d,y,z);while(y.signum()>0){r=(a+z.intValue()).toString(b).substr(1)+r;y.divRemTo(d,y,z)}return z.intValue().toString(b)+r}function bnIntValue(){if(this.s<0){if(this.t==1)return this[0]-this.DV;else if(this.t==0)return-1}else if(this.t==1)return this[0];else if(this.t==0)return 0;return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnpAddTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]+a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c+=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c+=a[i];r[i++]=c&this.DM;c>>=this.DB}c+=a.s}r.s=c<0?-1:0;if(c>0)r[i++]=c;else if(c<-1)r[i++]=this.DV+c;r.t=i;r.clamp()}BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.addTo=bnpAddTo;var Wrapper={abs:(function(l,h){var x=new goog.math.Long(l,h);var ret;if(x.isNegative()){ret=x.negate()}else{ret=x}HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_}),ensureTemps:(function(){if(Wrapper.ensuredTemps)return;Wrapper.ensuredTemps=true;Wrapper.two32=new BigInteger;Wrapper.two32.fromString("4294967296",10);Wrapper.two64=new BigInteger;Wrapper.two64.fromString("18446744073709551616",10);Wrapper.temp1=new BigInteger;Wrapper.temp2=new BigInteger}),lh2bignum:(function(l,h){var a=new BigInteger;a.fromString(h.toString(),10);var b=new BigInteger;a.multiplyTo(Wrapper.two32,b);var c=new BigInteger;c.fromString(l.toString(),10);var d=new BigInteger;c.addTo(b,d);return d}),stringify:(function(l,h,unsigned){var ret=(new goog.math.Long(l,h)).toString();if(unsigned&&ret[0]=="-"){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(ret,10);ret=new BigInteger;Wrapper.two64.addTo(bignum,ret);ret=ret.toString(10)}return ret}),fromString:(function(str,base,min,max,unsigned){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(str,base);var bigmin=new BigInteger;bigmin.fromString(min,10);var bigmax=new BigInteger;bigmax.fromString(max,10);if(unsigned&&bignum.compareTo(BigInteger.ZERO)<0){var temp=new BigInteger;bignum.addTo(Wrapper.two64,temp);bignum=temp}var error=false;if(bignum.compareTo(bigmin)<0){bignum=bigmin;error=true}else if(bignum.compareTo(bigmax)>0){bignum=bigmax;error=true}var ret=goog.math.Long.fromString(bignum.toString());HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_;if(error)throw"range error"})};return Wrapper})();if(memoryInitializer){if(typeof Module["locateFile"]==="function"){memoryInitializer=Module["locateFile"](memoryInitializer)}else if(Module["memoryInitializerPrefixURL"]){memoryInitializer=Module["memoryInitializerPrefixURL"]+memoryInitializer}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=Module["readBinary"](memoryInitializer);HEAPU8.set(data,STATIC_BASE)}else{addRunDependency("memory initializer");Browser.asyncLoad(memoryInitializer,(function(data){HEAPU8.set(data,STATIC_BASE);removeRunDependency("memory initializer")}),(function(data){throw"could not load memory initializer "+memoryInitializer}))}}function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"]&&shouldRunNow)run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);initialStackTop=STACKTOP;try{var ret=Module["_main"](argc,argv,0);exit(ret)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(ENVIRONMENT_IS_WEB&&preloadStartTime!==null){Module.printErr("pre-main prep time: "+(Date.now()-preloadStartTime)+" ms")}if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status){if(Module["noExitRuntime"]){return}ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;function abort(text){if(text){Module.print(text);Module.printErr(text)}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";throw"abort() at "+stackTrace()+extra}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run();var RBUFFER_SIZE=RELOOPER_BUFFER_SIZE;var rbuffer=_malloc(RBUFFER_SIZE);_rl_set_output_buffer(rbuffer,RBUFFER_SIZE);var TBUFFER_SIZE=RELOOPER_BUFFER_SIZE/2;var tbuffer=_malloc(TBUFFER_SIZE);var VBUFFER_SIZE=256;var vbuffer=_malloc(VBUFFER_SIZE);var RelooperGlue={};RelooperGlue["init"]=(function(){this.r=_rl_new_relooper()}),RelooperGlue["cleanup"]=(function(){_rl_delete_relooper(this.r)}),RelooperGlue["addBlock"]=(function(text,branchVar){assert(this.r);if(text){assert(text.length+1<TBUFFER_SIZE,"buffer too small, increase RELOOPER_BUFFER_SIZE");writeAsciiToMemory(text,tbuffer);if(branchVar){assert(branchVar.length+1<VBUFFER_SIZE,"buffer too small, increase RELOOPER_BUFFER_SIZE");writeAsciiToMemory(branchVar,vbuffer)}}var b=_rl_new_block(text?tbuffer:0,branchVar?vbuffer:0);_rl_relooper_add_block(this.r,b);return b});RelooperGlue["setBlockCode"]=(function(block,text){assert(this.r);assert(text.length+1<TBUFFER_SIZE,"buffer too small, increase RELOOPER_BUFFER_SIZE");writeAsciiToMemory(text,tbuffer);_rl_set_block_code(block,tbuffer)});RelooperGlue["addBranch"]=(function(from,to,condition,code){assert(this.r);if(condition){assert(condition.length+1<TBUFFER_SIZE/2,"buffer too small, increase RELOOPER_BUFFER_SIZE");writeAsciiToMemory(condition,tbuffer);condition=tbuffer}else{condition=0}if(code){assert(code.length+1<TBUFFER_SIZE/2,"buffer too small, increase RELOOPER_BUFFER_SIZE");writeAsciiToMemory(code,tbuffer+TBUFFER_SIZE/2);code=tbuffer+TBUFFER_SIZE/2}else{code=0}_rl_block_add_branch_to(from,to,condition,code)});RelooperGlue["render"]=(function(entry){assert(this.r);assert(entry);_rl_relooper_calculate(this.r,entry);_rl_relooper_render(this.r);var ret=Pointer_stringify(rbuffer);_rl_delete_relooper(this.r);this.r=0;return ret});RelooperGlue["setDebug"]=(function(debug){_rl_set_debugging(+!!debug)});RelooperGlue["setAsmJSMode"]=(function(on){_rl_set_asm_js_mode(on)});Module["Relooper"]=RelooperGlue





  return Module.Relooper;
})(Relooper);
/*
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @const */ var release = true;
/** @const */ var profile = 0;
/*
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var jsGlobal = (function () {
    return this || (1, eval)('this');
})();
var inBrowser = typeof console !== "undefined" && console.info;
if (!jsGlobal.performance) {
    jsGlobal.performance = {};
}
if (!jsGlobal.performance.now) {
    jsGlobal.performance.now = typeof dateNow !== 'undefined' ? dateNow : Date.now;
}
var J2ME;
(function (J2ME) {
    function isIdentifierStart(c) {
        return (c === '$') || (c === '_') || (c === '\\') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }
    J2ME.isIdentifierStart = isIdentifierStart;
    function isIdentifierPart(c) {
        return (c === '$') || (c === '_') || (c === '\\') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || ((c >= '0') && (c <= '9'));
    }
    J2ME.isIdentifierPart = isIdentifierPart;
    function isIdentifierName(s) {
        if (!isIdentifierStart(s[0])) {
            return false;
        }
        for (var i = 1; i < s.length; i++) {
            if (!isIdentifierPart(s[i])) {
                return false;
            }
        }
        return true;
    }
    J2ME.isIdentifierName = isIdentifierName;
    function isObject(value) {
        return typeof value === "object" || typeof value === 'function';
    }
    J2ME.isObject = isObject;
    function isNullOrUndefined(value) {
        return value == undefined;
    }
    J2ME.isNullOrUndefined = isNullOrUndefined;
    var Debug;
    (function (Debug) {
        function error(message) {
            throw new Error(message);
        }
        Debug.error = error;
        function assert(condition, message) {
            if (message === void 0) { message = "assertion failed"; }
            if (condition === "") {
                condition = true;
            }
            if (!condition) {
                Debug.error(message.toString());
            }
        }
        Debug.assert = assert;
        function assertUnreachable(msg) {
            var location = new Error().stack.split('\n')[1];
            throw new Error("Reached unreachable location " + location + msg);
        }
        Debug.assertUnreachable = assertUnreachable;
        function abstractMethod(message) {
            Debug.assert(false, "Abstract Method " + message);
        }
        Debug.abstractMethod = abstractMethod;
        function unexpected(message) {
            Debug.assert(false, "Unexpected: " + message);
        }
        Debug.unexpected = unexpected;
    })(Debug = J2ME.Debug || (J2ME.Debug = {}));
    function getTicks() {
        return performance.now();
    }
    J2ME.getTicks = getTicks;
    var ArrayUtilities;
    (function (ArrayUtilities) {
        var assert = Debug.assert;
        ArrayUtilities.EMPTY_ARRAY = [];
        function makeArrays(length) {
            var arrays = [];
            for (var i = 0; i < length; i++) {
                arrays.push(new Array(i));
            }
            return arrays;
        }
        ArrayUtilities.makeArrays = makeArrays;
        /**
         * Pops elements from a source array into a destination array. This avoids
         * allocations and should be faster. The elements in the destination array
         * are pushed in the same order as they appear in the source array:
         *
         * popManyInto([1, 2, 3], 2, dst) => dst = [2, 3]
         */
        function popManyInto(src, count, dst) {
            release || assert(src.length >= count);
            for (var i = count - 1; i >= 0; i--) {
                dst[i] = src.pop();
            }
            dst.length = count;
        }
        ArrayUtilities.popManyInto = popManyInto;
        function pushMany(dst, src) {
            for (var i = 0; i < src.length; i++) {
                dst.push(src[i]);
            }
        }
        ArrayUtilities.pushMany = pushMany;
        function pushUnique(array, value) {
            for (var i = 0, j = array.length; i < j; i++) {
                if (array[i] === value) {
                    return i;
                }
            }
            array.push(value);
            return array.length - 1;
        }
        ArrayUtilities.pushUnique = pushUnique;
        function unique(array) {
            var result = [];
            for (var i = 0; i < array.length; i++) {
                pushUnique(result, array[i]);
            }
            return result;
        }
        ArrayUtilities.unique = unique;
        /**
         * You'd hope that new Array() triggers different heuristics about how and when it should fall back
         * to dictionary mode. I've experienced ION bailouts from non-dense new Arrays(), hence this helper
         * method.
         */
        function makeDenseArray(length, value) {
            var array = new Array(length);
            for (var i = 0; i < length; i++) {
                array[i] = value;
            }
            return array;
        }
        ArrayUtilities.makeDenseArray = makeDenseArray;
    })(ArrayUtilities = J2ME.ArrayUtilities || (J2ME.ArrayUtilities = {}));
    var ObjectUtilities;
    (function (ObjectUtilities) {
        function createMap() {
            return Object.create(null);
        }
        ObjectUtilities.createMap = createMap;
    })(ObjectUtilities = J2ME.ObjectUtilities || (J2ME.ObjectUtilities = {}));
    var FunctionUtilities;
    (function (FunctionUtilities) {
        function makeForwardingGetter(target) {
            return new Function("return this[\"" + target + "\"]");
        }
        FunctionUtilities.makeForwardingGetter = makeForwardingGetter;
        function makeForwardingSetter(target) {
            return new Function("value", "this[\"" + target + "\"] = value;");
        }
        FunctionUtilities.makeForwardingSetter = makeForwardingSetter;
        function makeDebugForwardingSetter(target, checker) {
            return function (value) {
                Debug.assert(checker(value), "Unexpected value for target " + target);
                this[target] = value;
            };
        }
        FunctionUtilities.makeDebugForwardingSetter = makeDebugForwardingSetter;
    })(FunctionUtilities = J2ME.FunctionUtilities || (J2ME.FunctionUtilities = {}));
    var StringUtilities;
    (function (StringUtilities) {
        var assert = Debug.assert;
        /**
         * Returns a reasonably sized description of the |value|, to be used for debugging purposes.
         */
        function toSafeString(value) {
            if (typeof value === "string") {
                return "\"" + value + "\"";
            }
            if (typeof value === "number" || typeof value === "boolean") {
                return String(value);
            }
            if (value instanceof Array) {
                return "[] " + value.length;
            }
            return typeof value;
        }
        StringUtilities.toSafeString = toSafeString;
        function escapeString(str) {
            if (str !== undefined) {
                str = str.replace(/[^\w$]/gi, "$"); /* No dots, colons, dashes and /s */
                if (/^\d/.test(str)) {
                    str = '$' + str;
                }
            }
            return str;
        }
        StringUtilities.escapeString = escapeString;
        function quote(s) {
            return "\"" + s + "\"";
        }
        StringUtilities.quote = quote;
        var _encoding = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$_';
        var arrays = [null, new Array(1), new Array(2), new Array(3), new Array(4), new Array(5), new Array(6)];
        function variableLengthEncodeInt32(n) {
            var e = _encoding;
            var bitCount = (32 - Math.clz32(n));
            release || assert(bitCount <= 32, bitCount);
            var l = Math.ceil(bitCount / 6);
            var a = arrays[l];
            // Encode length followed by six bit chunks.
            a[0] = e[l];
            for (var i = l - 1, j = 1; i >= 0; i--) {
                var offset = (i * 6);
                a[j++] = e[(n >> offset) & 0x3F];
            }
            var s = a.join("");
            return s;
        }
        StringUtilities.variableLengthEncodeInt32 = variableLengthEncodeInt32;
        function toEncoding(n) {
            return _encoding[n];
        }
        StringUtilities.toEncoding = toEncoding;
        var _concat3array = new Array(3);
        /**
         * The concatN() functions concatenate multiple strings in a way that
         * avoids creating intermediate strings, unlike String.prototype.concat().
         *
         * Note that these functions don't have identical behaviour to using '+',
         * because they will ignore any arguments that are |undefined| or |null|.
         * This usually doesn't matter.
         */
        function concat3(s0, s1, s2) {
            _concat3array[0] = s0;
            _concat3array[1] = s1;
            _concat3array[2] = s2;
            return _concat3array.join('');
        }
        StringUtilities.concat3 = concat3;
    })(StringUtilities = J2ME.StringUtilities || (J2ME.StringUtilities = {}));
    var HashUtilities;
    (function (HashUtilities) {
        // Copyright (c) 2011 Gary Court
        //
        // Permission is hereby granted, free of charge, to any person obtaining
        // a copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to
        // permit persons to whom the Software is furnished to do so, subject to
        // the following conditions:
        //
        // The above copyright notice and this permission notice shall be
        // included in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        // IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
        // CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        // TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
        // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        // https://github.com/garycourt/murmurhash-js
        function hashBytesTo32BitsMurmur(data, offset, length) {
            var l = length, h = 0x12345678 ^ l, i = offset, k;
            while (l >= 4) {
                k = (data[i]) | (data[++i] << 8) | (data[++i] << 16) | (data[++i] << 24);
                k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));
                k ^= k >>> 24;
                k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));
                h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;
                l -= 4;
                ++i;
            }
            switch (l) {
                case 3: h ^= data[i + 2] << 16;
                case 2: h ^= data[i + 1] << 8;
                case 1:
                    h ^= data[i];
                    h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
            }
            h ^= h >>> 13;
            h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
            h ^= h >>> 15;
            return h >>> 0;
        }
        HashUtilities.hashBytesTo32BitsMurmur = hashBytesTo32BitsMurmur;
    })(HashUtilities = J2ME.HashUtilities || (J2ME.HashUtilities = {}));
    (function (Numbers) {
        Numbers[Numbers["MaxU16"] = 0xFFFF] = "MaxU16";
        Numbers[Numbers["MaxI16"] = 0x7FFF] = "MaxI16";
        Numbers[Numbers["MinI16"] = -0x8000] = "MinI16";
    })(J2ME.Numbers || (J2ME.Numbers = {}));
    var Numbers = J2ME.Numbers;
    var IntegerUtilities;
    (function (IntegerUtilities) {
        var sharedBuffer = new ArrayBuffer(8);
        IntegerUtilities.i32 = new Int32Array(sharedBuffer);
        IntegerUtilities.f32 = new Float32Array(sharedBuffer);
        IntegerUtilities.f64 = new Float64Array(sharedBuffer);
        /**
         * Convert 32 bits into a float.
         */
        function int32ToFloat(i) {
            IntegerUtilities.i32[0] = i;
            return IntegerUtilities.f32[0];
        }
        IntegerUtilities.int32ToFloat = int32ToFloat;
        function int64ToDouble(high, low) {
            IntegerUtilities.i32[0] = low;
            IntegerUtilities.i32[1] = high;
            return IntegerUtilities.f64[0];
        }
        IntegerUtilities.int64ToDouble = int64ToDouble;
        function bitCount(i) {
            i = i - ((i >> 1) & 0x55555555);
            i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
            return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
        }
        IntegerUtilities.bitCount = bitCount;
        function ones(i) {
            i = i - ((i >> 1) & 0x55555555);
            i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
            return ((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
        }
        IntegerUtilities.ones = ones;
        /**
         * Polyfill imul.
         */
        if (!Math.imul) {
            Math.imul = function imul(a, b) {
                var ah = (a >>> 16) & 0xffff;
                var al = a & 0xffff;
                var bh = (b >>> 16) & 0xffff;
                var bl = b & 0xffff;
                // the shift by 0 fixes the sign on the high part
                // the final |0 converts the unsigned value into a signed value
                return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
            };
        }
        /**
         * Polyfill clz32.
         */
        if (!Math.clz32) {
            Math.clz32 = function clz32(i) {
                i |= (i >> 1);
                i |= (i >> 2);
                i |= (i >> 4);
                i |= (i >> 8);
                i |= (i >> 16);
                return 32 - IntegerUtilities.ones(i);
            };
        }
    })(IntegerUtilities = J2ME.IntegerUtilities || (J2ME.IntegerUtilities = {}));
    (function (LogLevel) {
        LogLevel[LogLevel["Error"] = 0x1] = "Error";
        LogLevel[LogLevel["Warn"] = 0x2] = "Warn";
        LogLevel[LogLevel["Debug"] = 0x4] = "Debug";
        LogLevel[LogLevel["Log"] = 0x8] = "Log";
        LogLevel[LogLevel["Info"] = 0x10] = "Info";
        LogLevel[LogLevel["All"] = 0x1f] = "All";
    })(J2ME.LogLevel || (J2ME.LogLevel = {}));
    var LogLevel = J2ME.LogLevel;
    var IndentingWriter = (function () {
        function IndentingWriter(suppressOutput, out) {
            if (suppressOutput === void 0) { suppressOutput = false; }
            this._tab = " ";
            this._padding = "";
            this._suppressOutput = suppressOutput;
            this._out = out || IndentingWriter.stdout;
            this._outNoNewline = out || IndentingWriter.stdoutNoNewline;
        }
        IndentingWriter.prototype.write = function (str, writePadding) {
            if (str === void 0) { str = ""; }
            if (writePadding === void 0) { writePadding = false; }
            if (!this._suppressOutput) {
                this._outNoNewline((writePadding ? this._padding : "") + str);
            }
        };
        IndentingWriter.prototype.writeLn = function (str) {
            if (str === void 0) { str = ""; }
            if (!this._suppressOutput) {
                this._out(this._padding + str);
            }
        };
        IndentingWriter.prototype.writeTimeLn = function (str) {
            if (str === void 0) { str = ""; }
            if (!this._suppressOutput) {
                this._out(this._padding + performance.now().toFixed(2) + " " + str);
            }
        };
        IndentingWriter.prototype.writeComment = function (str) {
            var lines = str.split("\n");
            if (lines.length === 1) {
                this.writeLn("// " + lines[0]);
            }
            else {
                this.writeLn("/**");
                for (var i = 0; i < lines.length; i++) {
                    this.writeLn(" * " + lines[i]);
                }
                this.writeLn(" */");
            }
        };
        IndentingWriter.prototype.writeLns = function (str) {
            var lines = str.split("\n");
            for (var i = 0; i < lines.length; i++) {
                this.writeLn(lines[i]);
            }
        };
        IndentingWriter.prototype.errorLn = function (str) {
            if (IndentingWriter.logLevel & 1 /* Error */) {
                this.boldRedLn(str);
            }
        };
        IndentingWriter.prototype.warnLn = function (str) {
            if (IndentingWriter.logLevel & 2 /* Warn */) {
                this.yellowLn(str);
            }
        };
        IndentingWriter.prototype.debugLn = function (str) {
            if (IndentingWriter.logLevel & 4 /* Debug */) {
                this.purpleLn(str);
            }
        };
        IndentingWriter.prototype.logLn = function (str) {
            if (IndentingWriter.logLevel & 8 /* Log */) {
                this.writeLn(str);
            }
        };
        IndentingWriter.prototype.infoLn = function (str) {
            if (IndentingWriter.logLevel & 16 /* Info */) {
                this.writeLn(str);
            }
        };
        IndentingWriter.prototype.yellowLn = function (str) {
            this.colorLn(IndentingWriter.YELLOW, str);
        };
        IndentingWriter.prototype.greenLn = function (str) {
            this.colorLn(IndentingWriter.GREEN, str);
        };
        IndentingWriter.prototype.boldRedLn = function (str) {
            this.colorLn(IndentingWriter.BOLD_RED, str);
        };
        IndentingWriter.prototype.redLn = function (str) {
            this.colorLn(IndentingWriter.RED, str);
        };
        IndentingWriter.prototype.purpleLn = function (str) {
            this.colorLn(IndentingWriter.PURPLE, str);
        };
        IndentingWriter.prototype.colorLn = function (color, str) {
            if (!this._suppressOutput) {
                if (!inBrowser) {
                    this._out(this._padding + color + str + IndentingWriter.ENDC);
                }
                else {
                    this._out(this._padding + str);
                }
            }
        };
        IndentingWriter.prototype.redLns = function (str) {
            this.colorLns(IndentingWriter.RED, str);
        };
        IndentingWriter.prototype.colorLns = function (color, str) {
            var lines = str.split("\n");
            for (var i = 0; i < lines.length; i++) {
                this.colorLn(color, lines[i]);
            }
        };
        IndentingWriter.prototype.enter = function (str) {
            if (!this._suppressOutput) {
                this._out(this._padding + str);
            }
            this.indent();
        };
        IndentingWriter.prototype.leaveAndEnter = function (str) {
            this.leave(str);
            this.indent();
        };
        IndentingWriter.prototype.leave = function (str) {
            this.outdent();
            if (!this._suppressOutput) {
                this._out(this._padding + str);
            }
        };
        IndentingWriter.prototype.indent = function () {
            this._padding += this._tab;
        };
        IndentingWriter.prototype.outdent = function () {
            if (this._padding.length > 0) {
                this._padding = this._padding.substring(0, this._padding.length - this._tab.length);
            }
        };
        IndentingWriter.prototype.writeArray = function (arr, detailed, noNumbers) {
            if (detailed === void 0) { detailed = false; }
            if (noNumbers === void 0) { noNumbers = false; }
            detailed = detailed || false;
            for (var i = 0, j = arr.length; i < j; i++) {
                var prefix = "";
                if (detailed) {
                    if (arr[i] === null) {
                        prefix = "null";
                    }
                    else if (arr[i] === undefined) {
                        prefix = "undefined";
                    }
                    else {
                        prefix = arr[i].constructor.name;
                    }
                    prefix += " ";
                }
                var number = noNumbers ? "" : ("" + i).padRight(' ', 4);
                this.writeLn(number + prefix + arr[i]);
            }
        };
        IndentingWriter.PURPLE = '\x1B[94m';
        IndentingWriter.YELLOW = '\x1B[93m';
        IndentingWriter.GREEN = '\x1B[92m';
        IndentingWriter.RED = '\x1B[91m';
        IndentingWriter.BOLD_RED = '\x1B[1;91m';
        IndentingWriter.ENDC = '\x1B[0m';
        IndentingWriter.logLevel = 31 /* All */;
        IndentingWriter.stdout = inBrowser ? console.info.bind(console) : print;
        IndentingWriter.stdoutNoNewline = inBrowser ? console.info.bind(console) : putstr;
        IndentingWriter.stderr = inBrowser ? console.error.bind(console) : printErr;
        return IndentingWriter;
    })();
    J2ME.IndentingWriter = IndentingWriter;
    var BitSets;
    (function (BitSets) {
        var assert = Debug.assert;
        BitSets.ADDRESS_BITS_PER_WORD = 5;
        BitSets.BITS_PER_WORD = 1 << BitSets.ADDRESS_BITS_PER_WORD;
        BitSets.BIT_INDEX_MASK = BitSets.BITS_PER_WORD - 1;
        function getSize(length) {
            return ((length + (BitSets.BITS_PER_WORD - 1)) >> BitSets.ADDRESS_BITS_PER_WORD) << BitSets.ADDRESS_BITS_PER_WORD;
        }
        function toBitString(on, off) {
            var self = this;
            on = on || "1";
            off = off || "0";
            var str = "";
            for (var i = 0; i < length; i++) {
                str += self.get(i) ? on : off;
            }
            return str;
        }
        function toString(names) {
            var self = this;
            var set = [];
            for (var i = 0; i < length; i++) {
                if (self.get(i)) {
                    set.push(names ? names[i] : i);
                }
            }
            return set.join(", ");
        }
        var Uint32ArrayBitSet = (function () {
            function Uint32ArrayBitSet(length) {
                this.size = getSize(length);
                this.count = 0;
                this.dirty = 0;
                this.length = length;
                this.bits = new Uint32Array(this.size >> BitSets.ADDRESS_BITS_PER_WORD);
            }
            Uint32ArrayBitSet.prototype.recount = function () {
                if (!this.dirty) {
                    return;
                }
                var bits = this.bits;
                var c = 0;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var v = bits[i];
                    v = v - ((v >> 1) & 0x55555555);
                    v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
                    c += ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
                }
                this.count = c;
                this.dirty = 0;
            };
            Uint32ArrayBitSet.prototype.set = function (i) {
                var n = i >> BitSets.ADDRESS_BITS_PER_WORD;
                var old = this.bits[n];
                var b = old | (1 << (i & BitSets.BIT_INDEX_MASK));
                this.bits[n] = b;
                this.dirty |= old ^ b;
            };
            Uint32ArrayBitSet.prototype.setAll = function () {
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    bits[i] = 0xFFFFFFFF;
                }
                this.count = this.size;
                this.dirty = 0;
            };
            Uint32ArrayBitSet.prototype.assign = function (set) {
                this.count = set.count;
                this.dirty = set.dirty;
                this.size = set.size;
                for (var i = 0, j = this.bits.length; i < j; i++) {
                    this.bits[i] = set.bits[i];
                }
            };
            Uint32ArrayBitSet.prototype.nextSetBit = function (from, to) {
                if (from === to) {
                    return -1;
                }
                var bits = this.bits;
                for (var i = from; i < to; i++) {
                    var word = bits[i >> BitSets.ADDRESS_BITS_PER_WORD];
                    if (((word & 1 << (i & BitSets.BIT_INDEX_MASK))) !== 0) {
                        return i;
                    }
                }
            };
            Uint32ArrayBitSet.prototype.clear = function (i) {
                var n = i >> BitSets.ADDRESS_BITS_PER_WORD;
                var old = this.bits[n];
                var b = old & ~(1 << (i & BitSets.BIT_INDEX_MASK));
                this.bits[n] = b;
                this.dirty |= old ^ b;
            };
            Uint32ArrayBitSet.prototype.get = function (i) {
                var word = this.bits[i >> BitSets.ADDRESS_BITS_PER_WORD];
                return ((word & 1 << (i & BitSets.BIT_INDEX_MASK))) !== 0;
            };
            Uint32ArrayBitSet.prototype.clearAll = function () {
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    bits[i] = 0;
                }
                this.count = 0;
                this.dirty = 0;
            };
            Uint32ArrayBitSet.prototype._union = function (other) {
                var dirty = this.dirty;
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = old | otherBits[i];
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.intersect = function (other) {
                var dirty = this.dirty;
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = old & otherBits[i];
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.subtract = function (other) {
                var dirty = this.dirty;
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = old & ~otherBits[i];
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.negate = function () {
                var dirty = this.dirty;
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = ~old;
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.forEach = function (fn) {
                release || assert(fn);
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BitSets.BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                fn(i * BitSets.BITS_PER_WORD + k);
                            }
                        }
                    }
                }
            };
            Uint32ArrayBitSet.prototype.toArray = function () {
                var set = [];
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BitSets.BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                set.push(i * BitSets.BITS_PER_WORD + k);
                            }
                        }
                    }
                }
                return set;
            };
            Uint32ArrayBitSet.prototype.equals = function (other) {
                if (this.size !== other.size) {
                    return false;
                }
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    if (bits[i] !== otherBits[i]) {
                        return false;
                    }
                }
                return true;
            };
            Uint32ArrayBitSet.prototype.contains = function (other) {
                if (this.size !== other.size) {
                    return false;
                }
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    if ((bits[i] | otherBits[i]) !== bits[i]) {
                        return false;
                    }
                }
                return true;
            };
            Uint32ArrayBitSet.prototype.isEmpty = function () {
                this.recount();
                return this.count === 0;
            };
            Uint32ArrayBitSet.prototype.clone = function () {
                var set = new Uint32ArrayBitSet(this.length);
                set._union(this);
                return set;
            };
            return Uint32ArrayBitSet;
        })();
        BitSets.Uint32ArrayBitSet = Uint32ArrayBitSet;
        Uint32ArrayBitSet.prototype.toString = toString;
        Uint32ArrayBitSet.prototype.toBitString = toBitString;
    })(BitSets = J2ME.BitSets || (J2ME.BitSets = {}));
})(J2ME || (J2ME = {}));
/**
 * Extend builtin prototypes.
 *
 * TODO: Go through the code and remove all references to these.
 */
(function () {
    function extendBuiltin(prototype, property, value) {
        if (!prototype[property]) {
            Object.defineProperty(prototype, property, { value: value, writable: true, configurable: true, enumerable: false });
        }
    }
    function removeColors(s) {
        return s.replace(/\x1B\[[0-9]*m/g, "");
    }
    extendBuiltin(String.prototype, "padRight", function (c, n) {
        var str = this;
        var length = removeColors(str).length;
        if (!c || length >= n) {
            return str;
        }
        var max = (n - length) / c.length;
        for (var i = 0; i < max; i++) {
            str += c;
        }
        return str;
    });
    extendBuiltin(String.prototype, "padLeft", function (c, n) {
        var str = this;
        var length = str.length;
        if (!c || length >= n) {
            return str;
        }
        var max = (n - length) / c.length;
        for (var i = 0; i < max; i++) {
            str = c + str;
        }
        return str;
    });
    extendBuiltin(String.prototype, "trim", function () {
        return this.replace(/^\s+|\s+$/g, "");
    });
    extendBuiltin(String.prototype, "endsWith", function (str) {
        return this.indexOf(str, this.length - str.length) !== -1;
    });
})();
/**
 * Port of Java java.util.Hashtable.
 */
var J2ME;
(function (J2ME) {
    var assert = J2ME.Debug.assert;
    var Uint8HashtableEntry = (function () {
        function Uint8HashtableEntry() {
            this.hash = 0;
            this.value = null;
            this.next = null;
            this.key = null;
        }
        return Uint8HashtableEntry;
    })();
    J2ME.Uint8HashtableEntry = Uint8HashtableEntry;
    function arrayEqual(a, b) {
        if (a === b) {
            return true;
        }
        if (a.length !== b.length) {
            return false;
        }
        for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    function arrayRangeEqual(a, offset, length, b) {
        if (length !== b.length) {
            return false;
        }
        var j = offset;
        for (var i = 0; i < length; j++, i++) {
            if (a[j] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    function arrayHash(array) {
        return arrayRangeHash(array, 0, array.length);
    }
    function arrayRangeHash(array, offset, length) {
        var h = 0;
        var l = offset + length;
        for (var i = offset; i < l; i++) {
            h = (Math.imul(31, h) | 0 + array[i] | 0);
        }
        return h;
    }
    function nullArray(capacity) {
        var array = new Array(capacity);
        for (var i = 0; i < capacity; i++) {
            array[i] = null;
        }
        return array;
    }
    var Uint8Hashtable = (function () {
        function Uint8Hashtable(initialCapacity) {
            this.count = 0;
            release || assert(initialCapacity >= 0);
            if (initialCapacity == 0) {
                initialCapacity = 1;
            }
            this.table = nullArray(initialCapacity);
            this.threshold = ((initialCapacity * Uint8Hashtable.loadFactorPercent) / 100) | 0;
        }
        Uint8Hashtable.prototype.contains = function (key) {
            var table = this.table;
            var hash = arrayHash(key);
            var index = (hash & 0x7FFFFFFF) % table.length;
            for (var e = table[index]; e !== null; e = e.next) {
                if ((e.hash === hash) && arrayEqual(e.key, key)) {
                    return true;
                }
            }
            return false;
        };
        Uint8Hashtable.prototype.getByRange = function (key, offset, length) {
            var table = this.table;
            var hash = arrayRangeHash(key, offset, length);
            var index = (hash & 0x7FFFFFFF) % table.length;
            for (var e = table[index]; e !== null; e = e.next) {
                if ((e.hash === hash) && arrayRangeEqual(key, offset, length, e.key)) {
                    return e.value;
                }
            }
            return null;
        };
        Uint8Hashtable.prototype.get = function (key) {
            var table = this.table;
            var hash = arrayHash(key);
            var index = (hash & 0x7FFFFFFF) % table.length;
            for (var e = table[index]; e !== null; e = e.next) {
                if ((e.hash === hash) && arrayEqual(e.key, key)) {
                    return e.value;
                }
            }
            return null;
        };
        Uint8Hashtable.prototype.put = function (key, value) {
            // Make sure the value is not null
            release || assert(value !== null);
            // Makes sure the key is not already in the hashtable.
            var table = this.table;
            var hash = arrayHash(key);
            var index = (hash & 0x7FFFFFFF) % table.length;
            for (var e = table[index]; e !== null; e = e.next) {
                if ((e.hash === hash) && arrayEqual(e.key, key)) {
                    var old = e.value;
                    e.value = value;
                    return old;
                }
            }
            if (this.count >= this.threshold) {
                // Rehash the table if the threshold is exceeded
                this.rehash();
                return this.put(key, value);
            }
            // Creates the new entry.
            var e = new Uint8HashtableEntry();
            e.hash = hash;
            e.key = key;
            e.value = value;
            e.next = table[index];
            table[index] = e;
            this.count++;
            return null;
        };
        Uint8Hashtable.prototype.rehash = function () {
            var oldCapacity = this.table.length;
            var oldTable = this.table;
            var newCapacity = oldCapacity * 2 + 1;
            var newTable = nullArray(newCapacity);
            this.threshold = ((newCapacity * Uint8Hashtable.loadFactorPercent) / 100) | 0;
            this.table = newTable;
            for (var i = oldCapacity; i-- > 0;) {
                for (var old = oldTable[i]; old !== null;) {
                    var e = old;
                    old = old.next;
                    var index = (e.hash & 0x7FFFFFFF) % newCapacity;
                    e.next = newTable[index];
                    newTable[index] = e;
                }
            }
        };
        Uint8Hashtable.loadFactorPercent = 75;
        return Uint8Hashtable;
    })();
    J2ME.Uint8Hashtable = Uint8Hashtable;
})(J2ME || (J2ME = {}));
/*
 node-jvm
 Copyright (c) 2013 Yaroslav Gaponov <yaroslav.gaponov@gmail.com>
*/
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var J2ME;
(function (J2ME) {
    var assert = J2ME.Debug.assert;
    var concat3 = J2ME.StringUtilities.concat3;
    var pushMany = J2ME.ArrayUtilities.pushMany;
    var unique = J2ME.ArrayUtilities.unique;
    var hashBytesTo32BitsMurmur = J2ME.HashUtilities.hashBytesTo32BitsMurmur;
    (function (UTF8Chars) {
        UTF8Chars[UTF8Chars["Z"] = 90] = "Z";
        UTF8Chars[UTF8Chars["C"] = 67] = "C";
        UTF8Chars[UTF8Chars["F"] = 70] = "F";
        UTF8Chars[UTF8Chars["D"] = 68] = "D";
        UTF8Chars[UTF8Chars["B"] = 66] = "B";
        UTF8Chars[UTF8Chars["S"] = 83] = "S";
        UTF8Chars[UTF8Chars["I"] = 73] = "I";
        UTF8Chars[UTF8Chars["J"] = 74] = "J";
        UTF8Chars[UTF8Chars["V"] = 86] = "V";
        UTF8Chars[UTF8Chars["L"] = 76] = "L";
        UTF8Chars[UTF8Chars["OpenBracket"] = 91] = "OpenBracket";
        UTF8Chars[UTF8Chars["Semicolon"] = 59] = "Semicolon";
        UTF8Chars[UTF8Chars["Dot"] = 46] = "Dot";
        UTF8Chars[UTF8Chars["Slash"] = 47] = "Slash";
        UTF8Chars[UTF8Chars["OpenParenthesis"] = 40] = "OpenParenthesis";
        UTF8Chars[UTF8Chars["CloseParenthesis"] = 41] = "CloseParenthesis";
    })(J2ME.UTF8Chars || (J2ME.UTF8Chars = {}));
    var UTF8Chars = J2ME.UTF8Chars;
    var UTF8;
    (function (UTF8) {
        UTF8.Code = new Uint8Array([67, 111, 100, 101]);
        UTF8.ConstantValue = new Uint8Array([67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101]);
        UTF8.Init = new Uint8Array([60, 105, 110, 105, 116, 62]);
        UTF8.Z = new Uint8Array([90 /* Z */]);
        UTF8.C = new Uint8Array([67 /* C */]);
        UTF8.F = new Uint8Array([70 /* F */]);
        UTF8.D = new Uint8Array([68 /* D */]);
        UTF8.B = new Uint8Array([66 /* B */]);
        UTF8.S = new Uint8Array([83 /* S */]);
        UTF8.I = new Uint8Array([73 /* I */]);
        UTF8.J = new Uint8Array([74 /* J */]);
    })(UTF8 || (UTF8 = {}));
    function strcmp(a, b) {
        if (a === b) {
            return true;
        }
        if (a.length !== b.length) {
            return false;
        }
        var l = a.length;
        for (var i = 0; i < l; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    J2ME.strcmp = strcmp;
    var utf8Cache = Object.create(null);
    /**
     * Caches frequently used UTF8 strings. Only use this for a small set of frequently
     * used JS -> UTF8 conversions.
     */
    function cacheUTF8(s) {
        var r = utf8Cache[s];
        if (r !== undefined) {
            return r;
        }
        return utf8Cache[s] = toUTF8(s);
    }
    J2ME.cacheUTF8 = cacheUTF8;
    function toUTF8(s) {
        var r = new Uint8Array(s.length);
        for (var i = 0; i < s.length; i++) {
            var c = s.charCodeAt(i);
            release || assert(c <= 0x7f);
            r[i] = c;
        }
        return r;
    }
    J2ME.toUTF8 = toUTF8;
    function fromUTF8(s) {
        return ByteStream.readString(s);
    }
    J2ME.fromUTF8 = fromUTF8;
    function strcatSingle(a, b) {
        var r = new Uint8Array(1 + b.length);
        r[0] = a;
        for (var i = 1; i < b.length + 1; i++) {
            r[i] = b[i - 1];
        }
        return r;
    }
    function strcat4Single(a, b, c, d) {
        var r = new Uint8Array(c.length + 3);
        r[0] = a;
        r[1] = b;
        for (var i = 2; i < c.length + 2; i++) {
            r[i] = c[i - 2];
        }
        r[2 + c.length] = d;
        return r;
    }
    // Seal ClassInfo, MethodInfo and FieldInfo objects so their shapes are fixed. This should
    // not be enabled by default as it usually causes perf problems, but it's useful as a
    // debugging feature nonetheless.
    var sealObjects = false;
    /**
     * Base class of all class file structs.
     */
    var ByteStream = (function () {
        function ByteStream(buffer, offset) {
            this.buffer = buffer;
            this.offset = offset;
            // ...
        }
        ByteStream.prototype.u2 = function (offset) {
            var b = this.buffer;
            var o = this.offset + offset;
            return b[o] << 8 | b[o + 1];
        };
        ByteStream.prototype.clone = function () {
            return new ByteStream(this.buffer, this.offset);
        };
        ByteStream.prototype.readU1 = function () {
            return this.buffer[this.offset++];
        };
        ByteStream.prototype.peekU1 = function () {
            return this.buffer[this.offset];
        };
        ByteStream.prototype.readU2 = function () {
            var buffer = this.buffer;
            var o = this.offset;
            this.offset += 2;
            return buffer[o] << 8 | buffer[o + 1];
        };
        ByteStream.prototype.peekU16 = function () {
            var buffer = this.buffer;
            var o = this.offset;
            return buffer[o] << 8 | buffer[o + 1];
        };
        ByteStream.prototype.readU4 = function () {
            return this.readS4() >>> 0;
        };
        ByteStream.prototype.skipU4 = function () {
            this.offset += 4;
        };
        ByteStream.prototype.readS4 = function () {
            var o = this.offset;
            var buffer = this.buffer;
            var a = buffer[o + 0];
            var b = buffer[o + 1];
            var c = buffer[o + 2];
            var d = buffer[o + 3];
            this.offset = o + 4;
            return (a << 24) | (b << 16) | (c << 8) | d;
        };
        ByteStream.prototype.seek = function (offset) {
            this.offset = offset;
            return this;
        };
        ByteStream.prototype.skip = function (length) {
            this.offset += length;
            return this;
        };
        /**
         * Interns small and frequently used Uint8Array buffers.
         *
         * Relative frequencies of readByte sizes.
         *  2011: readBytes 2
         *  1853: readBytes 1 - Special cased.
         *  1421: readBytes 4
         *  1170: readBytes 5
         *  1042: readBytes 3 - Special cased, most three byte buffers are signatures of the form "()?".
         *  1022: readBytes 6
         *
         * All other sizes are interned using a hashtable.
         */
        ByteStream.prototype.internBytes = function (length) {
            var o = this.offset;
            var buffer = this.buffer;
            var a = buffer[o];
            if (length === 1) {
                var one = ByteStream.internedOneByteArrays;
                var r = one[a];
                if (r === null) {
                    r = one[a] = new Uint8Array([a]);
                }
                return r;
            }
            else if (length === 3 && a === 40 /* OpenParenthesis */) {
                var b = buffer[o + 1];
                if (b === 41 /* CloseParenthesis */) {
                    var three = ByteStream.internedThreeByteArraySignatures;
                    var c = buffer[o + 2];
                    for (var i = 0; i < three.length; i++) {
                        if (three[i][2] === c) {
                            return three[i];
                        }
                    }
                }
            }
            else {
                var data = ByteStream.internedMap.getByRange(buffer, o, length);
                if (data) {
                    return data;
                }
                var data = this.buffer.subarray(o, o + length);
                ByteStream.internedMap.put(data, data);
                return data;
            }
            return null;
        };
        ByteStream.prototype.readBytes = function (length) {
            var data = this.buffer.subarray(this.offset, this.offset + length);
            this.offset += length;
            return data;
        };
        ByteStream.prototype.readInternedBytes = function (length) {
            var data = length <= 4 ? this.internBytes(length) : null;
            if (data) {
                this.offset += data.length;
                return data;
            }
            return this.readBytes(length);
        };
        ByteStream.getArray = function (length) {
            return ByteStream.arrays[length];
        };
        // Decode Java's modified UTF-8 (JVM specs, $ 4.4.7)
        // http://docs.oracle.com/javase/specs/jvms/se5.0/html/ClassFile.doc.html#7963
        ByteStream.readStringFast = function (buffer) {
            var length = buffer.length;
            var a = (length < 128) ? ByteStream.getArray(length) : new Array(length);
            var i = 0, j = 0;
            var o = 0;
            var e = o + length;
            var buffer = buffer;
            while (o < e) {
                var x = buffer[o++];
                if (x <= 0x7f) {
                    // Code points in the range '\u0001' to '\u007F' are represented by a
                    // single byte.
                    // The 7 bits of data in the byte give the value of the code point
                    // represented.
                    a[j++] = String.fromCharCode(x);
                }
                else if (x <= 0xdf) {
                    // The null code point ('\u0000') and code points in the range '\u0080'
                    // to '\u07FF' are represented by a pair of bytes x and y.
                    var y = buffer[o++];
                    a[j++] = String.fromCharCode(((x & 0x1f) << 6) + (y & 0x3f));
                }
                else {
                    // Code points in the range '\u0800' to '\uFFFF' are represented by 3
                    // bytes x, y, and z.
                    var y = buffer[o++];
                    var z = buffer[o++];
                    a[j++] = String.fromCharCode(((x & 0xf) << 12) + ((y & 0x3f) << 6) + (z & 0x3f));
                }
            }
            if (j !== a.length) {
                var b = (j < 128) ? ByteStream.getArray(j) : new Array(j);
                for (var i = 0; i < j; i++) {
                    b[i] = a[i];
                }
                a = b;
            }
            return a.join("");
        };
        ByteStream.readString = function (buffer) {
            var length = buffer.length;
            if (length === 1) {
                var c = buffer[0];
                if (c <= 0x7f) {
                    return String.fromCharCode(c);
                }
            }
            else if (length < 128) {
                return ByteStream.readStringFast(buffer);
            }
            return ByteStream.readStringSlow(buffer);
        };
        ByteStream.readStringSlow = function (buffer) {
            try {
                return util.decodeUtf8Array(buffer);
            }
            catch (e) {
                return this.readStringFast(buffer);
            }
        };
        ByteStream.readU16 = function (buffer, o) {
            return buffer[o] << 8 | buffer[o + 1];
        };
        ByteStream.internedOneByteArrays = J2ME.ArrayUtilities.makeDenseArray(256, null);
        // Most common tree byte arrays signatures, these must all be prefixed with "()". If you want
        // to support more complicated patterns, modify |readInternedBytes|.
        ByteStream.internedThreeByteArraySignatures = [
            new Uint8Array([40, 41, 86]),
            new Uint8Array([40, 41, 73]),
            new Uint8Array([40, 41, 90]),
            new Uint8Array([40, 41, 74]),
        ];
        ByteStream.internedMap = new J2ME.Uint8Hashtable(64);
        ByteStream.arrays = J2ME.ArrayUtilities.makeArrays(128);
        return ByteStream;
    })();
    J2ME.ByteStream = ByteStream;
    (function (ACCESS_FLAGS) {
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_PUBLIC"] = 0x0001] = "ACC_PUBLIC";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_PRIVATE"] = 0x0002] = "ACC_PRIVATE";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_PROTECTED"] = 0x0004] = "ACC_PROTECTED";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_STATIC"] = 0x0008] = "ACC_STATIC";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_FINAL"] = 0x0010] = "ACC_FINAL";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_SYNCHRONIZED"] = 0x0020] = "ACC_SYNCHRONIZED";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_VOLATILE"] = 0x0040] = "ACC_VOLATILE";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_TRANSIENT"] = 0x0080] = "ACC_TRANSIENT";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_NATIVE"] = 0x0100] = "ACC_NATIVE";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_INTERFACE"] = 0x0200] = "ACC_INTERFACE";
        ACCESS_FLAGS[ACCESS_FLAGS["ACC_ABSTRACT"] = 0x0400] = "ACC_ABSTRACT";
        ACCESS_FLAGS[ACCESS_FLAGS["J2ME_IMPLEMENTS_INTERFACE"] = 0x10000] = "J2ME_IMPLEMENTS_INTERFACE";
    })(J2ME.ACCESS_FLAGS || (J2ME.ACCESS_FLAGS = {}));
    var ACCESS_FLAGS = J2ME.ACCESS_FLAGS;
    (function (TAGS) {
        TAGS[TAGS["CONSTANT_Class"] = 7] = "CONSTANT_Class";
        TAGS[TAGS["CONSTANT_Fieldref"] = 9] = "CONSTANT_Fieldref";
        TAGS[TAGS["CONSTANT_Methodref"] = 10] = "CONSTANT_Methodref";
        TAGS[TAGS["CONSTANT_InterfaceMethodref"] = 11] = "CONSTANT_InterfaceMethodref";
        TAGS[TAGS["CONSTANT_String"] = 8] = "CONSTANT_String";
        TAGS[TAGS["CONSTANT_Integer"] = 3] = "CONSTANT_Integer";
        TAGS[TAGS["CONSTANT_Float"] = 4] = "CONSTANT_Float";
        TAGS[TAGS["CONSTANT_Long"] = 5] = "CONSTANT_Long";
        TAGS[TAGS["CONSTANT_Double"] = 6] = "CONSTANT_Double";
        TAGS[TAGS["CONSTANT_NameAndType"] = 12] = "CONSTANT_NameAndType";
        TAGS[TAGS["CONSTANT_Utf8"] = 1] = "CONSTANT_Utf8";
        TAGS[TAGS["CONSTANT_Unicode"] = 2] = "CONSTANT_Unicode";
        TAGS[TAGS["CONSTANT_Any"] = 13] = "CONSTANT_Any"; // NON-STANDARD
    })(J2ME.TAGS || (J2ME.TAGS = {}));
    var TAGS = J2ME.TAGS;
    var ConstantPool = (function (_super) {
        __extends(ConstantPool, _super);
        function ConstantPool(stream) {
            _super.call(this, stream.buffer, stream.offset);
            this.scanEntries();
        }
        /**
         * Quickly scan over the constant pool and record the position of each constant pool entry.
         */
        ConstantPool.prototype.scanEntries = function () {
            var s = this;
            var c = s.readU2();
            this.entries = new Uint32Array(c);
            // We make this dense because the access pattern is pretty random, and it would otherwise
            // cause lots of ION bailouts.
            this.resolved = J2ME.ArrayUtilities.makeDenseArray(c, undefined);
            var S = ConstantPool.tagSize;
            var o = s.offset;
            var buffer = s.buffer;
            var e = this.entries;
            for (var i = 1; i < c; i++) {
                e[i] = o;
                var t = buffer[o++];
                if (t === 1 /* CONSTANT_Utf8 */) {
                    o += 2 + ByteStream.readU16(buffer, o);
                }
                else {
                    o += S[t];
                }
                if (t === 5 /* CONSTANT_Long */ || t === 6 /* CONSTANT_Double */) {
                    i++;
                }
            }
            s.offset = o;
        };
        ConstantPool.prototype.resolveUtf8 = function (i) {
            return this.resolve(i, 1 /* CONSTANT_Utf8 */);
        };
        /**
         * Reads a 16-bit number at an offset from the constant pool entry index.
         */
        ConstantPool.prototype.readTagU2 = function (i, tag, offset) {
            var b = this.buffer;
            release || assert(b[this.entries[i]] === tag);
            var o = this.entries[i] + offset;
            return b[o] << 8 | b[o + 1];
        };
        /**
         * Seeks the current stream position to a specified constant pool entry and
         * returns the tag value.
         */
        ConstantPool.prototype.seekTag = function (i) {
            this.seek(this.entries[i]);
            return this.peekU1();
        };
        /**
         * This causes the Utf8 string to be redecoded each time so don't use it often.
         */
        ConstantPool.prototype.resolveUtf8String = function (i) {
            if (i === 0)
                return null;
            var u8 = this.resolveUtf8(i);
            return ByteStream.readString(u8);
        };
        ConstantPool.prototype.resolveUtf8ClassNameString = function (i) {
            if (i === 0)
                return null;
            return this.resolveUtf8String(this.readTagU2(i, 7 /* CONSTANT_Class */, 1));
        };
        ConstantPool.prototype.resolveUtf8ClassName = function (i) {
            if (i === 0)
                return null;
            return this.resolveUtf8(this.readTagU2(i, 7 /* CONSTANT_Class */, 1));
        };
        ConstantPool.prototype.getConstantTag = function (i) {
            return this.seekTag(i);
        };
        ConstantPool.prototype.resolveString = function (i) {
            var s = this;
            var tag = s.seekTag(i);
            release || assert(tag === 8 /* CONSTANT_String */);
            s.readU1();
            return this.resolveUtf8String(s.readU2());
        };
        /**
         * Resolves a constant pool reference.
         */
        ConstantPool.prototype.resolve = function (i, expectedTag, isStatic) {
            if (isStatic === void 0) { isStatic = false; }
            var s = this, r = this.resolved[i];
            if (r === undefined) {
                var tag = this.seekTag(i);
                release || J2ME.Debug.assert(expectedTag === 13 /* CONSTANT_Any */ || expectedTag === tag || (expectedTag === 10 /* CONSTANT_Methodref */ && tag === 11 /* CONSTANT_InterfaceMethodref */));
                switch (s.readU1()) {
                    case 3 /* CONSTANT_Integer */:
                        r = this.resolved[i] = s.readS4();
                        break;
                    case 4 /* CONSTANT_Float */:
                        r = this.resolved[i] = J2ME.IntegerUtilities.int32ToFloat(s.readS4());
                        break;
                    case 8 /* CONSTANT_String */:
                        r = this.resolved[i] = $.newStringConstant(this.resolveUtf8String(s.readU2()));
                        break;
                    case 5 /* CONSTANT_Long */:
                        var high = s.readS4();
                        var low = s.readS4();
                        r = this.resolved[i] = Long.fromBits(low, high);
                        break;
                    case 6 /* CONSTANT_Double */:
                        r = this.resolved[i] = J2ME.IntegerUtilities.int64ToDouble(s.readS4(), s.readS4());
                        break;
                    case 1 /* CONSTANT_Utf8 */:
                        r = this.resolved[i] = s.readInternedBytes(s.readU2());
                        break;
                    case 7 /* CONSTANT_Class */:
                        r = this.resolved[i] = J2ME.CLASSES.getClass(ByteStream.readString(this.resolve(s.readU2(), 1 /* CONSTANT_Utf8 */)));
                        break;
                    case 9 /* CONSTANT_Fieldref */:
                    case 10 /* CONSTANT_Methodref */:
                    case 11 /* CONSTANT_InterfaceMethodref */:
                        var class_index = s.readU2();
                        var name_and_type_index = s.readU2();
                        var classInfo = this.resolveClass(class_index);
                        var name_index = this.readTagU2(name_and_type_index, 12 /* CONSTANT_NameAndType */, 1);
                        var type_index = this.readTagU2(name_and_type_index, 12 /* CONSTANT_NameAndType */, 3);
                        var name = this.resolveUtf8(name_index);
                        var type = this.resolveUtf8(type_index);
                        if (tag === 9 /* CONSTANT_Fieldref */) {
                            r = this.resolved[i] = classInfo.getFieldByName(name, type, isStatic);
                        }
                        else {
                            r = this.resolved[i] = classInfo.getMethodByName(name, type);
                        }
                        if (!r) {
                            throw $.newRuntimeException(classInfo.getClassNameSlow() + "." + fromUTF8(name) + "." + fromUTF8(type) + " not found");
                        }
                        break;
                    default:
                        assert(false);
                        break;
                }
            }
            return r;
        };
        ConstantPool.prototype.resolveClass = function (index) {
            return this.resolve(index, 7 /* CONSTANT_Class */);
        };
        ConstantPool.prototype.resolveMethod = function (index, isStatic) {
            return this.resolve(index, 10 /* CONSTANT_Methodref */, isStatic);
        };
        ConstantPool.prototype.resolveField = function (index, isStatic) {
            return this.resolve(index, 9 /* CONSTANT_Fieldref */, isStatic);
        };
        /**
         * Size of each tag. This is used to jump over constant pool entries quickly.
         */
        ConstantPool.tagSize = new Int8Array([
            -1,
            -1,
            -1,
            4,
            4,
            8,
            8,
            2,
            2,
            4,
            4,
            4,
            4
        ]);
        return ConstantPool;
    })(ByteStream);
    J2ME.ConstantPool = ConstantPool;
    var FieldInfo = (function (_super) {
        __extends(FieldInfo, _super);
        function FieldInfo(classInfo, offset) {
            _super.call(this, classInfo.buffer, offset);
            this.mangledName = null;
            this._constantvalue_index = -1;
            this.fTableIndex = -1;
            this.classInfo = classInfo;
            this.accessFlags = this.readU2();
            this.utf8Name = classInfo.constantPool.resolveUtf8(this.readU2());
            this.utf8Signature = classInfo.constantPool.resolveUtf8(this.readU2());
            this.kind = J2ME.getSignatureKind(this.utf8Signature);
            this.scanFieldInfoAttributes();
            sealObjects && Object.seal(this);
        }
        Object.defineProperty(FieldInfo.prototype, "isStatic", {
            get: function () {
                return !!(this.accessFlags & 8 /* ACC_STATIC */);
            },
            enumerable: true,
            configurable: true
        });
        FieldInfo.prototype.get = function (object) {
            return object[this.mangledName];
        };
        FieldInfo.prototype.set = function (object, value) {
            object[this.mangledName] = value;
        };
        FieldInfo.prototype.getStatic = function () {
            return this.get(this.classInfo.getStaticObject($.ctx));
        };
        FieldInfo.prototype.setStatic = function (value) {
            return this.set(this.classInfo.getStaticObject($.ctx), value);
        };
        FieldInfo.prototype.scanFieldInfoAttributes = function () {
            var s = this;
            var attributes_count = s.readU2();
            for (var i = 0; i < attributes_count; i++) {
                var attribute_name_index = s.readU2();
                var attribute_length = s.readU4();
                var o = s.offset;
                var attribute_name = this.classInfo.constantPool.resolveUtf8(attribute_name_index);
                if (strcmp(attribute_name, UTF8.ConstantValue)) {
                    release || assert(attribute_length === 2, "Attribute length of ConstantValue must be 2.");
                    this._constantvalue_index = s.readU2();
                }
                s.seek(o + attribute_length);
            }
        };
        Object.defineProperty(FieldInfo.prototype, "constantValue", {
            get: function () {
                if (this._constantvalue_index >= 0) {
                    // This is not a very frequently called method, so no need to cache the resolved value.
                    return this.classInfo.constantPool.resolve(this._constantvalue_index, 13 /* CONSTANT_Any */);
                }
                return undefined;
            },
            enumerable: true,
            configurable: true
        });
        return FieldInfo;
    })(ByteStream);
    J2ME.FieldInfo = FieldInfo;
    var SourceLocation = (function () {
        function SourceLocation(className, sourceFile, lineNumber) {
            this.className = className;
            this.sourceFile = sourceFile;
            this.lineNumber = lineNumber;
            // ...
        }
        SourceLocation.prototype.toString = function () {
            return this.sourceFile + ":" + this.lineNumber;
        };
        SourceLocation.prototype.equals = function (other) {
            if (!other) {
                return false;
            }
            return this.sourceFile === other.sourceFile && this.lineNumber === other.lineNumber;
        };
        return SourceLocation;
    })();
    J2ME.SourceLocation = SourceLocation;
    var MethodInfoStats = (function () {
        function MethodInfoStats() {
            this.callCount = 0;
            this.bytecodeCount = 0;
            this.backwardsBranchCount = 0;
            this.interpreterCallCount = 0;
        }
        return MethodInfoStats;
    })();
    J2ME.MethodInfoStats = MethodInfoStats;
    var ExceptionEntryView = (function (_super) {
        __extends(ExceptionEntryView, _super);
        function ExceptionEntryView() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ExceptionEntryView.prototype, "start_pc", {
            get: function () {
                return this.u2(0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExceptionEntryView.prototype, "end_pc", {
            get: function () {
                return this.u2(2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExceptionEntryView.prototype, "handler_pc", {
            get: function () {
                return this.u2(4);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExceptionEntryView.prototype, "catch_type", {
            get: function () {
                return this.u2(6);
            },
            enumerable: true,
            configurable: true
        });
        return ExceptionEntryView;
    })(ByteStream);
    J2ME.ExceptionEntryView = ExceptionEntryView;
    function mangleClassAndMethod(methodInfo) {
        return methodInfo.classInfo.mangledName + "_" + methodInfo.index;
    }
    J2ME.mangleClassAndMethod = mangleClassAndMethod;
    function mangleMethod(methodInfo) {
        var utf8Name = methodInfo.utf8Name;
        var utf8Signature = methodInfo.utf8Signature;
        var hash = hashBytesTo32BitsMurmur(utf8Name, 0, utf8Name.length);
        hash ^= hashBytesTo32BitsMurmur(utf8Signature, 0, utf8Signature.length);
        return "$" + J2ME.StringUtilities.variableLengthEncodeInt32(hash);
    }
    J2ME.mangleMethod = mangleMethod;
    function mangleClassName(utf8Name) {
        var hash = hashBytesTo32BitsMurmur(utf8Name, 0, utf8Name.length);
        return concat3("$", J2ME.StringUtilities.variableLengthEncodeInt32(hash), J2ME.StringUtilities.toEncoding(utf8Name.length & 0x3f));
    }
    J2ME.mangleClassName = mangleClassName;
    var MethodInfo = (function (_super) {
        __extends(MethodInfo, _super);
        function MethodInfo(classInfo, offset, index) {
            _super.call(this, classInfo.buffer, offset);
            this.fn = null;
            this._virtualName = null;
            this._mangledName = null;
            this._mangledClassAndMethodName = null;
            this._implKey = null;
            this._name = null;
            this._signature = null;
            ///// FIX THESE LATER ////
            this.onStackReplacementEntryPoints = null;
            this.exception_table_length = -1;
            this.exception_table_offset = -1;
            this.isOptimized = false;
            this.index = index;
            this.accessFlags = this.u2(0);
            this.classInfo = classInfo;
            var cp = this.classInfo.constantPool;
            this.utf8Name = cp.resolveUtf8(this.u2(2));
            this.utf8Signature = cp.resolveUtf8(this.u2(4));
            this.vTableIndex = -1;
            this.state = 0 /* Cold */;
            this.stats = new MethodInfoStats();
            this.codeAttribute = null;
            this.scanMethodInfoAttributes();
            // Parse signature and cache some useful information.
            var signatureKinds = this.signatureKinds = J2ME.parseMethodDescriptorKinds(this.utf8Signature, 0).slice();
            this.returnKind = signatureKinds[0];
            this.hasTwoSlotArguments = J2ME.signatureHasTwoSlotArguments(signatureKinds);
            this.argumentSlots = J2ME.signatureArgumentSlotCount(signatureKinds);
            this.consumeArgumentSlots = this.argumentSlots;
            if (!this.isStatic) {
                this.consumeArgumentSlots++;
            }
            sealObjects && Object.seal(this);
        }
        /**
         * Clones this method info.
         */
        MethodInfo.prototype.cloneMethodInfo = function () {
            return new MethodInfo(this.classInfo, this.offset, this.index);
        };
        Object.defineProperty(MethodInfo.prototype, "virtualName", {
            get: function () {
                if (this.vTableIndex >= 0) {
                    return this._virtualName || (this._virtualName = "v" + this.vTableIndex);
                }
                return undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "mangledName", {
            get: function () {
                return this._mangledName || (this._mangledName = mangleMethod(this));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "mangledClassAndMethodName", {
            get: function () {
                return this._mangledClassAndMethodName || (this._mangledClassAndMethodName = mangleClassAndMethod(this));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "name", {
            get: function () {
                return this._name || (this._name = ByteStream.readString(this.utf8Name));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "signature", {
            get: function () {
                return this._signature || (this._signature = ByteStream.readString(this.utf8Signature));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "implementsInterface", {
            get: function () {
                return !!(this.accessFlags & 65536 /* J2ME_IMPLEMENTS_INTERFACE */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "implKey", {
            get: function () {
                return this._implKey || (this._implKey = this.classInfo.getClassNameSlow() + "." + this.name + "." + this.signature);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "isNative", {
            get: function () {
                return !!(this.accessFlags & 256 /* ACC_NATIVE */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "isFinal", {
            get: function () {
                return !!(this.accessFlags & 16 /* ACC_FINAL */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "isPublic", {
            get: function () {
                return !!(this.accessFlags & 1 /* ACC_PUBLIC */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "isStatic", {
            get: function () {
                return !!(this.accessFlags & 8 /* ACC_STATIC */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "isSynchronized", {
            get: function () {
                return !!(this.accessFlags & 32 /* ACC_SYNCHRONIZED */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MethodInfo.prototype, "isAbstract", {
            get: function () {
                return !!(this.accessFlags & 1024 /* ACC_ABSTRACT */);
            },
            enumerable: true,
            configurable: true
        });
        MethodInfo.prototype.getSourceLocationForPC = function (pc) {
            return null;
        };
        MethodInfo.prototype.getExceptionEntryViewByIndex = function (i) {
            if (i >= this.exception_table_length) {
                return null;
            }
            return new ExceptionEntryView(this.buffer, this.exception_table_offset + i * 8);
        };
        MethodInfo.prototype.scanMethodInfoAttributes = function () {
            var b = this.offset;
            var s = this.skip(6);
            var count = s.readU2();
            for (var i = 0; i < count; i++) {
                var attribute_name_index = s.readU2();
                var attribute_length = s.readU4();
                var o = s.offset;
                var attribute_name = this.classInfo.constantPool.resolveUtf8(attribute_name_index);
                if (strcmp(attribute_name, UTF8.Code)) {
                    this.codeAttribute = new CodeAttribute(s);
                    this.exception_table_length = s.readU2();
                    this.exception_table_offset = s.offset;
                }
                s.seek(o + attribute_length);
            }
            this.seek(b);
        };
        return MethodInfo;
    })(ByteStream);
    J2ME.MethodInfo = MethodInfo;
    var ResolvedFlags;
    (function (ResolvedFlags) {
        ResolvedFlags[ResolvedFlags["None"] = 0] = "None";
        ResolvedFlags[ResolvedFlags["Fields"] = 1] = "Fields";
        ResolvedFlags[ResolvedFlags["Methods"] = 2] = "Methods";
        ResolvedFlags[ResolvedFlags["Interfaces"] = 4] = "Interfaces";
    })(ResolvedFlags || (ResolvedFlags = {}));
    var CodeAttribute = (function () {
        function CodeAttribute(s) {
            this.max_stack = s.readU2();
            this.max_locals = s.readU2();
            var code_length = s.readU4();
            // We don't call |readInternedBytes| because the returned bytes can be modified by the
            // interpreter, and interned bytes must be immutable.
            this.code = s.readBytes(code_length);
        }
        return CodeAttribute;
    })();
    J2ME.CodeAttribute = CodeAttribute;
    function indexOfMethod(table, utf8Name, utf8Signature, indexHint) {
        // Quick test using the index hint.
        if (indexHint >= 0) {
            if (strcmp(utf8Name, table[indexHint].utf8Name) && strcmp(utf8Signature, table[indexHint].utf8Signature)) {
                return indexHint;
            }
        }
        for (var i = 0; i < table.length; i++) {
            var methodInfo = table[i];
            var methodUTF8Name = methodInfo.utf8Name;
            if (utf8Name.length !== methodUTF8Name.length || utf8Name[0] !== methodUTF8Name[0]) {
                continue;
            }
            if (strcmp(utf8Name, methodUTF8Name) && strcmp(utf8Signature, methodInfo.utf8Signature)) {
                return i;
            }
        }
        return -1;
    }
    // Very simple hash map that uses Uint8Array keys.
    var hashMapSizeMask = 0xff;
    function setHashMapValue(cache, key, value) {
        var hash = key[0] + Math.imul(key.length, 31);
        cache[hash & 0xff] = value;
    }
    function getHashMapValue(cache, key) {
        var hash = key[0] + Math.imul(key.length, 31);
        return cache[hash & 0xff];
    }
    var ClassInfo = (function (_super) {
        __extends(ClassInfo, _super);
        function ClassInfo(buffer) {
            _super.call(this, buffer, 0);
            this.constantPool = null;
            this.utf8Name = null;
            this.utf8SuperName = null;
            this.superClass = null;
            this.elementClass = null;
            this.subClasses = [];
            this.allSubClasses = [];
            this.accessFlags = 0;
            this.vTable = null;
            // Custom hash map to make vTable name lookups quicker. It maps utf8 method names to indices in
            // the vTable. A zero value indicate no method by that name exists, while a value > 0 indicates
            // that a method entry at |value - 1| position exists in the vTable whose hash matches they
            // lookup key. We can use this map as a quick way to detect if a method doesn't exist in the
            // vTable.
            this.vTableMap = null;
            this.fTable = null;
            this.klass = null;
            this.resolvedFlags = 0 /* None */;
            this.fields = null;
            this.methods = null;
            this.interfaces = null;
            this.allInterfaces = null;
            this.sourceFile = null;
            this.mangledName = null;
            this._name = null;
            this._superName = null;
            if (!buffer) {
                sealObjects && Object.seal(this);
                return;
            }
            J2ME.enterTimeline("ClassInfo");
            var s = this;
            s.skipU4(); // magic
            s.skipU4(); // minor_version and major_version
            this.constantPool = new ConstantPool(s);
            s.seek(this.constantPool.offset);
            this.accessFlags = s.readU2();
            this.utf8Name = this.constantPool.resolveUtf8ClassName(s.readU2());
            this.utf8SuperName = this.constantPool.resolveUtf8ClassName(s.readU2());
            this.vTable = [];
            this.fTable = [];
            this.scanInterfaces();
            this.scanFields();
            this.scanMethods();
            this.scanClassInfoAttributes();
            this.mangledName = mangleClassName(this.utf8Name);
            this.createAbstractMethods();
            J2ME.leaveTimeline("ClassInfo");
            sealObjects && Object.seal(this);
        }
        /**
         * Creates synthetic methodInfo objects in abstract classes for all unimplemented
         * interface methods. This is needed so that vTable entries are created correctly
         * for abstract classes that don't otherwise define methods for their implemented
         * interface.
         */
        ClassInfo.prototype.createAbstractMethods = function () {
            // We only do this for abstract classes. Sometimes, interfaces are also marked
            // as abstract but they aren't really.
            if (!this.isAbstract || this.isInterface) {
                return;
            }
            var methods = this.getMethods();
            var interfaces = this.getAllInterfaces();
            for (var i = 0; i < interfaces.length; i++) {
                var c = interfaces[i];
                for (var j = 0; j < c.methods.length; j++) {
                    var methodInfo = c.getMethodByIndex(j);
                    if (methodInfo.isStatic || strcmp(methodInfo.utf8Name, UTF8.Init)) {
                        continue;
                    }
                    var index = indexOfMethod(methods, methodInfo.utf8Name, methodInfo.utf8Signature, -1);
                    if (index < 0) {
                        // Make a copy of the interface method info and add it to the current list of
                        // virtual class methods. The vTable construction will give this a proper
                        // vTable index later.
                        var abstractMethod = methodInfo.cloneMethodInfo();
                        methods.push(abstractMethod);
                    }
                }
            }
        };
        ClassInfo.prototype.scanInterfaces = function () {
            var b = this;
            var interfaces_count = b.readU2();
            this.interfaces = new Array(interfaces_count);
            for (var i = 0; i < interfaces_count; i++) {
                this.interfaces[i] = b.readU2();
            }
        };
        ClassInfo.prototype.scanFields = function () {
            var s = this;
            var fields_count = s.readU2();
            var f = this.fields = new Array(fields_count);
            for (var i = 0; i < fields_count; i++) {
                f[i] = s.offset;
                s.skip(6);
                this.skipAttributes();
            }
        };
        ClassInfo.prototype.getClassNameSlow = function () {
            return this._name || (this._name = ByteStream.readString(this.utf8Name));
        };
        Object.defineProperty(ClassInfo.prototype, "superClassName", {
            get: function () {
                if (this.utf8SuperName) {
                    return this._superName || (this._superName = ByteStream.readString(this.utf8SuperName));
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gets the class hierarchy in derived -> base order.
         */
        ClassInfo.prototype.getClassHierarchy = function () {
            var classHierarchy = [];
            var classInfo = this;
            do {
                classHierarchy.push(classInfo);
                classInfo = classInfo.superClass;
            } while (classInfo);
            return classHierarchy;
        };
        ClassInfo.prototype.trace = function (writer) {
            writer.enter(this.getClassNameSlow() + " VTable:");
            for (var i = 0; i < this.vTable.length; i++) {
                writer.writeLn(i + ": " + ByteStream.readString(this.vTable[i].utf8Name) + "." + ByteStream.readString(this.vTable[i].utf8Signature));
            }
            writer.leave("");
        };
        ClassInfo.prototype.complete = function () {
            if (!this.isInterface) {
                this.buildVTable();
                this.buildFTable();
            }
            J2ME.loadWriter && this.trace(J2ME.loadWriter);
        };
        /**
         * Constructs the VTable for this class by appending to or overriding methods
         * in the super class VTable.
         */
        ClassInfo.prototype.buildVTable = function () {
            var superClassVTable = this.superClass ? this.superClass.vTable : null;
            var vTable = this.vTable = superClassVTable ? superClassVTable.slice() : [];
            var vTableMap = this.vTableMap = new Uint16Array(hashMapSizeMask + 1);
            var superClassVTableMap = null;
            if (this.superClass) {
                superClassVTableMap = this.superClass.vTableMap;
                vTableMap.set(superClassVTableMap);
            }
            var methods = this.methods;
            if (!methods) {
                return;
            }
            for (var i = 0; i < methods.length; i++) {
                var methodInfo = this.getMethodByIndex(i);
                if (!methodInfo.isStatic && !strcmp(methodInfo.utf8Name, UTF8.Init)) {
                    var vTableIndex = -1;
                    if (superClassVTable) {
                        vTableIndex = getHashMapValue(superClassVTableMap, methodInfo.utf8Name) - 1;
                        if (vTableIndex >= 0) {
                            vTableIndex = indexOfMethod(superClassVTable, methodInfo.utf8Name, methodInfo.utf8Signature, vTableIndex);
                        }
                    }
                    if (vTableIndex < 0) {
                        methodInfo.vTableIndex = vTable.length;
                        vTable.push(methodInfo); // Append
                        setHashMapValue(vTableMap, methodInfo.utf8Name, methodInfo.vTableIndex + 1);
                    }
                    else {
                        vTable[vTableIndex] = methodInfo; // Override
                        methodInfo.vTableIndex = vTableIndex;
                    }
                }
            }
            // Go through all the interfaces and mark all methods in the vTable that implement interface methods.
            var interfaces = this.getAllInterfaces();
            for (var i = 0; i < interfaces.length; i++) {
                var c = interfaces[i];
                for (var j = 0; j < c.methods.length; j++) {
                    var methodInfo = c.getMethodByIndex(j);
                    var vTableIndex = indexOfMethod(this.vTable, methodInfo.utf8Name, methodInfo.utf8Signature, -1);
                    if (vTableIndex >= 0) {
                        this.vTable[vTableIndex].accessFlags |= 65536 /* J2ME_IMPLEMENTS_INTERFACE */;
                    }
                }
            }
        };
        ClassInfo.prototype.buildFTable = function () {
            var superClassFTable = this.superClass ? this.superClass.fTable : null;
            var fTable = this.fTable = superClassFTable ? superClassFTable.slice() : [];
            var fields = this.fields;
            if (!fields) {
                return;
            }
            for (var i = 0; i < fields.length; i++) {
                var fieldInfo = this.getFieldByIndex(i);
                if (!fieldInfo.isStatic) {
                    fieldInfo.fTableIndex = fTable.length;
                    fTable.push(fieldInfo); // Append
                    fieldInfo.mangledName = "f" + fieldInfo.fTableIndex;
                }
                else {
                    fieldInfo.mangledName = "s" + i;
                }
            }
        };
        ClassInfo.prototype.scanMethods = function () {
            var s = this;
            var methods_count = s.readU2();
            var m = this.methods = new Array(methods_count);
            for (var i = 0; i < methods_count; i++) {
                m[i] = s.offset;
                s.skip(6);
                this.skipAttributes();
            }
        };
        ClassInfo.prototype.addVTableEntry = function (accessFlags, name_index, descriptor_index) {
        };
        ClassInfo.prototype.skipAttributes = function () {
            var s = this;
            var attributes_count = s.readU2();
            for (var i = 0; i < attributes_count; i++) {
                s.readU2();
                s.skip(s.readU4());
            }
        };
        ClassInfo.prototype.scanClassInfoAttributes = function () {
            var s = this;
            var attributes_count = s.readU2();
            for (var i = 0; i < attributes_count; i++) {
                var attribute_name_index = s.readU2();
                var attribute_length = s.readU4();
                var o = s.offset;
                s.seek(o + attribute_length);
            }
        };
        ClassInfo.prototype.getMethodByIndex = function (i) {
            if (typeof this.methods[i] === "number") {
                var methodInfo = this.methods[i] = new MethodInfo(this, this.methods[i], i);
            }
            var methodInfo = this.methods[i];
            return methodInfo;
        };
        ClassInfo.prototype.indexOfMethod = function (utf8Name, utf8Signature) {
            var methods = this.methods;
            if (!methods) {
                return -1;
            }
            for (var i = 0; i < methods.length; i++) {
                var methodInfo = this.getMethodByIndex(i);
                var methodUTF8Name = methodInfo.utf8Name;
                if (utf8Name.length !== methodUTF8Name.length || utf8Name[0] !== methodUTF8Name[0]) {
                    continue;
                }
                if (strcmp(methodUTF8Name, utf8Name) && strcmp(methodInfo.utf8Signature, utf8Signature)) {
                    return i;
                }
            }
            return -1;
        };
        // This should only ever be used from code where the name and signature originate from JS strings.
        ClassInfo.prototype.getMethodByNameString = function (name, signature) {
            return this.getMethodByName(cacheUTF8(name), cacheUTF8(signature));
        };
        // This should only ever be used from code where the name and signature originate from JS strings.
        ClassInfo.prototype.getLocalMethodByNameString = function (name, signature) {
            return this.getLocalMethodByName(toUTF8(name), toUTF8(signature));
        };
        ClassInfo.prototype.getLocalMethodByName = function (utf8Name, utf8Signature) {
            var i = this.indexOfMethod(utf8Name, utf8Signature);
            if (i >= 0) {
                return this.getMethodByIndex(i);
            }
            return null;
        };
        ClassInfo.prototype.getMethodByName = function (utf8Name, utf8Signature) {
            var c = this;
            do {
                var i = c.indexOfMethod(utf8Name, utf8Signature);
                if (i >= 0) {
                    return c.getMethodByIndex(i);
                }
                c = c.superClass;
            } while (c);
            if (this.isInterface) {
                var interfaces = this.getInterfaces();
                for (var n = 0; n < interfaces.length; ++n) {
                    var method = interfaces[n].getMethodByName(utf8Name, utf8Signature);
                    if (method) {
                        return method;
                    }
                }
            }
            return null;
        };
        ClassInfo.prototype.getMethodCount = function () {
            return this.methods ? this.methods.length : 0;
        };
        ClassInfo.prototype.getMethods = function () {
            if (!this.methods) {
                return J2ME.ArrayUtilities.EMPTY_ARRAY;
            }
            if (this.resolvedFlags & 2 /* Methods */) {
                return this.methods;
            }
            for (var i = 0; i < this.methods.length; i++) {
                this.getMethodByIndex(i);
            }
            this.resolvedFlags |= 2 /* Methods */;
            return this.methods;
        };
        ClassInfo.prototype.getFieldByIndex = function (i) {
            if (typeof this.fields[i] === "number") {
                this.fields[i] = new FieldInfo(this, this.fields[i]);
            }
            return this.fields[i];
        };
        ClassInfo.prototype.indexOfField = function (utf8Name, utf8Signature) {
            var fields = this.fields;
            if (!fields) {
                return -1;
            }
            for (var i = 0; i < fields.length; i++) {
                var fieldInfo = this.getFieldByIndex(i);
                var fieldUTF8Name = fieldInfo.utf8Name;
                if (utf8Name.length !== fieldUTF8Name.length || utf8Name[0] !== fieldUTF8Name[0]) {
                    continue;
                }
                if (strcmp(fieldUTF8Name, utf8Name) && strcmp(fieldInfo.utf8Signature, utf8Signature)) {
                    return i;
                }
            }
            return -1;
        };
        ClassInfo.prototype.getFieldByName = function (utf8Name, utf8Signature, isStatic) {
            var c = this;
            do {
                var i = c.indexOfField(utf8Name, utf8Signature);
                if (i >= 0) {
                    return c.getFieldByIndex(i);
                }
                if (isStatic) {
                    var interfaces = c.getAllInterfaces();
                    for (var n = 0; n < interfaces.length; ++n) {
                        var field = interfaces[n].getFieldByName(utf8Name, utf8Signature, isStatic);
                        if (field) {
                            return field;
                        }
                    }
                }
                c = c.superClass;
            } while (c);
            return null;
        };
        ClassInfo.prototype.getFields = function () {
            if (!this.fields) {
                return J2ME.ArrayUtilities.EMPTY_ARRAY;
            }
            if (this.resolvedFlags & 1 /* Fields */) {
                return this.fields;
            }
            for (var i = 0; i < this.fields.length; i++) {
                this.getFieldByIndex(i);
            }
            this.resolvedFlags |= 1 /* Fields */;
            return this.fields;
        };
        ClassInfo.prototype.getInterface = function (i) {
            if (typeof this.interfaces[i] === "number") {
                this.interfaces[i] = this.constantPool.resolveClass(this.interfaces[i]);
            }
            return this.interfaces[i];
        };
        ClassInfo.prototype.getInterfaces = function () {
            if (!this.interfaces) {
                return J2ME.ArrayUtilities.EMPTY_ARRAY;
            }
            if (this.resolvedFlags & 4 /* Interfaces */) {
                return this.interfaces;
            }
            for (var i = 0; i < this.interfaces.length; i++) {
                this.getInterface(i);
            }
            this.resolvedFlags |= 4 /* Interfaces */;
            return this.interfaces;
        };
        ClassInfo.prototype.getAllInterfaces = function () {
            if (this.allInterfaces) {
                return this.allInterfaces;
            }
            var interfaces = this.getInterfaces();
            var list = interfaces.slice();
            for (var i = 0; i < interfaces.length; i++) {
                pushMany(list, interfaces[i].getAllInterfaces());
            }
            if (this.superClass) {
                pushMany(list, this.superClass.getAllInterfaces());
            }
            return this.allInterfaces = unique(list);
        };
        Object.defineProperty(ClassInfo.prototype, "staticInitializer", {
            get: function () {
                return this.getMethodByNameString("<clinit>", "()V");
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Object that holds static properties for this class.
         */
        ClassInfo.prototype.getStaticObject = function (ctx) {
            return ctx.runtime.getRuntimeKlass(this.klass);
        };
        Object.defineProperty(ClassInfo.prototype, "isInterface", {
            get: function () {
                return !!(this.accessFlags & 512 /* ACC_INTERFACE */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClassInfo.prototype, "isAbstract", {
            get: function () {
                return !!(this.accessFlags & 1024 /* ACC_ABSTRACT */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClassInfo.prototype, "isFinal", {
            get: function () {
                return !!(this.accessFlags & 16 /* ACC_FINAL */);
            },
            enumerable: true,
            configurable: true
        });
        ClassInfo.prototype.implementsInterface = function (i) {
            var classInfo = this;
            do {
                var interfaces = classInfo.interfaces;
                for (var n = 0; n < interfaces.length; ++n) {
                    if (interfaces[n] === i)
                        return true;
                }
                classInfo = classInfo.superClass;
            } while (classInfo);
            return false;
        };
        ClassInfo.prototype.isAssignableTo = function (toClass) {
            if (this === toClass || toClass === J2ME.CLASSES.java_lang_Object)
                return true;
            if (toClass.isInterface && this.implementsInterface(toClass))
                return true;
            return this.superClass ? this.superClass.isAssignableTo(toClass) : false;
        };
        /**
         * java.lang.Class object for this class info. This is a not where static properties
         * are stored for this class.
         */
        ClassInfo.prototype.getClassObject = function () {
            return $.getRuntimeKlass(this.klass).classObject;
        };
        return ClassInfo;
    })(ByteStream);
    J2ME.ClassInfo = ClassInfo;
    var PrimitiveClassInfo = (function (_super) {
        __extends(PrimitiveClassInfo, _super);
        function PrimitiveClassInfo(utf8Name, mangledName) {
            _super.call(this, null);
            this.utf8Name = utf8Name;
            this.mangledName = mangledName;
            this.complete();
        }
        PrimitiveClassInfo.Z = new PrimitiveClassInfo(UTF8.Z, "boolean");
        PrimitiveClassInfo.C = new PrimitiveClassInfo(UTF8.C, "char");
        PrimitiveClassInfo.F = new PrimitiveClassInfo(UTF8.F, "float");
        PrimitiveClassInfo.D = new PrimitiveClassInfo(UTF8.D, "double");
        PrimitiveClassInfo.B = new PrimitiveClassInfo(UTF8.B, "byte");
        PrimitiveClassInfo.S = new PrimitiveClassInfo(UTF8.S, "short");
        PrimitiveClassInfo.I = new PrimitiveClassInfo(UTF8.I, "int");
        PrimitiveClassInfo.J = new PrimitiveClassInfo(UTF8.J, "long");
        return PrimitiveClassInfo;
    })(ClassInfo);
    J2ME.PrimitiveClassInfo = PrimitiveClassInfo;
    var ArrayClassInfo = (function (_super) {
        __extends(ArrayClassInfo, _super);
        // XXX: This constructor should not be called directly.
        function ArrayClassInfo(elementClass) {
            _super.call(this, null);
            this.elementClass = elementClass;
            this.superClass = J2ME.CLASSES.java_lang_Object;
            this.superClassName = J2ME.CLASSES.java_lang_Object.getClassNameSlow();
        }
        ArrayClassInfo.prototype.isAssignableTo = function (toClass) {
            if (this === toClass || toClass === J2ME.CLASSES.java_lang_Object)
                return true;
            if (toClass.isInterface && this.implementsInterface(toClass))
                return true;
            if (toClass instanceof ArrayClassInfo) {
                if (this.elementClass && toClass.elementClass)
                    return this.elementClass.isAssignableTo(toClass.elementClass);
            }
            else {
                return false;
            }
            return this.superClass ? this.superClass.isAssignableTo(toClass) : false;
        };
        return ArrayClassInfo;
    })(ClassInfo);
    J2ME.ArrayClassInfo = ArrayClassInfo;
    var ObjectArrayClassInfo = (function (_super) {
        __extends(ObjectArrayClassInfo, _super);
        function ObjectArrayClassInfo(elementClass) {
            _super.call(this, elementClass);
            if (elementClass instanceof ArrayClassInfo) {
                this.utf8Name = strcatSingle(91 /* OpenBracket */, elementClass.utf8Name);
            }
            else {
                this.utf8Name = strcat4Single(91 /* OpenBracket */, 76 /* L */, elementClass.utf8Name, 59 /* Semicolon */);
            }
            this.mangledName = mangleClassName(this.utf8Name);
            this.complete();
        }
        return ObjectArrayClassInfo;
    })(ArrayClassInfo);
    J2ME.ObjectArrayClassInfo = ObjectArrayClassInfo;
    var PrimitiveArrayClassInfo = (function (_super) {
        __extends(PrimitiveArrayClassInfo, _super);
        function PrimitiveArrayClassInfo(elementClass, mangledName) {
            _super.call(this, elementClass);
            this.utf8Name = strcatSingle(91 /* OpenBracket */, elementClass.utf8Name);
            this.mangledName = mangledName;
            this.complete();
        }
        PrimitiveArrayClassInfo.initialize = function () {
            // Primitive array classes require the java_lang_Object to exists before they can be created.
            PrimitiveArrayClassInfo.Z = new PrimitiveArrayClassInfo(PrimitiveClassInfo.Z, "Uint8Array");
            PrimitiveArrayClassInfo.C = new PrimitiveArrayClassInfo(PrimitiveClassInfo.C, "Uint16Array");
            PrimitiveArrayClassInfo.F = new PrimitiveArrayClassInfo(PrimitiveClassInfo.F, "Float32Array");
            PrimitiveArrayClassInfo.D = new PrimitiveArrayClassInfo(PrimitiveClassInfo.D, "Float64Array");
            PrimitiveArrayClassInfo.B = new PrimitiveArrayClassInfo(PrimitiveClassInfo.B, "Int8Array");
            PrimitiveArrayClassInfo.S = new PrimitiveArrayClassInfo(PrimitiveClassInfo.S, "Int16Array");
            PrimitiveArrayClassInfo.I = new PrimitiveArrayClassInfo(PrimitiveClassInfo.I, "Int32Array");
            PrimitiveArrayClassInfo.J = new PrimitiveArrayClassInfo(PrimitiveClassInfo.J, "Int64Array");
        };
        return PrimitiveArrayClassInfo;
    })(ArrayClassInfo);
    J2ME.PrimitiveArrayClassInfo = PrimitiveArrayClassInfo;
})(J2ME || (J2ME = {}));
/*
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var J2ME;
(function (J2ME) {
    var Metrics;
    (function (Metrics) {
        var Timer = (function () {
            function Timer(parent, name) {
                this._parent = parent;
                this._timers = J2ME.ObjectUtilities.createMap();
                this._name = name;
                this._begin = 0;
                this._last = 0;
                this._total = 0;
                this._count = 0;
            }
            Timer.time = function (name, fn) {
                Timer.start(name);
                fn();
                Timer.stop();
            };
            Timer.start = function (name) {
                Timer._top = Timer._top._timers[name] || (Timer._top._timers[name] = new Timer(Timer._top, name));
                Timer._top.start();
                var tmp = Timer._flat._timers[name] || (Timer._flat._timers[name] = new Timer(Timer._flat, name));
                tmp.start();
                Timer._flatStack.push(tmp);
            };
            Timer.stop = function () {
                Timer._top.stop();
                Timer._top = Timer._top._parent;
                Timer._flatStack.pop().stop();
            };
            Timer.stopStart = function (name) {
                Timer.stop();
                Timer.start(name);
            };
            Timer.prototype.start = function () {
                this._begin = J2ME.getTicks();
            };
            Timer.prototype.stop = function () {
                this._last = J2ME.getTicks() - this._begin;
                this._total += this._last;
                this._count += 1;
            };
            Timer.prototype.toJSON = function () {
                return { name: this._name, total: this._total, timers: this._timers };
            };
            Timer.prototype.trace = function (writer) {
                writer.enter(this._name + ": " + this._total.toFixed(2) + " ms" + ", count: " + this._count + ", average: " + (this._total / this._count).toFixed(2) + " ms");
                for (var name in this._timers) {
                    this._timers[name].trace(writer);
                }
                writer.outdent();
            };
            Timer.trace = function (writer) {
                Timer._base.trace(writer);
                Timer._flat.trace(writer);
            };
            Timer._base = new Timer(null, "Total");
            Timer._top = Timer._base;
            Timer._flat = new Timer(null, "Flat");
            Timer._flatStack = [];
            return Timer;
        })();
        Metrics.Timer = Timer;
        /**
         * Quick way to count named events.
         */
        var Counter = (function () {
            function Counter(enabled) {
                this._enabled = enabled;
                this.clear();
            }
            Object.defineProperty(Counter.prototype, "counts", {
                get: function () {
                    return this._counts;
                },
                enumerable: true,
                configurable: true
            });
            Counter.prototype.setEnabled = function (enabled) {
                this._enabled = enabled;
            };
            Counter.prototype.clear = function () {
                this._counts = J2ME.ObjectUtilities.createMap();
                this._times = J2ME.ObjectUtilities.createMap();
            };
            Counter.prototype.toJSON = function () {
                return {
                    counts: this._counts,
                    times: this._times
                };
            };
            Counter.prototype.count = function (name, increment, time) {
                if (increment === void 0) { increment = 1; }
                if (time === void 0) { time = 0; }
                if (!this._enabled) {
                    return;
                }
                if (this._counts[name] === undefined) {
                    this._counts[name] = 0;
                    this._times[name] = 0;
                }
                this._counts[name] += increment;
                this._times[name] += time;
                return this._counts[name];
            };
            Counter.prototype.trace = function (writer) {
                for (var name in this._counts) {
                    writer.writeLn(name + ": " + this._counts[name]);
                }
            };
            Counter.prototype._pairToString = function (times, pair) {
                var name = pair[0];
                var count = pair[1];
                var time = times[name];
                var line = count + ": " + name;
                if (time) {
                    line += ", " + time.toFixed(4);
                    if (count > 1) {
                        line += " (" + (time / count).toFixed(4) + ")";
                    }
                }
                return line;
            };
            Counter.prototype.toStringSorted = function () {
                var self = this;
                var times = this._times;
                var pairs = [];
                for (var name in this._counts) {
                    pairs.push([name, this._counts[name]]);
                }
                pairs.sort(function (a, b) {
                    return b[1] - a[1];
                });
                return (pairs.map(function (pair) {
                    return self._pairToString(times, pair);
                }).join(", "));
            };
            Counter.prototype.traceSorted = function (writer, inline) {
                if (inline === void 0) { inline = false; }
                var self = this;
                var times = this._times;
                var pairs = [];
                for (var name in this._counts) {
                    pairs.push([name, this._counts[name]]);
                }
                pairs.sort(function (a, b) {
                    return b[1] - a[1];
                });
                if (inline) {
                    writer.writeLn(pairs.map(function (pair) {
                        return self._pairToString(times, pair);
                    }).join(", "));
                }
                else {
                    pairs.forEach(function (pair) {
                        writer.writeLn(self._pairToString(times, pair));
                    });
                }
            };
            Counter.instance = new Counter(true);
            return Counter;
        })();
        Metrics.Counter = Counter;
        var Average = (function () {
            function Average(max) {
                this._samples = new Float64Array(max);
                this._count = 0;
                this._index = 0;
            }
            Average.prototype.push = function (sample) {
                if (this._count < this._samples.length) {
                    this._count++;
                }
                this._index++;
                this._samples[this._index % this._samples.length] = sample;
            };
            Average.prototype.average = function () {
                var sum = 0;
                for (var i = 0; i < this._count; i++) {
                    sum += this._samples[i];
                }
                return sum / this._count;
            };
            return Average;
        })();
        Metrics.Average = Average;
    })(Metrics = J2ME.Metrics || (J2ME.Metrics = {}));
})(J2ME || (J2ME = {}));
/*
 * Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
var J2ME;
(function (J2ME) {
    var Bytecode;
    (function (Bytecode) {
        var assert = J2ME.Debug.assert;
        var Bytes = (function () {
            function Bytes() {
            }
            /**
             * Gets a signed 1-byte value.
             */
            Bytes.beS1 = function (data, bci) {
                return (data[bci] << 24) >> 24;
            };
            /**
             * Gets a signed 2-byte big-endian value.
             */
            Bytes.beS2 = function (data, bci) {
                return ((data[bci] << 8) | (data[bci + 1] & 0xff)) << 16 >> 16;
            };
            /**
             * Gets an unsigned 1-byte value.
             */
            Bytes.beU1 = function (data, bci) {
                return data[bci] & 0xff;
            };
            /**
             * Gets an unsigned 2-byte big-endian value.
             */
            Bytes.beU2 = function (data, bci) {
                return ((data[bci] & 0xff) << 8) | (data[bci + 1] & 0xff);
            };
            /**
             * Gets a signed 4-byte big-endian value.
             */
            Bytes.beS4 = function (data, bci) {
                return (data[bci] << 24) | ((data[bci + 1] & 0xff) << 16) | ((data[bci + 2] & 0xff) << 8) | (data[bci + 3] & 0xff);
            };
            /**
             * Gets either a signed 2-byte or a signed 4-byte big-endian value.
             */
            Bytes.beSVar = function (data, bci, fourByte) {
                if (fourByte) {
                    return Bytes.beS4(data, bci);
                }
                else {
                    return Bytes.beS2(data, bci);
                }
            };
            return Bytes;
        })();
        Bytecode.Bytes = Bytes;
        (function (Condition) {
            /**
             * Equal.
             */
            Condition[Condition["EQ"] = 0] = "EQ";
            /**
             * Not equal.
             */
            Condition[Condition["NE"] = 1] = "NE";
            /**
             * Signed less than.
             */
            Condition[Condition["LT"] = 2] = "LT";
            /**
             * Signed less than or equal.
             */
            Condition[Condition["LE"] = 3] = "LE";
            /**
             * Signed greater than.
             */
            Condition[Condition["GT"] = 4] = "GT";
            /**
             * Signed greater than or equal.
             */
            Condition[Condition["GE"] = 5] = "GE";
            /**
             * Unsigned greater than or equal ("above than or equal").
             */
            Condition[Condition["AE"] = 6] = "AE";
            /**
             * Unsigned less than or equal ("below than or equal").
             */
            Condition[Condition["BE"] = 7] = "BE";
            /**
             * Unsigned greater than ("above than").
             */
            Condition[Condition["AT"] = 8] = "AT";
            /**
             * Unsigned less than ("below than").
             */
            Condition[Condition["BT"] = 9] = "BT";
            /**
             * Operation produced an overflow.
             */
            Condition[Condition["OF"] = 10] = "OF";
            /**
             * Operation did not produce an overflow.
             */
            Condition[Condition["NOF"] = 11] = "NOF";
        })(Bytecode.Condition || (Bytecode.Condition = {}));
        var Condition = Bytecode.Condition;
        /**
         * The definitions of the bytecodes that are valid input to the compiler and
         * related utility methods. This comprises two groups: the standard Java
         * bytecodes defined by <a href=
         * "http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html">
         * Java Virtual Machine Specification</a>, and a set of <i>extended</i>
         * bytecodes that support low-level programming, for example, memory barriers.
         *
         * The extended bytecodes are one or three bytes in size. The one-byte bytecodes
         * follow the values in the standard set, with no gap. The three-byte extended
         * bytecodes share a common first byte and carry additional instruction-specific
         * information in the second and third bytes.
         */
        (function (Bytecodes) {
            Bytecodes[Bytecodes["NOP"] = 0] = "NOP";
            Bytecodes[Bytecodes["ACONST_NULL"] = 1] = "ACONST_NULL";
            Bytecodes[Bytecodes["ICONST_M1"] = 2] = "ICONST_M1";
            Bytecodes[Bytecodes["ICONST_0"] = 3] = "ICONST_0";
            Bytecodes[Bytecodes["ICONST_1"] = 4] = "ICONST_1";
            Bytecodes[Bytecodes["ICONST_2"] = 5] = "ICONST_2";
            Bytecodes[Bytecodes["ICONST_3"] = 6] = "ICONST_3";
            Bytecodes[Bytecodes["ICONST_4"] = 7] = "ICONST_4";
            Bytecodes[Bytecodes["ICONST_5"] = 8] = "ICONST_5";
            Bytecodes[Bytecodes["LCONST_0"] = 9] = "LCONST_0";
            Bytecodes[Bytecodes["LCONST_1"] = 10] = "LCONST_1";
            Bytecodes[Bytecodes["FCONST_0"] = 11] = "FCONST_0";
            Bytecodes[Bytecodes["FCONST_1"] = 12] = "FCONST_1";
            Bytecodes[Bytecodes["FCONST_2"] = 13] = "FCONST_2";
            Bytecodes[Bytecodes["DCONST_0"] = 14] = "DCONST_0";
            Bytecodes[Bytecodes["DCONST_1"] = 15] = "DCONST_1";
            Bytecodes[Bytecodes["BIPUSH"] = 16] = "BIPUSH";
            Bytecodes[Bytecodes["SIPUSH"] = 17] = "SIPUSH";
            Bytecodes[Bytecodes["LDC"] = 18] = "LDC";
            Bytecodes[Bytecodes["LDC_W"] = 19] = "LDC_W";
            Bytecodes[Bytecodes["LDC2_W"] = 20] = "LDC2_W";
            Bytecodes[Bytecodes["ILOAD"] = 21] = "ILOAD";
            Bytecodes[Bytecodes["LLOAD"] = 22] = "LLOAD";
            Bytecodes[Bytecodes["FLOAD"] = 23] = "FLOAD";
            Bytecodes[Bytecodes["DLOAD"] = 24] = "DLOAD";
            Bytecodes[Bytecodes["ALOAD"] = 25] = "ALOAD";
            Bytecodes[Bytecodes["ILOAD_0"] = 26] = "ILOAD_0";
            Bytecodes[Bytecodes["ILOAD_1"] = 27] = "ILOAD_1";
            Bytecodes[Bytecodes["ILOAD_2"] = 28] = "ILOAD_2";
            Bytecodes[Bytecodes["ILOAD_3"] = 29] = "ILOAD_3";
            Bytecodes[Bytecodes["LLOAD_0"] = 30] = "LLOAD_0";
            Bytecodes[Bytecodes["LLOAD_1"] = 31] = "LLOAD_1";
            Bytecodes[Bytecodes["LLOAD_2"] = 32] = "LLOAD_2";
            Bytecodes[Bytecodes["LLOAD_3"] = 33] = "LLOAD_3";
            Bytecodes[Bytecodes["FLOAD_0"] = 34] = "FLOAD_0";
            Bytecodes[Bytecodes["FLOAD_1"] = 35] = "FLOAD_1";
            Bytecodes[Bytecodes["FLOAD_2"] = 36] = "FLOAD_2";
            Bytecodes[Bytecodes["FLOAD_3"] = 37] = "FLOAD_3";
            Bytecodes[Bytecodes["DLOAD_0"] = 38] = "DLOAD_0";
            Bytecodes[Bytecodes["DLOAD_1"] = 39] = "DLOAD_1";
            Bytecodes[Bytecodes["DLOAD_2"] = 40] = "DLOAD_2";
            Bytecodes[Bytecodes["DLOAD_3"] = 41] = "DLOAD_3";
            Bytecodes[Bytecodes["ALOAD_0"] = 42] = "ALOAD_0";
            Bytecodes[Bytecodes["ALOAD_1"] = 43] = "ALOAD_1";
            Bytecodes[Bytecodes["ALOAD_2"] = 44] = "ALOAD_2";
            Bytecodes[Bytecodes["ALOAD_3"] = 45] = "ALOAD_3";
            Bytecodes[Bytecodes["IALOAD"] = 46] = "IALOAD";
            Bytecodes[Bytecodes["LALOAD"] = 47] = "LALOAD";
            Bytecodes[Bytecodes["FALOAD"] = 48] = "FALOAD";
            Bytecodes[Bytecodes["DALOAD"] = 49] = "DALOAD";
            Bytecodes[Bytecodes["AALOAD"] = 50] = "AALOAD";
            Bytecodes[Bytecodes["BALOAD"] = 51] = "BALOAD";
            Bytecodes[Bytecodes["CALOAD"] = 52] = "CALOAD";
            Bytecodes[Bytecodes["SALOAD"] = 53] = "SALOAD";
            Bytecodes[Bytecodes["ISTORE"] = 54] = "ISTORE";
            Bytecodes[Bytecodes["LSTORE"] = 55] = "LSTORE";
            Bytecodes[Bytecodes["FSTORE"] = 56] = "FSTORE";
            Bytecodes[Bytecodes["DSTORE"] = 57] = "DSTORE";
            Bytecodes[Bytecodes["ASTORE"] = 58] = "ASTORE";
            Bytecodes[Bytecodes["ISTORE_0"] = 59] = "ISTORE_0";
            Bytecodes[Bytecodes["ISTORE_1"] = 60] = "ISTORE_1";
            Bytecodes[Bytecodes["ISTORE_2"] = 61] = "ISTORE_2";
            Bytecodes[Bytecodes["ISTORE_3"] = 62] = "ISTORE_3";
            Bytecodes[Bytecodes["LSTORE_0"] = 63] = "LSTORE_0";
            Bytecodes[Bytecodes["LSTORE_1"] = 64] = "LSTORE_1";
            Bytecodes[Bytecodes["LSTORE_2"] = 65] = "LSTORE_2";
            Bytecodes[Bytecodes["LSTORE_3"] = 66] = "LSTORE_3";
            Bytecodes[Bytecodes["FSTORE_0"] = 67] = "FSTORE_0";
            Bytecodes[Bytecodes["FSTORE_1"] = 68] = "FSTORE_1";
            Bytecodes[Bytecodes["FSTORE_2"] = 69] = "FSTORE_2";
            Bytecodes[Bytecodes["FSTORE_3"] = 70] = "FSTORE_3";
            Bytecodes[Bytecodes["DSTORE_0"] = 71] = "DSTORE_0";
            Bytecodes[Bytecodes["DSTORE_1"] = 72] = "DSTORE_1";
            Bytecodes[Bytecodes["DSTORE_2"] = 73] = "DSTORE_2";
            Bytecodes[Bytecodes["DSTORE_3"] = 74] = "DSTORE_3";
            Bytecodes[Bytecodes["ASTORE_0"] = 75] = "ASTORE_0";
            Bytecodes[Bytecodes["ASTORE_1"] = 76] = "ASTORE_1";
            Bytecodes[Bytecodes["ASTORE_2"] = 77] = "ASTORE_2";
            Bytecodes[Bytecodes["ASTORE_3"] = 78] = "ASTORE_3";
            Bytecodes[Bytecodes["IASTORE"] = 79] = "IASTORE";
            Bytecodes[Bytecodes["LASTORE"] = 80] = "LASTORE";
            Bytecodes[Bytecodes["FASTORE"] = 81] = "FASTORE";
            Bytecodes[Bytecodes["DASTORE"] = 82] = "DASTORE";
            Bytecodes[Bytecodes["AASTORE"] = 83] = "AASTORE";
            Bytecodes[Bytecodes["BASTORE"] = 84] = "BASTORE";
            Bytecodes[Bytecodes["CASTORE"] = 85] = "CASTORE";
            Bytecodes[Bytecodes["SASTORE"] = 86] = "SASTORE";
            Bytecodes[Bytecodes["POP"] = 87] = "POP";
            Bytecodes[Bytecodes["POP2"] = 88] = "POP2";
            Bytecodes[Bytecodes["DUP"] = 89] = "DUP";
            Bytecodes[Bytecodes["DUP_X1"] = 90] = "DUP_X1";
            Bytecodes[Bytecodes["DUP_X2"] = 91] = "DUP_X2";
            Bytecodes[Bytecodes["DUP2"] = 92] = "DUP2";
            Bytecodes[Bytecodes["DUP2_X1"] = 93] = "DUP2_X1";
            Bytecodes[Bytecodes["DUP2_X2"] = 94] = "DUP2_X2";
            Bytecodes[Bytecodes["SWAP"] = 95] = "SWAP";
            Bytecodes[Bytecodes["IADD"] = 96] = "IADD";
            Bytecodes[Bytecodes["LADD"] = 97] = "LADD";
            Bytecodes[Bytecodes["FADD"] = 98] = "FADD";
            Bytecodes[Bytecodes["DADD"] = 99] = "DADD";
            Bytecodes[Bytecodes["ISUB"] = 100] = "ISUB";
            Bytecodes[Bytecodes["LSUB"] = 101] = "LSUB";
            Bytecodes[Bytecodes["FSUB"] = 102] = "FSUB";
            Bytecodes[Bytecodes["DSUB"] = 103] = "DSUB";
            Bytecodes[Bytecodes["IMUL"] = 104] = "IMUL";
            Bytecodes[Bytecodes["LMUL"] = 105] = "LMUL";
            Bytecodes[Bytecodes["FMUL"] = 106] = "FMUL";
            Bytecodes[Bytecodes["DMUL"] = 107] = "DMUL";
            Bytecodes[Bytecodes["IDIV"] = 108] = "IDIV";
            Bytecodes[Bytecodes["LDIV"] = 109] = "LDIV";
            Bytecodes[Bytecodes["FDIV"] = 110] = "FDIV";
            Bytecodes[Bytecodes["DDIV"] = 111] = "DDIV";
            Bytecodes[Bytecodes["IREM"] = 112] = "IREM";
            Bytecodes[Bytecodes["LREM"] = 113] = "LREM";
            Bytecodes[Bytecodes["FREM"] = 114] = "FREM";
            Bytecodes[Bytecodes["DREM"] = 115] = "DREM";
            Bytecodes[Bytecodes["INEG"] = 116] = "INEG";
            Bytecodes[Bytecodes["LNEG"] = 117] = "LNEG";
            Bytecodes[Bytecodes["FNEG"] = 118] = "FNEG";
            Bytecodes[Bytecodes["DNEG"] = 119] = "DNEG";
            Bytecodes[Bytecodes["ISHL"] = 120] = "ISHL";
            Bytecodes[Bytecodes["LSHL"] = 121] = "LSHL";
            Bytecodes[Bytecodes["ISHR"] = 122] = "ISHR";
            Bytecodes[Bytecodes["LSHR"] = 123] = "LSHR";
            Bytecodes[Bytecodes["IUSHR"] = 124] = "IUSHR";
            Bytecodes[Bytecodes["LUSHR"] = 125] = "LUSHR";
            Bytecodes[Bytecodes["IAND"] = 126] = "IAND";
            Bytecodes[Bytecodes["LAND"] = 127] = "LAND";
            Bytecodes[Bytecodes["IOR"] = 128] = "IOR";
            Bytecodes[Bytecodes["LOR"] = 129] = "LOR";
            Bytecodes[Bytecodes["IXOR"] = 130] = "IXOR";
            Bytecodes[Bytecodes["LXOR"] = 131] = "LXOR";
            Bytecodes[Bytecodes["IINC"] = 132] = "IINC";
            Bytecodes[Bytecodes["I2L"] = 133] = "I2L";
            Bytecodes[Bytecodes["I2F"] = 134] = "I2F";
            Bytecodes[Bytecodes["I2D"] = 135] = "I2D";
            Bytecodes[Bytecodes["L2I"] = 136] = "L2I";
            Bytecodes[Bytecodes["L2F"] = 137] = "L2F";
            Bytecodes[Bytecodes["L2D"] = 138] = "L2D";
            Bytecodes[Bytecodes["F2I"] = 139] = "F2I";
            Bytecodes[Bytecodes["F2L"] = 140] = "F2L";
            Bytecodes[Bytecodes["F2D"] = 141] = "F2D";
            Bytecodes[Bytecodes["D2I"] = 142] = "D2I";
            Bytecodes[Bytecodes["D2L"] = 143] = "D2L";
            Bytecodes[Bytecodes["D2F"] = 144] = "D2F";
            Bytecodes[Bytecodes["I2B"] = 145] = "I2B";
            Bytecodes[Bytecodes["I2C"] = 146] = "I2C";
            Bytecodes[Bytecodes["I2S"] = 147] = "I2S";
            Bytecodes[Bytecodes["LCMP"] = 148] = "LCMP";
            Bytecodes[Bytecodes["FCMPL"] = 149] = "FCMPL";
            Bytecodes[Bytecodes["FCMPG"] = 150] = "FCMPG";
            Bytecodes[Bytecodes["DCMPL"] = 151] = "DCMPL";
            Bytecodes[Bytecodes["DCMPG"] = 152] = "DCMPG";
            Bytecodes[Bytecodes["IFEQ"] = 153] = "IFEQ";
            Bytecodes[Bytecodes["IFNE"] = 154] = "IFNE";
            Bytecodes[Bytecodes["IFLT"] = 155] = "IFLT";
            Bytecodes[Bytecodes["IFGE"] = 156] = "IFGE";
            Bytecodes[Bytecodes["IFGT"] = 157] = "IFGT";
            Bytecodes[Bytecodes["IFLE"] = 158] = "IFLE";
            Bytecodes[Bytecodes["IF_ICMPEQ"] = 159] = "IF_ICMPEQ";
            Bytecodes[Bytecodes["IF_ICMPNE"] = 160] = "IF_ICMPNE";
            Bytecodes[Bytecodes["IF_ICMPLT"] = 161] = "IF_ICMPLT";
            Bytecodes[Bytecodes["IF_ICMPGE"] = 162] = "IF_ICMPGE";
            Bytecodes[Bytecodes["IF_ICMPGT"] = 163] = "IF_ICMPGT";
            Bytecodes[Bytecodes["IF_ICMPLE"] = 164] = "IF_ICMPLE";
            Bytecodes[Bytecodes["IF_ACMPEQ"] = 165] = "IF_ACMPEQ";
            Bytecodes[Bytecodes["IF_ACMPNE"] = 166] = "IF_ACMPNE";
            Bytecodes[Bytecodes["GOTO"] = 167] = "GOTO";
            Bytecodes[Bytecodes["JSR"] = 168] = "JSR";
            Bytecodes[Bytecodes["RET"] = 169] = "RET";
            Bytecodes[Bytecodes["TABLESWITCH"] = 170] = "TABLESWITCH";
            Bytecodes[Bytecodes["LOOKUPSWITCH"] = 171] = "LOOKUPSWITCH";
            Bytecodes[Bytecodes["IRETURN"] = 172] = "IRETURN";
            Bytecodes[Bytecodes["LRETURN"] = 173] = "LRETURN";
            Bytecodes[Bytecodes["FRETURN"] = 174] = "FRETURN";
            Bytecodes[Bytecodes["DRETURN"] = 175] = "DRETURN";
            Bytecodes[Bytecodes["ARETURN"] = 176] = "ARETURN";
            Bytecodes[Bytecodes["RETURN"] = 177] = "RETURN";
            Bytecodes[Bytecodes["GETSTATIC"] = 178] = "GETSTATIC";
            Bytecodes[Bytecodes["PUTSTATIC"] = 179] = "PUTSTATIC";
            Bytecodes[Bytecodes["GETFIELD"] = 180] = "GETFIELD";
            Bytecodes[Bytecodes["PUTFIELD"] = 181] = "PUTFIELD";
            Bytecodes[Bytecodes["INVOKEVIRTUAL"] = 182] = "INVOKEVIRTUAL";
            Bytecodes[Bytecodes["INVOKESPECIAL"] = 183] = "INVOKESPECIAL";
            Bytecodes[Bytecodes["INVOKESTATIC"] = 184] = "INVOKESTATIC";
            Bytecodes[Bytecodes["INVOKEINTERFACE"] = 185] = "INVOKEINTERFACE";
            Bytecodes[Bytecodes["XXXUNUSEDXXX"] = 186] = "XXXUNUSEDXXX";
            Bytecodes[Bytecodes["NEW"] = 187] = "NEW";
            Bytecodes[Bytecodes["NEWARRAY"] = 188] = "NEWARRAY";
            Bytecodes[Bytecodes["ANEWARRAY"] = 189] = "ANEWARRAY";
            Bytecodes[Bytecodes["ARRAYLENGTH"] = 190] = "ARRAYLENGTH";
            Bytecodes[Bytecodes["ATHROW"] = 191] = "ATHROW";
            Bytecodes[Bytecodes["CHECKCAST"] = 192] = "CHECKCAST";
            Bytecodes[Bytecodes["INSTANCEOF"] = 193] = "INSTANCEOF";
            Bytecodes[Bytecodes["MONITORENTER"] = 194] = "MONITORENTER";
            Bytecodes[Bytecodes["MONITOREXIT"] = 195] = "MONITOREXIT";
            Bytecodes[Bytecodes["WIDE"] = 196] = "WIDE";
            Bytecodes[Bytecodes["MULTIANEWARRAY"] = 197] = "MULTIANEWARRAY";
            Bytecodes[Bytecodes["IFNULL"] = 198] = "IFNULL";
            Bytecodes[Bytecodes["IFNONNULL"] = 199] = "IFNONNULL";
            Bytecodes[Bytecodes["GOTO_W"] = 200] = "GOTO_W";
            Bytecodes[Bytecodes["JSR_W"] = 201] = "JSR_W";
            Bytecodes[Bytecodes["BREAKPOINT"] = 202] = "BREAKPOINT";
            Bytecodes[Bytecodes["ALOAD_ILOAD"] = 210] = "ALOAD_ILOAD";
            Bytecodes[Bytecodes["IINC_GOTO"] = 211] = "IINC_GOTO";
            Bytecodes[Bytecodes["ARRAYLENGTH_IF_ICMPGE"] = 212] = "ARRAYLENGTH_IF_ICMPGE";
            Bytecodes[Bytecodes["RESOLVED_GETFIELD"] = 213] = "RESOLVED_GETFIELD";
            Bytecodes[Bytecodes["RESOLVED_PUTFIELD"] = 214] = "RESOLVED_PUTFIELD";
            Bytecodes[Bytecodes["RESOLVED_INVOKEVIRTUAL"] = 215] = "RESOLVED_INVOKEVIRTUAL";
            Bytecodes[Bytecodes["ILLEGAL"] = 255] = "ILLEGAL";
            Bytecodes[Bytecodes["END"] = 256] = "END";
            /**
             * The last opcode defined by the JVM specification. To iterate over all JVM bytecodes:
             */
            Bytecodes[Bytecodes["LAST_JVM_OPCODE"] = 201 /* JSR_W */] = "LAST_JVM_OPCODE";
        })(Bytecode.Bytecodes || (Bytecode.Bytecodes = {}));
        var Bytecodes = Bytecode.Bytecodes;
        var Flags;
        (function (Flags) {
            /**
             * Denotes an instruction that ends a basic block and does not let control flow fall through to its lexical successor.
             */
            Flags[Flags["STOP"] = 0x00000001] = "STOP";
            /**
             * Denotes an instruction that ends a basic block and may let control flow fall through to its lexical successor.
             * In practice this means it is a conditional branch.
             */
            Flags[Flags["FALL_THROUGH"] = 0x00000002] = "FALL_THROUGH";
            /**
             * Denotes an instruction that has a 2 or 4 byte operand that is an offset to another instruction in the same method.
             * This does not include the {@link Bytecodes#TABLESWITCH} or {@link Bytecodes#LOOKUPSWITCH} instructions.
             */
            Flags[Flags["BRANCH"] = 0x00000004] = "BRANCH";
            /**
             * Denotes an instruction that reads the value of a static or instance field.
             */
            Flags[Flags["FIELD_READ"] = 0x00000008] = "FIELD_READ";
            /**
             * Denotes an instruction that writes the value of a static or instance field.
             */
            Flags[Flags["FIELD_WRITE"] = 0x00000010] = "FIELD_WRITE";
            /**
             * Denotes an instruction that is not defined in the JVM specification.
             */
            Flags[Flags["EXTENSION"] = 0x00000020] = "EXTENSION";
            /**
             * Denotes an instruction that can cause aFlags.TRAP.
             */
            Flags[Flags["TRAP"] = 0x00000080] = "TRAP";
            /**
             * Denotes an instruction that is commutative.
             */
            Flags[Flags["COMMUTATIVE"] = 0x00000100] = "COMMUTATIVE";
            /**
             * Denotes an instruction that is associative.
             */
            Flags[Flags["ASSOCIATIVE"] = 0x00000200] = "ASSOCIATIVE";
            /**
             * Denotes an instruction that loads an operand.
             */
            Flags[Flags["LOAD"] = 0x00000400] = "LOAD";
            /**
             * Denotes an instruction that stores an operand.
             */
            Flags[Flags["STORE"] = 0x00000800] = "STORE";
            /**
             * Denotes the 4 INVOKE* instructions.
             */
            Flags[Flags["INVOKE"] = 0x00001000] = "INVOKE";
            /**
             * Denotes a return instruction that ends a basic block.
             */
            Flags[Flags["RETURN"] = 0x00002000] = "RETURN";
        })(Flags || (Flags = {}));
        /**
         * A array that maps from a bytecode value to the set of {@link Flags} for the corresponding instruction.
         */
        Bytecode.flags = new Uint32Array(256);
        /**
         * A array that maps from a bytecode value to the length in bytes for the corresponding instruction.
         */
        Bytecode.length = new Uint32Array(256);
        var writer = new J2ME.IndentingWriter();
        function define(opcode, name, format, flags_) {
            if (flags_ === void 0) { flags_ = 0; }
            var instructionLength = format.length;
            Bytecode.length[opcode] = instructionLength;
            Bytecode.flags[opcode] = flags_;
            release || assert(!isConditionalBranch(opcode) || isBranch(opcode), "a conditional branch must also be a branch");
        }
        /**
         * Only call this before the compiler is used.
         */
        function defineBytecodes() {
            define(0 /* NOP */, "nop", "b");
            define(1 /* ACONST_NULL */, "aconst_null", "b");
            define(2 /* ICONST_M1 */, "iconst_m1", "b");
            define(3 /* ICONST_0 */, "iconst_0", "b");
            define(4 /* ICONST_1 */, "iconst_1", "b");
            define(5 /* ICONST_2 */, "iconst_2", "b");
            define(6 /* ICONST_3 */, "iconst_3", "b");
            define(7 /* ICONST_4 */, "iconst_4", "b");
            define(8 /* ICONST_5 */, "iconst_5", "b");
            define(9 /* LCONST_0 */, "lconst_0", "b");
            define(10 /* LCONST_1 */, "lconst_1", "b");
            define(11 /* FCONST_0 */, "fconst_0", "b");
            define(12 /* FCONST_1 */, "fconst_1", "b");
            define(13 /* FCONST_2 */, "fconst_2", "b");
            define(14 /* DCONST_0 */, "dconst_0", "b");
            define(15 /* DCONST_1 */, "dconst_1", "b");
            define(16 /* BIPUSH */, "bipush", "bc");
            define(17 /* SIPUSH */, "sipush", "bcc");
            define(18 /* LDC */, "ldc", "bi", 128 /* TRAP */);
            define(19 /* LDC_W */, "ldc_w", "bii", 128 /* TRAP */);
            define(20 /* LDC2_W */, "ldc2_w", "bii", 128 /* TRAP */);
            define(21 /* ILOAD */, "iload", "bi", 1024 /* LOAD */);
            define(22 /* LLOAD */, "lload", "bi", 1024 /* LOAD */);
            define(23 /* FLOAD */, "fload", "bi", 1024 /* LOAD */);
            define(24 /* DLOAD */, "dload", "bi", 1024 /* LOAD */);
            define(25 /* ALOAD */, "aload", "bi", 1024 /* LOAD */);
            define(26 /* ILOAD_0 */, "iload_0", "b", 1024 /* LOAD */);
            define(27 /* ILOAD_1 */, "iload_1", "b", 1024 /* LOAD */);
            define(28 /* ILOAD_2 */, "iload_2", "b", 1024 /* LOAD */);
            define(29 /* ILOAD_3 */, "iload_3", "b", 1024 /* LOAD */);
            define(30 /* LLOAD_0 */, "lload_0", "b", 1024 /* LOAD */);
            define(31 /* LLOAD_1 */, "lload_1", "b", 1024 /* LOAD */);
            define(32 /* LLOAD_2 */, "lload_2", "b", 1024 /* LOAD */);
            define(33 /* LLOAD_3 */, "lload_3", "b", 1024 /* LOAD */);
            define(34 /* FLOAD_0 */, "fload_0", "b", 1024 /* LOAD */);
            define(35 /* FLOAD_1 */, "fload_1", "b", 1024 /* LOAD */);
            define(36 /* FLOAD_2 */, "fload_2", "b", 1024 /* LOAD */);
            define(37 /* FLOAD_3 */, "fload_3", "b", 1024 /* LOAD */);
            define(38 /* DLOAD_0 */, "dload_0", "b", 1024 /* LOAD */);
            define(39 /* DLOAD_1 */, "dload_1", "b", 1024 /* LOAD */);
            define(40 /* DLOAD_2 */, "dload_2", "b", 1024 /* LOAD */);
            define(41 /* DLOAD_3 */, "dload_3", "b", 1024 /* LOAD */);
            define(42 /* ALOAD_0 */, "aload_0", "b", 1024 /* LOAD */);
            define(43 /* ALOAD_1 */, "aload_1", "b", 1024 /* LOAD */);
            define(44 /* ALOAD_2 */, "aload_2", "b", 1024 /* LOAD */);
            define(45 /* ALOAD_3 */, "aload_3", "b", 1024 /* LOAD */);
            define(46 /* IALOAD */, "iaload", "b", 128 /* TRAP */);
            define(47 /* LALOAD */, "laload", "b", 128 /* TRAP */);
            define(48 /* FALOAD */, "faload", "b", 128 /* TRAP */);
            define(49 /* DALOAD */, "daload", "b", 128 /* TRAP */);
            define(50 /* AALOAD */, "aaload", "b", 128 /* TRAP */);
            define(51 /* BALOAD */, "baload", "b", 128 /* TRAP */);
            define(52 /* CALOAD */, "caload", "b", 128 /* TRAP */);
            define(53 /* SALOAD */, "saload", "b", 128 /* TRAP */);
            define(54 /* ISTORE */, "istore", "bi", 2048 /* STORE */);
            define(55 /* LSTORE */, "lstore", "bi", 2048 /* STORE */);
            define(56 /* FSTORE */, "fstore", "bi", 2048 /* STORE */);
            define(57 /* DSTORE */, "dstore", "bi", 2048 /* STORE */);
            define(58 /* ASTORE */, "astore", "bi", 2048 /* STORE */);
            define(59 /* ISTORE_0 */, "istore_0", "b", 2048 /* STORE */);
            define(60 /* ISTORE_1 */, "istore_1", "b", 2048 /* STORE */);
            define(61 /* ISTORE_2 */, "istore_2", "b", 2048 /* STORE */);
            define(62 /* ISTORE_3 */, "istore_3", "b", 2048 /* STORE */);
            define(63 /* LSTORE_0 */, "lstore_0", "b", 2048 /* STORE */);
            define(64 /* LSTORE_1 */, "lstore_1", "b", 2048 /* STORE */);
            define(65 /* LSTORE_2 */, "lstore_2", "b", 2048 /* STORE */);
            define(66 /* LSTORE_3 */, "lstore_3", "b", 2048 /* STORE */);
            define(67 /* FSTORE_0 */, "fstore_0", "b", 2048 /* STORE */);
            define(68 /* FSTORE_1 */, "fstore_1", "b", 2048 /* STORE */);
            define(69 /* FSTORE_2 */, "fstore_2", "b", 2048 /* STORE */);
            define(70 /* FSTORE_3 */, "fstore_3", "b", 2048 /* STORE */);
            define(71 /* DSTORE_0 */, "dstore_0", "b", 2048 /* STORE */);
            define(72 /* DSTORE_1 */, "dstore_1", "b", 2048 /* STORE */);
            define(73 /* DSTORE_2 */, "dstore_2", "b", 2048 /* STORE */);
            define(74 /* DSTORE_3 */, "dstore_3", "b", 2048 /* STORE */);
            define(75 /* ASTORE_0 */, "astore_0", "b", 2048 /* STORE */);
            define(76 /* ASTORE_1 */, "astore_1", "b", 2048 /* STORE */);
            define(77 /* ASTORE_2 */, "astore_2", "b", 2048 /* STORE */);
            define(78 /* ASTORE_3 */, "astore_3", "b", 2048 /* STORE */);
            define(79 /* IASTORE */, "iastore", "b", 128 /* TRAP */);
            define(80 /* LASTORE */, "lastore", "b", 128 /* TRAP */);
            define(81 /* FASTORE */, "fastore", "b", 128 /* TRAP */);
            define(82 /* DASTORE */, "dastore", "b", 128 /* TRAP */);
            define(83 /* AASTORE */, "aastore", "b", 128 /* TRAP */);
            define(84 /* BASTORE */, "bastore", "b", 128 /* TRAP */);
            define(85 /* CASTORE */, "castore", "b", 128 /* TRAP */);
            define(86 /* SASTORE */, "sastore", "b", 128 /* TRAP */);
            define(87 /* POP */, "pop", "b");
            define(88 /* POP2 */, "pop2", "b");
            define(89 /* DUP */, "dup", "b");
            define(90 /* DUP_X1 */, "dup_x1", "b");
            define(91 /* DUP_X2 */, "dup_x2", "b");
            define(92 /* DUP2 */, "dup2", "b");
            define(93 /* DUP2_X1 */, "dup2_x1", "b");
            define(94 /* DUP2_X2 */, "dup2_x2", "b");
            define(95 /* SWAP */, "swap", "b");
            define(96 /* IADD */, "iadd", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(97 /* LADD */, "ladd", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(98 /* FADD */, "fadd", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(99 /* DADD */, "dadd", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(100 /* ISUB */, "isub", "b");
            define(101 /* LSUB */, "lsub", "b");
            define(102 /* FSUB */, "fsub", "b");
            define(103 /* DSUB */, "dsub", "b");
            define(104 /* IMUL */, "imul", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(105 /* LMUL */, "lmul", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(106 /* FMUL */, "fmul", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(107 /* DMUL */, "dmul", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(108 /* IDIV */, "idiv", "b", 128 /* TRAP */);
            define(109 /* LDIV */, "ldiv", "b", 128 /* TRAP */);
            define(110 /* FDIV */, "fdiv", "b");
            define(111 /* DDIV */, "ddiv", "b");
            define(112 /* IREM */, "irem", "b", 128 /* TRAP */);
            define(113 /* LREM */, "lrem", "b", 128 /* TRAP */);
            define(114 /* FREM */, "frem", "b");
            define(115 /* DREM */, "drem", "b");
            define(116 /* INEG */, "ineg", "b");
            define(117 /* LNEG */, "lneg", "b");
            define(118 /* FNEG */, "fneg", "b");
            define(119 /* DNEG */, "dneg", "b");
            define(120 /* ISHL */, "ishl", "b");
            define(121 /* LSHL */, "lshl", "b");
            define(122 /* ISHR */, "ishr", "b");
            define(123 /* LSHR */, "lshr", "b");
            define(124 /* IUSHR */, "iushr", "b");
            define(125 /* LUSHR */, "lushr", "b");
            define(126 /* IAND */, "iand", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(127 /* LAND */, "land", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(128 /* IOR */, "ior", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(129 /* LOR */, "lor", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(130 /* IXOR */, "ixor", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(131 /* LXOR */, "lxor", "b", 256 /* COMMUTATIVE */ | 512 /* ASSOCIATIVE */);
            define(132 /* IINC */, "iinc", "bic", 1024 /* LOAD */ | 2048 /* STORE */);
            define(133 /* I2L */, "i2l", "b");
            define(134 /* I2F */, "i2f", "b");
            define(135 /* I2D */, "i2d", "b");
            define(136 /* L2I */, "l2i", "b");
            define(137 /* L2F */, "l2f", "b");
            define(138 /* L2D */, "l2d", "b");
            define(139 /* F2I */, "f2i", "b");
            define(140 /* F2L */, "f2l", "b");
            define(141 /* F2D */, "f2d", "b");
            define(142 /* D2I */, "d2i", "b");
            define(143 /* D2L */, "d2l", "b");
            define(144 /* D2F */, "d2f", "b");
            define(145 /* I2B */, "i2b", "b");
            define(146 /* I2C */, "i2c", "b");
            define(147 /* I2S */, "i2s", "b");
            define(148 /* LCMP */, "lcmp", "b");
            define(149 /* FCMPL */, "fcmpl", "b");
            define(150 /* FCMPG */, "fcmpg", "b");
            define(151 /* DCMPL */, "dcmpl", "b");
            define(152 /* DCMPG */, "dcmpg", "b");
            define(153 /* IFEQ */, "ifeq", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(154 /* IFNE */, "ifne", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(155 /* IFLT */, "iflt", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(156 /* IFGE */, "ifge", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(157 /* IFGT */, "ifgt", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(158 /* IFLE */, "ifle", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(159 /* IF_ICMPEQ */, "if_icmpeq", "boo", 256 /* COMMUTATIVE */ | 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(160 /* IF_ICMPNE */, "if_icmpne", "boo", 256 /* COMMUTATIVE */ | 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(161 /* IF_ICMPLT */, "if_icmplt", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(162 /* IF_ICMPGE */, "if_icmpge", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(163 /* IF_ICMPGT */, "if_icmpgt", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(164 /* IF_ICMPLE */, "if_icmple", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(165 /* IF_ACMPEQ */, "if_acmpeq", "boo", 256 /* COMMUTATIVE */ | 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(166 /* IF_ACMPNE */, "if_acmpne", "boo", 256 /* COMMUTATIVE */ | 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(167 /* GOTO */, "goto", "boo", 1 /* STOP */ | 4 /* BRANCH */);
            define(168 /* JSR */, "jsr", "boo", 1 /* STOP */ | 4 /* BRANCH */);
            define(169 /* RET */, "ret", "bi", 1 /* STOP */);
            define(170 /* TABLESWITCH */, "tableswitch", "", 1 /* STOP */);
            define(171 /* LOOKUPSWITCH */, "lookupswitch", "", 1 /* STOP */);
            define(172 /* IRETURN */, "ireturn", "b", 128 /* TRAP */ | 1 /* STOP */ | 8192 /* RETURN */);
            define(173 /* LRETURN */, "lreturn", "b", 128 /* TRAP */ | 1 /* STOP */ | 8192 /* RETURN */);
            define(174 /* FRETURN */, "freturn", "b", 128 /* TRAP */ | 1 /* STOP */ | 8192 /* RETURN */);
            define(175 /* DRETURN */, "dreturn", "b", 128 /* TRAP */ | 1 /* STOP */ | 8192 /* RETURN */);
            define(176 /* ARETURN */, "areturn", "b", 128 /* TRAP */ | 1 /* STOP */ | 8192 /* RETURN */);
            define(177 /* RETURN */, "return", "b", 128 /* TRAP */ | 1 /* STOP */ | 8192 /* RETURN */);
            define(178 /* GETSTATIC */, "getstatic", "bjj", 128 /* TRAP */ | 8 /* FIELD_READ */);
            define(179 /* PUTSTATIC */, "putstatic", "bjj", 128 /* TRAP */ | 16 /* FIELD_WRITE */);
            define(180 /* GETFIELD */, "getfield", "bjj", 128 /* TRAP */ | 8 /* FIELD_READ */);
            define(181 /* PUTFIELD */, "putfield", "bjj", 128 /* TRAP */ | 16 /* FIELD_WRITE */);
            define(213 /* RESOLVED_GETFIELD */, "getfield", "bjj", 128 /* TRAP */ | 8 /* FIELD_READ */);
            define(214 /* RESOLVED_PUTFIELD */, "putfield", "bjj", 128 /* TRAP */ | 16 /* FIELD_WRITE */);
            define(182 /* INVOKEVIRTUAL */, "invokevirtual", "bjj", 128 /* TRAP */ | 4096 /* INVOKE */);
            define(215 /* RESOLVED_INVOKEVIRTUAL */, "invokevirtual", "bjj", 128 /* TRAP */ | 4096 /* INVOKE */);
            define(183 /* INVOKESPECIAL */, "invokespecial", "bjj", 128 /* TRAP */ | 4096 /* INVOKE */);
            define(184 /* INVOKESTATIC */, "invokestatic", "bjj", 128 /* TRAP */ | 4096 /* INVOKE */);
            define(185 /* INVOKEINTERFACE */, "invokeinterface", "bjja_", 128 /* TRAP */ | 4096 /* INVOKE */);
            define(186 /* XXXUNUSEDXXX */, "xxxunusedxxx", "");
            define(187 /* NEW */, "new", "bii", 128 /* TRAP */);
            define(188 /* NEWARRAY */, "newarray", "bc", 128 /* TRAP */);
            define(189 /* ANEWARRAY */, "anewarray", "bii", 128 /* TRAP */);
            define(190 /* ARRAYLENGTH */, "arraylength", "b", 128 /* TRAP */);
            define(191 /* ATHROW */, "athrow", "b", 128 /* TRAP */ | 1 /* STOP */);
            define(192 /* CHECKCAST */, "checkcast", "bii", 128 /* TRAP */);
            define(193 /* INSTANCEOF */, "instanceof", "bii", 128 /* TRAP */);
            define(194 /* MONITORENTER */, "monitorenter", "b", 128 /* TRAP */);
            define(195 /* MONITOREXIT */, "monitorexit", "b", 128 /* TRAP */);
            define(196 /* WIDE */, "wide", "");
            define(197 /* MULTIANEWARRAY */, "multianewarray", "biic", 128 /* TRAP */);
            define(198 /* IFNULL */, "ifnull", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(199 /* IFNONNULL */, "ifnonnull", "boo", 2 /* FALL_THROUGH */ | 4 /* BRANCH */);
            define(200 /* GOTO_W */, "goto_w", "boooo", 1 /* STOP */ | 4 /* BRANCH */);
            define(201 /* JSR_W */, "jsr_w", "boooo", 1 /* STOP */ | 4 /* BRANCH */);
            define(202 /* BREAKPOINT */, "breakpoint", "b", 128 /* TRAP */);
            define(210 /* ALOAD_ILOAD */, "aload_iload", "bi", 1024 /* LOAD */);
            define(211 /* IINC_GOTO */, "iinc_goto", "bic", 1024 /* LOAD */ | 2048 /* STORE */ | 1 /* STOP */ | 4 /* BRANCH */);
            define(212 /* ARRAYLENGTH_IF_ICMPGE */, "arraylength_IF_ICMPGE", "b", 256 /* COMMUTATIVE */ | 2 /* FALL_THROUGH */ | 4 /* BRANCH */ | 128 /* TRAP */);
        }
        Bytecode.defineBytecodes = defineBytecodes;
        defineBytecodes();
        /**
         * Gets the length of an instruction denoted by a given opcode.
         */
        function lengthOf(opcode) {
            return Bytecode.length[opcode & 0xff];
        }
        Bytecode.lengthOf = lengthOf;
        function lengthAt(code, bci) {
            var opcode = Bytes.beU1(code, bci);
            var _length = Bytecode.length[opcode & 0xff];
            if (_length == 0) {
                switch (opcode) {
                    case 170 /* TABLESWITCH */: {
                        return new BytecodeTableSwitch(code, bci).size();
                    }
                    case 171 /* LOOKUPSWITCH */: {
                        return new BytecodeLookupSwitch(code, bci).size();
                    }
                    case 196 /* WIDE */: {
                        var opc = Bytes.beU1(code, bci + 1);
                        if (opc == 169 /* RET */) {
                            return 4;
                        }
                        else if (opc == 132 /* IINC */) {
                            return 6;
                        }
                        else {
                            return 4; // a load or store bytecode
                        }
                    }
                    default:
                        throw new Error("unknown variable-length bytecode: " + opcode);
                }
            }
            return _length;
        }
        Bytecode.lengthAt = lengthAt;
        /**
         * Determines if an opcode is commutative.
         */
        function isCommutative(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 256 /* COMMUTATIVE */) != 0;
        }
        /**
         * Determines if a given opcode denotes an instruction that can cause an implicit exception.
         */
        function canTrap(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 128 /* TRAP */) != 0;
        }
        Bytecode.canTrap = canTrap;
        /**
         * Determines if a given opcode denotes an instruction that loads a local variable to the operand stack.
         */
        function isLoad(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 1024 /* LOAD */) != 0;
        }
        /**
         * Determines if a given opcode denotes an instruction that ends a basic block and does not let control flow fall
         * through to its lexical successor.
         */
        function isStop(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 1 /* STOP */) != 0;
        }
        Bytecode.isStop = isStop;
        /**
         * Determines if a given opcode denotes an instruction that stores a value to a local variable
         * after popping it from the operand stack.
         */
        function isInvoke(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 4096 /* INVOKE */) != 0;
        }
        Bytecode.isInvoke = isInvoke;
        /**
         * Determines if a given opcode denotes an instruction that stores a value to a local variable
         * after popping it from the operand stack.
         */
        function isStore(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 2048 /* STORE */) != 0;
        }
        Bytecode.isStore = isStore;
        /**
         * Determines if a given opcode is an instruction that delimits a basic block.
         */
        function isBlockEnd(opcode) {
            return (Bytecode.flags[opcode & 0xff] & (1 /* STOP */ | 2 /* FALL_THROUGH */)) != 0;
        }
        Bytecode.isBlockEnd = isBlockEnd;
        /**
         * Determines if a given opcode is an instruction that has a 2 or 4 byte operand that is an offset to another
         * instruction in the same method. This does not include the {@linkplain #TABLESWITCH switch} instructions.
         */
        function isBranch(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 4 /* BRANCH */) != 0;
        }
        /**
         * Determines if a given opcode denotes a conditional branch.
         */
        function isConditionalBranch(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 2 /* FALL_THROUGH */) != 0;
        }
        /**
         * Determines if a given opcode denotes a standard bytecode. A standard bytecode is
         * defined in the JVM specification.
         */
        function isStandard(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 32 /* EXTENSION */) == 0;
        }
        /**
         * Determines if a given opcode denotes an extended bytecode.
         */
        function isExtended(opcode) {
            return (Bytecode.flags[opcode & 0xff] & 32 /* EXTENSION */) != 0;
        }
        /**
         * Determines if a given opcode is a three-byte extended bytecode.
         */
        function isThreeByteExtended(opcode) {
            return (opcode & ~0xff) != 0;
        }
        /**
         * Determines if a given opcode is a return bytecode.
         */
        function isReturn(opcode) {
            return !!(Bytecode.flags[opcode & 0xff] & 8192 /* RETURN */);
        }
        Bytecode.isReturn = isReturn;
        var BytecodeSwitch = (function () {
            /**
             * Constructor for a bytecode array.
             * @param code the bytecode array containing the switch instruction.
             * @param bci the index in the array of the switch instruction
             */
            function BytecodeSwitch(code, bci) {
                this.alignedBci = (bci + 4) & 0xfffffffc;
                this.code = code;
                this.bci = bci;
            }
            /**
             * Gets the index of the instruction denoted by the {@code i}'th switch target.
             * @param i index of the switch target
             * @return the index of the instruction denoted by the {@code i}'th switch target
             */
            BytecodeSwitch.prototype.targetAt = function (i) {
                return this.bci + this.offsetAt(i);
            };
            /**
             * Gets the index of the instruction for the default switch target.
             * @return the index of the instruction for the default switch target
             */
            BytecodeSwitch.prototype.defaultTarget = function () {
                return this.bci + this.defaultOffset();
            };
            /**
             * Gets the offset from the start of the switch instruction to the default switch target.
             * @return the offset to the default switch target
             */
            BytecodeSwitch.prototype.defaultOffset = function () {
                throw J2ME.Debug.abstractMethod("defaultOffset");
            };
            /**
             * Gets the key at {@code i}'th switch target index.
             * @param i the switch target index
             * @return the key at {@code i}'th switch target index
             */
            BytecodeSwitch.prototype.keyAt = function (i) {
                throw J2ME.Debug.abstractMethod("keyAt");
            };
            /**
             * Gets the offset from the start of the switch instruction for the {@code i}'th switch target.
             * @param i the switch target index
             * @return the offset to the {@code i}'th switch target
             */
            BytecodeSwitch.prototype.offsetAt = function (i) {
                throw J2ME.Debug.abstractMethod("offsetAt");
            };
            /**
             * Gets the number of switch targets.
             * @return the number of switch targets
             */
            BytecodeSwitch.prototype.numberOfCases = function () {
                throw J2ME.Debug.abstractMethod("numberOfCases");
            };
            /**
             * Gets the total size in bytes of the switch instruction.
             * @return the total size in bytes of the switch instruction
             */
            BytecodeSwitch.prototype.size = function () {
                throw J2ME.Debug.abstractMethod("size");
            };
            /**
             * Reads the signed value at given bytecode index.
             * @param bci the start index of the value to retrieve
             * @return the signed, 4-byte value in the bytecode array starting at {@code bci}
             */
            BytecodeSwitch.prototype.readWord = function (bci) {
                return Bytes.beS4(this.code, bci);
            };
            return BytecodeSwitch;
        })();
        Bytecode.BytecodeSwitch = BytecodeSwitch;
        var BytecodeTableSwitch = (function (_super) {
            __extends(BytecodeTableSwitch, _super);
            /**
             * Constructor for a bytecode array.
             * @param code the bytecode array containing the switch instruction.
             * @param bci the index in the array of the switch instruction
             */
            function BytecodeTableSwitch(code, bci) {
                _super.call(this, code, bci);
            }
            /**
             * Gets the low key of the table switch.
             */
            BytecodeTableSwitch.prototype.lowKey = function () {
                return this.readWord(this.alignedBci + BytecodeTableSwitch.OFFSET_TO_LOW_KEY);
            };
            /**
             * Gets the high key of the table switch.
             */
            BytecodeTableSwitch.prototype.highKey = function () {
                return this.readWord(this.alignedBci + BytecodeTableSwitch.OFFSET_TO_HIGH_KEY);
            };
            BytecodeTableSwitch.prototype.keyAt = function (i) {
                return this.lowKey() + i;
            };
            BytecodeTableSwitch.prototype.defaultOffset = function () {
                return this.readWord(this.alignedBci);
            };
            BytecodeTableSwitch.prototype.offsetAt = function (i) {
                return this.readWord(this.alignedBci + BytecodeTableSwitch.OFFSET_TO_FIRST_JUMP_OFFSET + BytecodeTableSwitch.JUMP_OFFSET_SIZE * i);
            };
            BytecodeTableSwitch.prototype.numberOfCases = function () {
                return this.highKey() - this.lowKey() + 1;
            };
            BytecodeTableSwitch.prototype.size = function () {
                return this.alignedBci + BytecodeTableSwitch.OFFSET_TO_FIRST_JUMP_OFFSET + BytecodeTableSwitch.JUMP_OFFSET_SIZE * this.numberOfCases() - this.bci;
            };
            BytecodeTableSwitch.OFFSET_TO_LOW_KEY = 4;
            BytecodeTableSwitch.OFFSET_TO_HIGH_KEY = 8;
            BytecodeTableSwitch.OFFSET_TO_FIRST_JUMP_OFFSET = 12;
            BytecodeTableSwitch.JUMP_OFFSET_SIZE = 4;
            return BytecodeTableSwitch;
        })(BytecodeSwitch);
        Bytecode.BytecodeTableSwitch = BytecodeTableSwitch;
        var BytecodeLookupSwitch = (function (_super) {
            __extends(BytecodeLookupSwitch, _super);
            function BytecodeLookupSwitch(code, bci) {
                _super.call(this, code, bci);
            }
            BytecodeLookupSwitch.prototype.defaultOffset = function () {
                return this.readWord(this.alignedBci);
            };
            BytecodeLookupSwitch.prototype.offsetAt = function (i) {
                return this.readWord(this.alignedBci + BytecodeLookupSwitch.OFFSET_TO_FIRST_PAIR_OFFSET + BytecodeLookupSwitch.PAIR_SIZE * i);
            };
            BytecodeLookupSwitch.prototype.keyAt = function (i) {
                return this.readWord(this.alignedBci + BytecodeLookupSwitch.OFFSET_TO_FIRST_PAIR_MATCH + BytecodeLookupSwitch.PAIR_SIZE * i);
            };
            BytecodeLookupSwitch.prototype.numberOfCases = function () {
                return this.readWord(this.alignedBci + BytecodeLookupSwitch.OFFSET_TO_NUMBER_PAIRS);
            };
            BytecodeLookupSwitch.prototype.size = function () {
                return this.alignedBci + BytecodeLookupSwitch.OFFSET_TO_FIRST_PAIR_MATCH + BytecodeLookupSwitch.PAIR_SIZE * this.numberOfCases() - this.bci;
            };
            BytecodeLookupSwitch.OFFSET_TO_NUMBER_PAIRS = 4;
            BytecodeLookupSwitch.OFFSET_TO_FIRST_PAIR_MATCH = 8;
            BytecodeLookupSwitch.OFFSET_TO_FIRST_PAIR_OFFSET = 12;
            BytecodeLookupSwitch.PAIR_SIZE = 8;
            return BytecodeLookupSwitch;
        })(BytecodeSwitch);
        Bytecode.BytecodeLookupSwitch = BytecodeLookupSwitch;
        /**
         * A utility class that makes iterating over bytecodes and reading operands
         * simpler and less error prone. For example, it handles the {@link Bytecodes#WIDE} instruction
         * and wide variants of instructions internally.
         */
        var BytecodeStream = (function () {
            function BytecodeStream(code) {
                assert(code, "No Code");
                this._code = code;
                this.setBCI(0);
            }
            /**
             * Advances to the next bytecode.
             */
            BytecodeStream.prototype.next = function () {
                this.setBCI(this.nextBCI);
            };
            /**
             * Gets the bytecode index of the end of the code.
             */
            BytecodeStream.prototype.endBCI = function () {
                return this._code.length;
            };
            Object.defineProperty(BytecodeStream.prototype, "nextBCI", {
                /**
                 * Gets the next bytecode index (no side-effects).
                 */
                get: function () {
                    return this._nextBCI;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BytecodeStream.prototype, "currentBCI", {
                /**
                 * Gets the current bytecode index.
                 */
                get: function () {
                    return this._currentBCI;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Gets the current opcode. This method will never return the
             * {@link Bytecodes#WIDE WIDE} opcode, but will instead
             * return the opcode that is modified by the {@code WIDE} opcode.
             * @return the current opcode; {@link Bytecodes#END} if at or beyond the end of the code
             */
            BytecodeStream.prototype.currentBC = function () {
                if (this._opcode === 196 /* WIDE */) {
                    return Bytes.beU1(this._code, this._currentBCI + 1);
                }
                else {
                    return this._opcode;
                }
            };
            BytecodeStream.prototype.rawCurrentBC = function () {
                return this._opcode;
            };
            /**
             * Sets the current opcode.
             */
            BytecodeStream.prototype.writeCurrentBC = function (bc) {
                assert(lengthOf(this.currentBC()) === lengthOf(bc));
                this._code[this._currentBCI] = bc;
            };
            /**
             * Gets the next opcode.
             * @return the next opcode; {@link Bytecodes#END} if at or beyond the end of the code
             */
            BytecodeStream.prototype.nextBC = function () {
                return Bytes.beU1(this._code, this._nextBCI);
            };
            /**
             * Reads the index of a local variable for one of the load or store instructions.
             * The WIDE modifier is handled internally.
             */
            BytecodeStream.prototype.readLocalIndex = function () {
                // read local variable index for load/store
                if (this._opcode == 196 /* WIDE */) {
                    return Bytes.beU2(this._code, this._currentBCI + 2);
                }
                return Bytes.beU1(this._code, this._currentBCI + 1);
            };
            /**
             * Read the delta for an {@link Bytecodes#IINC} bytecode.
             */
            BytecodeStream.prototype.readIncrement = function () {
                // read the delta for the iinc bytecode
                if (this._opcode == 196 /* WIDE */) {
                    return Bytes.beS2(this._code, this._currentBCI + 4);
                }
                return Bytes.beS1(this._code, this._currentBCI + 2);
            };
            /**
             * Read the destination of a {@link Bytecodes#GOTO} or {@code IF} instructions.
             * @return the destination bytecode index
             */
            BytecodeStream.prototype.readBranchDest = function () {
                // reads the destination for a branch bytecode
                return this._currentBCI + Bytes.beS2(this._code, this._currentBCI + 1);
            };
            /**
             * Read the destination of a {@link Bytecodes#GOTO_W} or {@link Bytecodes#JSR_W} instructions.
             * @return the destination bytecode index
             */
            BytecodeStream.prototype.readFarBranchDest = function () {
                // reads the destination for a wide branch bytecode
                return this._currentBCI + Bytes.beS4(this._code, this._currentBCI + 1);
            };
            /**
             * Read a signed 4-byte integer from the bytecode stream at the specified bytecode index.
             * @param bci the bytecode index
             * @return the integer value
             */
            BytecodeStream.prototype.readInt = function (bci) {
                // reads a 4-byte signed value
                return Bytes.beS4(this._code, bci);
            };
            /**
             * Reads an unsigned, 1-byte value from the bytecode stream at the specified bytecode index.
             * @param bci the bytecode index
             * @return the byte
             */
            BytecodeStream.prototype.readUByte = function (bci) {
                return Bytes.beU1(this._code, bci);
            };
            /**
             * Reads a constant pool index for the current instruction.
             * @return the constant pool index
             */
            BytecodeStream.prototype.readCPI = function () {
                if (this._opcode == 18 /* LDC */) {
                    return Bytes.beU1(this._code, this._currentBCI + 1);
                }
                return Bytes.beU2(this._code, this._currentBCI + 1) << 16 >> 16;
            };
            /**
             * Reads a signed, 1-byte value for the current instruction (e.g. BIPUSH).
             */
            BytecodeStream.prototype.readByte = function () {
                return this._code[this._currentBCI + 1] << 24 >> 24;
            };
            /**
             * Reads a signed, 2-byte short for the current instruction (e.g. SIPUSH).
             */
            BytecodeStream.prototype.readShort = function () {
                return Bytes.beS2(this._code, this._currentBCI + 1) << 16 >> 16;
            };
            /**
             * Sets the bytecode index to the specified value.
             * If {@code bci} is beyond the end of the array, {@link #currentBC} will return
             * {@link Bytecodes#END} and other methods may throw {@link ArrayIndexOutOfBoundsException}.
             * @param bci the new bytecode index
             */
            BytecodeStream.prototype.setBCI = function (bci) {
                this._currentBCI = bci;
                if (this._currentBCI < this._code.length) {
                    this._opcode = Bytes.beU1(this._code, bci);
                    this._nextBCI = bci + lengthAt(this._code, bci);
                }
                else {
                    this._opcode = 256 /* END */;
                    this._nextBCI = this._currentBCI;
                }
            };
            BytecodeStream.prototype.readTableSwitch = function () {
                return new BytecodeTableSwitch(this._code, this._currentBCI);
            };
            BytecodeStream.prototype.readLookupSwitch = function () {
                return new BytecodeLookupSwitch(this._code, this._currentBCI);
            };
            return BytecodeStream;
        })();
        Bytecode.BytecodeStream = BytecodeStream;
    })(Bytecode = J2ME.Bytecode || (J2ME.Bytecode = {}));
})(J2ME || (J2ME = {}));
/*
 * Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
var J2ME;
(function (J2ME) {
    var Bytecode;
    (function (Bytecode) {
        var assert = J2ME.Debug.assert;
        var pushUnique = J2ME.ArrayUtilities.pushUnique;
        var Uint32ArrayBitSet = J2ME.BitSets.Uint32ArrayBitSet;
        var writer = new J2ME.IndentingWriter();
        var Block = (function () {
            function Block() {
                this.loops = 0; // long
                this.exits = 0; // long
                this.loopID = -1; // long
                this.successors = [];
                this.predecessors = [];
            }
            Block.prototype.isInnerLoopHeader = function () {
                return this.isLoopHeader && (this.loops !== (1 << this.loopID));
            };
            Block.prototype.clone = function () {
                var block = new Block();
                block.startBci = this.startBci;
                block.endBci = this.endBci;
                block.isExceptionEntry = this.isExceptionEntry;
                block.isLoopHeader = this.isLoopHeader;
                block.isLoopEnd = this.isLoopEnd;
                block.hasHandlers = this.hasHandlers;
                block.loops = this.loops;
                block.loopID = this.loopID;
                block.blockID = this.blockID;
                block.successors = this.successors.slice(0);
                block.predecessors = this.predecessors.slice(0);
                return block;
            };
            return Block;
        })();
        Bytecode.Block = Block;
        var ExceptionBlock = (function (_super) {
            __extends(ExceptionBlock, _super);
            function ExceptionBlock() {
                _super.apply(this, arguments);
            }
            return ExceptionBlock;
        })(Block);
        Bytecode.ExceptionBlock = ExceptionBlock;
        var BlockMap = (function () {
            function BlockMap(method) {
                /**
                 * The next available loop number.
                 */
                this._nextLoop = 0;
                this.exceptionDispatch = new Map();
                this.blocks = [];
                this.method = method;
                this.hasBackwardBranches = false;
                this.invokeCount = 0;
                this.blockMap = new Array(method.codeAttribute.code.length);
                this.canTrap = new Uint32ArrayBitSet(this.blockMap.length);
            }
            BlockMap.prototype.build = function () {
                this.makeExceptionEntries();
                this.iterateOverBytecodes();
                this.addExceptionEdges();
                this.computeBlockOrder();
                this.fixLoopBits();
                this.initializeBlockIDs();
                this.computeLoopStores();
            };
            BlockMap.prototype.makeExceptionEntries = function () {
                for (var i = 0; i < this.method.exception_table_length; i++) {
                    var handler = this.method.getExceptionEntryViewByIndex(i);
                    var block = this.makeBlock(handler.handler_pc);
                    block.isExceptionEntry = true;
                }
            };
            BlockMap.prototype.computeLoopStores = function () {
            };
            BlockMap.prototype.initializeBlockIDs = function () {
                for (var i = 0; i < this.blocks.length; i++) {
                    this.blocks[i].blockID = i;
                }
            };
            BlockMap.prototype.getBlock = function (bci) {
                return this.blockMap[bci];
            };
            BlockMap.prototype.getOSREntryPoints = function () {
                var points = [];
                for (var i = 0; i < this.blocks.length; i++) {
                    var block = this.blocks[i];
                    if (block.isLoopHeader && !block.isInnerLoopHeader()) {
                        points.push(block.startBci);
                    }
                }
                return points;
            };
            BlockMap.prototype.makeBlock = function (startBci) {
                var oldBlock = this.blockMap[startBci];
                if (!oldBlock) {
                    var newBlock = new Block();
                    newBlock.startBci = startBci;
                    this.blockMap[startBci] = newBlock;
                    return newBlock;
                }
                else if (oldBlock.startBci != startBci) {
                    // Backward branch into the middle of an already processed block.
                    // Add the correct fall-through successor.
                    var newBlock = new Block();
                    newBlock.startBci = startBci;
                    newBlock.endBci = oldBlock.endBci;
                    J2ME.ArrayUtilities.pushMany(newBlock.successors, oldBlock.successors);
                    newBlock.normalSuccessors = oldBlock.normalSuccessors;
                    oldBlock.endBci = startBci - 1;
                    oldBlock.successors.length = 0;
                    oldBlock.successors.push(newBlock);
                    oldBlock.normalSuccessors = 1;
                    for (var i = startBci; i <= newBlock.endBci; i++) {
                        this.blockMap[i] = newBlock;
                    }
                    return newBlock;
                }
                else {
                    return oldBlock;
                }
            };
            BlockMap.prototype.makeSwitchSuccessors = function (tswitch) {
                var max = tswitch.numberOfCases();
                var successors = new Array(max + 1);
                for (var i = 0; i < max; i++) {
                    successors[i] = this.makeBlock(tswitch.targetAt(i));
                }
                successors[max] = this.makeBlock(tswitch.defaultTarget());
                return successors;
            };
            BlockMap.prototype.setSuccessors = function (predBci, successors) {
                if (!this.hasBackwardBranches) {
                    for (var i = 0; i < successors.length; i++) {
                        if (successors[i].startBci < predBci) {
                            this.hasBackwardBranches = true;
                        }
                    }
                }
                var predecessor = this.blockMap[predBci];
                assert(predecessor.successors.length === 0, predecessor.successors.map(function (x) { return x.startBci; }).join(", "));
                J2ME.ArrayUtilities.pushMany(predecessor.successors, successors);
                predecessor.normalSuccessors = successors.length;
            };
            BlockMap.prototype.canTrapAt = function (opcode, bci) {
                return Bytecode.canTrap(opcode);
            };
            BlockMap.prototype.iterateOverBytecodes = function () {
                // iterate over the bytecodes top to bottom.
                // mark the entrypoints of basic blocks and build lists of successors for
                // all bytecodes that end basic blocks (i.e. goto, ifs, switches, throw, jsr, returns, ret)
                var code = this.method.codeAttribute.code;
                var current = null;
                var bci = 0;
                while (bci < code.length) {
                    if (!current || this.blockMap[bci]) {
                        var b = this.makeBlock(bci);
                        if (current) {
                            this.setSuccessors(current.endBci, [b]);
                        }
                        current = b;
                    }
                    this.blockMap[bci] = current;
                    current.endBci = bci;
                    var opcode = Bytecode.Bytes.beU1(code, bci);
                    switch (opcode) {
                        case 172 /* IRETURN */:
                        case 173 /* LRETURN */:
                        case 174 /* FRETURN */:
                        case 175 /* DRETURN */:
                        case 176 /* ARETURN */:
                        case 177 /* RETURN */: {
                            current = null;
                            break;
                        }
                        case 191 /* ATHROW */: {
                            current = null;
                            this.canTrap.set(bci);
                            break;
                        }
                        case 153 /* IFEQ */:
                        case 154 /* IFNE */:
                        case 155 /* IFLT */:
                        case 156 /* IFGE */:
                        case 157 /* IFGT */:
                        case 158 /* IFLE */:
                        case 159 /* IF_ICMPEQ */:
                        case 160 /* IF_ICMPNE */:
                        case 161 /* IF_ICMPLT */:
                        case 162 /* IF_ICMPGE */:
                        case 163 /* IF_ICMPGT */:
                        case 164 /* IF_ICMPLE */:
                        case 165 /* IF_ACMPEQ */:
                        case 166 /* IF_ACMPNE */:
                        case 198 /* IFNULL */:
                        case 199 /* IFNONNULL */: {
                            current = null;
                            var probability = -1;
                            var b1 = this.makeBlock(bci + Bytecode.Bytes.beS2(code, bci + 1));
                            var b2 = this.makeBlock(bci + 3);
                            this.setSuccessors(bci, [b1, b2]);
                            break;
                        }
                        case 167 /* GOTO */:
                        case 200 /* GOTO_W */: {
                            current = null;
                            var target = bci + Bytecode.Bytes.beSVar(code, bci + 1, opcode == 200 /* GOTO_W */);
                            var b1 = this.makeBlock(target);
                            this.setSuccessors(bci, [b1]);
                            break;
                        }
                        case 170 /* TABLESWITCH */: {
                            current = null;
                            this.setSuccessors(bci, this.makeSwitchSuccessors(new Bytecode.BytecodeTableSwitch(code, bci)));
                            break;
                        }
                        case 171 /* LOOKUPSWITCH */: {
                            current = null;
                            this.setSuccessors(bci, this.makeSwitchSuccessors(new Bytecode.BytecodeLookupSwitch(code, bci)));
                            break;
                        }
                        case 196 /* WIDE */: {
                            var opcode2 = Bytecode.Bytes.beU1(code, bci);
                            switch (opcode2) {
                                case 169 /* RET */: {
                                    writer.writeLn("RET");
                                    current = null;
                                    break;
                                }
                            }
                            break;
                        }
                        case 182 /* INVOKEVIRTUAL */:
                        case 183 /* INVOKESPECIAL */:
                        case 184 /* INVOKESTATIC */:
                        case 185 /* INVOKEINTERFACE */:
                            this.invokeCount++;
                            if (this.canTrapAt(opcode, bci)) {
                                this.canTrap.set(bci);
                            }
                            break;
                        default: {
                            if (this.canTrapAt(opcode, bci)) {
                                this.canTrap.set(bci);
                            }
                            if (Bytecode.isInvoke(opcode)) {
                                this.invokeCount++;
                            }
                        }
                    }
                    bci += Bytecode.lengthAt(code, bci);
                }
            };
            /**
             * Mark the block as a loop header, using the next available loop number.
             * Also checks for corner cases that we don't want to compile.
             */
            BlockMap.prototype.makeLoopHeader = function (block) {
                if (!block.isLoopHeader) {
                    block.isLoopHeader = true;
                    if (block.isExceptionEntry) {
                    }
                    if (this._nextLoop >= 32) {
                        throw "Too many loops in method";
                    }
                    assert(!block.loops, block.loops);
                    block.loops = 1 << this._nextLoop;
                    block.loopID = this._nextLoop;
                    this._nextLoop++;
                }
                assert(J2ME.IntegerUtilities.bitCount(block.loops) === 1);
            };
            // catch_type
            BlockMap.prototype.handlerIsCatchAll = function (handler) {
                return handler.catch_type === 0;
            };
            BlockMap.prototype.makeExceptionDispatch = function (handlers, index, bci) {
                var handler = handlers[index];
                if (this.handlerIsCatchAll(handler)) {
                    return this.blockMap[handler.handler_pc];
                }
                var block = this.exceptionDispatch.get(handler);
                if (!block) {
                    block = new ExceptionBlock();
                    block.startBci = -1;
                    block.endBci = -1;
                    block.deoptBci = bci;
                    block.handler = handler;
                    block.successors.push(this.blockMap[handler.handler_pc]);
                    if (index < handlers.length - 1) {
                        block.successors.push(this.makeExceptionDispatch(handlers, index + 1, bci));
                    }
                    this.exceptionDispatch.set(handler, block);
                }
                return block;
            };
            BlockMap.prototype.addExceptionEdges = function () {
                var length = this.canTrap.length;
                for (var bci = this.canTrap.nextSetBit(0, length); bci >= 0; bci = this.canTrap.nextSetBit(bci + 1, length)) {
                    var block = this.blockMap[bci];
                    var handlers = null;
                    for (var i = 0; i < this.method.exception_table_length; i++) {
                        var handler = this.method.getExceptionEntryViewByIndex(i);
                        if (handler.start_pc <= bci && bci < handler.end_pc) {
                            if (!handlers) {
                                handlers = [];
                            }
                            handlers.push(handler);
                            if (this.handlerIsCatchAll(handler)) {
                                break;
                            }
                        }
                    }
                    if (handlers) {
                        var dispatch = this.makeExceptionDispatch(handlers, 0, bci);
                        block.successors.push(dispatch);
                        block.hasHandlers = true;
                    }
                }
            };
            BlockMap.prototype.fixLoopBits = function () {
                var loopChanges = false;
                function _fixLoopBits(block) {
                    if (block.visited) {
                        // Return cached loop information for this block.
                        if (block.isLoopHeader) {
                            return block.loops & ~(1 << block.loopID);
                        }
                        else {
                            return block.loops;
                        }
                    }
                    block.visited = true;
                    var loops = block.loops;
                    var successors = block.successors;
                    for (var i = 0; i < successors.length; i++) {
                        // Recursively process successors.
                        loops |= _fixLoopBits(successors[i]);
                    }
                    for (var i = 0; i < successors.length; i++) {
                        var successor = successors[i];
                        successor.exits = loops & ~successor.loops;
                    }
                    if (block.loops !== loops) {
                        loopChanges = true;
                        block.loops = loops;
                    }
                    if (block.isLoopHeader) {
                        loops &= ~(1 << block.loopID);
                    }
                    return loops;
                }
                do {
                    loopChanges = false;
                    for (var i = 0; i < this.blocks.length; i++) {
                        this.blocks[i].visited = false;
                    }
                    var loop = _fixLoopBits(this.blockMap[0]);
                    if (loop !== 0) {
                        throw new J2ME.CompilerBailout("Non-reducible loop");
                    }
                } while (loopChanges);
            };
            BlockMap.prototype.computeBlockOrder = function () {
                var loop = this.computeBlockOrderFrom(this.blockMap[0]);
                if (loop != 0) {
                    throw new J2ME.CompilerBailout("Non-reducible loop");
                }
                // Convert postorder to the desired reverse postorder.
                this.blocks.reverse();
            };
            /**
             * Depth-first traversal of the control flow graph. The flag {@linkplain Block#visited} is used to
             * visit every block only once. The flag {@linkplain Block#active} is used to detect cycles (backward
             * edges).
             */
            BlockMap.prototype.computeBlockOrderFrom = function (block) {
                if (block.visited) {
                    if (block.active) {
                        // Reached block via backward branch.
                        this.makeLoopHeader(block);
                        return block.loops;
                    }
                    else if (block.isLoopHeader) {
                        return block.loops & ~(1 << block.loopID);
                    }
                    else {
                        return block.loops;
                    }
                }
                block.visited = true;
                block.active = true;
                var loops = 0;
                for (var i = 0; i < block.successors.length; i++) {
                    var successor = block.successors[i];
                    pushUnique(successor.predecessors, block);
                    // Recursively process successors.
                    loops |= this.computeBlockOrderFrom(block.successors[i]);
                    if (successor.active) {
                        // Reached block via backward branch.
                        block.isLoopEnd = true;
                    }
                }
                block.loops = loops;
                if (block.isLoopHeader) {
                    loops &= ~(1 << block.loopID);
                }
                block.active = false;
                this.blocks.push(block);
                return loops;
            };
            BlockMap.prototype.blockToString = function (block) {
                return "blockID: " + String(block.blockID + ", ").padRight(" ", 5) + "bci: [" + block.startBci + ", " + block.endBci + "]" + (block.successors.length ? ", successors: => " + block.successors.map(function (b) { return b.blockID; }).join(", ") : "") + (block.isLoopHeader ? " isLoopHeader, inner: " + block.isInnerLoopHeader() : "") + (block.isLoopEnd ? " isLoopEnd" : "") + (block.isExceptionEntry ? " isExceptionEntry" : "") + (block.hasHandlers ? " hasHandlers" : "") + ", loops: " + block.loops.toString(2) + ", exits: " + block.exits.toString(2) + ", loopID: " + block.loopID;
            };
            BlockMap.prototype.trace = function (writer, traceBytecode) {
                var _this = this;
                if (traceBytecode === void 0) { traceBytecode = false; }
                var code = this.method.codeAttribute.code;
                var stream = new Bytecode.BytecodeStream(code);
                writer.enter("Block Map: " + this.blocks.map(function (b) { return b.blockID; }).join(", "));
                this.blocks.forEach(function (block) {
                    writer.enter(_this.blockToString(block));
                    if (traceBytecode) {
                        var bci = block.startBci;
                        stream.setBCI(bci);
                        while (stream.currentBCI <= block.endBci) {
                            writer.writeLn(Bytecode.Bytecodes[stream.currentBC()]);
                            stream.next();
                            bci = stream.currentBCI;
                        }
                    }
                    writer.outdent();
                });
                writer.outdent();
            };
            BlockMap.prototype.traceDOTFile = function (writer) {
                writer.enter("digraph CFG {");
                writer.writeLn("graph [bgcolor = gray10];");
                writer.writeLn("edge [fontname = Consolas, fontsize = 11, color = white, fontcolor = white];");
                writer.writeLn("node [shape = box, fontname = Consolas, fontsize = 11, color = white, fontcolor = black, style = filled];");
                writer.writeLn("rankdir = TB;");
                var blocks = this.blocks;
                blocks.forEach(function (block) {
                    var label = "B" + block.blockID + " " + (block.isLoopHeader ? "H" : "") + (block.isLoopEnd ? "E" : "") + " l:" + block.loops.toString(2) + " e:" + block.exits.toString(2) + " i:" + block.loopID + " p:" + block.predecessors.length;
                    writer.writeLn("B" + block.blockID + " [label = \"" + label + "\"];");
                });
                blocks.forEach(function (block) {
                    block.successors.forEach(function (successor) {
                        writer.writeLn("B" + block.blockID + " -> " + "B" + successor.blockID);
                    });
                });
                writer.leave("}");
            };
            return BlockMap;
        })();
        Bytecode.BlockMap = BlockMap;
    })(Bytecode = J2ME.Bytecode || (J2ME.Bytecode = {}));
})(J2ME || (J2ME = {}));
var J2ME;
(function (J2ME) {
    var assert = J2ME.Debug.assert;
    var writer = new J2ME.IndentingWriter();
    (function (Kind) {
        Kind[Kind["Boolean"] = 0] = "Boolean";
        Kind[Kind["Byte"] = 1] = "Byte";
        Kind[Kind["Short"] = 2] = "Short";
        Kind[Kind["Char"] = 3] = "Char";
        Kind[Kind["Int"] = 4] = "Int";
        Kind[Kind["Float"] = 5] = "Float";
        Kind[Kind["Long"] = 6] = "Long";
        Kind[Kind["Double"] = 7] = "Double";
        Kind[Kind["Reference"] = 8] = "Reference";
        Kind[Kind["Void"] = 9] = "Void";
        Kind[Kind["Illegal"] = 10] = "Illegal";
        Kind[Kind["Store"] = 11] = "Store";
    })(J2ME.Kind || (J2ME.Kind = {}));
    var Kind = J2ME.Kind;
    function isTwoSlot(kind) {
        return kind === 6 /* Long */ || kind === 7 /* Double */;
    }
    J2ME.isTwoSlot = isTwoSlot;
    J2ME.valueKinds = [
        0 /* Boolean */,
        3 /* Char */,
        5 /* Float */,
        7 /* Double */,
        1 /* Byte */,
        2 /* Short */,
        4 /* Int */,
        6 /* Long */
    ];
    function stackKind(kind) {
        switch (kind) {
            case 0 /* Boolean */: return 4 /* Int */;
            case 1 /* Byte */: return 4 /* Int */;
            case 2 /* Short */: return 4 /* Int */;
            case 3 /* Char */: return 4 /* Int */;
            case 4 /* Int */: return 4 /* Int */;
            case 5 /* Float */: return 5 /* Float */;
            case 6 /* Long */: return 6 /* Long */;
            case 7 /* Double */: return 7 /* Double */;
            case 8 /* Reference */: return 8 /* Reference */;
            default: throw J2ME.Debug.unexpected("Unknown stack kind: " + kind);
        }
    }
    J2ME.stackKind = stackKind;
    function arrayTypeCodeToKind(typeCode) {
        switch (typeCode) {
            case 4: return 0 /* Boolean */;
            case 5: return 3 /* Char */;
            case 6: return 5 /* Float */;
            case 7: return 7 /* Double */;
            case 8: return 1 /* Byte */;
            case 9: return 2 /* Short */;
            case 10: return 4 /* Int */;
            case 11: return 6 /* Long */;
            default: throw J2ME.Debug.unexpected("Unknown array type code: " + typeCode);
        }
    }
    J2ME.arrayTypeCodeToKind = arrayTypeCodeToKind;
    function kindCharacter(kind) {
        switch (kind) {
            case 0 /* Boolean */:
                return 'Z';
            case 1 /* Byte */:
                return 'B';
            case 2 /* Short */:
                return 'S';
            case 3 /* Char */:
                return 'C';
            case 4 /* Int */:
                return 'I';
            case 5 /* Float */:
                return 'F';
            case 6 /* Long */:
                return 'J';
            case 7 /* Double */:
                return 'D';
            case 8 /* Reference */:
                return 'R';
            case 9 /* Void */:
                return 'V';
        }
    }
    J2ME.kindCharacter = kindCharacter;
    function getKindCheck(kind) {
        switch (kind) {
            case 0 /* Boolean */:
                return function (x) { return x === 0 || x === 1; };
            case 1 /* Byte */:
                return function (x) { return (x | 0) === x && x >= -128 /* BYTE_MIN */ && x <= 127 /* BYTE_MAX */; };
            case 2 /* Short */:
                return function (x) { return (x | 0) === x && x >= -32768 /* SHORT_MIN */ && x <= 32767 /* SHORT_MAX */; };
            case 3 /* Char */:
                return function (x) { return (x | 0) === x && x >= 0 /* CHAR_MIN */ && x <= 65535 /* CHAR_MAX */; };
            case 4 /* Int */:
                return function (x) { return (x | 0) === x; };
            case 5 /* Float */:
                return function (x) { return isNaN(x) || Math.fround(x) === x; };
            case 6 /* Long */:
                return function (x) { return x instanceof Long.constructor; };
            case 7 /* Double */:
                return function (x) { return isNaN(x) || (+x) === x; };
            case 8 /* Reference */:
                return function (x) { return x === null || x instanceof Object; };
            case 9 /* Void */:
                return function (x) { return typeof x === "undefined"; };
            default:
                throw J2ME.Debug.unexpected("Unknown kind: " + kind);
        }
    }
    J2ME.getKindCheck = getKindCheck;
    function getSignatureKind(signature) {
        switch (signature[0]) {
            case 90 /* Z */:
                return 0 /* Boolean */;
            case 66 /* B */:
                return 1 /* Byte */;
            case 83 /* S */:
                return 2 /* Short */;
            case 67 /* C */:
                return 3 /* Char */;
            case 73 /* I */:
                return 4 /* Int */;
            case 70 /* F */:
                return 5 /* Float */;
            case 74 /* J */:
                return 6 /* Long */;
            case 68 /* D */:
                return 7 /* Double */;
            case 91 /* OpenBracket */:
            case 76 /* L */:
                return 8 /* Reference */;
            case 86 /* V */:
                return 9 /* Void */;
        }
    }
    J2ME.getSignatureKind = getSignatureKind;
    /**
     * MethodDescriptor:
     *    ( ParameterDescriptor* ) ReturnDescriptor
     *  ParameterDescriptor:
     *    FieldType
     *  ReturnDescriptor:
     *    FieldType
     *    VoidDescriptor
     *  VoidDescriptor:
     *    V
     *  FieldDescriptor:
     *    FieldType
     *  FieldType:
     *    BaseType
     *    ObjectType
     *    ArrayType
     *  BaseType:
     *    B
     *    C
     *    D
     *    F
     *    I
     *    J
     *    S
     *    Z
     *  ObjectType:
     *    L ClassName ;
     *  ArrayType:
     *    [ ComponentType
     *  ComponentType:
     *    FieldType
     */
    // Global state for signature parsing, kind of hackish but fast.
    var globalNextIndex = 0;
    var descriptorKinds = [];
    /**
     * Returns an array of kinds that appear in a method signature. The first element is always the
     * return kind. The returned array is shared, so you if you need a copy of it, you'll need to
     * clone it.
     *
     * The parsing algorithm needs some global state to keep track of the current position in the
     * descriptor, namely |globalNextIndex| which always points to the next index in the descriptor
     * after a token has been consumed.
     */
    function parseMethodDescriptorKinds(value, startIndex) {
        globalNextIndex = 0;
        if ((startIndex > value.length - 3) || value[startIndex] !== 40 /* OpenParenthesis */) {
            assert(false, "Invalid method signature.");
        }
        descriptorKinds.length = 0;
        descriptorKinds.push(9 /* Void */); // placeholder until the return type is parsed
        var i = startIndex + 1;
        while (value[i] !== 41 /* CloseParenthesis */) {
            var kind = parseTypeDescriptorKind(value, i);
            descriptorKinds.push(kind);
            i = globalNextIndex;
            if (i >= value.length) {
                assert(false, "Invalid method signature.");
            }
        }
        i++;
        var kind = parseTypeDescriptorKind(value, i);
        if (globalNextIndex !== value.length) {
            assert(false, "Invalid method signature.");
        }
        // Plug in the return type
        descriptorKinds[0] = kind;
        return descriptorKinds;
    }
    J2ME.parseMethodDescriptorKinds = parseMethodDescriptorKinds;
    function parseTypeDescriptorKind(value, startIndex) {
        globalNextIndex = startIndex + 1;
        switch (value[startIndex]) {
            case 90 /* Z */:
                return 0 /* Boolean */;
            case 66 /* B */:
                return 1 /* Byte */;
            case 67 /* C */:
                return 3 /* Char */;
            case 68 /* D */:
                return 7 /* Double */;
            case 70 /* F */:
                return 5 /* Float */;
            case 73 /* I */:
                return 4 /* Int */;
            case 74 /* J */:
                return 6 /* Long */;
            case 83 /* S */:
                return 2 /* Short */;
            case 86 /* V */:
                return 9 /* Void */;
            case 76 /* L */: {
                // parse a slashified Java class name
                var endIndex = parseClassNameKind(value, startIndex + 1, 47 /* Slash */);
                if (endIndex > startIndex + 1 && endIndex < value.length && value[endIndex] === 59 /* Semicolon */) {
                    globalNextIndex = endIndex + 1;
                    return 8 /* Reference */;
                }
                J2ME.Debug.unexpected("Invalid signature.");
            }
            case 91 /* OpenBracket */: {
                // compute the number of dimensions
                var index = startIndex;
                while (index < value.length && value[index] === 91 /* OpenBracket */) {
                    index++;
                }
                var dimensions = index - startIndex;
                if (dimensions > 255) {
                    J2ME.Debug.unexpected("Array with more than 255 dimensions.");
                }
                var component = parseTypeDescriptorKind(value, index);
                return 8 /* Reference */;
            }
            default:
                J2ME.Debug.unexpected("Unexpected type descriptor prefix: " + value[startIndex]);
        }
    }
    function parseClassNameKind(value, index, separator) {
        var position = index;
        var length = value.length;
        while (position < length) {
            var nextch = value[position];
            if (nextch === 46 /* Dot */ || nextch === 47 /* Slash */) {
                if (separator !== nextch) {
                    return position;
                }
            }
            else if (nextch === 59 /* Semicolon */ || nextch === 91 /* OpenBracket */) {
                return position;
            }
            position++;
        }
        return position;
    }
    function signatureHasTwoSlotArguments(signatureKinds) {
        for (var i = 1; i < signatureKinds.length; i++) {
            if (isTwoSlot(signatureKinds[i])) {
                return true;
            }
        }
        return false;
    }
    J2ME.signatureHasTwoSlotArguments = signatureHasTwoSlotArguments;
    function signatureArgumentSlotCount(signatureKinds) {
        var count = 0;
        for (var i = 1; i < signatureKinds.length; i++) {
            count += isTwoSlot(signatureKinds[i]) ? 2 : 1;
        }
        return count;
    }
    J2ME.signatureArgumentSlotCount = signatureArgumentSlotCount;
})(J2ME || (J2ME = {}));
/*
 node-jvm
 Copyright (c) 2013 Yaroslav Gaponov <yaroslav.gaponov@gmail.com>
*/
var J2ME;
(function (J2ME) {
    J2ME.classCounter = new J2ME.Metrics.Counter(true);
    var ClassRegistry = (function () {
        function ClassRegistry() {
            this.sourceDirectories = [];
            this.sourceFiles = Object.create(null);
            this.missingSourceFiles = Object.create(null);
            this.classes = Object.create(null);
            this.preInitializedClasses = [];
        }
        ClassRegistry.prototype.initializeBuiltinClasses = function () {
            // These classes are guaranteed to not have a static initializer.
            J2ME.enterTimeline("initializeBuiltinClasses");
            this.java_lang_Object = this.loadAndLinkClass("java/lang/Object");
            this.java_lang_Class = this.loadAndLinkClass("java/lang/Class");
            this.java_lang_String = this.loadAndLinkClass("java/lang/String");
            this.java_lang_Thread = this.loadAndLinkClass("java/lang/Thread");
            this.preInitializedClasses.push(this.java_lang_Object);
            this.preInitializedClasses.push(this.java_lang_Class);
            this.preInitializedClasses.push(this.java_lang_String);
            this.preInitializedClasses.push(this.java_lang_Thread);
            /**
             * Force these frequently used classes to be initialized eagerly. We can
             * skip the class initialization check for them. This is only possible
             * because they don't have any static state.
             */
            var classNames = [
                "java/lang/Integer",
                "java/lang/Character",
                "java/lang/Math",
                "java/util/HashtableEntry",
                "java/lang/StringBuffer",
                "java/util/Vector",
                "java/io/IOException",
                "java/lang/IllegalArgumentException",
                "com/sun/cldc/isolate/Isolate",
                "org/mozilla/internal/Sys",
            ];
            for (var i = 0; i < classNames.length; i++) {
                this.preInitializedClasses.push(this.loadAndLinkClass(classNames[i]));
            }
            // Link primitive values.
            var primitiveTypes = "ZCFDBSIJ";
            for (var i = 0; i < primitiveTypes.length; i++) {
                var typeName = primitiveTypes[i];
                J2ME.linkKlass(J2ME.PrimitiveClassInfo[typeName]);
            }
            // Link primitive arrays.
            J2ME.PrimitiveArrayClassInfo.initialize();
            for (var i = 0; i < primitiveTypes.length; i++) {
                this.getClass("[" + primitiveTypes[i]);
            }
            J2ME.leaveTimeline("initializeBuiltinClasses");
        };
        ClassRegistry.prototype.isPreInitializedClass = function (classInfo) {
            return this.preInitializedClasses.indexOf(classInfo) >= 0;
        };
        ClassRegistry.prototype.addSourceDirectory = function (name) {
            this.sourceDirectories.push(name);
        };
        ClassRegistry.prototype.getSourceLine = function (sourceLocation) {
            if (typeof snarf === "undefined") {
                // Sorry, no snarf in the browser. Do async loading instead.
                return null;
            }
            var source = this.sourceFiles[sourceLocation.className];
            if (!source && !this.missingSourceFiles[sourceLocation.className]) {
                for (var i = 0; i < this.sourceDirectories.length; i++) {
                    try {
                        var path = this.sourceDirectories[i] + "/" + sourceLocation.className + ".java";
                        var file = snarf(path);
                        if (file) {
                            source = this.sourceFiles[sourceLocation.className] = file.split("\n");
                        }
                    }
                    catch (x) {
                    }
                }
            }
            if (source) {
                return source[sourceLocation.lineNumber - 1];
            }
            this.missingSourceFiles[sourceLocation.className] = true;
            return null;
        };
        ClassRegistry.prototype.loadClassBytes = function (bytes) {
            J2ME.enterTimeline("loadClassBytes");
            var classInfo = new J2ME.ClassInfo(bytes);
            J2ME.leaveTimeline("loadClassBytes");
            J2ME.loadWriter && J2ME.loadWriter.writeLn(classInfo.getClassNameSlow() + " -> " + classInfo.superClassName + ";");
            this.classes[classInfo.getClassNameSlow()] = classInfo;
            return classInfo;
        };
        ClassRegistry.prototype.loadClassFile = function (fileName) {
            J2ME.loadWriter && J2ME.loadWriter.enter("> Loading Class File: " + fileName);
            var bytes = JARStore.loadFile(fileName);
            if (!bytes) {
                J2ME.loadWriter && J2ME.loadWriter.leave("< ClassNotFoundException");
                throw new (J2ME.ClassNotFoundException)(fileName);
            }
            var self = this;
            var classInfo = this.loadClassBytes(bytes);
            if (classInfo.superClassName) {
                classInfo.superClass = this.loadClass(classInfo.superClassName);
                var superClass = classInfo.superClass;
                superClass.subClasses.push(classInfo);
                while (superClass) {
                    superClass.allSubClasses.push(classInfo);
                    superClass = superClass.superClass;
                }
            }
            classInfo.complete();
            J2ME.loadWriter && J2ME.loadWriter.leave("<");
            return classInfo;
        };
        ClassRegistry.prototype.loadClass = function (className) {
            var classInfo = this.classes[className];
            if (classInfo) {
                return classInfo;
            }
            return this.loadClassFile(className + ".class");
        };
        ClassRegistry.prototype.loadAndLinkClass = function (className) {
            var classInfo = this.loadClass(className);
            J2ME.linkKlass(classInfo);
            return classInfo;
        };
        ClassRegistry.prototype.getEntryPoint = function (classInfo) {
            var methods = classInfo.getMethods();
            for (var i = 0; i < methods.length; i++) {
                var method = methods[i];
                if (method.isPublic && method.isStatic && !method.isNative && method.name === "main" && method.signature === "([Ljava/lang/String;)V") {
                    return method;
                }
            }
        };
        ClassRegistry.prototype.getClass = function (className) {
            var classInfo = this.classes[className];
            if (!classInfo) {
                if (className[0] === "[") {
                    classInfo = this.createArrayClass(className);
                }
                else {
                    classInfo = this.loadClass(className);
                }
                if (!classInfo)
                    return null;
            }
            return classInfo;
        };
        ClassRegistry.prototype.createArrayClass = function (typeName) {
            var elementType = typeName.substr(1);
            var constructor = J2ME.getArrayConstructor(elementType);
            var classInfo;
            if (constructor) {
                classInfo = J2ME.PrimitiveArrayClassInfo[elementType];
            }
            else {
                if (elementType[0] === "L") {
                    elementType = elementType.substr(1).replace(";", "");
                }
                classInfo = new J2ME.ObjectArrayClassInfo(this.getClass(elementType));
            }
            if (J2ME.phase === 0 /* Runtime */) {
                J2ME.linkKlass(classInfo);
            }
            return this.classes[typeName] = classInfo;
        };
        return ClassRegistry;
    })();
    J2ME.ClassRegistry = ClassRegistry;
    J2ME.ClassNotFoundException = function (message) {
        this.message = message;
    };
    J2ME.ClassNotFoundException.prototype = Object.create(Error.prototype);
    J2ME.ClassNotFoundException.prototype.name = "ClassNotFoundException";
    J2ME.ClassNotFoundException.prototype.constructor = J2ME.ClassNotFoundException;
})(J2ME || (J2ME = {}));
/*
 node-jvm
 Copyright (c) 2013 Yaroslav Gaponov <yaroslav.gaponov@gmail.com>
*/
var J2ME;
(function (J2ME) {
    J2ME.CLASSES = new J2ME.ClassRegistry();
    var JVM = (function () {
        function JVM() {
            // ...
        }
        JVM.prototype.createIsolateCtx = function () {
            var runtime = new J2ME.Runtime(this);
            var ctx = new J2ME.Context(runtime);
            ctx.thread = runtime.mainThread = J2ME.newObject(J2ME.CLASSES.java_lang_Thread.klass);
            ctx.thread.pid = util.id();
            ctx.thread.alive = true;
            // The constructor will set the real priority, however one is needed for the scheduler.
            ctx.thread.priority = J2ME.NORMAL_PRIORITY;
            runtime.preInitializeClasses(ctx);
            return ctx;
        };
        JVM.prototype.startIsolate0 = function (className, args) {
            var ctx = this.createIsolateCtx();
            var isolateClassInfo = J2ME.CLASSES.getClass("com/sun/cldc/isolate/Isolate");
            var isolate = J2ME.newObject(isolateClassInfo.klass);
            isolate.id = util.id();
            var array = J2ME.newStringArray(args.length);
            for (var n = 0; n < args.length; ++n)
                array[n] = args[n] ? J2ME.newString(args[n]) : null;
            // The <init> frames go at the end of the array so they are executed first to initialize the thread and isolate.
            ctx.start([
                J2ME.Frame.create(isolateClassInfo.getMethodByNameString("start", "()V"), [isolate], 0),
                J2ME.Frame.create(isolateClassInfo.getMethodByNameString("<init>", "(Ljava/lang/String;[Ljava/lang/String;)V"), [isolate, J2ME.newString(className.replace(/\./g, "/")), array], 0)
            ]);
            release || J2ME.Debug.assert(!U, "Unexpected unwind during isolate initialization.");
        };
        JVM.prototype.startIsolate = function (isolate) {
            var ctx = this.createIsolateCtx();
            var runtime = ctx.runtime;
            isolate.runtime = runtime;
            runtime.isolate = isolate;
            runtime.updateStatus(2 /* Started */);
            var mainClass = J2ME.fromJavaString(isolate._mainClass).replace(/\./g, "/");
            var mainArgs = isolate._mainArgs;
            var classInfo = J2ME.CLASSES.getClass(mainClass);
            J2ME.linkKlass(classInfo);
            if (!classInfo)
                throw new Error("Could not find or load main class " + mainClass);
            var entryPoint = J2ME.CLASSES.getEntryPoint(classInfo);
            if (!entryPoint)
                throw new Error("Could not find main method in class " + mainClass);
            var args = J2ME.newStringArray(mainArgs.length);
            for (var n = 0; n < mainArgs.length; ++n) {
                args[n] = mainArgs[n];
            }
            ctx.start([
                J2ME.Frame.create(entryPoint, [args], 0),
                J2ME.Frame.create(J2ME.CLASSES.java_lang_Thread.getMethodByNameString("<init>", "(Ljava/lang/String;)V"), [runtime.mainThread, J2ME.newString("main")], 0)
            ]);
            release || J2ME.Debug.assert(!U, "Unexpected unwind during isolate initialization.");
        };
        return JVM;
    })();
    J2ME.JVM = JVM;
})(J2ME || (J2ME = {}));
Object.defineProperty(jsGlobal, "CLASSES", {
    get: function () {
        return J2ME.CLASSES;
    }
});
var JVM = J2ME.JVM;
var J2ME;
(function (J2ME) {
    J2ME.Bindings = {
        "java/lang/Object": {
            native: {
                "hashCode.()I": function () {
                    var self = this;
                    if (self._hashCode) {
                        return self._hashCode;
                    }
                    return self._hashCode = $.nextHashCode();
                }
            }
        },
        "java/lang/Class": {
            fields: {
                instanceSymbols: {
                    "status.I": "status"
                }
            },
            methods: {
                instanceSymbols: {
                    "initialize.()V": "initialize"
                }
            }
        },
        "java/lang/Thread": {
            fields: {
                instanceSymbols: {
                    "priority.I": "priority"
                }
            }
        },
        "com/sun/cldc/isolate/Isolate": {
            fields: {
                instanceSymbols: {
                    "_mainArgs.[Ljava/lang/String;": "_mainArgs",
                    "_mainClass.Ljava/lang/String;": "_mainClass",
                }
            }
        },
        "java/io/ByteArrayOutputStream": {
            fields: {
                instanceSymbols: {
                    "count.I": "count",
                    "buf.[B": "buf"
                }
            }
        },
        "com/sun/cldc/i18n/j2me/UTF_8_Writer": {
            fields: {
                instanceSymbols: {
                    "pendingSurrogate.I": "pendingSurrogate"
                }
            }
        },
        "com/sun/j2me/location/CriteriaImpl": {
            fields: {
                instanceSymbols: {
                    "providerName.Ljava/lang/String;": "providerName"
                }
            }
        },
        "com/sun/j2me/location/LocationProviderInfo": {
            fields: {
                instanceSymbols: {
                    "canReportAltitude.Z": "canReportAltitude",
                    "canReportSpeedCource.Z": "canReportSpeedCource",
                    "averageResponseTime.I": "averageResponseTime"
                }
            }
        },
        "com/sun/j2me/location/LocationInfo": {
            fields: {
                instanceSymbols: {
                    "isValid.Z": "isValid",
                    "timestamp.J": "timestamp",
                    "latitude.D": "latitude",
                    "longitude.D": "longitude",
                    "altitude.F": "altitude",
                    "horizontalAccuracy.F": "horizontalAccuracy",
                    "verticalAccuracy.F": "verticalAccuracy",
                    "speed.F": "speed",
                    "course.F": "course",
                    "method.I": "method"
                }
            }
        },
        "com/sun/javame/sensor/ChannelModel": {
            fields: {
                instanceSymbols: {
                    "scale.I": "scale",
                    "name.Ljava/lang/String;": "name",
                    "unit.Ljava/lang/String;": "unit",
                    "dataType.I": "dataType",
                    "accuracy.I": "accuracy",
                    "mrangeCount.I": "mrangeCount",
                    "mrageArray.[J": "mrageArray"
                }
            }
        },
        "com/sun/javame/sensor/SensorModel": {
            fields: {
                instanceSymbols: {
                    "description.Ljava/lang/String;": "description",
                    "model.Ljava/lang/String;": "model",
                    "quantity.Ljava/lang/String;": "quantity",
                    "contextType.Ljava/lang/String;": "contextType",
                    "connectionType.I": "connectionType",
                    "maxBufferSize.I": "maxBufferSize",
                    "availabilityPush.Z": "availabilityPush",
                    "conditionPush.Z": "conditionPush",
                    "channelCount.I": "channelCount",
                    "errorCodes.[I": "errorCodes",
                    "errorMsgs.[Ljava/lang/String;": "errorMsgs",
                    "properties.[Ljava/lang/String;": "properties"
                }
            }
        },
        "com/nokia/mid/ui/DirectGraphicsImp": {
            fields: {
                instanceSymbols: {
                    "graphics.Ljavax/microedition/lcdui/Graphics;": "graphics"
                }
            }
        },
        "javax/microedition/lcdui/Command": {
            fields: {
                instanceSymbols: {
                    "id.I": "id",
                    "commandType.I": "commandType",
                    "shortLabel.Ljava/lang/String;": "shortLabel",
                    "priority.I": "priority",
                }
            }
        },
        "javax/microedition/lcdui/Font": {
            fields: {
                instanceSymbols: {
                    "baseline.I": "baseline",
                    "height.I": "height",
                }
            }
        },
        "javax/microedition/lcdui/Image": {
            fields: {
                instanceSymbols: {
                    "imageData.Ljavax/microedition/lcdui/ImageData;": "imageData",
                    "width.I": "width",
                    "height.I": "height"
                }
            }
        },
        "javax/microedition/lcdui/ImageData": {
            fields: {
                instanceSymbols: {
                    "width.I": "width",
                    "height.I": "height",
                    "isMutable.Z": "isMutable",
                }
            }
        },
        "com/nokia/mid/ui/TextEditor": {
            fields: {
                instanceSymbols: {
                    "font.Ljavax/microedition/lcdui/Font;": "font",
                }
            }
        },
        "com/sun/midp/events/Event": {
            fields: {
                instanceSymbols: {
                    "type.I": "type",
                    "next.Lcom/sun/midp/events/Event;": "next",
                }
            }
        },
        "com/sun/midp/events/NativeEvent": {
            fields: {
                instanceSymbols: {
                    "intParam1.I": "intParam1",
                    "intParam2.I": "intParam2",
                    "intParam3.I": "intParam3",
                    "intParam4.I": "intParam4",
                    "intParam5.I": "intParam5",
                    "intParam6.I": "intParam6",
                    "intParam7.I": "intParam7",
                    "intParam8.I": "intParam8",
                    "intParam9.I": "intParam9",
                    "intParam10.I": "intParam10",
                    "intParam11.I": "intParam11",
                    "intParam12.I": "intParam12",
                    "intParam13.I": "intParam13",
                    "intParam14.I": "intParam14",
                    "intParam15.I": "intParam15",
                    "intParam16.I": "intParam16",
                    "floatParam1.F": "floatParam1",
                    "stringParam1.Ljava/lang/String;": "stringParam1",
                    "stringParam2.Ljava/lang/String;": "stringParam2",
                    "stringParam3.Ljava/lang/String;": "stringParam3",
                    "stringParam4.Ljava/lang/String;": "stringParam4",
                    "stringParam5.Ljava/lang/String;": "stringParam5",
                    "stringParam6.Ljava/lang/String;": "stringParam6",
                }
            }
        },
        "com/sun/cdc/io/j2me/file/DefaultFileHandler": {
            fields: {
                instanceSymbols: {
                    "nativePath.Ljava/lang/String;": "nativePath",
                    "nativeDescriptor.I": "nativeDescriptor",
                    "isOpenForRead.Z": "isOpenForRead",
                    "isOpenForWrite.Z": "isOpenForWrite"
                }
            }
        },
        "com/sun/midp/rms/RecordStoreSharedDBHeader": {
            fields: {
                instanceSymbols: {
                    "lookupId.I": "lookupId",
                }
            }
        },
        "com/sun/cdc/io/j2me/file/Protocol": {
            fields: {
                instanceSymbols: {
                    "fileHandler.Lcom/sun/cdc/io/j2me/file/BaseFileHandler;": "fileHandler",
                }
            }
        },
        "com/sun/j2me/pim/PIMFieldDescriptor": {
            fields: {
                instanceSymbols: {
                    "field.I": "field",
                    "dataType.I": "dataType",
                    "maxValues.I": "maxValues",
                }
            }
        },
        "com/sun/midp/io/j2me/sms/Protocol$SMSPacket": {
            fields: {
                instanceSymbols: {
                    "message.[B": "message",
                    "address.[B": "address",
                    "port.I": "port",
                    "sentAt.J": "sentAt",
                    "messageType.I": "messageType",
                }
            }
        },
        "com/sun/midp/main/CommandState": {
            fields: {
                instanceSymbols: {
                    "suiteId.I": "suiteId",
                    "midletClassName.Ljava/lang/String;": "midletClassName",
                    "arg0.Ljava/lang/String;": "arg0",
                    "arg1.Ljava/lang/String;": "arg1",
                    "arg2.Ljava/lang/String;": "arg2",
                }
            }
        },
        "com/sun/midp/midletsuite/SuiteSettings": {
            fields: {
                instanceSymbols: {
                    "pushInterruptSetting.B": "pushInterruptSetting",
                }
            }
        },
        "com/sun/midp/midletsuite/InstallInfo": {
            fields: {
                instanceSymbols: {
                    "trusted.Z": "trusted",
                }
            }
        },
        "com/sun/midp/links/Link": {
            fields: {
                instanceSymbols: {
                    "nativePointer.I": "nativePointer",
                }
            }
        }
    };
    J2ME.BindingsMap = new J2ME.Uint8Hashtable(50);
    for (var k in J2ME.Bindings) {
        J2ME.BindingsMap.put(J2ME.toUTF8(k), J2ME.Bindings[k]);
    }
})(J2ME || (J2ME = {}));
/*
 node-jvm
 Copyright (c) 2013 Yaroslav Gaponov <yaroslav.gaponov@gmail.com>
*/
var $; // The currently-executing runtime.
var J2ME;
(function (J2ME) {
    J2ME.aotMetaData = Object.create(null);
    /**
     * Turns on just-in-time compilation of methods.
     */
    J2ME.enableRuntimeCompilation = true;
    /**
     * Turns on onStackReplacement
     */
    J2ME.enableOnStackReplacement = true;
    /**
     * Turns on caching of JIT-compiled methods.
     */
    J2ME.enableCompiledMethodCache = true && typeof CompiledMethodCache !== "undefined";
    /**
     * Traces method execution.
     */
    J2ME.traceWriter = null;
    /**
     * Traces performance problems.
     */
    J2ME.perfWriter = null;
    /**
     * Traces linking and class loading.
     */
    J2ME.linkWriter = null;
    /**
     * Traces JIT compilation.
     */
    J2ME.jitWriter = null;
    /**
     * Traces class loading.
     */
    J2ME.loadWriter = null;
    /**
     * Traces winding and unwinding.
     */
    J2ME.windingWriter = null;
    /**
     * Traces class initialization.
     */
    J2ME.initWriter = null;
    /**
     * Traces thread execution.
     */
    J2ME.threadWriter = null;
    /**
     * Traces generated code.
     */
    J2ME.codeWriter = null;
    (function (MethodState) {
        /**
         * All methods start in this state.
         */
        MethodState[MethodState["Cold"] = 0] = "Cold";
        /**
         * Methods have this state if code has been compiled for them or
         * there is a native implementation that needs to be used.
         */
        MethodState[MethodState["Compiled"] = 1] = "Compiled";
        /**
         * We don't want to compiled these methods, they may be too large
         * to benefit from JIT compilation.
         */
        MethodState[MethodState["NotCompiled"] = 2] = "NotCompiled";
        /**
         * Methods are not compiled because of some exception.
         */
        MethodState[MethodState["CannotCompile"] = 3] = "CannotCompile";
    })(J2ME.MethodState || (J2ME.MethodState = {}));
    var MethodState = J2ME.MethodState;
    J2ME.timeline;
    J2ME.methodTimeline;
    J2ME.threadTimeline;
    J2ME.nativeCounter = release ? null : new J2ME.Metrics.Counter(true);
    J2ME.runtimeCounter = release ? null : new J2ME.Metrics.Counter(true);
    J2ME.baselineMethodCounter = release ? null : new J2ME.Metrics.Counter(true);
    J2ME.asyncCounter = release ? null : new J2ME.Metrics.Counter(true);
    J2ME.jitMethodInfos = {};
    J2ME.unwindCount = 0;
    if (typeof Shumway !== "undefined") {
        J2ME.timeline = new Shumway.Tools.Profiler.TimelineBuffer("Runtime");
        J2ME.methodTimeline = new Shumway.Tools.Profiler.TimelineBuffer("Methods");
        J2ME.threadTimeline = new Shumway.Tools.Profiler.TimelineBuffer("Threads");
    }
    function enterTimeline(name, data) {
        J2ME.timeline && J2ME.timeline.enter(name, data);
    }
    J2ME.enterTimeline = enterTimeline;
    function leaveTimeline(name, data) {
        J2ME.timeline && J2ME.timeline.leave(name, data);
    }
    J2ME.leaveTimeline = leaveTimeline;
    J2ME.Klasses = {
        java: {
            lang: {
                Object: null,
                Class: null,
                String: null,
                Thread: null,
                IllegalArgumentException: null,
                IllegalStateException: null,
                NullPointerException: null,
                RuntimeException: null,
                IndexOutOfBoundsException: null,
                ArrayIndexOutOfBoundsException: null,
                StringIndexOutOfBoundsException: null,
                ArrayStoreException: null,
                IllegalMonitorStateException: null,
                ClassCastException: null,
                NegativeArraySizeException: null,
                ArithmeticException: null,
                ClassNotFoundException: null,
                SecurityException: null,
                IllegalThreadStateException: null,
                InstantiationException: null,
                Exception: null
            },
            io: {
                IOException: null,
                UTFDataFormatException: null,
                UnsupportedEncodingException: null
            }
        },
        javax: {
            microedition: {
                media: {
                    MediaException: null
                }
            }
        },
        boolean: null,
        char: null,
        float: null,
        double: null,
        byte: null,
        short: null,
        int: null,
        long: null
    };
    function Int64Array(size) {
        var array = Array(size);
        for (var i = 0; i < size; i++) {
            array[i] = Long.ZERO;
        }
        // We can't put the klass on the prototype.
        array.klass = J2ME.Klasses.long;
        return array;
    }
    var arrays = {
        'Z': Uint8Array,
        'C': Uint16Array,
        'F': Float32Array,
        'D': Float64Array,
        'B': Int8Array,
        'S': Int16Array,
        'I': Int32Array,
        'J': Int64Array
    };
    function getArrayConstructor(type) {
        return arrays[type];
    }
    J2ME.getArrayConstructor = getArrayConstructor;
    /**
     * We can't always mutate the |__proto__|.
     */
    function isPrototypeOfFunctionMutable(fn) {
        switch (fn) {
            case Object:
            case Array:
            case Uint8Array:
            case Uint16Array:
            case Float32Array:
            case Float64Array:
            case Int8Array:
            case Int16Array:
            case Int32Array:
                return false;
            default:
                return true;
        }
    }
    J2ME.stdoutWriter = new J2ME.IndentingWriter();
    J2ME.stderrWriter = new J2ME.IndentingWriter(false, J2ME.IndentingWriter.stderr);
    (function (ExecutionPhase) {
        /**
         * Default runtime behaviour.
         */
        ExecutionPhase[ExecutionPhase["Runtime"] = 0] = "Runtime";
        /**
         * When compiling code statically.
         */
        ExecutionPhase[ExecutionPhase["Compiler"] = 1] = "Compiler";
    })(J2ME.ExecutionPhase || (J2ME.ExecutionPhase = {}));
    var ExecutionPhase = J2ME.ExecutionPhase;
    J2ME.phase = 0 /* Runtime */;
    J2ME.internedStrings = new Map();
    var assert = J2ME.Debug.assert;
    (function (RuntimeStatus) {
        RuntimeStatus[RuntimeStatus["New"] = 1] = "New";
        RuntimeStatus[RuntimeStatus["Started"] = 2] = "Started";
        RuntimeStatus[RuntimeStatus["Stopping"] = 3] = "Stopping";
        RuntimeStatus[RuntimeStatus["Stopped"] = 4] = "Stopped";
    })(J2ME.RuntimeStatus || (J2ME.RuntimeStatus = {}));
    var RuntimeStatus = J2ME.RuntimeStatus;
    (function (MethodType) {
        MethodType[MethodType["Interpreted"] = 0] = "Interpreted";
        MethodType[MethodType["Native"] = 1] = "Native";
        MethodType[MethodType["Compiled"] = 2] = "Compiled";
    })(J2ME.MethodType || (J2ME.MethodType = {}));
    var MethodType = J2ME.MethodType;
    var hashMap = Object.create(null);
    var hashArray = new Int32Array(1024);
    function hashString(s) {
        if (hashArray.length < s.length) {
            hashArray = new Int32Array((hashArray.length * 2 / 3) | 0);
        }
        var data = hashArray;
        for (var i = 0; i < s.length; i++) {
            data[i] = s.charCodeAt(i);
        }
        var hash = J2ME.HashUtilities.hashBytesTo32BitsMurmur(data, 0, s.length);
        if (!release) {
            if (hashMap[hash] && hashMap[hash] !== s) {
                assert(false, "This is very bad.");
            }
            hashMap[hash] = s;
        }
        return hash;
    }
    function hashUTF8String(s) {
        var hash = J2ME.HashUtilities.hashBytesTo32BitsMurmur(s, 0, s.length);
        if (!release) {
            if (hashMap[hash] && hashMap[hash] !== s) {
                assert(false, "This is very bad.");
            }
            hashMap[hash] = s;
        }
        return hash;
    }
    J2ME.hashUTF8String = hashUTF8String;
    function isIdentifierChar(c) {
        return (c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c === 36) || (c === 95); // $ && _
    }
    function isDigit(c) {
        return c >= 48 && c <= 57;
    }
    var invalidChars = "[];/<>()";
    var replaceChars = "abc_defg";
    function needsEscaping(s) {
        var l = s.length;
        for (var i = 0; i < l; i++) {
            var c = s.charCodeAt(i);
            if (!isIdentifierChar(c)) {
                return true;
            }
        }
        return false;
    }
    // Fast lookup table.
    var map = new Array(128);
    for (var i = 0; i < 128; i++) {
        map[i] = String.fromCharCode(i);
    }
    // Patch up some entries.
    var invalidChars = "[];/<>()";
    var replaceChars = "abc_defg";
    for (var i = 0; i < invalidChars.length; i++) {
        map[invalidChars.charCodeAt(i)] = replaceChars[i];
    }
    // Reuse array.
    var T = new Array(1024);
    function escapeString(s) {
        if (!needsEscaping(s)) {
            return s;
        }
        var l = s.length;
        var r = T;
        r.length = l;
        for (var i = 0; i < l; i++) {
            var c = s.charCodeAt(i);
            if (i === 0 && isDigit(c)) {
                r[i] = String.fromCharCode(c - 48 + 97); // Map 0 .. 9 to a .. j
            }
            else if (c < 128) {
                r[i] = map[c];
            }
            else {
                r[i] = s[i];
            }
        }
        return r.join("");
    }
    J2ME.escapeString = escapeString;
    var stringHashes = Object.create(null);
    var stringHashCount = 0;
    function hashStringStrong(s) {
        // Hash with Murmur hash.
        var result = J2ME.StringUtilities.variableLengthEncodeInt32(hashString(s));
        // Also use the length for some more precision.
        result += J2ME.StringUtilities.toEncoding(s.length & 0x3f);
        return result;
    }
    function hashStringToString(s) {
        if (stringHashCount > 1024) {
            return hashStringStrong(s);
        }
        var c = stringHashes[s];
        if (c) {
            return c;
        }
        c = stringHashes[s] = hashStringStrong(s);
        stringHashCount++;
        return c;
    }
    J2ME.hashStringToString = hashStringToString;
    /**
     * This class is abstract and should never be initialized. It only acts as a template for
     * actual runtime objects.
     */
    var RuntimeTemplate = (function () {
        function RuntimeTemplate(jvm) {
            this.jvm = jvm;
            this.status = 1 /* New */;
            this.waiting = [];
            this.threadCount = 0;
            this.initialized = Object.create(null);
            this.pending = {};
            this.staticFields = {};
            this.classObjects = {};
            this.ctx = null;
            this._runtimeId = RuntimeTemplate._nextRuntimeId++;
            this._nextHashCode = this._runtimeId << 24;
        }
        RuntimeTemplate.prototype.preInitializeClasses = function (ctx) {
            var prevCtx = $ ? $.ctx : null;
            var preInit = J2ME.CLASSES.preInitializedClasses;
            ctx.setAsCurrentContext();
            for (var i = 0; i < preInit.length; i++) {
                var runtimeKlass = this.getRuntimeKlass(preInit[i].klass);
                var methodInfo = runtimeKlass.classObject.klass.classInfo.getMethodByNameString("initialize", "()V");
                runtimeKlass.classObject[methodInfo.virtualName]();
                // runtimeKlass.classObject.initialize();
                release || J2ME.Debug.assert(!U, "Unexpected unwind during preInitializeClasses.");
            }
            ctx.clearCurrentContext();
            if (prevCtx) {
                prevCtx.setAsCurrentContext();
            }
        };
        /**
         * After class intialization is finished the init9 method will invoke this so
         * any further initialize calls can be avoided. This isn't set on the first call
         * to a class initializer because there can be multiple calls into initialize from
         * different threads that need trigger the Class.initialize() code so they block.
         */
        RuntimeTemplate.prototype.setClassInitialized = function (runtimeKlass) {
            var className = runtimeKlass.templateKlass.classInfo.getClassNameSlow();
            this.initialized[className] = true;
        };
        RuntimeTemplate.prototype.getRuntimeKlass = function (klass) {
            var runtimeKlass = this[klass.classInfo.mangledName];
            return runtimeKlass;
        };
        /**
         * Generates a new hash code for the specified |object|.
         */
        RuntimeTemplate.prototype.nextHashCode = function () {
            return this._nextHashCode++;
        };
        RuntimeTemplate.prototype.waitStatus = function (callback) {
            this.waiting.push(callback);
        };
        RuntimeTemplate.prototype.updateStatus = function (status) {
            this.status = status;
            var waiting = this.waiting;
            this.waiting = [];
            waiting.forEach(function (callback) {
                try {
                    callback();
                }
                catch (ex) {
                }
            });
        };
        RuntimeTemplate.prototype.addContext = function (ctx) {
            ++this.threadCount;
            RuntimeTemplate.all.add(this);
        };
        RuntimeTemplate.prototype.removeContext = function (ctx) {
            if (!--this.threadCount) {
                RuntimeTemplate.all.delete(this);
                this.updateStatus(4 /* Stopped */);
            }
        };
        RuntimeTemplate.prototype.newStringConstant = function (s) {
            if (J2ME.internedStrings.has(s)) {
                return J2ME.internedStrings.get(s);
            }
            var obj = J2ME.newString(s);
            J2ME.internedStrings.set(s, obj);
            return obj;
        };
        RuntimeTemplate.prototype.setStatic = function (field, value) {
            this.staticFields[field.id] = value;
        };
        RuntimeTemplate.prototype.getStatic = function (field) {
            return this.staticFields[field.id];
        };
        RuntimeTemplate.prototype.newIOException = function (str) {
            return $.ctx.createException("java/io/IOException", str);
        };
        RuntimeTemplate.prototype.newUnsupportedEncodingException = function (str) {
            return $.ctx.createException("java/io/UnsupportedEncodingException", str);
        };
        RuntimeTemplate.prototype.newUTFDataFormatException = function (str) {
            return $.ctx.createException("java/io/UTFDataFormatException", str);
        };
        RuntimeTemplate.prototype.newSecurityException = function (str) {
            return $.ctx.createException("java/lang/SecurityException", str);
        };
        RuntimeTemplate.prototype.newIllegalThreadStateException = function (str) {
            return $.ctx.createException("java/lang/IllegalThreadStateException", str);
        };
        RuntimeTemplate.prototype.newRuntimeException = function (str) {
            return $.ctx.createException("java/lang/RuntimeException", str);
        };
        RuntimeTemplate.prototype.newIndexOutOfBoundsException = function (str) {
            return $.ctx.createException("java/lang/IndexOutOfBoundsException", str);
        };
        RuntimeTemplate.prototype.newArrayIndexOutOfBoundsException = function (str) {
            return $.ctx.createException("java/lang/ArrayIndexOutOfBoundsException", str);
        };
        RuntimeTemplate.prototype.newStringIndexOutOfBoundsException = function (str) {
            return $.ctx.createException("java/lang/StringIndexOutOfBoundsException", str);
        };
        RuntimeTemplate.prototype.newArrayStoreException = function (str) {
            return $.ctx.createException("java/lang/ArrayStoreException", str);
        };
        RuntimeTemplate.prototype.newIllegalMonitorStateException = function (str) {
            return $.ctx.createException("java/lang/IllegalMonitorStateException", str);
        };
        RuntimeTemplate.prototype.newClassCastException = function (str) {
            return $.ctx.createException("java/lang/ClassCastException", str);
        };
        RuntimeTemplate.prototype.newArithmeticException = function (str) {
            return $.ctx.createException("java/lang/ArithmeticException", str);
        };
        RuntimeTemplate.prototype.newClassNotFoundException = function (str) {
            return $.ctx.createException("java/lang/ClassNotFoundException", str);
        };
        RuntimeTemplate.prototype.newIllegalArgumentException = function (str) {
            return $.ctx.createException("java/lang/IllegalArgumentException", str);
        };
        RuntimeTemplate.prototype.newIllegalStateException = function (str) {
            return $.ctx.createException("java/lang/IllegalStateException", str);
        };
        RuntimeTemplate.prototype.newNegativeArraySizeException = function (str) {
            return $.ctx.createException("java/lang/NegativeArraySizeException", str);
        };
        RuntimeTemplate.prototype.newNullPointerException = function (str) {
            return $.ctx.createException("java/lang/NullPointerException", str);
        };
        RuntimeTemplate.prototype.newMediaException = function (str) {
            return $.ctx.createException("javax/microedition/media/MediaException", str);
        };
        RuntimeTemplate.prototype.newInstantiationException = function (str) {
            return $.ctx.createException("java/lang/InstantiationException", str);
        };
        RuntimeTemplate.prototype.newException = function (str) {
            return $.ctx.createException("java/lang/Exception", str);
        };
        RuntimeTemplate.all = new Set();
        RuntimeTemplate._nextRuntimeId = 0;
        return RuntimeTemplate;
    })();
    J2ME.RuntimeTemplate = RuntimeTemplate;
    (function (VMState) {
        VMState[VMState["Running"] = 0] = "Running";
        VMState[VMState["Yielding"] = 1] = "Yielding";
        VMState[VMState["Pausing"] = 2] = "Pausing";
        VMState[VMState["Stopping"] = 3] = "Stopping";
    })(J2ME.VMState || (J2ME.VMState = {}));
    var VMState = J2ME.VMState;
    /** @const */ J2ME.MAX_PRIORITY = 10;
    /** @const */ J2ME.MIN_PRIORITY = 1;
    /** @const */ J2ME.NORMAL_PRIORITY = 5;
    var PriorityQueue = (function () {
        function PriorityQueue() {
            this._top = J2ME.MIN_PRIORITY;
            this._queues = [];
            for (var i = J2ME.MIN_PRIORITY; i <= J2ME.MAX_PRIORITY; i++) {
                this._queues[i] = [];
            }
        }
        PriorityQueue.prototype.enqueue = function (ctx) {
            var priority = ctx.getPriority();
            release || assert(priority >= J2ME.MIN_PRIORITY && priority <= J2ME.MAX_PRIORITY, "Invalid priority: " + priority);
            this._queues[priority].push(ctx);
            this._top = Math.max(priority, this._top);
        };
        PriorityQueue.prototype.dequeue = function () {
            if (this.isEmpty()) {
                return null;
            }
            var ctx = this._queues[this._top].shift();
            while (this._queues[this._top].length === 0 && this._top > J2ME.MIN_PRIORITY) {
                this._top--;
            }
            return ctx;
        };
        PriorityQueue.prototype.isEmpty = function () {
            return this._top === J2ME.MIN_PRIORITY && this._queues[this._top].length === 0;
        };
        return PriorityQueue;
    })();
    var Runtime = (function (_super) {
        __extends(Runtime, _super);
        function Runtime(jvm) {
            _super.call(this, jvm);
            this.id = Runtime._nextId++;
        }
        /*
         * The thread scheduler uses green thread algorithm, which a non-preemptive,
         * priority based algorithm.
         * All Java threads have a priority and the thread with he highest priority
         * is scheduled to run.
         * In case two threads have the same priority a FIFO ordering is followed.
         * A different thread is invoked to run only if the current thread blocks or
         * terminates.
         */
        Runtime.scheduleRunningContext = function (ctx) {
            Runtime._runningQueue.enqueue(ctx);
            Runtime.processRunningQueue();
        };
        Runtime.processRunningQueue = function () {
            if (Runtime._processQueueScheduled) {
                return;
            }
            Runtime._processQueueScheduled = true;
            window.setZeroTimeout(function () {
                Runtime._processQueueScheduled = false;
                try {
                    Runtime._runningQueue.dequeue().execute();
                }
                finally {
                    if (!Runtime._runningQueue.isEmpty()) {
                        Runtime.processRunningQueue();
                    }
                }
            });
        };
        /**
         * Bailout callback whenever a JIT frame is unwound.
         */
        Runtime.prototype.B = function (pc, nextPC, local, stack, lockObject) {
            var methodInfo = J2ME.jitMethodInfos[arguments.callee.caller.name];
            release || assert(methodInfo !== undefined);
            $.ctx.bailout(methodInfo, pc, nextPC, local, stack, lockObject);
        };
        /**
         * Bailout callback whenever a JIT frame is unwound that uses a slightly different calling
         * convetion that makes it more convenient to emit in some cases.
         */
        Runtime.prototype.T = function (location, local, stack, lockObject) {
            var methodInfo = J2ME.jitMethodInfos[arguments.callee.caller.name];
            release || assert(methodInfo !== undefined);
            $.ctx.bailout(methodInfo, location.getPC(), location.getNextPC(), local, stack.slice(0, location.getSP()), lockObject);
        };
        Runtime.prototype.yield = function (reason) {
            J2ME.unwindCount++;
            J2ME.threadWriter && J2ME.threadWriter.writeLn("yielding " + reason);
            J2ME.runtimeCounter && J2ME.runtimeCounter.count("yielding " + reason);
            U = 1 /* Yielding */;
        };
        Runtime.prototype.pause = function (reason) {
            J2ME.unwindCount++;
            J2ME.threadWriter && J2ME.threadWriter.writeLn("pausing " + reason);
            J2ME.runtimeCounter && J2ME.runtimeCounter.count("pausing " + reason);
            U = 2 /* Pausing */;
        };
        Runtime.prototype.stop = function () {
            U = 3 /* Stopping */;
        };
        Runtime._nextId = 0;
        Runtime._runningQueue = new PriorityQueue();
        Runtime._processQueueScheduled = false;
        return Runtime;
    })(RuntimeTemplate);
    J2ME.Runtime = Runtime;
    var Class = (function () {
        function Class(klass) {
            this.klass = klass;
            // ...
        }
        return Class;
    })();
    J2ME.Class = Class;
    var RuntimeKlass = (function () {
        /**
         * Whether this class is a runtime class.
         */
        // isRuntimeKlass: boolean;
        function RuntimeKlass(templateKlass) {
            this.templateKlass = templateKlass;
        }
        return RuntimeKlass;
    })();
    J2ME.RuntimeKlass = RuntimeKlass;
    var Lock = (function () {
        function Lock(thread, level) {
            this.thread = thread;
            this.level = level;
            this.ready = [];
            this.waiting = [];
        }
        return Lock;
    })();
    J2ME.Lock = Lock;
    function initializeClassObject(runtimeKlass) {
        J2ME.linkWriter && J2ME.linkWriter.writeLn("Initializing Class Object For: " + runtimeKlass.templateKlass);
        release || assert(!runtimeKlass.classObject);
        runtimeKlass.classObject = new J2ME.Klasses.java.lang.Class();
        runtimeKlass.classObject.runtimeKlass = runtimeKlass;
        var className = runtimeKlass.templateKlass.classInfo.getClassNameSlow();
        if (className === "java/lang/Object" || className === "java/lang/Class" || className === "java/lang/String" || className === "java/lang/Thread") {
            runtimeKlass.classObject.status = 4;
            $.setClassInitialized(runtimeKlass);
            return;
        }
        var fields = runtimeKlass.templateKlass.classInfo.getFields();
        for (var i = 0; i < fields.length; i++) {
            var field = fields[i];
            if (field.isStatic) {
                var kind = J2ME.getSignatureKind(field.utf8Signature);
                var defaultValue;
                switch (kind) {
                    case 8 /* Reference */:
                        defaultValue = null;
                        break;
                    case 6 /* Long */:
                        defaultValue = Long.ZERO;
                        break;
                    default:
                        defaultValue = 0;
                        break;
                }
                field.set(runtimeKlass, defaultValue);
            }
        }
    }
    /**
     * Registers the klass as a getter on the runtime template. On first access, the getter creates a runtime klass and
     * adds it to the runtime.
     */
    function registerKlass(klass, classInfo) {
        J2ME.linkWriter && J2ME.linkWriter.writeLn("Registering Klass: " + classInfo.getClassNameSlow());
        Object.defineProperty(RuntimeTemplate.prototype, classInfo.mangledName, {
            configurable: true,
            get: function () {
                J2ME.linkWriter && J2ME.linkWriter.writeLn("Creating Runtime Klass: " + classInfo.getClassNameSlow());
                release || assert(!(klass instanceof RuntimeKlass));
                var runtimeKlass = new RuntimeKlass(klass);
                initializeClassObject(runtimeKlass);
                Object.defineProperty(this, classInfo.mangledName, {
                    value: runtimeKlass
                });
                return runtimeKlass;
            }
        });
    }
    J2ME.registerKlass = registerKlass;
    var unresolvedSymbols = Object.create(null);
    function findKlass(classInfo) {
        if (unresolvedSymbols[classInfo.mangledName]) {
            return null;
        }
        var klass = jsGlobal[classInfo.mangledName];
        if (klass) {
            return klass;
        }
        return null;
    }
    function registerKlassSymbol(className) {
        // TODO: This needs to be kept in sync to how mangleClass works.
        var mangledName = J2ME.mangleClassName(J2ME.toUTF8(className));
        if (RuntimeTemplate.prototype.hasOwnProperty(mangledName)) {
            return;
        }
        J2ME.linkWriter && J2ME.linkWriter.writeLn("Registering Klass Symbol: " + className);
        if (!RuntimeTemplate.prototype.hasOwnProperty(mangledName)) {
            Object.defineProperty(RuntimeTemplate.prototype, mangledName, {
                configurable: true,
                get: function lazyKlass() {
                    J2ME.linkWriter && J2ME.linkWriter.writeLn("Load Klass: " + className);
                    J2ME.CLASSES.loadAndLinkClass(className);
                    return this[mangledName]; // This should not be recursive at this point.
                }
            });
        }
        if (!jsGlobal.hasOwnProperty(mangledName)) {
            unresolvedSymbols[mangledName] = true;
            Object.defineProperty(jsGlobal, mangledName, {
                configurable: true,
                get: function () {
                    J2ME.linkWriter && J2ME.linkWriter.writeLn("Load Klass: " + className);
                    J2ME.CLASSES.loadAndLinkClass(className);
                    return this[mangledName]; // This should not be recursive at this point.
                }
            });
        }
    }
    J2ME.registerKlassSymbol = registerKlassSymbol;
    function registerKlassSymbols(classNames) {
        for (var i = 0; i < classNames.length; i++) {
            var className = classNames[i];
            registerKlassSymbol(className);
        }
    }
    J2ME.registerKlassSymbols = registerKlassSymbols;
    function setKlassSymbol(mangledName, klass) {
        Object.defineProperty(jsGlobal, mangledName, {
            value: klass
        });
    }
    function emitKlassConstructor(classInfo, mangledName) {
        var klass;
        enterTimeline("emitKlassConstructor");
        // TODO: Creating and evaling a Klass here may be too slow at startup. Consider
        // creating a closure, which will probably be slower at runtime.
        var source = [];
        var writer = new J2ME.IndentingWriter(false, function (x) {
            source.push(x);
        });
        var emitter = new J2ME.Emitter(writer, false, true, true);
        J2ME.emitKlass(emitter, classInfo);
        (1, eval)(source.join("\n"));
        leaveTimeline("emitKlassConstructor");
        // consoleWriter.writeLn("Synthesizing Klass: " + classInfo.getClassNameSlow());
        // consoleWriter.writeLn(source);
        klass = jsGlobal[mangledName];
        release || assert(klass, mangledName);
        klass.toString = function () {
            return "[Synthesized Klass " + classInfo.getClassNameSlow() + "]";
        };
        return klass;
    }
    function getKlass(classInfo) {
        if (!classInfo) {
            return null;
        }
        if (classInfo.klass) {
            return classInfo.klass;
        }
        return makeKlass(classInfo);
    }
    J2ME.getKlass = getKlass;
    function makeKlass(classInfo) {
        var klass = findKlass(classInfo);
        if (klass) {
            release || assert(!classInfo.isInterface, "Interfaces should not be compiled.");
            J2ME.linkWriter && J2ME.linkWriter.greenLn("Found Compiled Klass: " + classInfo.getClassNameSlow());
            release || assert(!classInfo.klass);
            classInfo.klass = klass;
            klass.toString = function () {
                return "[Compiled Klass " + classInfo.getClassNameSlow() + "]";
            };
            if (klass.classSymbols) {
                registerKlassSymbols(klass.classSymbols);
            }
        }
        else {
            klass = makeKlassConstructor(classInfo);
            release || assert(!classInfo.klass);
            classInfo.klass = klass;
        }
        if (classInfo.superClass && !classInfo.superClass.klass && J2ME.phase === 0 /* Runtime */) {
            J2ME.linkKlass(classInfo.superClass);
        }
        var superKlass = getKlass(classInfo.superClass);
        enterTimeline("extendKlass");
        extendKlass(classInfo, klass, superKlass);
        leaveTimeline("extendKlass");
        enterTimeline("registerKlass");
        registerKlass(klass, classInfo);
        leaveTimeline("registerKlass");
        if (classInfo instanceof J2ME.ArrayClassInfo) {
            klass.isArrayKlass = true;
            var elementKlass = getKlass(classInfo.elementClass);
            elementKlass.arrayKlass = klass;
            klass.elementKlass = elementKlass;
        }
        klass.classInfo = classInfo;
        if (!classInfo.isInterface) {
            initializeInterfaces(klass, classInfo);
        }
        return klass;
    }
    function makeKlassConstructor(classInfo) {
        var klass;
        var mangledName = classInfo.mangledName;
        if (classInfo.isInterface) {
            klass = function () {
                J2ME.Debug.unexpected("Should never be instantiated.");
            };
            klass.isInterfaceKlass = true;
            klass.toString = function () {
                return "[Interface Klass " + classInfo.getClassNameSlow() + "]";
            };
            setKlassSymbol(mangledName, klass);
        }
        else if (classInfo instanceof J2ME.ArrayClassInfo) {
            var elementKlass = getKlass(classInfo.elementClass);
            // Have we already created one? We need to maintain pointer identity.
            if (elementKlass.arrayKlass) {
                return elementKlass.arrayKlass;
            }
            klass = makeArrayKlassConstructor(elementKlass);
        }
        else if (classInfo instanceof J2ME.PrimitiveClassInfo) {
            klass = function () {
                J2ME.Debug.unexpected("Should never be instantiated.");
            };
            klass.toString = function () {
                return "[Primitive Klass " + classInfo.getClassNameSlow() + "]";
            };
        }
        else {
            klass = emitKlassConstructor(classInfo, mangledName);
        }
        return klass;
    }
    function makeArrayKlassConstructor(elementKlass) {
        var klass = getArrayConstructor(elementKlass.classInfo.getClassNameSlow());
        if (!klass) {
            klass = function (size) {
                var array = createEmptyObjectArray(size);
                array.klass = klass;
                return array;
            };
            klass.toString = function () {
                return "[Array of " + elementKlass + "]";
            };
        }
        else {
            release || assert(!klass.prototype.hasOwnProperty("klass"));
            klass.prototype.klass = klass;
            klass.toString = function () {
                return "[Array of " + elementKlass + "]";
            };
        }
        return klass;
    }
    J2ME.makeArrayKlassConstructor = makeArrayKlassConstructor;
    /**
     * TODO: Find out if we need to also run class initialization here, or if the
     * callers should be calling that instead of this.
     */
    function linkKlass(classInfo) {
        // We shouldn't do any linking if we're not in the runtime phase.
        if (J2ME.phase !== 0 /* Runtime */) {
            return;
        }
        if (classInfo.klass) {
            return;
        }
        enterTimeline("linkKlass", { classInfo: classInfo });
        var mangledName = classInfo.mangledName;
        var klass;
        classInfo.klass = klass = getKlass(classInfo);
        classInfo.klass.classInfo = classInfo;
        if (classInfo instanceof J2ME.PrimitiveClassInfo) {
            switch (classInfo) {
                case J2ME.PrimitiveClassInfo.Z:
                    J2ME.Klasses.boolean = klass;
                    break;
                case J2ME.PrimitiveClassInfo.C:
                    J2ME.Klasses.char = klass;
                    break;
                case J2ME.PrimitiveClassInfo.F:
                    J2ME.Klasses.float = klass;
                    break;
                case J2ME.PrimitiveClassInfo.D:
                    J2ME.Klasses.double = klass;
                    break;
                case J2ME.PrimitiveClassInfo.B:
                    J2ME.Klasses.byte = klass;
                    break;
                case J2ME.PrimitiveClassInfo.S:
                    J2ME.Klasses.short = klass;
                    break;
                case J2ME.PrimitiveClassInfo.I:
                    J2ME.Klasses.int = klass;
                    break;
                case J2ME.PrimitiveClassInfo.J:
                    J2ME.Klasses.long = klass;
                    break;
                default: J2ME.Debug.assertUnreachable("linking primitive " + classInfo.getClassNameSlow());
            }
        }
        else {
            switch (classInfo.getClassNameSlow()) {
                case "java/lang/Object":
                    J2ME.Klasses.java.lang.Object = klass;
                    break;
                case "java/lang/Class":
                    J2ME.Klasses.java.lang.Class = klass;
                    break;
                case "java/lang/String":
                    J2ME.Klasses.java.lang.String = klass;
                    break;
                case "java/lang/Thread":
                    J2ME.Klasses.java.lang.Thread = klass;
                    break;
                case "java/lang/Exception":
                    J2ME.Klasses.java.lang.Exception = klass;
                    break;
                case "java/lang/InstantiationException":
                    J2ME.Klasses.java.lang.InstantiationException = klass;
                    break;
                case "java/lang/IllegalArgumentException":
                    J2ME.Klasses.java.lang.IllegalArgumentException = klass;
                    break;
                case "java/lang/NegativeArraySizeException":
                    J2ME.Klasses.java.lang.NegativeArraySizeException = klass;
                    break;
                case "java/lang/IllegalStateException":
                    J2ME.Klasses.java.lang.IllegalStateException = klass;
                    break;
                case "java/lang/NullPointerException":
                    J2ME.Klasses.java.lang.NullPointerException = klass;
                    break;
                case "java/lang/RuntimeException":
                    J2ME.Klasses.java.lang.RuntimeException = klass;
                    break;
                case "java/lang/IndexOutOfBoundsException":
                    J2ME.Klasses.java.lang.IndexOutOfBoundsException = klass;
                    break;
                case "java/lang/ArrayIndexOutOfBoundsException":
                    J2ME.Klasses.java.lang.ArrayIndexOutOfBoundsException = klass;
                    break;
                case "java/lang/StringIndexOutOfBoundsException":
                    J2ME.Klasses.java.lang.StringIndexOutOfBoundsException = klass;
                    break;
                case "java/lang/ArrayStoreException":
                    J2ME.Klasses.java.lang.ArrayStoreException = klass;
                    break;
                case "java/lang/IllegalMonitorStateException":
                    J2ME.Klasses.java.lang.IllegalMonitorStateException = klass;
                    break;
                case "java/lang/ClassCastException":
                    J2ME.Klasses.java.lang.ClassCastException = klass;
                    break;
                case "java/lang/ArithmeticException":
                    J2ME.Klasses.java.lang.ArithmeticException = klass;
                    break;
                case "java/lang/NegativeArraySizeException":
                    J2ME.Klasses.java.lang.NegativeArraySizeException = klass;
                    break;
                case "java/lang/ClassNotFoundException":
                    J2ME.Klasses.java.lang.ClassNotFoundException = klass;
                    break;
                case "javax/microedition/media/MediaException":
                    J2ME.Klasses.javax.microedition.media.MediaException = klass;
                    break;
                case "java/lang/SecurityException":
                    J2ME.Klasses.java.lang.SecurityException = klass;
                    break;
                case "java/lang/IllegalThreadStateException":
                    J2ME.Klasses.java.lang.IllegalThreadStateException = klass;
                    break;
                case "java/io/IOException":
                    J2ME.Klasses.java.io.IOException = klass;
                    break;
                case "java/io/UnsupportedEncodingException":
                    J2ME.Klasses.java.io.UnsupportedEncodingException = klass;
                    break;
                case "java/io/UTFDataFormatException":
                    J2ME.Klasses.java.io.UTFDataFormatException = klass;
                    break;
            }
        }
        J2ME.linkWriter && J2ME.linkWriter.writeLn("Link: " + classInfo.getClassNameSlow() + " -> " + klass);
        enterTimeline("linkKlassMethods");
        linkKlassMethods(classInfo.klass);
        leaveTimeline("linkKlassMethods");
        enterTimeline("linkKlassFields");
        linkKlassFields(classInfo.klass);
        leaveTimeline("linkKlassFields");
        leaveTimeline("linkKlass");
        if (klass === J2ME.Klasses.java.lang.Object) {
            extendKlass(classInfo, Array, J2ME.Klasses.java.lang.Object);
        }
    }
    J2ME.linkKlass = linkKlass;
    function findNativeMethodBinding(methodInfo) {
        var classBindings = J2ME.BindingsMap.get(methodInfo.classInfo.utf8Name);
        if (classBindings && classBindings.native) {
            var method = classBindings.native[methodInfo.name + "." + methodInfo.signature];
            if (method) {
                return method;
            }
        }
        return null;
    }
    function reportError(method, key) {
        return function () {
            try {
                return method.apply(this, arguments);
            }
            catch (e) {
                // Filter JAVA exception and only report the native js exception, which
                // cannnot be handled properly by the JAVA code.
                if (!e.klass) {
                    J2ME.stderrWriter.errorLn("Native " + key + " throws: " + e);
                }
                throw e;
            }
        };
    }
    // OverrideMap is constructed lazily.
    var overrideMap = null;
    /**
     * Builds a hashmap that keeps track of the class names that have overriden methods. This is a temporary
     * solution to avoid creating methodInfo implKeys unnecessarily for methods whose class has no overriden
     * methods.
     *
     * TODO: This mechanism should be deleted once we get rid of overrides.
     */
    function getOverrideMap() {
        if (!overrideMap) {
            overrideMap = new J2ME.Uint8Hashtable(10);
            for (var k in Override) {
                var className = k.substring(0, k.indexOf("."));
                overrideMap.put(J2ME.cacheUTF8(className), true);
            }
        }
        return overrideMap;
    }
    function findNativeMethodImplementation(methodInfo) {
        // Look in bindings first.
        var binding = findNativeMethodBinding(methodInfo);
        if (binding) {
            return release ? binding : reportError(binding, methodInfo.implKey);
        }
        if (methodInfo.isNative) {
            var implKey = methodInfo.implKey;
            if (implKey in Native) {
                return release ? Native[implKey] : reportError(Native[implKey], implKey);
            }
            else {
                // Some Native MethodInfos are constructed but never called;
                // that's fine, unless we actually try to call them.
                return function missingImplementation() {
                    J2ME.stderrWriter.errorLn("implKey " + implKey + " is native but does not have an implementation.");
                };
            }
        }
        else if (getOverrideMap().get(methodInfo.classInfo.utf8Name)) {
            var implKey = methodInfo.implKey;
            if (implKey in Override) {
                return release ? Override[implKey] : reportError(Override[implKey], implKey);
            }
        }
        return null;
    }
    function prepareInterpretedMethod(methodInfo) {
        // Adapter for the most common case.
        if (!methodInfo.isSynchronized && !methodInfo.hasTwoSlotArguments) {
            var method = function fastInterpreterFrameAdapter() {
                var frame = J2ME.Frame.create(methodInfo, [], 0);
                var j = 0;
                if (!methodInfo.isStatic) {
                    frame.setLocal(j++, this);
                }
                var slots = methodInfo.argumentSlots;
                for (var i = 0; i < slots; i++) {
                    frame.setLocal(j++, arguments[i]);
                }
                return $.ctx.executeFrame(frame);
            };
            method.methodInfo = methodInfo;
            return method;
        }
        var method = function interpreterFrameAdapter() {
            var frame = J2ME.Frame.create(methodInfo, [], 0);
            var j = 0;
            if (!methodInfo.isStatic) {
                frame.setLocal(j++, this);
            }
            var signatureKinds = methodInfo.signatureKinds;
            release || assert(arguments.length === signatureKinds.length - 1, "Number of adapter frame arguments (" + arguments.length + ") does not match signature descriptor.");
            for (var i = 1; i < signatureKinds.length; i++) {
                frame.setLocal(j++, arguments[i - 1]);
                if (J2ME.isTwoSlot(signatureKinds[i])) {
                    frame.setLocal(j++, null);
                }
            }
            if (methodInfo.isSynchronized) {
                if (!frame.lockObject) {
                    frame.lockObject = methodInfo.isStatic ? methodInfo.classInfo.getClassObject() : frame.getLocal(0);
                }
                $.ctx.monitorEnter(frame.lockObject);
                if (U === 2 /* Pausing */) {
                    $.ctx.frames.push(frame);
                    return;
                }
            }
            return $.ctx.executeFrame(frame);
        };
        method.methodInfo = methodInfo;
        return method;
    }
    function findCompiledMethod(klass, methodInfo) {
        var fn = jsGlobal[methodInfo.mangledClassAndMethodName];
        if (fn) {
            J2ME.aotMethodCount++;
            methodInfo.onStackReplacementEntryPoints = J2ME.aotMetaData[methodInfo.mangledClassAndMethodName].osr;
            return fn;
        }
        if (J2ME.enableCompiledMethodCache) {
            var cachedMethod;
            if ((cachedMethod = CompiledMethodCache.get(methodInfo.implKey))) {
                J2ME.cachedMethodCount++;
                linkMethod(methodInfo, cachedMethod.source, cachedMethod.referencedClasses, cachedMethod.onStackReplacementEntryPoints);
            }
        }
        return jsGlobal[methodInfo.mangledClassAndMethodName];
    }
    /**
     * Creates convenience getters / setters on Java objects.
     */
    function linkKlassFields(klass) {
        var classInfo = klass.classInfo;
        var fields = classInfo.getFields();
        var classBindings = J2ME.BindingsMap.get(klass.classInfo.utf8Name);
        if (classBindings && classBindings.fields) {
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                // TODO Startup Performance: This iterates over all the fields then looks for symbols
                // that need to be linked. We should instead scan the symbol list and then look for
                // matching fields in the class. Doing this will avoid creating the key below that is
                // only used to lookup symbols.
                var key = J2ME.ByteStream.readString(field.utf8Name) + "." + J2ME.ByteStream.readString(field.utf8Signature);
                var symbols = field.isStatic ? classBindings.fields.staticSymbols : classBindings.fields.instanceSymbols;
                if (symbols && symbols[key]) {
                    release || assert(!field.isStatic, "Static fields are not supported yet.");
                    var symbolName = symbols[key];
                    var object = field.isStatic ? klass : klass.prototype;
                    release || assert(!object.hasOwnProperty(symbolName), "Should not overwrite existing properties.");
                    var getter = J2ME.FunctionUtilities.makeForwardingGetter(field.mangledName);
                    var setter;
                    if (release) {
                        setter = J2ME.FunctionUtilities.makeForwardingSetter(field.mangledName);
                    }
                    else {
                        setter = J2ME.FunctionUtilities.makeDebugForwardingSetter(field.mangledName, J2ME.getKindCheck(field.kind));
                    }
                    Object.defineProperty(object, symbolName, {
                        get: getter,
                        set: setter,
                        configurable: true,
                        enumerable: false
                    });
                    delete symbols[key];
                }
            }
            if (!release) {
                if (classBindings.fields.staticSymbols) {
                    var staticSymbols = Object.keys(classBindings.fields.staticSymbols);
                    assert(staticSymbols.length === 0, "Unlinked symbols: " + staticSymbols.join(", "));
                }
                if (classBindings.fields.instanceSymbols) {
                    var instanceSymbols = Object.keys(classBindings.fields.instanceSymbols);
                    assert(instanceSymbols.length === 0, "Unlinked symbols: " + instanceSymbols.join(", "));
                }
            }
        }
    }
    function profilingWrapper(fn, methodInfo, methodType) {
        return function (a, b, c, d) {
            var key = MethodType[methodType] + " " + methodInfo.implKey;
            try {
                J2ME.methodTimeline.enter(key);
                var r;
                switch (arguments.length) {
                    case 0:
                        r = fn.call(this);
                        break;
                    case 1:
                        r = fn.call(this, a);
                        break;
                    case 2:
                        r = fn.call(this, a, b);
                        break;
                    case 3:
                        r = fn.call(this, a, b, c);
                        break;
                    default:
                        r = fn.apply(this, arguments);
                }
                J2ME.methodTimeline.leave(key);
            }
            catch (e) {
                J2ME.methodTimeline.leave(key);
                throw e;
            }
            return r;
        };
    }
    function tracingWrapper(fn, methodInfo, methodType) {
        return function () {
            var args = Array.prototype.slice.apply(arguments);
            J2ME.traceWriter.enter("> " + MethodType[methodType][0] + " " + methodInfo.implKey + " " + (methodInfo.stats.callCount++));
            var s = performance.now();
            var value = fn.apply(this, args);
            J2ME.traceWriter.outdent();
            return value;
        };
    }
    function getLinkedMethod(methodInfo) {
        if (methodInfo.fn) {
            return methodInfo.fn;
        }
        linkKlassMethod(methodInfo.classInfo.klass, methodInfo);
        assert(methodInfo.fn);
        return methodInfo.fn;
    }
    J2ME.getLinkedMethod = getLinkedMethod;
    function linkKlassMethod(klass, methodInfo) {
        J2ME.runtimeCounter && J2ME.runtimeCounter.count("linkKlassMethod");
        var fn;
        var methodType;
        var nativeMethod = findNativeMethodImplementation(methodInfo);
        if (nativeMethod) {
            J2ME.linkWriter && J2ME.linkWriter.writeLn("Method: " + methodInfo.name + methodInfo.signature + " -> Native / Override");
            fn = nativeMethod;
            methodType = 1 /* Native */;
            methodInfo.state = 1 /* Compiled */;
        }
        else {
            fn = findCompiledMethod(klass, methodInfo);
            if (fn) {
                J2ME.linkWriter && J2ME.linkWriter.greenLn("Method: " + methodInfo.name + methodInfo.signature + " -> Compiled");
                methodType = 2 /* Compiled */;
                // Save method info so that we can figure out where we are bailing
                // out from.
                J2ME.jitMethodInfos[fn.name] = methodInfo;
                methodInfo.state = 1 /* Compiled */;
            }
            else {
                J2ME.linkWriter && J2ME.linkWriter.warnLn("Method: " + methodInfo.name + methodInfo.signature + " -> Interpreter");
                methodType = 0 /* Interpreted */;
                fn = prepareInterpretedMethod(methodInfo);
            }
        }
        if (false && J2ME.methodTimeline) {
            fn = profilingWrapper(fn, methodInfo, methodType);
        }
        if (J2ME.traceWriter) {
            fn = tracingWrapper(fn, methodInfo, methodType);
        }
        klass.methods[methodInfo.index] = methodInfo.fn = fn;
        if (!methodInfo.isStatic && methodInfo.virtualName) {
            release || assert(klass.prototype.hasOwnProperty(methodInfo.virtualName));
            klass.prototype[methodInfo.virtualName] = fn;
            var classBindings = J2ME.BindingsMap.get(klass.classInfo.utf8Name);
            if (classBindings && classBindings.methods && classBindings.methods.instanceSymbols) {
                var methodKey = classBindings.methods.instanceSymbols[methodInfo.name + "." + methodInfo.signature];
                if (methodKey) {
                    klass.prototype[methodKey] = fn;
                }
            }
        }
    }
    function linkKlassMethods(klass) {
        var methods = klass.classInfo.getMethods();
        if (!methods) {
            return;
        }
        J2ME.linkWriter && J2ME.linkWriter.enter("Link Klass Methods: " + klass);
        var methods = klass.classInfo.getMethods();
        var vTable = klass.classInfo.vTable;
        if (vTable) {
            for (var i = 0; i < vTable.length; i++) {
                var methodInfo = vTable[i];
                if (methodInfo.implementsInterface) {
                    release || assert(methodInfo.mangledName);
                    klass.prototype[methodInfo.mangledName] = makeInterfaceMethodForwarder(methodInfo.vTableIndex);
                }
            }
        }
        J2ME.linkWriter && J2ME.linkWriter.outdent();
    }
    /**
     * Creates lookup tables used to efficiently implement type checks.
     */
    function initializeKlassTables(klass) {
        J2ME.linkWriter && J2ME.linkWriter.writeLn("initializeKlassTables: " + klass);
        klass.depth = klass.superKlass ? klass.superKlass.depth + 1 : 0;
        assert(klass.display === undefined, "Display should only be defined once.");
        var display = klass.display = new Array(32);
        var i = klass.depth;
        while (klass) {
            display[i--] = klass;
            klass = klass.superKlass;
        }
        release || assert(i === -1, i);
    }
    function initializeInterfaces(klass, classInfo) {
        release || assert(!klass.interfaces);
        var interfaces = klass.interfaces = klass.superKlass ? klass.superKlass.interfaces.slice() : [];
        var interfaceClassInfos = classInfo.getAllInterfaces();
        if (interfaceClassInfos) {
            for (var j = 0; j < interfaceClassInfos.length; j++) {
                J2ME.ArrayUtilities.pushUnique(interfaces, getKlass(interfaceClassInfos[j]));
            }
        }
    }
    // Links the virtual method at a given index.
    function linkVirtualMethodByIndex(self, index) {
        // Self is the object on which the trampoline is called. We want to figure
        // out the appropriate prototype object where we need to link the method. To
        // do this we look at self's class vTable, then find out the class of the
        // bound method and then call linkKlassMethod to patch it on the appropriate
        // prototype.
        var klass = self.klass;
        var classInfo = klass.classInfo;
        var methodInfo = classInfo.vTable[index];
        var methodKlass = methodInfo.classInfo.klass;
        linkKlassMethod(methodKlass, methodInfo);
        release || assert(methodInfo.fn);
        return methodInfo.fn;
    }
    // Cache interface forwarders.
    var interfaceMethodForwarders = new Array(256);
    // Creates a forwarder function that dispatches to a specified virtual
    // name. These are used for interface dispatch.
    function makeInterfaceMethodForwarder(index) {
        var forwarder = interfaceMethodForwarders[index];
        if (forwarder) {
            return forwarder;
        }
        J2ME.runtimeCounter && J2ME.runtimeCounter.count("makeInterfaceMethodForwarder");
        return interfaceMethodForwarders[index] = function () {
            return this["v" + index].apply(this, arguments);
        };
    }
    // Cache virtual trampolines.
    var virtualMethodTrampolines = new Array(256);
    // Creates a reusable trampoline function for a given index in the vTable.
    function makeVirtualMethodTrampoline(index) {
        var trampoline = virtualMethodTrampolines[index];
        if (trampoline) {
            return trampoline;
        }
        J2ME.runtimeCounter && J2ME.runtimeCounter.count("makeVirtualMethodTrampoline");
        return virtualMethodTrampolines[index] = function vTrampoline() {
            return linkVirtualMethodByIndex(this, index).apply(this, arguments);
        };
    }
    function linkMethodByIndex(klass, index) {
        var methodInfo = klass.classInfo.getMethodByIndex(index);
        linkKlassMethod(klass, methodInfo);
        release || assert(methodInfo.fn);
        return methodInfo.fn;
    }
    function makeMethodTrampoline(klass, index) {
        J2ME.runtimeCounter && J2ME.runtimeCounter.count("makeMethodTrampoline");
        return function () {
            return linkMethodByIndex(klass, index).apply(this, arguments);
        };
    }
    // Inserts trampolines for virtual methods on prototype objects whenever new methods
    // are defined. Inherited methods don't need trampolines since they already have them
    // in the super class prototypes.
    function initializeKlassVirtualMethodTrampolines(classInfo, klass) {
        var vTable = classInfo.vTable;
        for (var i = 0; i < vTable.length; i++) {
            if (vTable[i].classInfo === classInfo) {
                J2ME.runtimeCounter && J2ME.runtimeCounter.count("fillTrampoline");
                // TODO: Uncomment this assertion. Array prototype has Object prototype on the
                // prototype hierarchy, and trips this assert since it already has the virtual
                // trampolines installed.
                // assert (!klass.prototype.hasOwnProperty("v" + i));
                klass.prototype["v" + i] = makeVirtualMethodTrampoline(i);
            }
        }
    }
    function initializeKlassMethodTrampolines(classInfo, klass) {
        var count = classInfo.getMethodCount();
        for (var i = 0; i < count; i++) {
            klass["m" + i] = makeMethodTrampoline(klass, i);
        }
    }
    function klassMethodLink(index) {
        var klass = this;
        var fn = klass.methods[index];
        if (fn) {
            return fn;
        }
        linkKlassMethod(klass, klass.classInfo.getMethodByIndex(index));
        release || assert(klass.methods[index], "Method should be linked now.");
        return klass.methods[index];
    }
    function klassResolveConstantPoolEntry(index) {
        var klass = this;
        return klass.classInfo.constantPool.resolve(index, 13 /* CONSTANT_Any */);
    }
    function extendKlass(classInfo, klass, superKlass) {
        klass.superKlass = superKlass;
        if (superKlass) {
            if (isPrototypeOfFunctionMutable(klass)) {
                J2ME.linkWriter && J2ME.linkWriter.writeLn("Extending: " + klass + " -> " + superKlass);
                klass.prototype = Object.create(superKlass.prototype);
                release || assert(Object.getPrototypeOf(klass.prototype) === superKlass.prototype);
            }
            else {
                release || assert(!superKlass.superKlass, "Should not have a super-super-klass.");
                for (var key in superKlass.prototype) {
                    klass.prototype[key] = superKlass.prototype[key];
                }
            }
        }
        else {
            klass.prototype = {};
        }
        klass.prototype.klass = klass;
        initializeKlassTables(klass);
        initializeKlassVirtualMethodTrampolines(classInfo, klass);
        // Method linking.
        klass.m = klassMethodLink;
        klass.c = klassResolveConstantPoolEntry;
        klass.methods = new Array(classInfo.getMethodCount());
    }
    J2ME.extendKlass = extendKlass;
    /**
     * Number of methods that have been compiled thus far.
     */
    J2ME.compiledMethodCount = 0;
    /**
     * Number of methods that have been loaded from the code cache thus far.
     */
    J2ME.cachedMethodCount = 0;
    /**
     * Number of methods that have been loaded from ahead of time compiled code thus far.
     */
    J2ME.aotMethodCount = 0;
    /**
     * Number of ms that have been spent compiled code thus far.
     */
    var totalJITTime = 0;
    /**
     * Compiles method and links it up at runtime.
     */
    function compileAndLinkMethod(methodInfo) {
        // Don't do anything if we're past the compiled state.
        if (methodInfo.state >= 1 /* Compiled */) {
            return;
        }
        // Don't compile methods that are too large.
        if (methodInfo.codeAttribute.code.length > 2000) {
            J2ME.jitWriter && J2ME.jitWriter.writeLn("Not compiling: " + methodInfo.implKey + " because it's too large. " + methodInfo.codeAttribute.code.length);
            methodInfo.state = 2 /* NotCompiled */;
            return;
        }
        if (J2ME.enableCompiledMethodCache) {
            var cachedMethod;
            if (cachedMethod = CompiledMethodCache.get(methodInfo.implKey)) {
                J2ME.cachedMethodCount++;
                J2ME.jitWriter && J2ME.jitWriter.writeLn("Getting " + methodInfo.implKey + " from compiled method cache");
                return linkMethod(methodInfo, cachedMethod.source, cachedMethod.referencedClasses, cachedMethod.onStackReplacementEntryPoints);
            }
        }
        var mangledClassAndMethodName = methodInfo.mangledClassAndMethodName;
        J2ME.jitWriter && J2ME.jitWriter.enter("Compiling: " + methodInfo.implKey + ", currentBytecodeCount: " + methodInfo.stats.bytecodeCount);
        var s = performance.now();
        var compiledMethod;
        enterTimeline("Compiling");
        try {
            compiledMethod = J2ME.baselineCompileMethod(methodInfo, J2ME.CompilationTarget[J2ME.enableCompiledMethodCache ? "Static" : "Runtime"]);
            J2ME.compiledMethodCount++;
        }
        catch (e) {
            methodInfo.state = 3 /* CannotCompile */;
            J2ME.jitWriter && J2ME.jitWriter.writeLn("Cannot compile: " + methodInfo.implKey + " because of " + e);
            leaveTimeline("Compiling");
            return;
        }
        leaveTimeline("Compiling");
        var compiledMethodName = mangledClassAndMethodName;
        var source = "function " + compiledMethodName + "(" + compiledMethod.args.join(",") + ") {\n" + compiledMethod.body + "\n}";
        J2ME.codeWriter && J2ME.codeWriter.writeLns(source);
        var referencedClasses = compiledMethod.referencedClasses.map(function (v) {
            return v.getClassNameSlow();
        });
        if (J2ME.enableCompiledMethodCache) {
            CompiledMethodCache.put({
                key: methodInfo.implKey,
                source: source,
                referencedClasses: referencedClasses,
                onStackReplacementEntryPoints: compiledMethod.onStackReplacementEntryPoints
            });
        }
        linkMethod(methodInfo, source, referencedClasses, compiledMethod.onStackReplacementEntryPoints);
        var methodJITTime = (performance.now() - s);
        totalJITTime += methodJITTime;
        if (J2ME.jitWriter) {
            J2ME.jitWriter.leave("Compilation Done: " + methodJITTime.toFixed(2) + " ms, " + "codeSize: " + methodInfo.codeAttribute.code.length + ", " + "sourceSize: " + compiledMethod.body.length);
            J2ME.jitWriter.writeLn("Total: " + totalJITTime.toFixed(2) + " ms");
        }
    }
    J2ME.compileAndLinkMethod = compileAndLinkMethod;
    /**
     * Links up compiled method at runtime.
     */
    function linkMethod(methodInfo, source, referencedClasses, onStackReplacementEntryPoints) {
        J2ME.jitWriter && J2ME.jitWriter.writeLn("Link method: " + methodInfo.implKey);
        enterTimeline("Eval Compiled Code");
        // This overwrites the method on the global object.
        (1, eval)(source);
        leaveTimeline("Eval Compiled Code");
        var mangledClassAndMethodName = methodInfo.mangledClassAndMethodName;
        var fn = jsGlobal[mangledClassAndMethodName];
        var klass = methodInfo.classInfo.klass;
        klass.methods[methodInfo.index] = methodInfo.fn = fn;
        methodInfo.state = 1 /* Compiled */;
        methodInfo.onStackReplacementEntryPoints = onStackReplacementEntryPoints;
        // Link member methods on the prototype.
        if (!methodInfo.isStatic && methodInfo.virtualName) {
            klass.prototype[methodInfo.virtualName] = fn;
        }
        // Make JITed code available in the |jitMethodInfos| so that bailout
        // code can figure out the caller.
        J2ME.jitMethodInfos[mangledClassAndMethodName] = methodInfo;
        for (var i = 0; i < referencedClasses.length; i++) {
            registerKlassSymbol(referencedClasses[i]);
        }
    }
    J2ME.linkMethod = linkMethod;
    function isAssignableTo(from, to) {
        if (to.isInterfaceKlass) {
            return from.interfaces.indexOf(to) >= 0;
        }
        else if (to.isArrayKlass) {
            if (!from.isArrayKlass) {
                return false;
            }
            return isAssignableTo(from.elementKlass, to.elementKlass);
        }
        return from.display[to.depth] === to;
    }
    J2ME.isAssignableTo = isAssignableTo;
    function instanceOfKlass(object, klass) {
        return object !== null && isAssignableTo(object.klass, klass);
    }
    J2ME.instanceOfKlass = instanceOfKlass;
    function instanceOfInterface(object, klass) {
        release || assert(klass.isInterfaceKlass);
        return object !== null && isAssignableTo(object.klass, klass);
    }
    J2ME.instanceOfInterface = instanceOfInterface;
    function checkCastKlass(object, klass) {
        if (object !== null && !isAssignableTo(object.klass, klass)) {
            throw $.newClassCastException();
        }
    }
    J2ME.checkCastKlass = checkCastKlass;
    function checkCastInterface(object, klass) {
        if (object !== null && !isAssignableTo(object.klass, klass)) {
            throw $.newClassCastException();
        }
    }
    J2ME.checkCastInterface = checkCastInterface;
    function createEmptyObjectArray(size) {
        var array = new Array(size);
        for (var i = 0; i < size; i++) {
            array[i] = null;
        }
        return array;
    }
    function newObject(klass) {
        return new klass();
    }
    J2ME.newObject = newObject;
    function newString(str) {
        if (str === null || str === undefined) {
            return null;
        }
        var object = newObject(J2ME.Klasses.java.lang.String);
        object.str = str;
        return object;
    }
    J2ME.newString = newString;
    function newArray(klass, size) {
        if (size < 0) {
            throwNegativeArraySizeException();
        }
        var constructor = getArrayKlass(klass);
        return new constructor(size);
    }
    J2ME.newArray = newArray;
    function newMultiArray(klass, lengths) {
        var length = lengths[0];
        var array = newArray(klass.elementKlass, length);
        if (lengths.length > 1) {
            lengths = lengths.slice(1);
            for (var i = 0; i < length; i++) {
                array[i] = newMultiArray(klass.elementKlass, lengths);
            }
        }
        return array;
    }
    J2ME.newMultiArray = newMultiArray;
    function throwNegativeArraySizeException() {
        throw $.newNegativeArraySizeException();
    }
    J2ME.throwNegativeArraySizeException = throwNegativeArraySizeException;
    function newObjectArray(size) {
        return newArray(J2ME.Klasses.java.lang.Object, size);
    }
    J2ME.newObjectArray = newObjectArray;
    function newStringArray(size) {
        return newArray(J2ME.Klasses.java.lang.String, size);
    }
    J2ME.newStringArray = newStringArray;
    function newByteArray(size) {
        return newArray(J2ME.Klasses.byte, size);
    }
    J2ME.newByteArray = newByteArray;
    function newIntArray(size) {
        return newArray(J2ME.Klasses.int, size);
    }
    J2ME.newIntArray = newIntArray;
    function getArrayKlass(elementKlass) {
        // Have we already created one? We need to maintain pointer identity.
        if (elementKlass.arrayKlass) {
            return elementKlass.arrayKlass;
        }
        var className = elementKlass.classInfo.getClassNameSlow();
        if (!(elementKlass.classInfo instanceof J2ME.PrimitiveClassInfo) && className[0] !== "[") {
            className = "L" + className + ";";
        }
        className = "[" + className;
        return getKlass(J2ME.CLASSES.getClass(className));
    }
    J2ME.getArrayKlass = getArrayKlass;
    function toDebugString(value) {
        if (typeof value !== "object") {
            return String(value);
        }
        if (value === undefined) {
            return "undefined";
        }
        if (!value) {
            return "null";
        }
        if (!value.klass) {
            return "no klass";
        }
        if (!value.klass.classInfo) {
            return value.klass + " no classInfo";
        }
        var hashcode = "";
        if (value._hashCode) {
            hashcode = " 0x" + value._hashCode.toString(16).toUpperCase();
        }
        if (value instanceof J2ME.Klasses.java.lang.String) {
            return "\"" + value.str + "\"";
        }
        return "[" + value.klass.classInfo.getClassNameSlow() + hashcode + "]";
    }
    J2ME.toDebugString = toDebugString;
    function fromJavaString(value) {
        if (!value) {
            return null;
        }
        return value.str;
    }
    J2ME.fromJavaString = fromJavaString;
    function checkDivideByZero(value) {
        if (value === 0) {
            throwArithmeticException();
        }
    }
    J2ME.checkDivideByZero = checkDivideByZero;
    function checkDivideByZeroLong(value) {
        if (value.isZero()) {
            throwArithmeticException();
        }
    }
    J2ME.checkDivideByZeroLong = checkDivideByZeroLong;
    /**
     * Do bounds check using only one branch. The math works out because array.length
     * can't be larger than 2^31 - 1. So |index| >>> 0 will be larger than
     * array.length if it is less than zero. We need to make the right side unsigned
     * as well because otherwise the SM optimization that converts this to an
     * unsinged branch doesn't kick in.
     */
    function checkArrayBounds(array, index) {
        if ((index >>> 0) >= (array.length >>> 0)) {
            throw $.newArrayIndexOutOfBoundsException(String(index));
        }
    }
    J2ME.checkArrayBounds = checkArrayBounds;
    function throwArrayIndexOutOfBoundsException(index) {
        throw $.newArrayIndexOutOfBoundsException(String(index));
    }
    J2ME.throwArrayIndexOutOfBoundsException = throwArrayIndexOutOfBoundsException;
    function throwArithmeticException() {
        throw $.newArithmeticException("/ by zero");
    }
    J2ME.throwArithmeticException = throwArithmeticException;
    function checkArrayStore(array, value) {
        var arrayKlass = array.klass;
        if (value && !isAssignableTo(value.klass, arrayKlass.elementKlass)) {
            throw $.newArrayStoreException();
        }
    }
    J2ME.checkArrayStore = checkArrayStore;
    function checkNull(object) {
        if (!object) {
            throw $.newNullPointerException();
        }
    }
    J2ME.checkNull = checkNull;
    (function (Constants) {
        Constants[Constants["BYTE_MIN"] = -128] = "BYTE_MIN";
        Constants[Constants["BYTE_MAX"] = 127] = "BYTE_MAX";
        Constants[Constants["SHORT_MIN"] = -32768] = "SHORT_MIN";
        Constants[Constants["SHORT_MAX"] = 32767] = "SHORT_MAX";
        Constants[Constants["CHAR_MIN"] = 0] = "CHAR_MIN";
        Constants[Constants["CHAR_MAX"] = 65535] = "CHAR_MAX";
        Constants[Constants["INT_MIN"] = -2147483648] = "INT_MIN";
        Constants[Constants["INT_MAX"] = 2147483647] = "INT_MAX";
    })(J2ME.Constants || (J2ME.Constants = {}));
    var Constants = J2ME.Constants;
    function monitorEnter(object) {
        $.ctx.monitorEnter(object);
    }
    J2ME.monitorEnter = monitorEnter;
    function monitorExit(object) {
        $.ctx.monitorExit(object);
    }
    J2ME.monitorExit = monitorExit;
    function translateException(e) {
        if (e.name === "TypeError") {
            // JavaScript's TypeError is analogous to a NullPointerException.
            return $.newNullPointerException(e.message);
        }
        return e;
    }
    J2ME.translateException = translateException;
    var initializeMethodInfo = null;
    function classInitCheck(classInfo) {
        if (classInfo instanceof J2ME.ArrayClassInfo || $.initialized[classInfo.getClassNameSlow()]) {
            return;
        }
        linkKlass(classInfo);
        var runtimeKlass = $.getRuntimeKlass(classInfo.klass);
        if (!initializeMethodInfo) {
            initializeMethodInfo = J2ME.Klasses.java.lang.Class.classInfo.getMethodByNameString("initialize", "()V");
        }
        runtimeKlass.classObject[initializeMethodInfo.virtualName]();
    }
    J2ME.classInitCheck = classInitCheck;
    /**
     * Last time we preempted a thread.
     */
    var lastPreemption = 0;
    /**
     * Number of ms between preemptions, chosen arbitrarily.
     */
    var preemptionInterval = 100;
    /**
     * Number of preemptions thus far.
     */
    J2ME.preemptionCount = 0;
    /**
     * TODO: We will almost always preempt the next time we call this if the application
     * has been idle. Figure out a better heurisitc here, maybe measure the frequency at
     * at which |checkPreemption| is invoked and ony preempt if the frequency is sustained
     * for a longer period of time *and* the time since we last preempted is above the
     * |preemptionInterval|.
     */
    function preempt() {
        var now = performance.now();
        var elapsed = now - lastPreemption;
        if (elapsed > preemptionInterval) {
            lastPreemption = now;
            J2ME.preemptionCount++;
            J2ME.threadWriter && J2ME.threadWriter.writeLn("Preemption timeout: " + elapsed.toFixed(2) + " ms, samples: " + PS + ", count: " + J2ME.preemptionCount);
            $.yield("preemption");
        }
    }
    J2ME.preempt = preempt;
    var UnwindThrowLocation = (function () {
        function UnwindThrowLocation() {
            this.pc = 0;
            this.sp = 0;
            this.nextPC = 0;
        }
        UnwindThrowLocation.prototype.setLocation = function (pc, nextPC, sp) {
            this.pc = pc;
            this.sp = sp;
            this.nextPC = nextPC;
            return this;
        };
        UnwindThrowLocation.prototype.getPC = function () {
            return this.pc;
        };
        UnwindThrowLocation.prototype.getSP = function () {
            return this.sp;
        };
        UnwindThrowLocation.prototype.getNextPC = function () {
            return this.nextPC;
        };
        UnwindThrowLocation.instance = new UnwindThrowLocation();
        return UnwindThrowLocation;
    })();
    J2ME.UnwindThrowLocation = UnwindThrowLocation;
    /**
     * Generic unwind throw.
     */
    function throwUnwind(pc, nextPC, sp) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        if (sp === void 0) { sp = 0; }
        throw UnwindThrowLocation.instance.setLocation(pc, nextPC, sp);
    }
    J2ME.throwUnwind = throwUnwind;
    /**
     * Unwind throws with different stack heights. This is useful so we can
     * save a few bytes encoding the stack height in the function name.
     */
    function throwUnwind0(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 0);
    }
    J2ME.throwUnwind0 = throwUnwind0;
    function throwUnwind1(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 1);
    }
    J2ME.throwUnwind1 = throwUnwind1;
    function throwUnwind2(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 2);
    }
    J2ME.throwUnwind2 = throwUnwind2;
    function throwUnwind3(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 3);
    }
    J2ME.throwUnwind3 = throwUnwind3;
    function throwUnwind4(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 4);
    }
    J2ME.throwUnwind4 = throwUnwind4;
    function throwUnwind5(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 5);
    }
    J2ME.throwUnwind5 = throwUnwind5;
    function throwUnwind6(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 6);
    }
    J2ME.throwUnwind6 = throwUnwind6;
    function throwUnwind7(pc, nextPC) {
        if (nextPC === void 0) { nextPC = pc + 3; }
        throwUnwind(pc, nextPC, 7);
    }
    J2ME.throwUnwind7 = throwUnwind7;
})(J2ME || (J2ME = {}));
var Runtime = J2ME.Runtime;
var AOTMD = J2ME.aotMetaData;
/**
 * Are we currently unwinding the stack because of a Yield? This technically
 * belonges to a context but we store it in the global object because it is
 * read very often.
 */
var U = 0 /* Running */;
// Several unwind throws for different stack heights.
var B0 = J2ME.throwUnwind0;
var B1 = J2ME.throwUnwind1;
var B2 = J2ME.throwUnwind2;
var B3 = J2ME.throwUnwind3;
var B4 = J2ME.throwUnwind4;
var B5 = J2ME.throwUnwind5;
var B6 = J2ME.throwUnwind6;
var B7 = J2ME.throwUnwind7;
/**
 * OSR Frame.
 */
var O = null;
/**
 * Runtime exports for compiled code.
 * DO NOT use these short names outside of compiled code.
 */
var IOK = J2ME.instanceOfKlass;
var IOI = J2ME.instanceOfInterface;
var CCK = J2ME.checkCastKlass;
var CCI = J2ME.checkCastInterface;
var AK = J2ME.getArrayKlass;
var NA = J2ME.newArray;
var NM = J2ME.newMultiArray;
var CDZ = J2ME.checkDivideByZero;
var CDZL = J2ME.checkDivideByZeroLong;
var CAB = J2ME.checkArrayBounds;
var CAS = J2ME.checkArrayStore;
var ME = J2ME.monitorEnter;
var MX = J2ME.monitorExit;
var TE = J2ME.translateException;
var TI = J2ME.throwArrayIndexOutOfBoundsException;
var TA = J2ME.throwArithmeticException;
var TN = J2ME.throwNegativeArraySizeException;
var PE = J2ME.preempt;
var PS = 0; // Preemption samples.
var J2ME;
(function (J2ME) {
    var BytecodeStream = J2ME.Bytecode.BytecodeStream;
    var checkArrayBounds = J2ME.checkArrayBounds;
    var checkDivideByZero = J2ME.checkDivideByZero;
    var checkDivideByZeroLong = J2ME.checkDivideByZeroLong;
    var Bytecodes = J2ME.Bytecode.Bytecodes;
    var assert = J2ME.Debug.assert;
    var popManyInto = J2ME.ArrayUtilities.popManyInto;
    J2ME.interpreterCounter = null; // new Metrics.Counter(true);
    J2ME.interpreterMethodCounter = new J2ME.Metrics.Counter(true);
    var traceArrayAccess = false;
    function traceArrayStore(index, array, value) {
        J2ME.traceWriter.writeLn(J2ME.toDebugString(array) + "[" + index + "] = " + J2ME.toDebugString(value));
    }
    function traceArrayLoad(index, array) {
        assert(array[index] !== undefined);
        J2ME.traceWriter.writeLn(J2ME.toDebugString(array) + "[" + index + "] (" + J2ME.toDebugString(array[index]) + ")");
    }
    function classInitAndUnwindCheck(classInfo, pc) {
        J2ME.classInitCheck(classInfo);
        if (U) {
            $.ctx.current().pc = pc;
            return;
        }
    }
    /**
     * Optimize method bytecode.
     */
    function optimizeMethodBytecode(methodInfo) {
        J2ME.interpreterCounter && J2ME.interpreterCounter.count("optimize: " + methodInfo.implKey);
        var stream = new BytecodeStream(methodInfo.codeAttribute.code);
        while (stream.currentBC() !== 256 /* END */) {
            if (stream.rawCurrentBC() === 196 /* WIDE */) {
                stream.next();
                continue;
            }
            switch (stream.currentBC()) {
                case 25 /* ALOAD */:
                    if (stream.nextBC() === 21 /* ILOAD */) {
                        stream.writeCurrentBC(210 /* ALOAD_ILOAD */);
                    }
                    break;
                case 132 /* IINC */:
                    if (stream.nextBC() === 167 /* GOTO */) {
                        stream.writeCurrentBC(211 /* IINC_GOTO */);
                    }
                    break;
                case 190 /* ARRAYLENGTH */:
                    if (stream.nextBC() === 162 /* IF_ICMPGE */) {
                        stream.writeCurrentBC(212 /* ARRAYLENGTH_IF_ICMPGE */);
                    }
                    break;
            }
            stream.next();
        }
        methodInfo.isOptimized = true;
    }
    function resolveClass(index, classInfo) {
        var classInfo = classInfo.constantPool.resolveClass(index);
        J2ME.linkKlass(classInfo);
        return classInfo;
    }
    /**
     * Debugging helper to make sure native methods were implemented correctly.
     */
    function checkReturnValue(methodInfo, returnValue) {
        if (U) {
            if (typeof returnValue !== "undefined") {
                assert(false, "Expected undefined return value during unwind, got " + returnValue + " in " + methodInfo.implKey);
            }
            return;
        }
        if (!(J2ME.getKindCheck(methodInfo.returnKind)(returnValue))) {
            assert(false, "Expected " + J2ME.Kind[methodInfo.returnKind] + " return value, got " + returnValue + " in " + methodInfo.implKey);
        }
    }
    /**
     * The number of opcodes executed thus far.
     */
    J2ME.bytecodeCount = 0;
    /**
     * The number of times the interpreter method was called thus far.
     */
    J2ME.interpreterCount = 0;
    J2ME.onStackReplacementCount = 0;
    /**
     * Temporarily used for fn.apply.
     */
    var argArray = [];
    function buildExceptionLog(ex, stackTrace) {
        var classInfo = ex.klass.classInfo;
        var className = classInfo.getClassNameSlow();
        var detailMessage = J2ME.fromJavaString(classInfo.getFieldByName(J2ME.toUTF8("detailMessage"), J2ME.toUTF8("Ljava/lang/String;"), false).get(ex));
        return className + ": " + (detailMessage || "") + "\n" + stackTrace.map(function (entry) {
            return " - " + entry.className + "." + entry.methodName + entry.methodSignature + ", pc=" + entry.offset;
        }).join("\n") + "\n\n";
    }
    function tryCatch(e) {
        var ctx = $.ctx;
        var frame = ctx.current();
        var frames = ctx.frames;
        var stack = frame.stack;
        var exClass = e.class;
        if (!e.stackTrace) {
            e.stackTrace = [];
        }
        var stackTrace = e.stackTrace;
        do {
            var handler_pc = null;
            for (var i = 0; i < frame.methodInfo.exception_table_length; i++) {
                var exceptionEntryView = frame.methodInfo.getExceptionEntryViewByIndex(i);
                if (frame.opPC >= exceptionEntryView.start_pc && frame.opPC < exceptionEntryView.end_pc) {
                    if (exceptionEntryView.catch_type === 0) {
                        handler_pc = exceptionEntryView.handler_pc;
                        break;
                    }
                    else {
                        classInfo = resolveClass(exceptionEntryView.catch_type, frame.methodInfo.classInfo);
                        if (J2ME.isAssignableTo(e.klass, classInfo.klass)) {
                            handler_pc = exceptionEntryView.handler_pc;
                            break;
                        }
                    }
                }
            }
            var classInfo = frame.methodInfo.classInfo;
            if (classInfo && classInfo.getClassNameSlow()) {
                stackTrace.push({
                    className: classInfo.getClassNameSlow(),
                    methodName: frame.methodInfo.name,
                    methodSignature: frame.methodInfo.signature,
                    offset: frame.pc
                });
            }
            if (handler_pc != null) {
                stack.length = 0;
                stack.push(e);
                frame.pc = handler_pc;
                if (VM.DEBUG_PRINT_ALL_EXCEPTIONS) {
                    console.error(buildExceptionLog(e, stackTrace));
                }
                return;
            }
            frames.pop();
            frame = frames[frames.length - 1];
            if (J2ME.Frame.isMarker(frame)) {
                break;
            }
            stack = frame.stack;
        } while (true);
        if (ctx.current() === J2ME.Frame.Start) {
            ctx.kill();
            if (ctx.thread && ctx.thread._lock && ctx.thread._lock.waiting.length > 0) {
                console.error(buildExceptionLog(e, stackTrace));
                for (var i = 0; i < ctx.thread._lock.waiting.length; i++) {
                    var waitingCtx = ctx.thread._lock.waiting[i];
                    ctx.thread._lock.waiting[i] = null;
                    waitingCtx.wakeup(ctx.thread);
                }
            }
            throw new Error(buildExceptionLog(e, stackTrace));
        }
        else {
            throw e;
        }
    }
    function interpret() {
        var ctx = $.ctx;
        // These must always be kept up to date with the current frame.
        var frame = ctx.current();
        release || assert(!J2ME.Frame.isMarker(frame));
        var frames = ctx.frames;
        var mi = frame.methodInfo;
        var ci = mi.classInfo;
        var rp = ci.constantPool.resolved;
        var stack = frame.stack;
        var returnValue = null;
        var traceBytecodes = false;
        var traceSourceLocation = true;
        var index, value, constant;
        var a, b, c;
        var pc;
        /**
         * This is used to detect backwards branches for the purpose of on stack replacement.
         */
        var lastPC = -1;
        var type;
        var size;
        var array;
        var object;
        var fieldInfo;
        var classInfo;
        // We don't want to optimize methods for interpretation if we're going to be using the JIT until
        // we teach the Baseline JIT about the new bytecodes.
        if (!J2ME.enableRuntimeCompilation && !frame.methodInfo.isOptimized && frame.methodInfo.stats.bytecodeCount > 100) {
            optimizeMethodBytecode(frame.methodInfo);
        }
        mi.stats.interpreterCallCount++;
        J2ME.interpreterCount++;
        while (true) {
            J2ME.bytecodeCount++;
            mi.stats.bytecodeCount++;
            // TODO: Make sure this works even if we JIT everything. At the moment it fails
            // for synthetic method frames which have bad max_local counts.
            // Inline heuristics that trigger JIT compilation here.
            if (J2ME.enableRuntimeCompilation && mi.state < 1 /* Compiled */ && mi.stats.backwardsBranchCount + mi.stats.interpreterCallCount > 10) {
                J2ME.compileAndLinkMethod(mi);
            }
            try {
                if (frame.pc < lastPC) {
                    mi.stats.backwardsBranchCount++;
                    if (J2ME.enableOnStackReplacement && mi.state === 1 /* Compiled */) {
                        // Just because we've jumped backwards doesn't mean we are at a loop header but it does mean that we are
                        // at the beggining of a basic block. This is a really cheap test and a convenient place to perform an
                        // on stack replacement.
                        if (mi.onStackReplacementEntryPoints.indexOf(frame.pc) > -1) {
                            J2ME.onStackReplacementCount++;
                            // The current frame will be swapped out for a JIT frame, so pop it off the interpreter stack.
                            frames.pop();
                            // Remember the return kind since we'll need it later.
                            var returnKind = mi.returnKind;
                            // Set the global OSR frame to the current frame.
                            O = frame;
                            // Set the current frame before doing the OSR in case an exception is thrown.
                            frame = frames[frames.length - 1];
                            // Perform OSR, the callee reads the frame stored in |O| and updates its own state.
                            returnValue = O.methodInfo.fn();
                            if (U) {
                                return;
                            }
                            // Usual code to return from the interpreter or push the return value.
                            if (J2ME.Frame.isMarker(frame)) {
                                return returnValue;
                            }
                            mi = frame.methodInfo;
                            ci = mi.classInfo;
                            rp = ci.constantPool.resolved;
                            stack = frame.stack;
                            lastPC = -1;
                            if (returnKind !== 9 /* Void */) {
                                if (J2ME.isTwoSlot(returnKind)) {
                                    stack.push2(returnValue);
                                }
                                else {
                                    stack.push(returnValue);
                                }
                            }
                        }
                    }
                }
                lastPC = frame.opPC = frame.pc;
                var op = frame.read8();
                switch (op) {
                    case 0 /* NOP */:
                        break;
                    case 1 /* ACONST_NULL */:
                        stack.push(null);
                        break;
                    case 2 /* ICONST_M1 */:
                    case 3 /* ICONST_0 */:
                    case 4 /* ICONST_1 */:
                    case 5 /* ICONST_2 */:
                    case 6 /* ICONST_3 */:
                    case 7 /* ICONST_4 */:
                    case 8 /* ICONST_5 */:
                        stack.push(op - 3 /* ICONST_0 */);
                        break;
                    case 11 /* FCONST_0 */:
                    case 12 /* FCONST_1 */:
                    case 13 /* FCONST_2 */:
                        stack.push(op - 11 /* FCONST_0 */);
                        break;
                    case 14 /* DCONST_0 */:
                    case 15 /* DCONST_1 */:
                        stack.push2(op - 14 /* DCONST_0 */);
                        break;
                    case 9 /* LCONST_0 */:
                    case 10 /* LCONST_1 */:
                        stack.push2(Long.fromInt(op - 9 /* LCONST_0 */));
                        break;
                    case 16 /* BIPUSH */:
                        stack.push(frame.read8Signed());
                        break;
                    case 17 /* SIPUSH */:
                        stack.push(frame.read16Signed());
                        break;
                    case 18 /* LDC */:
                    case 19 /* LDC_W */:
                        index = (op === 18 /* LDC */) ? frame.read8() : frame.read16();
                        constant = ci.constantPool.resolve(index, 13 /* CONSTANT_Any */, false);
                        stack.push(constant);
                        break;
                    case 20 /* LDC2_W */:
                        index = frame.read16();
                        constant = ci.constantPool.resolve(index, 13 /* CONSTANT_Any */, false);
                        stack.push2(constant);
                        break;
                    case 21 /* ILOAD */:
                        stack.push(frame.getLocal(frame.read8()));
                        break;
                    case 23 /* FLOAD */:
                        stack.push(frame.getLocal(frame.read8()));
                        break;
                    case 25 /* ALOAD */:
                        stack.push(frame.getLocal(frame.read8()));
                        break;
                    case 210 /* ALOAD_ILOAD */:
                        stack.push(frame.getLocal(frame.read8()));
                        frame.pc++;
                        stack.push(frame.getLocal(frame.read8()));
                        break;
                    case 22 /* LLOAD */:
                    case 24 /* DLOAD */:
                        stack.push2(frame.getLocal(frame.read8()));
                        break;
                    case 26 /* ILOAD_0 */:
                    case 27 /* ILOAD_1 */:
                    case 28 /* ILOAD_2 */:
                    case 29 /* ILOAD_3 */:
                        stack.push(frame.getLocal(op - 26 /* ILOAD_0 */));
                        break;
                    case 34 /* FLOAD_0 */:
                    case 35 /* FLOAD_1 */:
                    case 36 /* FLOAD_2 */:
                    case 37 /* FLOAD_3 */:
                        stack.push(frame.getLocal(op - 34 /* FLOAD_0 */));
                        break;
                    case 42 /* ALOAD_0 */:
                    case 43 /* ALOAD_1 */:
                    case 44 /* ALOAD_2 */:
                    case 45 /* ALOAD_3 */:
                        stack.push(frame.getLocal(op - 42 /* ALOAD_0 */));
                        break;
                    case 30 /* LLOAD_0 */:
                    case 31 /* LLOAD_1 */:
                    case 32 /* LLOAD_2 */:
                    case 33 /* LLOAD_3 */:
                        stack.push2(frame.getLocal(op - 30 /* LLOAD_0 */));
                        break;
                    case 38 /* DLOAD_0 */:
                    case 39 /* DLOAD_1 */:
                    case 40 /* DLOAD_2 */:
                    case 41 /* DLOAD_3 */:
                        stack.push2(frame.getLocal(op - 38 /* DLOAD_0 */));
                        break;
                    case 46 /* IALOAD */:
                    case 48 /* FALOAD */:
                    case 50 /* AALOAD */:
                    case 51 /* BALOAD */:
                    case 52 /* CALOAD */:
                    case 53 /* SALOAD */:
                        index = stack.pop();
                        array = stack.pop();
                        checkArrayBounds(array, index);
                        stack.push(array[index]);
                        break;
                    case 47 /* LALOAD */:
                    case 49 /* DALOAD */:
                        index = stack.pop();
                        array = stack.pop();
                        checkArrayBounds(array, index);
                        stack.push2(array[index]);
                        break;
                    case 54 /* ISTORE */:
                    case 56 /* FSTORE */:
                    case 58 /* ASTORE */:
                        frame.setLocal(frame.read8(), stack.pop());
                        break;
                    case 55 /* LSTORE */:
                    case 57 /* DSTORE */:
                        frame.setLocal(frame.read8(), stack.pop2());
                        break;
                    case 59 /* ISTORE_0 */:
                    case 67 /* FSTORE_0 */:
                    case 75 /* ASTORE_0 */:
                        frame.setLocal(0, stack.pop());
                        break;
                    case 60 /* ISTORE_1 */:
                    case 68 /* FSTORE_1 */:
                    case 76 /* ASTORE_1 */:
                        frame.setLocal(1, stack.pop());
                        break;
                    case 61 /* ISTORE_2 */:
                    case 69 /* FSTORE_2 */:
                    case 77 /* ASTORE_2 */:
                        frame.setLocal(2, stack.pop());
                        break;
                    case 62 /* ISTORE_3 */:
                    case 70 /* FSTORE_3 */:
                    case 78 /* ASTORE_3 */:
                        frame.setLocal(3, stack.pop());
                        break;
                    case 63 /* LSTORE_0 */:
                    case 71 /* DSTORE_0 */:
                        frame.setLocal(0, stack.pop2());
                        break;
                    case 64 /* LSTORE_1 */:
                    case 72 /* DSTORE_1 */:
                        frame.setLocal(1, stack.pop2());
                        break;
                    case 65 /* LSTORE_2 */:
                    case 73 /* DSTORE_2 */:
                        frame.setLocal(2, stack.pop2());
                        break;
                    case 66 /* LSTORE_3 */:
                    case 74 /* DSTORE_3 */:
                        frame.setLocal(3, stack.pop2());
                        break;
                    case 79 /* IASTORE */:
                    case 81 /* FASTORE */:
                    case 84 /* BASTORE */:
                    case 85 /* CASTORE */:
                    case 86 /* SASTORE */:
                        value = stack.pop();
                        index = stack.pop();
                        array = stack.pop();
                        checkArrayBounds(array, index);
                        array[index] = value;
                        break;
                    case 80 /* LASTORE */:
                    case 82 /* DASTORE */:
                        value = stack.pop2();
                        index = stack.pop();
                        array = stack.pop();
                        checkArrayBounds(array, index);
                        array[index] = value;
                        break;
                    case 83 /* AASTORE */:
                        value = stack.pop();
                        index = stack.pop();
                        array = stack.pop();
                        checkArrayBounds(array, index);
                        J2ME.checkArrayStore(array, value);
                        array[index] = value;
                        break;
                    case 87 /* POP */:
                        stack.pop();
                        break;
                    case 88 /* POP2 */:
                        stack.pop2();
                        break;
                    case 89 /* DUP */:
                        stack.push(stack[stack.length - 1]);
                        break;
                    case 90 /* DUP_X1 */:
                        a = stack.pop();
                        b = stack.pop();
                        stack.push(a);
                        stack.push(b);
                        stack.push(a);
                        break;
                    case 91 /* DUP_X2 */:
                        a = stack.pop();
                        b = stack.pop();
                        c = stack.pop();
                        stack.push(a);
                        stack.push(c);
                        stack.push(b);
                        stack.push(a);
                        break;
                    case 92 /* DUP2 */:
                        a = stack.pop();
                        b = stack.pop();
                        stack.push(b);
                        stack.push(a);
                        stack.push(b);
                        stack.push(a);
                        break;
                    case 93 /* DUP2_X1 */:
                        a = stack.pop();
                        b = stack.pop();
                        c = stack.pop();
                        stack.push(b);
                        stack.push(a);
                        stack.push(c);
                        stack.push(b);
                        stack.push(a);
                        break;
                    case 94 /* DUP2_X2 */:
                        a = stack.pop();
                        b = stack.pop();
                        c = stack.pop();
                        var d = stack.pop();
                        stack.push(b);
                        stack.push(a);
                        stack.push(d);
                        stack.push(c);
                        stack.push(b);
                        stack.push(a);
                        break;
                    case 95 /* SWAP */:
                        a = stack.pop();
                        b = stack.pop();
                        stack.push(a);
                        stack.push(b);
                        break;
                    case 132 /* IINC */:
                        index = frame.read8();
                        value = frame.read8Signed();
                        frame.incLocal(index, value);
                        break;
                    case 211 /* IINC_GOTO */:
                        index = frame.read8();
                        value = frame.read8Signed();
                        frame.setLocal(index, frame.getLocal(index) + value);
                        frame.pc++;
                        frame.pc = frame.readTargetPC();
                        break;
                    case 96 /* IADD */:
                        stack.push((stack.pop() + stack.pop()) | 0);
                        break;
                    case 97 /* LADD */:
                        stack.push2(stack.pop2().add(stack.pop2()));
                        break;
                    case 98 /* FADD */:
                        stack.push(Math.fround(stack.pop() + stack.pop()));
                        break;
                    case 99 /* DADD */:
                        stack.push2(stack.pop2() + stack.pop2());
                        break;
                    case 100 /* ISUB */:
                        stack.push((-stack.pop() + stack.pop()) | 0);
                        break;
                    case 101 /* LSUB */:
                        stack.push2(stack.pop2().negate().add(stack.pop2()));
                        break;
                    case 102 /* FSUB */:
                        stack.push(Math.fround(-stack.pop() + stack.pop()));
                        break;
                    case 103 /* DSUB */:
                        stack.push2(-stack.pop2() + stack.pop2());
                        break;
                    case 104 /* IMUL */:
                        stack.push(Math.imul(stack.pop(), stack.pop()));
                        break;
                    case 105 /* LMUL */:
                        stack.push2(stack.pop2().multiply(stack.pop2()));
                        break;
                    case 106 /* FMUL */:
                        stack.push(Math.fround(stack.pop() * stack.pop()));
                        break;
                    case 107 /* DMUL */:
                        stack.push2(stack.pop2() * stack.pop2());
                        break;
                    case 108 /* IDIV */:
                        b = stack.pop();
                        a = stack.pop();
                        checkDivideByZero(b);
                        stack.push((a === -2147483648 /* INT_MIN */ && b === -1) ? a : ((a / b) | 0));
                        break;
                    case 109 /* LDIV */:
                        b = stack.pop2();
                        a = stack.pop2();
                        checkDivideByZeroLong(b);
                        stack.push2(a.div(b));
                        break;
                    case 110 /* FDIV */:
                        b = stack.pop();
                        a = stack.pop();
                        stack.push(Math.fround(a / b));
                        break;
                    case 111 /* DDIV */:
                        b = stack.pop2();
                        a = stack.pop2();
                        stack.push2(a / b);
                        break;
                    case 112 /* IREM */:
                        b = stack.pop();
                        a = stack.pop();
                        checkDivideByZero(b);
                        stack.push(a % b);
                        break;
                    case 113 /* LREM */:
                        b = stack.pop2();
                        a = stack.pop2();
                        checkDivideByZeroLong(b);
                        stack.push2(a.modulo(b));
                        break;
                    case 114 /* FREM */:
                        b = stack.pop();
                        a = stack.pop();
                        stack.push(Math.fround(a % b));
                        break;
                    case 115 /* DREM */:
                        b = stack.pop2();
                        a = stack.pop2();
                        stack.push2(a % b);
                        break;
                    case 116 /* INEG */:
                        stack.push((-stack.pop()) | 0);
                        break;
                    case 117 /* LNEG */:
                        stack.push2(stack.pop2().negate());
                        break;
                    case 118 /* FNEG */:
                        stack.push(-stack.pop());
                        break;
                    case 119 /* DNEG */:
                        stack.push2(-stack.pop2());
                        break;
                    case 120 /* ISHL */:
                        b = stack.pop();
                        a = stack.pop();
                        stack.push(a << b);
                        break;
                    case 121 /* LSHL */:
                        b = stack.pop();
                        a = stack.pop2();
                        stack.push2(a.shiftLeft(b));
                        break;
                    case 122 /* ISHR */:
                        b = stack.pop();
                        a = stack.pop();
                        stack.push(a >> b);
                        break;
                    case 123 /* LSHR */:
                        b = stack.pop();
                        a = stack.pop2();
                        stack.push2(a.shiftRight(b));
                        break;
                    case 124 /* IUSHR */:
                        b = stack.pop();
                        a = stack.pop();
                        stack.push(a >>> b);
                        break;
                    case 125 /* LUSHR */:
                        b = stack.pop();
                        a = stack.pop2();
                        stack.push2(a.shiftRightUnsigned(b));
                        break;
                    case 126 /* IAND */:
                        stack.push(stack.pop() & stack.pop());
                        break;
                    case 127 /* LAND */:
                        stack.push2(stack.pop2().and(stack.pop2()));
                        break;
                    case 128 /* IOR */:
                        stack.push(stack.pop() | stack.pop());
                        break;
                    case 129 /* LOR */:
                        stack.push2(stack.pop2().or(stack.pop2()));
                        break;
                    case 130 /* IXOR */:
                        stack.push(stack.pop() ^ stack.pop());
                        break;
                    case 131 /* LXOR */:
                        stack.push2(stack.pop2().xor(stack.pop2()));
                        break;
                    case 148 /* LCMP */:
                        b = stack.pop2();
                        a = stack.pop2();
                        if (a.greaterThan(b)) {
                            stack.push(1);
                        }
                        else if (a.lessThan(b)) {
                            stack.push(-1);
                        }
                        else {
                            stack.push(0);
                        }
                        break;
                    case 149 /* FCMPL */:
                        b = stack.pop();
                        a = stack.pop();
                        if (isNaN(a) || isNaN(b)) {
                            stack.push(-1);
                        }
                        else if (a > b) {
                            stack.push(1);
                        }
                        else if (a < b) {
                            stack.push(-1);
                        }
                        else {
                            stack.push(0);
                        }
                        break;
                    case 150 /* FCMPG */:
                        b = stack.pop();
                        a = stack.pop();
                        if (isNaN(a) || isNaN(b)) {
                            stack.push(1);
                        }
                        else if (a > b) {
                            stack.push(1);
                        }
                        else if (a < b) {
                            stack.push(-1);
                        }
                        else {
                            stack.push(0);
                        }
                        break;
                    case 151 /* DCMPL */:
                        b = stack.pop2();
                        a = stack.pop2();
                        if (isNaN(a) || isNaN(b)) {
                            stack.push(-1);
                        }
                        else if (a > b) {
                            stack.push(1);
                        }
                        else if (a < b) {
                            stack.push(-1);
                        }
                        else {
                            stack.push(0);
                        }
                        break;
                    case 152 /* DCMPG */:
                        b = stack.pop2();
                        a = stack.pop2();
                        if (isNaN(a) || isNaN(b)) {
                            stack.push(1);
                        }
                        else if (a > b) {
                            stack.push(1);
                        }
                        else if (a < b) {
                            stack.push(-1);
                        }
                        else {
                            stack.push(0);
                        }
                        break;
                    case 153 /* IFEQ */:
                        pc = frame.readTargetPC();
                        if (stack.pop() === 0) {
                            frame.pc = pc;
                        }
                        break;
                    case 154 /* IFNE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() !== 0) {
                            frame.pc = pc;
                        }
                        break;
                    case 155 /* IFLT */:
                        pc = frame.readTargetPC();
                        if (stack.pop() < 0) {
                            frame.pc = pc;
                        }
                        break;
                    case 156 /* IFGE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() >= 0) {
                            frame.pc = pc;
                        }
                        break;
                    case 157 /* IFGT */:
                        pc = frame.readTargetPC();
                        if (stack.pop() > 0) {
                            frame.pc = pc;
                        }
                        break;
                    case 158 /* IFLE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() <= 0) {
                            frame.pc = pc;
                        }
                        break;
                    case 159 /* IF_ICMPEQ */:
                        pc = frame.readTargetPC();
                        if (stack.pop() === stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 160 /* IF_ICMPNE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() !== stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 161 /* IF_ICMPLT */:
                        pc = frame.readTargetPC();
                        if (stack.pop() > stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 162 /* IF_ICMPGE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() <= stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 163 /* IF_ICMPGT */:
                        pc = frame.readTargetPC();
                        if (stack.pop() < stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 164 /* IF_ICMPLE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() >= stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 165 /* IF_ACMPEQ */:
                        pc = frame.readTargetPC();
                        if (stack.pop() === stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 166 /* IF_ACMPNE */:
                        pc = frame.readTargetPC();
                        if (stack.pop() !== stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 198 /* IFNULL */:
                        pc = frame.readTargetPC();
                        if (!stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 199 /* IFNONNULL */:
                        pc = frame.readTargetPC();
                        if (stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 167 /* GOTO */:
                        frame.pc = frame.readTargetPC();
                        break;
                    case 200 /* GOTO_W */:
                        frame.pc = frame.read32Signed() - 1;
                        break;
                    case 168 /* JSR */:
                        pc = frame.read16();
                        stack.push(frame.pc);
                        frame.pc = pc;
                        break;
                    case 201 /* JSR_W */:
                        pc = frame.read32();
                        stack.push(frame.pc);
                        frame.pc = pc;
                        break;
                    case 169 /* RET */:
                        frame.pc = frame.getLocal(frame.read8());
                        break;
                    case 133 /* I2L */:
                        stack.push2(Long.fromInt(stack.pop()));
                        break;
                    case 134 /* I2F */:
                        break;
                    case 135 /* I2D */:
                        stack.push2(stack.pop());
                        break;
                    case 136 /* L2I */:
                        stack.push(stack.pop2().toInt());
                        break;
                    case 137 /* L2F */:
                        stack.push(Math.fround(stack.pop2().toNumber()));
                        break;
                    case 138 /* L2D */:
                        stack.push2(stack.pop2().toNumber());
                        break;
                    case 139 /* F2I */:
                        stack.push(util.double2int(stack.pop()));
                        break;
                    case 140 /* F2L */:
                        stack.push2(Long.fromNumber(stack.pop()));
                        break;
                    case 141 /* F2D */:
                        stack.push2(stack.pop());
                        break;
                    case 142 /* D2I */:
                        stack.push(util.double2int(stack.pop2()));
                        break;
                    case 143 /* D2L */:
                        stack.push2(util.double2long(stack.pop2()));
                        break;
                    case 144 /* D2F */:
                        stack.push(Math.fround(stack.pop2()));
                        break;
                    case 145 /* I2B */:
                        stack.push((stack.pop() << 24) >> 24);
                        break;
                    case 146 /* I2C */:
                        stack.push(stack.pop() & 0xffff);
                        break;
                    case 147 /* I2S */:
                        stack.push((stack.pop() << 16) >> 16);
                        break;
                    case 170 /* TABLESWITCH */:
                        frame.pc = frame.tableSwitch();
                        break;
                    case 171 /* LOOKUPSWITCH */:
                        frame.pc = frame.lookupSwitch();
                        break;
                    case 188 /* NEWARRAY */:
                        type = frame.read8();
                        size = stack.pop();
                        stack.push(J2ME.newArray(J2ME.PrimitiveClassInfo["????ZCFDBSIJ"[type]].klass, size));
                        break;
                    case 189 /* ANEWARRAY */:
                        index = frame.read16();
                        classInfo = resolveClass(index, mi.classInfo);
                        classInitAndUnwindCheck(classInfo, frame.pc - 3);
                        size = stack.pop();
                        stack.push(J2ME.newArray(classInfo.klass, size));
                        break;
                    case 197 /* MULTIANEWARRAY */:
                        index = frame.read16();
                        classInfo = resolveClass(index, mi.classInfo);
                        var dimensions = frame.read8();
                        var lengths = new Array(dimensions);
                        for (var i = 0; i < dimensions; i++)
                            lengths[i] = stack.pop();
                        stack.push(J2ME.newMultiArray(classInfo.klass, lengths.reverse()));
                        break;
                    case 190 /* ARRAYLENGTH */:
                        array = stack.pop();
                        stack.push(array.length);
                        break;
                    case 212 /* ARRAYLENGTH_IF_ICMPGE */:
                        array = stack.pop();
                        stack.push(array.length);
                        frame.pc++;
                        pc = frame.readTargetPC();
                        if (stack.pop() <= stack.pop()) {
                            frame.pc = pc;
                        }
                        break;
                    case 180 /* GETFIELD */:
                        index = frame.read16();
                        fieldInfo = mi.classInfo.constantPool.resolveField(index, false);
                        object = stack.pop();
                        stack.pushKind(fieldInfo.kind, fieldInfo.get(object));
                        frame.patch(3, 180 /* GETFIELD */, 213 /* RESOLVED_GETFIELD */);
                        break;
                    case 213 /* RESOLVED_GETFIELD */:
                        fieldInfo = rp[frame.read16()];
                        object = stack.pop();
                        stack.pushKind(fieldInfo.kind, fieldInfo.get(object));
                        break;
                    case 181 /* PUTFIELD */:
                        index = frame.read16();
                        fieldInfo = mi.classInfo.constantPool.resolveField(index, false);
                        value = stack.popKind(fieldInfo.kind);
                        object = stack.pop();
                        fieldInfo.set(object, value);
                        frame.patch(3, 181 /* PUTFIELD */, 214 /* RESOLVED_PUTFIELD */);
                        break;
                    case 214 /* RESOLVED_PUTFIELD */:
                        fieldInfo = rp[frame.read16()];
                        value = stack.popKind(fieldInfo.kind);
                        object = stack.pop();
                        fieldInfo.set(object, value);
                        break;
                    case 178 /* GETSTATIC */:
                        index = frame.read16();
                        fieldInfo = mi.classInfo.constantPool.resolveField(index, true);
                        classInitAndUnwindCheck(fieldInfo.classInfo, frame.pc - 3);
                        if (U) {
                            return;
                        }
                        value = fieldInfo.getStatic();
                        stack.pushKind(fieldInfo.kind, value);
                        break;
                    case 179 /* PUTSTATIC */:
                        index = frame.read16();
                        fieldInfo = mi.classInfo.constantPool.resolveField(index, true);
                        classInitAndUnwindCheck(fieldInfo.classInfo, frame.pc - 3);
                        if (U) {
                            return;
                        }
                        fieldInfo.setStatic(stack.popKind(fieldInfo.kind));
                        break;
                    case 187 /* NEW */:
                        index = frame.read16();
                        classInfo = resolveClass(index, mi.classInfo);
                        classInitAndUnwindCheck(classInfo, frame.pc - 3);
                        if (U) {
                            return;
                        }
                        stack.push(J2ME.newObject(classInfo.klass));
                        break;
                    case 192 /* CHECKCAST */:
                        index = frame.read16();
                        classInfo = resolveClass(index, mi.classInfo);
                        object = stack[stack.length - 1];
                        if (object && !J2ME.isAssignableTo(object.klass, classInfo.klass)) {
                            throw $.newClassCastException(object.klass.classInfo.getClassNameSlow() + " is not assignable to " + classInfo.getClassNameSlow());
                        }
                        break;
                    case 193 /* INSTANCEOF */:
                        index = frame.read16();
                        classInfo = resolveClass(index, mi.classInfo);
                        object = stack.pop();
                        var result = !object ? false : J2ME.isAssignableTo(object.klass, classInfo.klass);
                        stack.push(result ? 1 : 0);
                        break;
                    case 191 /* ATHROW */:
                        object = stack.pop();
                        if (!object) {
                            throw $.newNullPointerException();
                        }
                        throw object;
                        break;
                    case 194 /* MONITORENTER */:
                        object = stack.pop();
                        ctx.monitorEnter(object);
                        if (U === 2 /* Pausing */ || U === 3 /* Stopping */) {
                            return;
                        }
                        break;
                    case 195 /* MONITOREXIT */:
                        object = stack.pop();
                        ctx.monitorExit(object);
                        break;
                    case 196 /* WIDE */:
                        frame.wide();
                        break;
                    case 215 /* RESOLVED_INVOKEVIRTUAL */:
                        index = frame.read16();
                        var calleeMethodInfo = rp[index];
                        var object = frame.peekInvokeObject(calleeMethodInfo);
                        calleeMethod = object[calleeMethodInfo.virtualName];
                        var calleeTargetMethodInfo = calleeMethod.methodInfo;
                        if (calleeTargetMethodInfo && !calleeTargetMethodInfo.isSynchronized && !calleeTargetMethodInfo.isNative && calleeTargetMethodInfo.state !== 1 /* Compiled */) {
                            var calleeFrame = J2ME.Frame.create(calleeTargetMethodInfo, [], 0);
                            J2ME.ArrayUtilities.popManyInto(stack, calleeTargetMethodInfo.consumeArgumentSlots, calleeFrame.local);
                            frames.push(calleeFrame);
                            frame = calleeFrame;
                            mi = frame.methodInfo;
                            mi.stats.interpreterCallCount++;
                            ci = mi.classInfo;
                            rp = ci.constantPool.resolved;
                            stack = frame.stack;
                            lastPC = -1;
                            continue;
                        }
                        // Call directy.
                        var returnValue;
                        var argumentSlots = calleeMethodInfo.argumentSlots;
                        switch (argumentSlots) {
                            case 0:
                                returnValue = calleeMethod.call(object);
                                break;
                            case 1:
                                a = stack.pop();
                                returnValue = calleeMethod.call(object, a);
                                break;
                            case 2:
                                b = stack.pop();
                                a = stack.pop();
                                returnValue = calleeMethod.call(object, a, b);
                                break;
                            case 3:
                                c = stack.pop();
                                b = stack.pop();
                                a = stack.pop();
                                returnValue = calleeMethod.call(object, a, b, c);
                                break;
                            default:
                                J2ME.Debug.assertUnreachable("Unexpected number of arguments");
                                break;
                        }
                        stack.pop();
                        if (!release) {
                            checkReturnValue(calleeMethodInfo, returnValue);
                        }
                        if (U) {
                            return;
                        }
                        if (calleeMethodInfo.returnKind !== 9 /* Void */) {
                            if (J2ME.isTwoSlot(calleeMethodInfo.returnKind)) {
                                stack.push2(returnValue);
                            }
                            else {
                                stack.push(returnValue);
                            }
                        }
                        break;
                    case 182 /* INVOKEVIRTUAL */:
                    case 183 /* INVOKESPECIAL */:
                    case 184 /* INVOKESTATIC */:
                    case 185 /* INVOKEINTERFACE */:
                        index = frame.read16();
                        if (op === 185 /* INVOKEINTERFACE */) {
                            frame.read16(); // Args Number & Zero
                        }
                        var isStatic = (op === 184 /* INVOKESTATIC */);
                        // Resolve method and do the class init check if necessary.
                        var calleeMethodInfo = mi.classInfo.constantPool.resolveMethod(index, isStatic);
                        // Fast path for some of the most common interpreter call targets.
                        if (calleeMethodInfo.classInfo.getClassNameSlow() === "java/lang/Object" && calleeMethodInfo.name === "<init>") {
                            stack.pop();
                            continue;
                        }
                        if (isStatic) {
                            classInitAndUnwindCheck(calleeMethodInfo.classInfo, lastPC);
                            if (U) {
                                return;
                            }
                        }
                        // Figure out the target method.
                        var calleeTargetMethodInfo = calleeMethodInfo;
                        object = null;
                        var calleeMethod;
                        if (!isStatic) {
                            object = frame.peekInvokeObject(calleeMethodInfo);
                            switch (op) {
                                case 182 /* INVOKEVIRTUAL */:
                                    if (!calleeTargetMethodInfo.hasTwoSlotArguments && calleeTargetMethodInfo.argumentSlots < 4) {
                                        frame.patch(3, 182 /* INVOKEVIRTUAL */, 215 /* RESOLVED_INVOKEVIRTUAL */);
                                    }
                                case 185 /* INVOKEINTERFACE */:
                                    var name = op === 182 /* INVOKEVIRTUAL */ ? calleeMethodInfo.virtualName : calleeMethodInfo.mangledName;
                                    calleeMethod = object[name];
                                    calleeTargetMethodInfo = calleeMethod.methodInfo;
                                    break;
                                case 183 /* INVOKESPECIAL */:
                                    J2ME.checkNull(object);
                                    calleeMethod = J2ME.getLinkedMethod(calleeMethodInfo);
                                    break;
                            }
                        }
                        else {
                            calleeMethod = J2ME.getLinkedMethod(calleeMethodInfo);
                        }
                        // Call method directly in the interpreter if we can.
                        if (calleeTargetMethodInfo && !calleeTargetMethodInfo.isNative && calleeTargetMethodInfo.state !== 1 /* Compiled */) {
                            var calleeFrame = J2ME.Frame.create(calleeTargetMethodInfo, [], 0);
                            J2ME.ArrayUtilities.popManyInto(stack, calleeTargetMethodInfo.consumeArgumentSlots, calleeFrame.local);
                            frames.push(calleeFrame);
                            frame = calleeFrame;
                            mi = frame.methodInfo;
                            mi.stats.interpreterCallCount++;
                            ci = mi.classInfo;
                            rp = ci.constantPool.resolved;
                            stack = frame.stack;
                            lastPC = -1;
                            if (calleeTargetMethodInfo.isSynchronized) {
                                if (!calleeFrame.lockObject) {
                                    frame.lockObject = calleeTargetMethodInfo.isStatic ? calleeTargetMethodInfo.classInfo.getClassObject() : frame.getLocal(0);
                                }
                                ctx.monitorEnter(calleeFrame.lockObject);
                                if (U === 2 /* Pausing */ || U === 3 /* Stopping */) {
                                    return;
                                }
                            }
                            continue;
                        }
                        // Call directy.
                        var returnValue;
                        var argumentSlots = calleeMethodInfo.hasTwoSlotArguments ? -1 : calleeMethodInfo.argumentSlots;
                        switch (argumentSlots) {
                            case 0:
                                returnValue = calleeMethod.call(object);
                                break;
                            case 1:
                                a = stack.pop();
                                returnValue = calleeMethod.call(object, a);
                                break;
                            case 2:
                                b = stack.pop();
                                a = stack.pop();
                                returnValue = calleeMethod.call(object, a, b);
                                break;
                            case 3:
                                c = stack.pop();
                                b = stack.pop();
                                a = stack.pop();
                                returnValue = calleeMethod.call(object, a, b, c);
                                break;
                            default:
                                if (calleeMethodInfo.hasTwoSlotArguments) {
                                    frame.popArgumentsInto(calleeMethodInfo, argArray);
                                }
                                else {
                                    popManyInto(stack, calleeMethodInfo.argumentSlots, argArray);
                                }
                                var returnValue = calleeMethod.apply(object, argArray);
                        }
                        if (!isStatic) {
                            stack.pop();
                        }
                        if (!release) {
                            checkReturnValue(calleeMethodInfo, returnValue);
                        }
                        if (U) {
                            return;
                        }
                        if (calleeMethodInfo.returnKind !== 9 /* Void */) {
                            if (J2ME.isTwoSlot(calleeMethodInfo.returnKind)) {
                                stack.push2(returnValue);
                            }
                            else {
                                stack.push(returnValue);
                            }
                        }
                        break;
                    case 173 /* LRETURN */:
                    case 175 /* DRETURN */:
                        returnValue = stack.pop();
                    case 172 /* IRETURN */:
                    case 174 /* FRETURN */:
                    case 176 /* ARETURN */:
                        returnValue = stack.pop();
                    case 177 /* RETURN */:
                        var callee = frames.pop();
                        if (callee.lockObject) {
                            ctx.monitorExit(callee.lockObject);
                        }
                        callee.free();
                        frame = frames[frames.length - 1];
                        if (J2ME.Frame.isMarker(frame)) {
                            if (op === 177 /* RETURN */) {
                                return undefined;
                            }
                            return returnValue;
                        }
                        mi = frame.methodInfo;
                        ci = mi.classInfo;
                        rp = ci.constantPool.resolved;
                        stack = frame.stack;
                        lastPC = -1;
                        if (op === 177 /* RETURN */) {
                        }
                        else if (op === 173 /* LRETURN */ || op === 175 /* DRETURN */) {
                            stack.push2(returnValue);
                        }
                        else {
                            stack.push(returnValue);
                        }
                        break;
                    default:
                        var opName = Bytecodes[op];
                        throw new Error("Opcode " + opName + " [" + op + "] not supported.");
                }
            }
            catch (e) {
                // This can happen if we OSR into a frame that is right after a marker
                // frame. If an exception occurs in this frame, then we end up here and
                // the current frame is a marker frame, so we'll need to rethrow.
                if (J2ME.Frame.isMarker(ctx.current())) {
                    throw e;
                }
                e = J2ME.translateException(e);
                if (!e.klass) {
                    throw e;
                }
                tryCatch(e);
                frame = ctx.current();
                assert(!J2ME.Frame.isMarker(frame));
                mi = frame.methodInfo;
                ci = mi.classInfo;
                rp = ci.constantPool.resolved;
                stack = frame.stack;
                lastPC = -1;
                continue;
            }
        }
    }
    J2ME.interpret = interpret;
    var VM = (function () {
        function VM() {
        }
        VM.execute = interpret;
        VM.Yield = { toString: function () {
            return "YIELD";
        } };
        VM.Pause = { toString: function () {
            return "PAUSE";
        } };
        VM.DEBUG_PRINT_ALL_EXCEPTIONS = false;
        return VM;
    })();
    J2ME.VM = VM;
})(J2ME || (J2ME = {}));
var VM = J2ME.VM;
/*
 node-jvm
 Copyright (c) 2013 Yaroslav Gaponov <yaroslav.gaponov@gmail.com>
*/
var J2ME;
(function (J2ME) {
    var assert = J2ME.Debug.assert;
    var Bytecodes = J2ME.Bytecode.Bytecodes;
    (function (WriterFlags) {
        WriterFlags[WriterFlags["None"] = 0x00] = "None";
        WriterFlags[WriterFlags["Trace"] = 0x01] = "Trace";
        WriterFlags[WriterFlags["Link"] = 0x02] = "Link";
        WriterFlags[WriterFlags["Init"] = 0x04] = "Init";
        WriterFlags[WriterFlags["Perf"] = 0x08] = "Perf";
        WriterFlags[WriterFlags["Load"] = 0x10] = "Load";
        WriterFlags[WriterFlags["JIT"] = 0x20] = "JIT";
        WriterFlags[WriterFlags["Code"] = 0x40] = "Code";
        WriterFlags[WriterFlags["Thread"] = 0x80] = "Thread";
        WriterFlags[WriterFlags["All"] = WriterFlags.Trace | WriterFlags.Link | WriterFlags.Init | WriterFlags.Perf | WriterFlags.Load | WriterFlags.JIT | WriterFlags.Code | WriterFlags.Thread] = "All";
    })(J2ME.WriterFlags || (J2ME.WriterFlags = {}));
    var WriterFlags = J2ME.WriterFlags;
    /**
     * Toggle VM tracing here.
     */
    J2ME.writers = 0 /* None */;
    Array.prototype.push2 = function (value) {
        this.push(value);
        this.push(null);
        return value;
    };
    Array.prototype.pop2 = function () {
        this.pop();
        return this.pop();
    };
    Array.prototype.pushKind = function (kind, value) {
        if (J2ME.isTwoSlot(kind)) {
            this.push2(value);
            return;
        }
        this.push(value);
    };
    Array.prototype.popKind = function (kind) {
        if (J2ME.isTwoSlot(kind)) {
            return this.pop2();
        }
        return this.pop();
    };
    // A convenience function for retrieving values in reverse order
    // from the end of the stack.  stack.read(1) returns the topmost item
    // on the stack, while stack.read(2) returns the one underneath it.
    Array.prototype.read = function (i) {
        return this[this.length - i];
    };
    J2ME.frameCount = 0;
    var Frame = (function () {
        function Frame(methodInfo, local, localBase) {
            J2ME.frameCount++;
            this.reset(methodInfo, local, localBase);
        }
        Frame.isMarker = function (frame) {
            return frame.methodInfo === null;
        };
        Frame.prototype.reset = function (methodInfo, local, localBase) {
            this.methodInfo = methodInfo;
            this.cp = methodInfo ? methodInfo.classInfo.constantPool : null;
            this.code = methodInfo ? methodInfo.codeAttribute.code : null;
            this.pc = 0;
            this.opPC = 0;
            this.stack = [];
            this.local = local;
            this.localBase = localBase;
            this.lockObject = null;
        };
        Frame.create = function (methodInfo, local, localBase) {
            var dirtyStack = Frame.dirtyStack;
            if (dirtyStack.length) {
                var frame = dirtyStack.pop();
                frame.reset(methodInfo, local, localBase);
                return frame;
            }
            else {
                return new Frame(methodInfo, local, localBase);
            }
        };
        Frame.prototype.free = function () {
            release || assert(!Frame.isMarker(this));
            Frame.dirtyStack.push(this);
        };
        Frame.prototype.getLocal = function (i) {
            return this.local[this.localBase + i];
        };
        Frame.prototype.setLocal = function (i, value) {
            this.local[this.localBase + i] = value;
        };
        Frame.prototype.incLocal = function (i, value) {
            var j = this.localBase + i;
            this.local[j] = this.local[j] + value | 0;
        };
        Frame.prototype.read8 = function () {
            return this.code[this.pc++];
        };
        Frame.prototype.peek8 = function () {
            return this.code[this.pc];
        };
        Frame.prototype.read16 = function () {
            var code = this.code;
            return code[this.pc++] << 8 | code[this.pc++];
        };
        Frame.prototype.patch = function (offset, oldValue, newValue) {
            release || assert(this.code[this.pc - offset] === oldValue);
            this.code[this.pc - offset] = newValue;
        };
        Frame.prototype.read32 = function () {
            return this.read32Signed() >>> 0;
        };
        Frame.prototype.read8Signed = function () {
            return this.code[this.pc++] << 24 >> 24;
        };
        Frame.prototype.read16Signed = function () {
            var pc = this.pc;
            var code = this.code;
            this.pc = pc + 2;
            return (code[pc] << 8 | code[pc + 1]) << 16 >> 16;
        };
        Frame.prototype.readTargetPC = function () {
            var pc = this.pc;
            var code = this.code;
            this.pc = pc + 2;
            var offset = (code[pc] << 8 | code[pc + 1]) << 16 >> 16;
            return pc - 1 + offset;
        };
        Frame.prototype.read32Signed = function () {
            return this.read16() << 16 | this.read16();
        };
        Frame.prototype.tableSwitch = function () {
            var start = this.pc;
            while ((this.pc & 3) != 0) {
                this.pc++;
            }
            var def = this.read32Signed();
            var low = this.read32Signed();
            var high = this.read32Signed();
            var value = this.stack.pop();
            var pc;
            if (value < low || value > high) {
                pc = def;
            }
            else {
                this.pc += (value - low) << 2;
                pc = this.read32Signed();
            }
            return start - 1 + pc;
        };
        Frame.prototype.lookupSwitch = function () {
            var start = this.pc;
            while ((this.pc & 3) != 0) {
                this.pc++;
            }
            var pc = this.read32Signed();
            var size = this.read32();
            var value = this.stack.pop();
            lookup: for (var i = 0; i < size; i++) {
                var key = this.read32Signed();
                var offset = this.read32Signed();
                if (key === value) {
                    pc = offset;
                }
                if (key >= value) {
                    break lookup;
                }
            }
            return start - 1 + pc;
        };
        Frame.prototype.wide = function () {
            var stack = this.stack;
            var op = this.read8();
            switch (op) {
                case 21 /* ILOAD */:
                case 23 /* FLOAD */:
                case 25 /* ALOAD */:
                    stack.push(this.getLocal(this.read16()));
                    break;
                case 22 /* LLOAD */:
                case 24 /* DLOAD */:
                    stack.push2(this.getLocal(this.read16()));
                    break;
                case 54 /* ISTORE */:
                case 56 /* FSTORE */:
                case 58 /* ASTORE */:
                    this.setLocal(this.read16(), stack.pop());
                    break;
                case 55 /* LSTORE */:
                case 57 /* DSTORE */:
                    this.setLocal(this.read16(), stack.pop2());
                    break;
                case 132 /* IINC */:
                    var index = this.read16();
                    var value = this.read16Signed();
                    this.setLocal(index, this.getLocal(index) + value);
                    break;
                case 169 /* RET */:
                    this.pc = this.getLocal(this.read16());
                    break;
                default:
                    var opName = Bytecodes[op];
                    throw new Error("Wide opcode " + opName + " [" + op + "] not supported.");
            }
        };
        /**
         * Returns the |object| on which a call to the specified |methodInfo| would be
         * called.
         */
        Frame.prototype.peekInvokeObject = function (methodInfo) {
            release || assert(!methodInfo.isStatic);
            var i = this.stack.length - methodInfo.argumentSlots - 1;
            release || assert(i >= 0);
            release || assert(this.stack[i] !== undefined);
            return this.stack[i];
        };
        Frame.prototype.popArgumentsInto = function (methodInfo, args) {
            var stack = this.stack;
            var signatureKinds = methodInfo.signatureKinds;
            var argumentSlots = methodInfo.argumentSlots;
            for (var i = 1, j = stack.length - argumentSlots, k = 0; i < signatureKinds.length; i++) {
                args[k++] = stack[j++];
                if (J2ME.isTwoSlot(signatureKinds[i])) {
                    j++;
                }
            }
            release || assert(j === stack.length && k === signatureKinds.length - 1);
            stack.length -= argumentSlots;
            args.length = k;
            return args;
        };
        Frame.prototype.toString = function () {
            return this.methodInfo.implKey + " " + this.pc;
        };
        Frame.prototype.trace = function (writer) {
            var localStr = this.local.map(function (x) {
                return J2ME.toDebugString(x);
            }).join(", ");
            var stackStr = this.stack.map(function (x) {
                return J2ME.toDebugString(x);
            }).join(", ");
            writer.writeLn(("" + this.pc).padLeft(" ", 4) + " " + localStr + " | " + stackStr);
        };
        Frame.dirtyStack = [];
        /**
         * Denotes the start of the context frame stack.
         */
        Frame.Start = Frame.create(null, null, 0);
        /**
         * Marks a frame set.
         */
        Frame.Marker = Frame.create(null, null, 0);
        return Frame;
    })();
    J2ME.Frame = Frame;
    var Context = (function () {
        function Context(runtime) {
            this.runtime = runtime;
            var id = this.id = Context._nextId++;
            this.frames = [];
            this.bailoutFrames = [];
            this.runtime = runtime;
            this.runtime.addContext(this);
            this.writer = new J2ME.IndentingWriter(false, function (s) {
                console.log(s);
            });
        }
        Context.color = function (id) {
            if (inBrowser) {
                return id;
            }
            return Context._colors[id % Context._colors.length] + id + J2ME.IndentingWriter.ENDC;
        };
        Context.currentContextPrefix = function () {
            if ($) {
                return Context.color($.id) + ":" + Context.color($.ctx.id);
            }
            return "";
        };
        /**
         * Sets global writers. Uncomment these if you want to see trace output.
         */
        Context.setWriters = function (writer) {
            J2ME.traceWriter = J2ME.writers & 1 /* Trace */ ? writer : null;
            J2ME.perfWriter = J2ME.writers & 8 /* Perf */ ? writer : null;
            J2ME.linkWriter = J2ME.writers & 2 /* Link */ ? writer : null;
            J2ME.jitWriter = J2ME.writers & 32 /* JIT */ ? writer : null;
            J2ME.codeWriter = J2ME.writers & 64 /* Code */ ? writer : null;
            J2ME.initWriter = J2ME.writers & 4 /* Init */ ? writer : null;
            J2ME.threadWriter = J2ME.writers & 128 /* Thread */ ? writer : null;
            J2ME.loadWriter = J2ME.writers & 16 /* Load */ ? writer : null;
        };
        Context.prototype.getPriority = function () {
            if (this.thread) {
                return this.thread.priority;
            }
            return J2ME.NORMAL_PRIORITY;
        };
        Context.prototype.kill = function () {
            if (this.thread) {
                this.thread.alive = false;
            }
            this.runtime.removeContext(this);
        };
        Context.prototype.current = function () {
            var frames = this.frames;
            return frames[frames.length - 1];
        };
        Context.prototype.popMarkerFrame = function () {
            var marker = this.frames.pop();
            release || assert(Frame.isMarker(marker));
        };
        Context.prototype.executeFrame = function (frame) {
            var frames = this.frames;
            frames.push(Frame.Marker, frame);
            try {
                var returnValue = VM.execute();
                if (U) {
                    while (true) {
                        var frame = frames.pop();
                        if (Frame.isMarker(frame)) {
                            break;
                        }
                        this.bailoutFrames.unshift(frame);
                    }
                    return;
                }
            }
            catch (e) {
                this.popMarkerFrame();
                throwHelper(e);
            }
            this.popMarkerFrame();
            return returnValue;
        };
        Context.prototype.createException = function (className, message) {
            if (!message) {
                message = "";
            }
            message = "" + message;
            var classInfo = J2ME.CLASSES.loadAndLinkClass(className);
            J2ME.classInitCheck(classInfo);
            release || J2ME.Debug.assert(!U, "Unexpected unwind during createException.");
            J2ME.runtimeCounter && J2ME.runtimeCounter.count("createException " + className);
            var exception = new classInfo.klass();
            var methodInfo = classInfo.getMethodByNameString("<init>", "(Ljava/lang/String;)V");
            J2ME.getLinkedMethod(methodInfo).call(exception, message ? J2ME.newString(message) : null);
            return exception;
        };
        Context.prototype.setAsCurrentContext = function () {
            if ($) {
                J2ME.threadTimeline && J2ME.threadTimeline.leave();
            }
            J2ME.threadTimeline && J2ME.threadTimeline.enter(this.runtime.id + ":" + this.id);
            $ = this.runtime;
            if ($.ctx === this) {
                return;
            }
            $.ctx = this;
            Context.setWriters(this.writer);
        };
        Context.prototype.clearCurrentContext = function () {
            if ($) {
                J2ME.threadTimeline && J2ME.threadTimeline.leave();
            }
            $ = null;
            Context.setWriters(Context.writer);
        };
        Context.prototype.start = function (frames) {
            frames.unshift(Frame.Start);
            this.frames = frames;
            this.resume();
        };
        Context.prototype.execute = function () {
            this.setAsCurrentContext();
            do {
                VM.execute();
                if (U) {
                    if (this.bailoutFrames.length) {
                        Array.prototype.push.apply(this.frames, this.bailoutFrames);
                        this.bailoutFrames = [];
                    }
                    var frames = this.frames;
                    switch (U) {
                        case 1 /* Yielding */:
                            this.resume();
                            break;
                        case 2 /* Pausing */:
                            break;
                        case 3 /* Stopping */:
                            this.clearCurrentContext();
                            this.kill();
                            return;
                    }
                    U = 0 /* Running */;
                    this.clearCurrentContext();
                    return;
                }
            } while (this.current() !== Frame.Start);
            this.kill();
        };
        Context.prototype.resume = function () {
            J2ME.Runtime.scheduleRunningContext(this);
        };
        Context.prototype.block = function (obj, queue, lockLevel) {
            obj._lock[queue].push(this);
            this.lockLevel = lockLevel;
            $.pause("block");
        };
        Context.prototype.unblock = function (obj, queue, notifyAll) {
            while (obj._lock[queue].length) {
                var ctx = obj._lock[queue].pop();
                if (!ctx)
                    continue;
                ctx.wakeup(obj);
                if (!notifyAll)
                    break;
            }
        };
        Context.prototype.wakeup = function (obj) {
            if (this.lockTimeout !== null) {
                window.clearTimeout(this.lockTimeout);
                this.lockTimeout = null;
            }
            if (obj._lock.level !== 0) {
                obj._lock.ready.push(this);
            }
            else {
                while (this.lockLevel-- > 0) {
                    this.monitorEnter(obj);
                    if (U === 2 /* Pausing */ || U === 3 /* Stopping */) {
                        return;
                    }
                }
                this.resume();
            }
        };
        Context.prototype.monitorEnter = function (object) {
            var lock = object._lock;
            if (lock && lock.level === 0) {
                lock.thread = this.thread;
                lock.level = 1;
                return;
            }
            if (!lock) {
                object._lock = new J2ME.Lock(this.thread, 1);
                return;
            }
            if (lock.thread === this.thread) {
                ++lock.level;
                return;
            }
            this.block(object, "ready", 1);
        };
        Context.prototype.monitorExit = function (object) {
            var lock = object._lock;
            if (lock.level === 1 && lock.ready.length === 0) {
                lock.level = 0;
                return;
            }
            if (lock.thread !== this.thread)
                throw $.newIllegalMonitorStateException();
            if (--lock.level > 0) {
                return;
            }
            this.unblock(object, "ready", false);
        };
        Context.prototype.wait = function (object, timeout) {
            var lock = object._lock;
            if (timeout < 0)
                throw $.newIllegalArgumentException();
            if (!lock || lock.thread !== this.thread)
                throw $.newIllegalMonitorStateException();
            var lockLevel = lock.level;
            for (var i = lockLevel; i > 0; i--) {
                this.monitorExit(object);
            }
            if (timeout) {
                var self = this;
                this.lockTimeout = window.setTimeout(function () {
                    for (var i = 0; i < lock.waiting.length; i++) {
                        var ctx = lock.waiting[i];
                        if (ctx === self) {
                            lock.waiting[i] = null;
                            ctx.wakeup(object);
                        }
                    }
                }, timeout);
            }
            else {
                this.lockTimeout = null;
            }
            this.block(object, "waiting", lockLevel);
        };
        Context.prototype.notify = function (obj, notifyAll) {
            if (!obj._lock || obj._lock.thread !== this.thread)
                throw $.newIllegalMonitorStateException();
            this.unblock(obj, "waiting", notifyAll);
        };
        Context.prototype.bailout = function (methodInfo, pc, nextPC, local, stack, lockObject) {
            // perfWriter && perfWriter.writeLn("C Unwind: " + methodInfo.implKey);
            var frame = Frame.create(methodInfo, local, 0);
            frame.stack = stack;
            frame.pc = nextPC;
            frame.opPC = pc;
            frame.lockObject = lockObject;
            this.bailoutFrames.unshift(frame);
        };
        Context._nextId = 0;
        Context._colors = [
            J2ME.IndentingWriter.PURPLE,
            J2ME.IndentingWriter.YELLOW,
            J2ME.IndentingWriter.GREEN,
            J2ME.IndentingWriter.RED,
            J2ME.IndentingWriter.BOLD_RED
        ];
        Context.writer = new J2ME.IndentingWriter(false, function (s) {
            console.log(s);
        });
        return Context;
    })();
    J2ME.Context = Context;
})(J2ME || (J2ME = {}));
var Context = J2ME.Context;
var Frame = J2ME.Frame;
function countTimeline(message, object) {
}
function enterTimeline(message) {
}
function leaveTimeline(message) {
}
var J2ME;
(function (J2ME) {
    var CompilerBailout = (function () {
        function CompilerBailout(message) {
            this.message = message;
            // ...
        }
        CompilerBailout.prototype.toString = function () {
            return "CompilerBailout: " + this.message;
        };
        return CompilerBailout;
    })();
    J2ME.CompilerBailout = CompilerBailout;
})(J2ME || (J2ME = {}));
var J2ME;
(function (J2ME) {
    var assert = J2ME.Debug.assert;
    var Bytecodes = J2ME.Bytecode.Bytecodes;
    var BytecodeStream = J2ME.Bytecode.BytecodeStream;
    var yieldWriter = null; // stderrWriter;
    J2ME.yieldCounter = null; // new Metrics.Counter(true);
    J2ME.yieldGraph = null; // Object.create(null);
    (function (YieldReason) {
        YieldReason[YieldReason["None"] = 0] = "None";
        YieldReason[YieldReason["Root"] = 1] = "Root";
        YieldReason[YieldReason["Synchronized"] = 2] = "Synchronized";
        YieldReason[YieldReason["MonitorEnterExit"] = 3] = "MonitorEnterExit";
        YieldReason[YieldReason["Virtual"] = 4] = "Virtual";
        YieldReason[YieldReason["Cycle"] = 5] = "Cycle";
        YieldReason[YieldReason["Yield"] = 6] = "Yield";
        YieldReason[YieldReason["Likely"] = 7] = "Likely";
    })(J2ME.YieldReason || (J2ME.YieldReason = {}));
    var YieldReason = J2ME.YieldReason;
    /**
     * Root set of methods that can yield. Keep this up to date or else the compiler will not generate yield code
     * at the right spots.
     */
    J2ME.yieldMap = {
        "com/sun/midp/main/MIDletSuiteUtils.vmBeginStartUp.(I)V": 1 /* Root */,
        "com/sun/midp/lcdui/DisplayDevice.gainedForeground0.(II)V": 1 /* Root */,
        "com/sun/cdc/io/j2me/file/DefaultFileHandler.openForRead.()V": 1 /* Root */,
        "com/sun/cdc/io/j2me/file/DefaultFileHandler.openForWrite.()V": 1 /* Root */,
        "java/lang/Thread.sleep.(J)V": 1 /* Root */,
        "com/sun/cldc/isolate/Isolate.waitStatus.(I)V": 1 /* Root */,
        "com/sun/j2me/location/PlatformLocationProvider.waitForNewLocation.(IJ)Z": 1 /* Root */,
        "com/sun/javame/sensor/NativeChannel.doMeasureData.(II)[B": 1 /* Root */,
        "com/sun/midp/links/LinkPortal.getLinkCount0.()I": 1 /* Root */,
        "com/sun/midp/links/Link.receive0.(Lcom/sun/midp/links/LinkMessage;Lcom/sun/midp/links/Link;)V": 1 /* Root */,
        "com/nokia/mid/impl/jms/core/Launcher.handleContent.(Ljava/lang/String;)V": 1 /* Root */,
        "com/sun/midp/util/isolate/InterIsolateMutex.lock0.(I)V": 1 /* Root */,
        "com/sun/midp/events/NativeEventMonitor.waitForNativeEvent.(Lcom/sun/midp/events/NativeEvent;)I": 1 /* Root */,
        "com/sun/midp/io/j2me/push/ConnectionRegistry.poll0.(J)I": 1 /* Root */,
        "com/sun/midp/rms/RecordStoreFile.openRecordStoreFile.(Ljava/lang/String;Ljava/lang/String;I)I": 1 /* Root */,
        "com/sun/midp/io/j2me/storage/RandomAccessStream.open.(Ljava/lang/String;I)I": 1 /* Root */,
        "javax/microedition/lcdui/ImageDataFactory.createImmutableImageDecodeImage.(Ljavax/microedition/lcdui/ImageData;[BII)V": 1 /* Root */,
        "com/nokia/mid/ui/TextEditorThread.getNextDirtyEditor.()Lcom/nokia/mid/ui/TextEditor;": 1 /* Root */,
        "com/nokia/mid/ui/TextEditor.setFocus.(Z)V": 1 /* Root */,
        "com/nokia/mid/ui/VKVisibilityNotificationRunnable.sleepUntilVKVisibilityChange.()Z": 1 /* Root */,
        "com/nokia/mid/s40/bg/BGUtils.waitUserInteraction.()V": 1 /* Root */,
        "org/mozilla/io/LocalMsgConnection.init.(Ljava/lang/String;)V": 1 /* Root */,
        "org/mozilla/io/LocalMsgConnection.receiveData.([B)I": 1 /* Root */,
        "org/mozilla/io/LocalMsgConnection.waitConnection.()V": 1 /* Root */,
        "com/sun/mmedia/DirectPlayer.nGetDuration.(I)I": 1 /* Root */,
        "com/sun/mmedia/DirectPlayer.nGetMediaTime.(I)I": 1 /* Root */,
        "com/sun/mmedia/PlayerImpl.nRealize.(ILjava/lang/String;)Z": 1 /* Root */,
        "com/sun/mmedia/DirectRecord.nPause.(I)I": 1 /* Root */,
        "com/sun/mmedia/DirectRecord.nStop.(I)I": 1 /* Root */,
        "com/sun/mmedia/DirectRecord.nClose.(I)I": 1 /* Root */,
        "com/sun/mmedia/DirectRecord.nStart.(I)I": 1 /* Root */,
        "com/sun/midp/io/j2me/socket/Protocol.open0.([BI)V": 1 /* Root */,
        "com/sun/midp/io/j2me/socket/Protocol.read0.([BII)I": 1 /* Root */,
        "com/sun/midp/io/j2me/socket/Protocol.write0.([BII)I": 1 /* Root */,
        "com/sun/midp/io/j2me/socket/Protocol.close0.()V": 1 /* Root */,
        "com/sun/midp/io/j2me/sms/Protocol.receive0.(IIILcom/sun/midp/io/j2me/sms/Protocol$SMSPacket;)I": 1 /* Root */,
        "com/sun/midp/io/j2me/sms/Protocol.send0.(IILjava/lang/String;II[B)I": 1 /* Root */,
        "com/sun/j2me/pim/PIMProxy.getNextItemDescription0.(I[I)Z": 1 /* Root */,
        "java/lang/Object.wait.(J)V": 1 /* Root */,
        "java/lang/Class.invoke_clinit.()V": 1 /* Root */,
        "java/lang/Thread.yield.()V": 1 /* Root */,
        "java/lang/Thread.start0.()V": 1 /* Root */,
        "java/lang/Class.forName0.(Ljava/lang/String;)V": 1 /* Root */,
        "java/lang/Class.newInstance1.(Ljava/lang/Object;)V": 1 /* Root */,
        // Test Files:
        "gnu/testlet/vm/NativeTest.throwExceptionAfterPause.()V": 1 /* Root */,
        "gnu/testlet/vm/NativeTest.returnAfterPause.()I": 1 /* Root */,
        "gnu/testlet/vm/NativeTest.dumbPipe.()Z": 1 /* Root */,
        "gnu/testlet/TestHarness.getNumDifferingPixels.(Ljava/lang/String;)I": 1 /* Root */,
    };
    J2ME.yieldVirtualMap = {};
    function isFinalClass(classInfo) {
        return classInfo.isFinal;
        // XXX The following can only be used if every class in all jars is loaded.
        /*
        var result = classInfo.isFinal;
        if (!result) {
          result = classInfo.subClasses.length === 0;
        }
        // console.log(classInfo.getClassNameSlow() + " is final class " + result);
        return result;
        */
    }
    J2ME.isFinalClass = isFinalClass;
    function isFinalMethod(methodInfo) {
        if (isFinalClass(methodInfo.classInfo)) {
            return true;
        }
        return methodInfo.isFinal;
        // XXX The following can only be used if every class in all jars is loaded.
        /*
        var result = methodInfo.isFinal;
        if (!result) {
          var classInfo = methodInfo.classInfo;
          var allSubClasses = classInfo.allSubClasses;
          result = true;
          for (var i = 0; i < allSubClasses.length; i++) {
            var subClassMethods = allSubClasses[i].getMethods();
            for (var j = 0; j < subClassMethods.length; j++) {
              var subClassMethodInfo = subClassMethods[j];
              if (methodInfo.name === subClassMethodInfo.name &&
                  methodInfo.signature === subClassMethodInfo.signature) {
                result = false;
                break;
              }
            }
          }
        }
        return result;
        */
    }
    J2ME.isFinalMethod = isFinalMethod;
    function gatherCallees(callees, classInfo, methodInfo) {
        var methods = classInfo.getMethods();
        for (var i = 0; i < methods.length; i++) {
            var method = methods[i];
            if (method.name === methodInfo.name && method.signature === methodInfo.signature) {
                callees.push(method);
            }
        }
        var subClasses = classInfo.subClasses;
        for (var i = 0; i < subClasses.length; i++) {
            var subClass = subClasses[i];
            gatherCallees(callees, subClass, methodInfo);
        }
    }
    J2ME.gatherCallees = gatherCallees;
    function isStaticallyBound(op, methodInfo) {
        // INVOKESPECIAL and INVOKESTATIC are always statically bound.
        if (op === 183 /* INVOKESPECIAL */ || op === 184 /* INVOKESTATIC */) {
            return true;
        }
        // INVOKEVIRTUAL is only statically bound if its class is final.
        if (op === 182 /* INVOKEVIRTUAL */ && isFinalMethod(methodInfo)) {
            return true;
        }
        return false;
    }
    J2ME.isStaticallyBound = isStaticallyBound;
    // Used to prevent cycles.
    var checkingForCanYield = Object.create(null);
    function addDependency(callee, caller, reason) {
        if (!J2ME.yieldGraph) {
            return;
        }
        if (!J2ME.yieldGraph[callee.implKey]) {
            J2ME.yieldGraph[callee.implKey] = Object.create(null);
        }
        var node = J2ME.yieldGraph[callee.implKey];
        node[caller.implKey] = reason;
    }
    function countDescendents(root) {
        var visited = Object.create(null);
        var visiting = Object.create(null);
        var w = new J2ME.IndentingWriter();
        function visit(name) {
            if (!J2ME.yieldGraph[name]) {
                return 0;
            }
            if (visiting[name]) {
                return 0;
            }
            var n = 0;
            visiting[name] = true;
            for (var k in J2ME.yieldGraph[name]) {
                n++;
                n += visit(k);
            }
            visiting[name] = false;
            return n;
        }
        return visit(root);
    }
    function traceYieldGraph(writer) {
        writer.writeLn(JSON.stringify(J2ME.yieldGraph, null, 2));
        var pairs = [];
        for (var k in J2ME.yieldGraph) {
            pairs.push([k, countDescendents(k)]);
        }
        pairs.sort(function (a, b) {
            return b[1] - a[1];
        });
        for (var i = 0; i < pairs.length; i++) {
            var p = pairs[i];
            writer.writeLn(pairs[i][0] + ": " + pairs[i][1]);
        }
    }
    J2ME.traceYieldGraph = traceYieldGraph;
    function canStaticInitializerYield(classInfo) {
        var result = 0 /* None */;
        while (classInfo) {
            var staticInitializer = classInfo.staticInitializer;
            classInfo = classInfo.superClass;
            if (!staticInitializer) {
                continue;
            }
            result = canYield(staticInitializer);
            if (result !== 0 /* None */) {
                return result;
            }
        }
        return result;
    }
    J2ME.canStaticInitializerYield = canStaticInitializerYield;
    function canYield(methodInfo) {
        if (J2ME.phase === 0 /* Runtime */ && methodInfo.codeAttribute && methodInfo.codeAttribute.code.length > 100) {
            // Large methods are likely to yield, so don't even bother checking at runtime.
            return 7 /* Likely */;
        }
        yieldWriter && yieldWriter.enter("> " + methodInfo.implKey);
        if (J2ME.yieldMap[methodInfo.implKey] !== undefined) {
            yieldWriter && yieldWriter.leave("< " + methodInfo.implKey + " " + YieldReason[J2ME.yieldMap[methodInfo.implKey]] + " cached.");
            return J2ME.yieldMap[methodInfo.implKey];
        }
        if (methodInfo.isSynchronized) {
            J2ME.yieldCounter && J2ME.yieldCounter.count("Method: " + methodInfo.implKey + " yields because it is synchronized.");
            yieldWriter && yieldWriter.leave("< " + methodInfo.implKey + " " + YieldReason[2 /* Synchronized */]);
            return J2ME.yieldMap[methodInfo.implKey] = 2 /* Synchronized */;
        }
        if (checkingForCanYield[methodInfo.implKey]) {
            yieldWriter && yieldWriter.leave("< " + methodInfo.implKey + " " + YieldReason[5 /* Cycle */]);
            return 5 /* Cycle */;
        }
        if (!methodInfo.codeAttribute) {
            assert(methodInfo.isNative || methodInfo.isAbstract);
            yieldWriter && yieldWriter.leave("< " + methodInfo.implKey + " Abstract");
            return J2ME.yieldMap[methodInfo.implKey] = 0 /* None */;
        }
        checkingForCanYield[methodInfo.implKey] = true;
        var constantPool = methodInfo.classInfo.constantPool;
        try {
            var result = 0 /* None */;
            var stream = new BytecodeStream(methodInfo.codeAttribute.code);
            stream.setBCI(0);
            while (stream.currentBCI < methodInfo.codeAttribute.code.length) {
                var op = stream.currentBC();
                switch (op) {
                    case 187 /* NEW */:
                        var classInfo = constantPool.resolveClass(stream.readCPI());
                        result = canStaticInitializerYield(classInfo);
                        break;
                    case 178 /* GETSTATIC */:
                    case 179 /* PUTSTATIC */:
                        var fieldInfo = constantPool.resolveField(stream.readCPI(), true);
                        var classInfo = fieldInfo.classInfo;
                        result = canStaticInitializerYield(classInfo);
                        break;
                    case 194 /* MONITORENTER */:
                    case 195 /* MONITOREXIT */:
                        result = 3 /* MonitorEnterExit */;
                        J2ME.yieldCounter && J2ME.yieldCounter.count("Method: " + methodInfo.implKey + " yields because it has monitor enter/exit.");
                        break;
                    case 185 /* INVOKEINTERFACE */:
                        result = 4 /* Virtual */;
                        if (result) {
                            J2ME.yieldCounter && J2ME.yieldCounter.count("Method: " + methodInfo.implKey + " yields because it has an invoke interface.");
                        }
                        break;
                    case 182 /* INVOKEVIRTUAL */:
                    case 215 /* RESOLVED_INVOKEVIRTUAL */:
                    case 183 /* INVOKESPECIAL */:
                    case 184 /* INVOKESTATIC */:
                        var cpi = stream.readCPI();
                        var callee = constantPool.resolveMethod(cpi, op === 184 /* INVOKESTATIC */);
                        if (op !== 184 /* INVOKESTATIC */) {
                            if (J2ME.yieldVirtualMap[methodInfo.implKey] === 0 /* None */) {
                                result = 0 /* None */;
                                break;
                            }
                        }
                        if (op === 184 /* INVOKESTATIC */) {
                            result = canStaticInitializerYield(methodInfo.classInfo);
                            if (result !== 0 /* None */) {
                                break;
                            }
                        }
                        if (!isStaticallyBound(op, callee)) {
                            var callees = [];
                            result = 4 /* Virtual */;
                            if (false) {
                                result = 0 /* None */;
                                gatherCallees(callees, callee.classInfo, callee);
                                yieldWriter && yieldWriter.writeLn("Gather: " + callee.implKey + " " + callees.map(function (x) { return x.implKey; }).join(", "));
                                for (var i = 0; i < callees.length; i++) {
                                    if (canYield(callees[i])) {
                                        yieldWriter && yieldWriter.writeLn("Gathered Method: " + callees[i].implKey + " yields.");
                                        result = 4 /* Virtual */;
                                        break;
                                    }
                                }
                            }
                            if (result !== 0 /* None */) {
                                J2ME.yieldCounter && J2ME.yieldCounter.count("Method: " + methodInfo.implKey + " yields because callee: " + callee.implKey + " is not statically bound.");
                                addDependency(callee, methodInfo, 4 /* Virtual */);
                            }
                            break;
                        }
                        result = canYield(callee);
                        if (result) {
                            J2ME.yieldCounter && J2ME.yieldCounter.count("Callee: " + callee.implKey + " yields.");
                            J2ME.yieldCounter && J2ME.yieldCounter.count("Method: " + methodInfo.implKey + " yields because callee: " + callee.implKey + " can yield.");
                            addDependency(callee, methodInfo, 6 /* Yield */);
                        }
                        break;
                }
                if (result) {
                    break;
                }
                stream.next();
            }
        }
        catch (e) {
            result = 5 /* Cycle */;
        }
        checkingForCanYield[methodInfo.implKey] = false;
        yieldWriter && yieldWriter.leave("< " + methodInfo.implKey + " " + YieldReason[result]);
        return J2ME.yieldMap[methodInfo.implKey] = result;
    }
    J2ME.canYield = canYield;
})(J2ME || (J2ME = {}));
var J2ME;
(function (J2ME) {
    var assert = J2ME.Debug.assert;
    var Bytecodes = J2ME.Bytecode.Bytecodes;
    var Condition = J2ME.Bytecode.Condition;
    var BytecodeStream = J2ME.Bytecode.BytecodeStream;
    var BlockMap = J2ME.Bytecode.BlockMap;
    var ExceptionBlock = J2ME.Bytecode.ExceptionBlock;
    var writer = null; // new IndentingWriter();
    J2ME.baselineCounter = null; // new Metrics.Counter(true);
    /**
     * The preemption check should be quick. We don't always want to measure
     * time so we use a quick counter and mask to determine when to do the
     * more expensive preemption check.
     */
    var preemptionSampleMask = 0xFF;
    /**
     * Expressions to inline for commonly invoked methods.
     */
    var inlineMethods = {
        "java/lang/Object.<init>.()V": "undefined"
    };
    /**
     * These methods have special powers. Methods are added to this set based on the regexp patterns in |privilegedPatterns|.
     */
    var privilegedMethods = {};
    var privilegedPatterns = [
        "com/sun/midp/crypto/SHA*",
        "java/io/DataInputStream*",
        "org/mozilla/internal/Sys*",
    ];
    /**
     * Emits optimization results inline as comments in the generated source.
     */
    var emitDebugInfoComments = false;
    /**
     * Emits control flow and yielding assertions.
     */
    var emitCompilerAssertions = false;
    /**
     * Emits profiling code that counts the number of times a method is invoked.
     */
    var emitCallMethodCounter = false;
    /**
     * Emits profiling code that counts the number of times control flow is dispatched
     * to a basic block.
     */
    var emitCallMethodLoopCounter = false;
    /**
     * Emits array bounds checks. Although this is necessary for correctness, most
     * applications work without them.
     */
    J2ME.emitCheckArrayBounds = true;
    /**
     * Inline calls to runtime methods whenever possible.
     */
    J2ME.inlineRuntimeCalls = true;
    /**
     * Emits array store type checks. Although this is necessary for correctness,
     * most applications work without them.
     */
    J2ME.emitCheckArrayStore = true;
    /**
     * Unsafe methods.
     */
    function isPrivileged(methodInfo) {
        var privileged = privilegedMethods[methodInfo.implKey];
        if (privileged) {
            return true;
        }
        else if (privileged === false) {
            return false;
        }
        for (var i = 0; i < privilegedPatterns.length; i++) {
            if (methodInfo.implKey.match(privilegedPatterns[i])) {
                return privilegedMethods[methodInfo.implKey] = true;
            }
        }
        return privilegedMethods[methodInfo.implKey] = false;
    }
    /**
     * Emits preemption checks for methods that already yield.
     */
    J2ME.emitCheckPreemption = false;
    function baselineCompileMethod(methodInfo, target) {
        var compileExceptions = true;
        var compileSynchronized = true;
        if (!compileExceptions && methodInfo.exception_table_length) {
            throw new Error("Method: " + methodInfo.implKey + " has exception handlers.");
        }
        if (!compileSynchronized && methodInfo.isSynchronized) {
            throw new Error("Method: " + methodInfo.implKey + " is synchronized.");
        }
        writer && writer.writeLn("Compile: " + methodInfo.implKey);
        return new BaselineCompiler(methodInfo, target).compile();
    }
    J2ME.baselineCompileMethod = baselineCompileMethod;
    var Emitter = (function () {
        function Emitter(emitIndent) {
            if (emitIndent === void 0) { emitIndent = true; }
            this._indent = 0;
            this._buffer = [];
            this._emitIndent = emitIndent;
        }
        Emitter.prototype.reset = function () {
            this._buffer.length = 0;
            this._indent = 0;
        };
        Emitter.prototype.enter = function (s) {
            this.writeLn(s);
            this._indent++;
        };
        Emitter.prototype.leave = function (s) {
            this._indent--;
            this.writeLn(s);
        };
        Emitter.prototype.leaveAndEnter = function (s) {
            this._indent--;
            this.writeLn(s);
            this._indent++;
        };
        Emitter.prototype.writeLn = function (s) {
            if (this._emitIndent) {
                var prefix = "";
                for (var i = 0; i < this._indent; i++) {
                    prefix += "  ";
                }
                s = prefix + s;
            }
            this._buffer.push(s);
        };
        Emitter.prototype.writeLns = function (s) {
            var lines = s.split("\n");
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                if (line.length > 0) {
                    this.writeLn(lines[i]);
                }
            }
        };
        Emitter.prototype.writeEmitter = function (emitter) {
            this._buffer.push.apply(this._buffer, emitter._buffer);
        };
        Emitter.prototype.indent = function () {
            this._indent++;
        };
        Emitter.prototype.outdent = function () {
            this._indent--;
        };
        Emitter.prototype.prependLn = function (s) {
            this._buffer.unshift(s);
        };
        Emitter.prototype.toString = function () {
            return this._buffer.join("\n");
        };
        return Emitter;
    })();
    function kindToTypedArrayName(kind) {
        switch (kind) {
            case 4 /* Int */:
                return "Int32Array";
            case 3 /* Char */:
                return "Uint16Array";
            case 2 /* Short */:
                return "Int16Array";
            case 1 /* Byte */:
                return "Int8Array";
            case 0 /* Boolean */:
                return "Uint8Array";
            case 5 /* Float */:
                return "Float32Array";
            case 6 /* Long */:
                return "Array";
            case 7 /* Double */:
                return "Float64Array";
            default:
                throw J2ME.Debug.unexpected(J2ME.Kind[kind]);
        }
    }
    function conditionToOperator(condition) {
        switch (condition) {
            case 0 /* EQ */: return "===";
            case 1 /* NE */: return "!==";
            case 2 /* LT */: return "<";
            case 3 /* LE */: return "<=";
            case 4 /* GT */: return ">";
            case 5 /* GE */: return ">=";
            default:
                J2ME.Debug.unexpected(Condition[condition]);
        }
    }
    function doubleConstant(v) {
        // Check for -0 floats.
        if ((1 / v) < 0) {
            return "-" + Math.abs(v);
        }
        return String(v);
    }
    function longConstant(v) {
        if (v === 0) {
            return "Long.ZERO";
        }
        else if (v === 1) {
            return "Long.ONE";
        }
        return "Long.fromInt(" + v + ")";
    }
    function classConstant(classInfo) {
        // PrimitiveArrayClassInfo have custom mangledNames;
        if (classInfo instanceof J2ME.PrimitiveArrayClassInfo) {
            return classInfo.mangledName;
        }
        if (classInfo instanceof J2ME.ArrayClassInfo) {
            return "AK(" + classConstant(classInfo.elementClass) + ")";
        }
        if (classInfo.mangledName) {
            return classInfo.mangledName;
        }
        release || assert(classInfo.mangledName);
        return classInfo.mangledName;
    }
    /**
     * These bytecodes require stack flushing.
     */
    function needsStackFlushBefore(opcode, sp) {
        switch (opcode) {
            case 89 /* DUP */:
            case 90 /* DUP_X1 */:
            case 91 /* DUP_X2 */:
            case 92 /* DUP2 */:
            case 93 /* DUP2_X1 */:
            case 94 /* DUP2_X2 */:
            case 95 /* SWAP */:
                return true;
        }
        // IINC can increment something that's on the stack, so we need to flush.
        if (opcode === 132 /* IINC */ && sp > 0) {
            return true;
        }
        // All other STORE bytecodes can also modify something that's on the stack. However,
        // since these will pop the stack before the assignment, we only need to care about
        // cases where sp > 1.
        if (J2ME.Bytecode.isStore(opcode) && sp > 1) {
            return true;
        }
        return false;
    }
    (function (Precedence) {
        Precedence[Precedence["Sequence"] = 0] = "Sequence";
        Precedence[Precedence["Assignment"] = 3] = "Assignment";
        Precedence[Precedence["Conditional"] = 4] = "Conditional";
        Precedence[Precedence["LogicalOR"] = 5] = "LogicalOR";
        Precedence[Precedence["LogicalAND"] = 6] = "LogicalAND";
        Precedence[Precedence["BitwiseOR"] = 7] = "BitwiseOR";
        Precedence[Precedence["BitwiseXOR"] = 8] = "BitwiseXOR";
        Precedence[Precedence["BitwiseAND"] = 9] = "BitwiseAND";
        Precedence[Precedence["Equality"] = 10] = "Equality";
        Precedence[Precedence["Relational"] = 11] = "Relational";
        Precedence[Precedence["BitwiseShift"] = 12] = "BitwiseShift";
        Precedence[Precedence["Addition"] = 13] = "Addition";
        Precedence[Precedence["Subtraction"] = 13] = "Subtraction";
        Precedence[Precedence["Multiplication"] = 14] = "Multiplication";
        Precedence[Precedence["Division"] = 14] = "Division";
        Precedence[Precedence["Remainder"] = 14] = "Remainder";
        Precedence[Precedence["UnaryNegation"] = 15] = "UnaryNegation";
        Precedence[Precedence["LogicalNOT"] = 15] = "LogicalNOT";
        Precedence[Precedence["Postfix"] = 16] = "Postfix";
        Precedence[Precedence["Call"] = 17] = "Call";
        Precedence[Precedence["New"] = 18] = "New";
        Precedence[Precedence["Member"] = 18] = "Member";
        Precedence[Precedence["Primary"] = 19] = "Primary";
    })(J2ME.Precedence || (J2ME.Precedence = {}));
    var Precedence = J2ME.Precedence;
    var BaselineCompiler = (function () {
        function BaselineCompiler(methodInfo, target) {
            this.hasOSREntryPoint = false;
            this.methodInfo = methodInfo;
            this.local = [];
            this.variables = {};
            this.pc = 0;
            this.sp = 0;
            this.stack = [];
            this.blockStack = [];
            this.blockStackPrecedence = [];
            this.parameters = [];
            this.referencedClasses = [];
            this.initializedClasses = null;
            this.hasHandlers = methodInfo.exception_table_length > 0;
            this.hasMonitorEnter = false;
            this.blockStackHeightMap = [0];
            this.bodyEmitter = new Emitter(!release);
            this.blockEmitter = new Emitter(!release);
            this.target = target;
            this.hasUnwindThrow = false;
            this.isPrivileged = isPrivileged(this.methodInfo);
        }
        BaselineCompiler.prototype.compile = function () {
            this.blockMap = new BlockMap(this.methodInfo);
            this.blockMap.build();
            Relooper.cleanup();
            Relooper.init();
            var blocks = this.blockMap.blocks;
            for (var i = 0; i < blocks.length; i++) {
                blocks[i].relooperBlockID = Relooper.addBlock("// Block: " + blocks[i].blockID);
            }
            this.entryBlock = blocks[0].relooperBlockID;
            this.emitPrologue();
            this.emitBody();
            var variables = [];
            for (var k in this.variables) {
                if (this.variables[k] !== undefined) {
                    variables.push(k + "=" + this.variables[k]);
                }
                else {
                    variables.push(k);
                }
            }
            if (variables.length > 0) {
                this.bodyEmitter.prependLn("var " + variables.join(",") + ";");
            }
            if (this.hasMonitorEnter) {
                this.bodyEmitter.prependLn("var th=$.ctx.thread;");
            }
            return new J2ME.CompiledMethodInfo(this.parameters, this.bodyEmitter.toString(), this.referencedClasses, this.hasOSREntryPoint ? this.blockMap.getOSREntryPoints() : []);
        };
        BaselineCompiler.prototype.needsVariable = function (name, value) {
            this.variables[name] = value;
        };
        BaselineCompiler.prototype.setSuccessorsBlockStackHeight = function (block, sp) {
            var successors = block.successors;
            for (var i = 0; i < successors.length; i++) {
                var successor = successors[i];
                if (successor instanceof ExceptionBlock || successor.isExceptionEntry) {
                    continue;
                }
                this.setBlockStackHeight(successors[i].startBci, sp);
            }
        };
        // Cache classes known to be initialized as locals.
        BaselineCompiler.prototype.localClassConstant = function (classInfo) {
            if (classInfo !== this.methodInfo.classInfo) {
                return classConstant(classInfo);
            }
            this.needsVariable("k0", classConstant(classInfo));
            return "k0";
        };
        BaselineCompiler.prototype.emitBody = function () {
            var blockMap = this.blockMap;
            writer && blockMap.trace(writer);
            var stream = new BytecodeStream(this.methodInfo.codeAttribute.code);
            var needsTry = this.hasHandlers || this.methodInfo.isSynchronized;
            // We need a while to loop back to the top and dispatch to the appropriate exception handler.
            var needsWhile = this.hasHandlers;
            if (emitCallMethodLoopCounter) {
                this.bodyEmitter.writeLn("J2ME.baselineMethodCounter.count(\"" + this.methodInfo.implKey + "\");");
            }
            var blocks = blockMap.blocks;
            for (var i = 0; i < blocks.length; i++) {
                var block = blocks[i];
                if (block instanceof ExceptionBlock) {
                    continue;
                }
                if (block.isExceptionEntry) {
                    writer && writer.writeLn("block.isExceptionEntry");
                    this.setBlockStackHeight(block.startBci, 1);
                }
                this.blockEmitter.reset();
                this.emitBlockBody(stream, block);
            }
            if (this.hasUnwindThrow) {
                needsTry = true;
            }
            needsWhile && this.bodyEmitter.enter("while(1){");
            needsTry && this.bodyEmitter.enter("try{");
            this.bodyEmitter.writeLn("var label=0;");
            this.bodyEmitter.writeLns(Relooper.render(this.entryBlock));
            emitCompilerAssertions && this.bodyEmitter.writeLn("J2ME.Debug.assert(false, 'Invalid PC: ' + pc)");
            if (needsTry) {
                this.bodyEmitter.leaveAndEnter("}catch(ex){");
                if (this.hasUnwindThrow) {
                    var local = this.local.join(",");
                    var stack = this.stack.join(",");
                    this.bodyEmitter.writeLn("if(U){$.T(ex,[" + local + "],[" + stack + "]," + this.lockObject + ");return;}");
                }
                this.bodyEmitter.writeLn(this.getStackName(0) + "=TE(ex);");
                this.blockStack = [this.getStackName(0)];
                this.sp = 1;
                if (this.hasHandlers) {
                    for (var i = 0; i < this.methodInfo.exception_table_length; i++) {
                        this.emitExceptionHandler(this.bodyEmitter, this.methodInfo.getExceptionEntryViewByIndex(i));
                    }
                }
                if (this.methodInfo.isSynchronized) {
                    this.emitMonitorExit(this.bodyEmitter, this.lockObject);
                }
                this.bodyEmitter.writeLn("throw " + this.peek(8 /* Reference */) + ";");
                this.bodyEmitter.leave("}");
            }
            if (needsWhile) {
                this.bodyEmitter.leave("}");
            }
        };
        BaselineCompiler.prototype.emitExceptionHandler = function (emitter, handler) {
            var check = "";
            if (handler.catch_type > 0) {
                var classInfo = this.lookupClass(handler.catch_type);
                check = "IOK";
                if (classInfo.isInterface) {
                    check = "IOI";
                }
                check += "(" + this.peek(8 /* Reference */) + "," + this.localClassConstant(classInfo) + ")";
                check = "&&" + check;
            }
            this.bodyEmitter.writeLn("if(pc>=" + handler.start_pc + "&&pc<" + handler.end_pc + check + "){pc=" + this.getBlockIndex(handler.handler_pc) + ";continue;}");
            return;
        };
        /**
         * Resets block level optimization state.
         */
        BaselineCompiler.prototype.resetOptimizationState = function () {
            this.initializedClasses = Object.create(null);
        };
        BaselineCompiler.prototype.emitBlockBody = function (stream, block) {
            this.resetOptimizationState();
            this.sp = this.blockStackHeightMap[block.startBci];
            this.blockStack = this.stack.slice(0, this.sp);
            this.blockStackPrecedence = [];
            for (var i = 0; i < this.sp; i++) {
                this.blockStackPrecedence.push(19 /* Primary */);
            }
            emitDebugInfoComments && this.blockEmitter.writeLn("// " + this.blockMap.blockToString(block));
            writer && writer.writeLn("emitBlock: " + block.startBci + " " + this.sp + " " + block.isExceptionEntry);
            release || assert(this.sp !== undefined, "Bad stack height");
            stream.setBCI(block.startBci);
            var lastSourceLocation = null;
            var lastBC;
            while (stream.currentBCI <= block.endBci) {
                this.pc = stream.currentBCI;
                lastBC = stream.currentBC();
                this.emitBytecode(stream, block);
                stream.next();
            }
            if (this.sp >= 0) {
                this.flushBlockStack();
                this.setSuccessorsBlockStackHeight(block, this.sp);
                if (!J2ME.Bytecode.isBlockEnd(lastBC)) {
                    Relooper.addBranch(block.relooperBlockID, this.getBlock(stream.currentBCI).relooperBlockID);
                }
            }
            else {
            }
            Relooper.setBlockCode(block.relooperBlockID, this.blockEmitter.toString());
        };
        BaselineCompiler.prototype.emitPrologue = function () {
            var local = this.local;
            var parameterLocalIndex = this.methodInfo.isStatic ? 0 : 1;
            var signatureKinds = this.methodInfo.signatureKinds;
            for (var i = 1; i < signatureKinds.length; i++) {
                var kind = signatureKinds[i];
                this.parameters.push(this.getLocalName(parameterLocalIndex));
                parameterLocalIndex += J2ME.isTwoSlot(kind) ? 2 : 1;
            }
            var maxLocals = this.methodInfo.codeAttribute.max_locals;
            for (var i = 0; i < maxLocals; i++) {
                local.push(this.getLocalName(i));
            }
            if (local.length) {
                this.bodyEmitter.writeLn("var " + local.join(",") + ";");
            }
            if (!this.methodInfo.isStatic) {
                this.bodyEmitter.writeLn(this.getLocal(0) + "=this;");
            }
            var stack = this.stack;
            for (var i = 0; i < this.methodInfo.codeAttribute.max_stack; i++) {
                stack.push(this.getStackName(i));
            }
            if (stack.length) {
                this.bodyEmitter.writeLn("var " + stack.join(",") + ";");
            }
            this.bodyEmitter.writeLn("var pc=0;");
            if (this.hasHandlers) {
                this.bodyEmitter.writeLn("var ex;");
            }
            if (emitCallMethodCounter) {
                this.bodyEmitter.writeLn("J2ME.baselineMethodCounter.count(\"" + this.methodInfo.implKey + "\");");
            }
            this.lockObject = this.methodInfo.isSynchronized ? this.methodInfo.isStatic ? this.runtimeClassObject(this.methodInfo.classInfo) : this.getLocal(0) : "null";
            this.emitEntryPoints();
        };
        BaselineCompiler.prototype.emitEntryPoints = function () {
            var needsOSREntryPoint = false;
            var needsEntryDispatch = false;
            var blockMap = this.blockMap;
            var blocks = blockMap.blocks;
            for (var i = 0; i < blocks.length; i++) {
                var block = blocks[i];
                if (blockMap.invokeCount > 0 && block.isLoopHeader && !block.isInnerLoopHeader()) {
                    needsOSREntryPoint = true;
                    needsEntryDispatch = true;
                }
                if (block.isExceptionEntry) {
                    needsEntryDispatch = true;
                }
            }
            if (needsOSREntryPoint) {
                // Are we doing an OSR?
                this.bodyEmitter.enter("if(O){");
                this.bodyEmitter.writeLn("var _=O.local;");
                // Restore locals.
                var restoreLocals = [];
                for (var i = 0; i < this.methodInfo.codeAttribute.max_locals; i++) {
                    restoreLocals.push(this.getLocal(i) + "=_[" + i + "]");
                }
                this.bodyEmitter.writeLn(restoreLocals.join(",") + ";");
                this.needsVariable("re");
                this.bodyEmitter.writeLn("pc=O.pc;");
                this.bodyEmitter.writeLn("O=null;");
                if (this.methodInfo.isSynchronized) {
                    this.bodyEmitter.leaveAndEnter("}else{");
                    this.emitMonitorEnter(this.bodyEmitter, 0, this.lockObject);
                }
                this.bodyEmitter.leave("}");
                this.hasOSREntryPoint = true;
            }
            else {
                if (this.methodInfo.isSynchronized) {
                    this.emitMonitorEnter(this.bodyEmitter, 0, this.lockObject);
                }
            }
            // Insert a preemption check after the OSR code so the pc
            // and state will be stored. We can only do this if the
            // method has the necessary unwinding code.
            if (J2ME.canYield(this.methodInfo)) {
                this.emitPreemptionCheck(this.bodyEmitter, "pc");
            }
            if (needsEntryDispatch) {
                var entryBlock = Relooper.addBlock("// Entry Dispatch Block");
                // Add entry points
                var blocks = this.blockMap.blocks;
                for (var i = 0; i < blocks.length; i++) {
                    var block = blocks[i];
                    if (i === 0 || (block.isLoopHeader && !block.isInnerLoopHeader()) || block.isExceptionEntry) {
                        Relooper.addBranch(entryBlock, block.relooperBlockID, "pc===" + block.startBci);
                    }
                }
                // Add invalid block.
                var osrInvalidBlock = Relooper.addBlock(emitCompilerAssertions ? "J2ME.Debug.assert(false, 'Invalid OSR PC: ' + pc)" : "");
                Relooper.addBranch(entryBlock, osrInvalidBlock);
                this.entryBlock = entryBlock;
            }
        };
        BaselineCompiler.prototype.lookupClass = function (cpi) {
            var classInfo = this.methodInfo.classInfo.constantPool.resolveClass(cpi);
            J2ME.ArrayUtilities.pushUnique(this.referencedClasses, classInfo);
            return classInfo;
        };
        BaselineCompiler.prototype.lookupMethod = function (cpi, opcode, isStatic) {
            var methodInfo = this.methodInfo.classInfo.constantPool.resolveMethod(cpi, isStatic);
            J2ME.ArrayUtilities.pushUnique(this.referencedClasses, methodInfo.classInfo);
            return methodInfo;
        };
        BaselineCompiler.prototype.lookupField = function (cpi, opcode, isStatic) {
            var fieldInfo = this.methodInfo.classInfo.constantPool.resolveField(cpi, isStatic);
            J2ME.ArrayUtilities.pushUnique(this.referencedClasses, fieldInfo.classInfo);
            return fieldInfo;
        };
        BaselineCompiler.prototype.getStackName = function (i) {
            if (i >= BaselineCompiler.stackNames.length) {
                return "s" + (i - BaselineCompiler.stackNames.length);
            }
            return BaselineCompiler.stackNames[i];
        };
        BaselineCompiler.prototype.getStack = function (i, contextPrecedence) {
            var v = this.blockStack[i];
            if (this.blockStackPrecedence[i] < contextPrecedence) {
                v = "(" + v + ")";
            }
            return v;
        };
        BaselineCompiler.prototype.getLocalName = function (i) {
            if (i >= BaselineCompiler.localNames.length) {
                return "l" + (i - BaselineCompiler.localNames.length);
            }
            return BaselineCompiler.localNames[i];
        };
        BaselineCompiler.prototype.getLocal = function (i) {
            if (i < 0 || i >= this.local.length) {
                throw new Error("Out of bounds local read");
            }
            return this.local[i];
        };
        BaselineCompiler.prototype.emitLoadLocal = function (kind, i) {
            this.emitPush(kind, this.getLocal(i), 19 /* Primary */);
        };
        BaselineCompiler.prototype.emitStoreLocal = function (kind, i) {
            this.blockEmitter.writeLn(this.getLocal(i) + "=" + this.pop(kind, 0 /* Sequence */) + ";");
        };
        BaselineCompiler.prototype.peekAny = function () {
            return this.peek(9 /* Void */);
        };
        BaselineCompiler.prototype.peek = function (kind, precedence) {
            if (precedence === void 0) { precedence = 0 /* Sequence */; }
            return this.getStack(this.sp - 1, precedence);
        };
        BaselineCompiler.prototype.popAny = function () {
            return this.pop(9 /* Void */);
        };
        BaselineCompiler.prototype.emitPopTemporaries = function (n) {
            for (var i = 0; i < n; i++) {
                this.blockEmitter.writeLn("var t" + i + "=" + this.pop(9 /* Void */) + ";");
            }
        };
        BaselineCompiler.prototype.emitPushTemporary = function () {
            var indices = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                indices[_i - 0] = arguments[_i];
            }
            for (var i = 0; i < indices.length; i++) {
                this.emitPush(9 /* Void */, "t" + indices[i], 19 /* Primary */);
            }
        };
        BaselineCompiler.prototype.pop = function (kind, contextPrecedence) {
            if (contextPrecedence === void 0) { contextPrecedence = 19 /* Primary */; }
            writer && writer.writeLn(" popping: sp: " + this.sp + " " + J2ME.Kind[kind]);
            release || assert(this.sp, "SP below zero.");
            this.sp -= J2ME.isTwoSlot(kind) ? 2 : 1;
            var v = this.getStack(this.sp, contextPrecedence);
            writer && writer.writeLn("  popped: sp: " + this.sp + " " + J2ME.Kind[kind] + " " + v);
            return v;
        };
        BaselineCompiler.prototype.emitPushAny = function (v) {
            this.emitPush(9 /* Void */, v, 0 /* Sequence */); // TODO: Revisit precedence.
        };
        BaselineCompiler.prototype.emitPushInteger = function (v) {
            if (v < 0) {
                this.emitPush(4 /* Int */, v, 15 /* UnaryNegation */);
            }
            else {
                this.emitPush(4 /* Int */, v, 19 /* Primary */);
            }
        };
        BaselineCompiler.prototype.emitPush = function (kind, v, precedence) {
            writer && writer.writeLn("push: sp: " + this.sp + " " + J2ME.Kind[kind] + " " + v);
            // this.blockEmitter.writeLn(this.getStack(this.sp) + " = " + v + ";");
            this.blockStack[this.sp] = v;
            this.blockStackPrecedence[this.sp] = precedence;
            this.sp += J2ME.isTwoSlot(kind) ? 2 : 1;
        };
        BaselineCompiler.prototype.flushBlockStack = function () {
            for (var i = 0; i < this.sp; i++) {
                var name = this.getStackName(i);
                if (name !== this.blockStack[i]) {
                    this.blockEmitter.writeLn(name + "=" + this.blockStack[i] + ";");
                    this.blockStack[i] = name;
                    this.blockStackPrecedence[i] = 19 /* Primary */;
                }
            }
        };
        BaselineCompiler.prototype.emitReturn = function (kind) {
            if (this.methodInfo.isSynchronized) {
                this.emitMonitorExit(this.blockEmitter, this.lockObject);
            }
            if (kind === 9 /* Void */) {
                this.blockEmitter.writeLn("return;");
                return;
            }
            this.blockEmitter.writeLn("return " + this.pop(kind) + ";");
        };
        BaselineCompiler.prototype.emitGetField = function (fieldInfo, isStatic) {
            if (isStatic) {
                this.emitClassInitializationCheck(fieldInfo.classInfo);
            }
            var kind = J2ME.getSignatureKind(fieldInfo.utf8Signature);
            var object = isStatic ? this.runtimeClass(fieldInfo.classInfo) : this.pop(8 /* Reference */);
            this.emitPush(kind, object + "." + fieldInfo.mangledName, 18 /* Member */);
        };
        BaselineCompiler.prototype.emitPutField = function (fieldInfo, isStatic) {
            if (isStatic) {
                this.emitClassInitializationCheck(fieldInfo.classInfo);
            }
            var kind = J2ME.getSignatureKind(fieldInfo.utf8Signature);
            var value = this.pop(kind, 0 /* Sequence */);
            var object = isStatic ? this.runtimeClass(fieldInfo.classInfo) : this.pop(8 /* Reference */);
            this.blockEmitter.writeLn(object + "." + fieldInfo.mangledName + "=" + value + ";");
        };
        BaselineCompiler.prototype.setBlockStackHeight = function (pc, height) {
            writer && writer.writeLn("Setting Block Height " + pc + " " + height);
            if (this.blockStackHeightMap[pc] !== undefined) {
                release || assert(this.blockStackHeightMap[pc] === height, pc + " " + this.blockStackHeightMap[pc] + " " + height);
            }
            this.blockStackHeightMap[pc] = height;
        };
        BaselineCompiler.prototype.emitIf = function (block, stream, predicate) {
            var nextBlock = this.getBlock(stream.nextBCI);
            var targetBlock = this.getBlock(stream.readBranchDest());
            Relooper.addBranch(block.relooperBlockID, nextBlock.relooperBlockID);
            if (targetBlock !== nextBlock) {
                Relooper.addBranch(block.relooperBlockID, targetBlock.relooperBlockID, predicate);
            }
        };
        BaselineCompiler.prototype.emitIfNull = function (block, stream, condition) {
            var x = this.pop(8 /* Reference */);
            this.emitIf(block, stream, x + conditionToOperator(condition) + "null");
        };
        BaselineCompiler.prototype.emitIfSame = function (block, stream, kind, condition) {
            var y = this.pop(kind);
            var x = this.pop(kind);
            this.emitIf(block, stream, x + conditionToOperator(condition) + y);
        };
        BaselineCompiler.prototype.emitIfZero = function (block, stream, condition) {
            var x = this.pop(4 /* Int */, 11 /* Relational */);
            this.emitIf(block, stream, x + conditionToOperator(condition) + "0");
        };
        BaselineCompiler.prototype.runtimeClass = function (classInfo) {
            return "$." + classConstant(classInfo);
        };
        BaselineCompiler.prototype.runtimeClassObject = function (classInfo) {
            return "$." + classConstant(classInfo) + ".classObject";
        };
        BaselineCompiler.prototype.emitClassInitializationCheck = function (classInfo) {
            while (classInfo instanceof J2ME.ArrayClassInfo) {
                classInfo = classInfo.elementClass;
            }
            if (!J2ME.CLASSES.isPreInitializedClass(classInfo)) {
                if (this.target === 0 /* Runtime */ && $.initialized[classInfo.getClassNameSlow()]) {
                    var message = "Optimized ClassInitializationCheck: " + classInfo.getClassNameSlow() + ", is already initialized.";
                    J2ME.baselineCounter && J2ME.baselineCounter.count(message);
                }
                else if (this.initializedClasses[classInfo.getClassNameSlow()]) {
                    var message = "Optimized ClassInitializationCheck: " + classInfo.getClassNameSlow() + ", block redundant.";
                    emitDebugInfoComments && this.blockEmitter.writeLn("// " + message);
                    J2ME.baselineCounter && J2ME.baselineCounter.count(message);
                }
                else if (classInfo === this.methodInfo.classInfo) {
                    var message = "Optimized ClassInitializationCheck: " + classInfo.getClassNameSlow() + ", self access.";
                    emitDebugInfoComments && this.blockEmitter.writeLn("// " + message);
                    J2ME.baselineCounter && J2ME.baselineCounter.count(message);
                }
                else if (!classInfo.isInterface && this.methodInfo.classInfo.isAssignableTo(classInfo)) {
                    var message = "Optimized ClassInitializationCheck: " + classInfo.getClassNameSlow() + ", base access.";
                    emitDebugInfoComments && this.blockEmitter.writeLn("// " + message);
                    J2ME.baselineCounter && J2ME.baselineCounter.count(message);
                }
                else {
                    J2ME.baselineCounter && J2ME.baselineCounter.count("ClassInitializationCheck: " + classInfo.getClassNameSlow());
                    this.blockEmitter.writeLn("if ($.initialized[\"" + classInfo.getClassNameSlow() + "\"] === undefined) { " + this.runtimeClassObject(classInfo) + ".initialize(); }");
                    if (J2ME.canStaticInitializerYield(classInfo)) {
                        this.emitUnwind(this.blockEmitter, String(this.pc), String(this.pc));
                    }
                    else {
                        emitCompilerAssertions && this.emitNoUnwindAssertion();
                    }
                }
                this.initializedClasses[classInfo.getClassNameSlow()] = true;
            }
        };
        BaselineCompiler.prototype.emitInvoke = function (methodInfo, opcode, nextPC) {
            var calleeCanYield = 4 /* Virtual */;
            if (J2ME.isStaticallyBound(opcode, methodInfo)) {
                calleeCanYield = J2ME.canYield(methodInfo);
            }
            if (opcode === 184 /* INVOKESTATIC */) {
                this.emitClassInitializationCheck(methodInfo.classInfo);
            }
            var signatureKinds = methodInfo.signatureKinds;
            var args = [];
            for (var i = signatureKinds.length - 1; i > 0; i--) {
                args.unshift(this.pop(signatureKinds[i]));
            }
            var object = null, call;
            if (opcode !== 184 /* INVOKESTATIC */) {
                object = this.pop(8 /* Reference */);
                if (opcode === 183 /* INVOKESPECIAL */) {
                    args.unshift(object);
                    call = this.localClassConstant(methodInfo.classInfo) + ".m(" + methodInfo.index + ").call(" + args.join(",") + ")";
                }
                else if (opcode === 182 /* INVOKEVIRTUAL */) {
                    call = object + "." + methodInfo.virtualName + "(" + args.join(",") + ")";
                }
                else if (opcode === 185 /* INVOKEINTERFACE */) {
                    call = object + "." + methodInfo.mangledName + "(" + args.join(",") + ")";
                }
                else {
                    J2ME.Debug.unexpected(Bytecodes[opcode]);
                }
            }
            else {
                call = this.localClassConstant(methodInfo.classInfo) + ".m(" + methodInfo.index + ")" + "(" + args.join(",") + ")";
            }
            if (methodInfo.implKey in inlineMethods) {
                emitDebugInfoComments && this.blockEmitter.writeLn("// Inlining: " + methodInfo.implKey);
                call = inlineMethods[methodInfo.implKey];
            }
            this.needsVariable("re");
            this.flushBlockStack();
            this.blockEmitter.writeLn("re=" + call + ";");
            if (calleeCanYield) {
                this.emitUnwind(this.blockEmitter, String(this.pc), String(nextPC));
            }
            else {
                emitCompilerAssertions && this.emitUndefinedReturnAssertion();
                emitCompilerAssertions && this.emitNoUnwindAssertion();
            }
            if (signatureKinds[0] !== 9 /* Void */) {
                this.emitPush(signatureKinds[0], "re", 19 /* Primary */);
            }
        };
        BaselineCompiler.prototype.emitNegativeArraySizeCheck = function (length) {
            if (this.isPrivileged) {
                return;
            }
            this.blockEmitter.writeLn(length + " < 0 && TN();");
        };
        BaselineCompiler.prototype.emitBoundsCheck = function (array, index) {
            if (this.isPrivileged || !J2ME.emitCheckArrayBounds) {
                return;
            }
            if (J2ME.inlineRuntimeCalls) {
                this.blockEmitter.writeLn("if ((" + index + " >>> 0) >= (" + array + ".length >>> 0)) TI(" + index + ");");
            }
            else {
                this.blockEmitter.writeLn("CAB(" + array + ", " + index + ");");
            }
        };
        BaselineCompiler.prototype.emitArrayStoreCheck = function (array, value) {
            if (this.isPrivileged || !J2ME.emitCheckArrayStore) {
                return;
            }
            this.blockEmitter.writeLn("CAS(" + array + ", " + value + ");");
        };
        BaselineCompiler.prototype.emitStoreIndexed = function (kind) {
            var value = this.pop(J2ME.stackKind(kind), 0 /* Sequence */);
            var index = this.pop(4 /* Int */, 0 /* Sequence */);
            var array = this.pop(8 /* Reference */, 0 /* Sequence */);
            this.emitBoundsCheck(array, index);
            if (kind === 8 /* Reference */) {
                this.emitArrayStoreCheck(array, value);
            }
            this.blockEmitter.writeLn(array + "[" + index + "] = " + value + ";");
        };
        BaselineCompiler.prototype.emitLoadIndexed = function (kind) {
            var index = this.pop(4 /* Int */, 0 /* Sequence */);
            var array = this.pop(8 /* Reference */, 0 /* Sequence */);
            this.emitBoundsCheck(array, index);
            this.emitPush(kind, array + "[" + index + "]", 18 /* Member */);
        };
        BaselineCompiler.prototype.emitIncrement = function (stream) {
            this.blockEmitter.writeLn(this.getLocal(stream.readLocalIndex()) + "+=" + stream.readIncrement() + ";");
        };
        BaselineCompiler.prototype.emitGoto = function (block, stream) {
            var targetBCI = stream.readBranchDest();
            var targetBlock = this.getBlock(targetBCI);
            Relooper.addBranch(block.relooperBlockID, targetBlock.relooperBlockID);
        };
        BaselineCompiler.prototype.emitLoadConstant = function (cpi) {
            var cp = this.methodInfo.classInfo.constantPool;
            var tag = cp.getConstantTag(cpi);
            switch (tag) {
                case 3 /* CONSTANT_Integer */:
                    this.emitPushInteger(cp.resolve(cpi, tag));
                    return;
                case 4 /* CONSTANT_Float */:
                    var value = cp.resolve(cpi, tag);
                    this.emitPush(5 /* Float */, doubleConstant(value), (1 / value) < 0 ? 15 /* UnaryNegation */ : 19 /* Primary */);
                    return;
                case 6 /* CONSTANT_Double */:
                    var value = cp.resolve(cpi, tag);
                    this.emitPush(7 /* Double */, doubleConstant(value), (1 / value) < 0 ? 15 /* UnaryNegation */ : 19 /* Primary */);
                    return;
                case 5 /* CONSTANT_Long */:
                    var long = cp.resolve(cpi, tag);
                    this.emitPush(6 /* Long */, "Long.fromBits(" + long.getLowBits() + "," + long.getHighBits() + ")", 19 /* Primary */);
                    return;
                case 8 /* CONSTANT_String */:
                    this.emitPush(8 /* Reference */, this.localClassConstant(this.methodInfo.classInfo) + ".c(" + cpi + ")", 19 /* Primary */);
                    return;
                default:
                    throw "Not done for: " + J2ME.TAGS[tag];
            }
        };
        BaselineCompiler.prototype.emitThrow = function (pc) {
            var object = this.peek(8 /* Reference */);
            this.blockEmitter.writeLn("throw " + object + ";");
        };
        BaselineCompiler.prototype.emitNewInstance = function (cpi) {
            var classInfo = this.lookupClass(cpi);
            this.emitClassInitializationCheck(classInfo);
            this.emitPush(8 /* Reference */, "new " + this.localClassConstant(classInfo) + "()", 18 /* New */);
        };
        BaselineCompiler.prototype.emitNewTypeArray = function (typeCode) {
            var kind = J2ME.arrayTypeCodeToKind(typeCode);
            var length = this.pop(4 /* Int */);
            this.emitNegativeArraySizeCheck(length);
            this.emitPush(8 /* Reference */, "new " + kindToTypedArrayName(kind) + "(" + length + ")", 18 /* New */);
        };
        BaselineCompiler.prototype.emitCheckCast = function (cpi) {
            var object = this.peek(8 /* Reference */);
            var classInfo = this.lookupClass(cpi);
            var call = "CCK";
            if (classInfo.isInterface) {
                call = "CCI";
            }
            this.blockEmitter.writeLn(call + "(" + object + "," + this.localClassConstant(classInfo) + ");");
        };
        BaselineCompiler.prototype.emitInstanceOf = function (cpi) {
            var object = this.pop(8 /* Reference */);
            var classInfo = this.lookupClass(cpi);
            var call = "IOK";
            if (classInfo.isInterface) {
                call = "IOI";
            }
            this.emitPush(4 /* Int */, call + "(" + object + "," + this.localClassConstant(classInfo) + ")|0", 7 /* BitwiseOR */);
        };
        BaselineCompiler.prototype.emitArrayLength = function () {
            this.emitPush(4 /* Int */, this.pop(8 /* Reference */) + ".length", 18 /* Member */);
        };
        BaselineCompiler.prototype.emitNewObjectArray = function (cpi) {
            var classInfo = this.lookupClass(cpi);
            this.emitClassInitializationCheck(classInfo);
            var length = this.pop(4 /* Int */);
            this.emitNegativeArraySizeCheck(length);
            this.emitPush(8 /* Reference */, "NA(" + this.localClassConstant(classInfo) + "," + length + ")", 17 /* Call */);
        };
        BaselineCompiler.prototype.emitNewMultiObjectArray = function (cpi, stream) {
            var classInfo = this.lookupClass(cpi);
            var numDimensions = stream.readUByte(stream.currentBCI + 3);
            var dimensions = new Array(numDimensions);
            for (var i = numDimensions - 1; i >= 0; i--) {
                dimensions[i] = this.pop(4 /* Int */);
            }
            this.emitPush(8 /* Reference */, "NM(" + this.localClassConstant(classInfo) + ",[" + dimensions.join(",") + "])", 17 /* Call */);
        };
        BaselineCompiler.prototype.emitUnwind = function (emitter, pc, nextPC, forceInline) {
            if (forceInline === void 0) { forceInline = false; }
            // Only emit unwind throws if it saves on code size.
            if (!forceInline && this.blockMap.invokeCount > 2 && this.stack.length < 8) {
                this.flushBlockStack();
                if (nextPC - pc === 3) {
                    emitter.writeLn("U&&B" + this.sp + "(" + pc + ");");
                }
                else {
                    emitter.writeLn("U&&B" + this.sp + "(" + pc + "," + nextPC + ");");
                }
                this.hasUnwindThrow = true;
            }
            else {
                var local = this.local.join(",");
                var stack = this.blockStack.slice(0, this.sp).join(",");
                emitter.writeLn("if(U){$.B(" + pc + "," + nextPC + ",[" + local + "],[" + stack + "]," + this.lockObject + ");return;}");
            }
            J2ME.baselineCounter && J2ME.baselineCounter.count("emitUnwind");
        };
        BaselineCompiler.prototype.emitNoUnwindAssertion = function () {
            this.blockEmitter.writeLn("if(U){J2ME.Debug.assert(false,'Unexpected unwind.');}");
        };
        BaselineCompiler.prototype.emitUndefinedReturnAssertion = function () {
            this.blockEmitter.writeLn("if (U && re !== undefined) { J2ME.Debug.assert(false, 'Unexpected return value during unwind.'); }");
        };
        BaselineCompiler.prototype.emitMonitorEnter = function (emitter, nextPC, object) {
            this.hasMonitorEnter = true;
            this.needsVariable("lk");
            emitter.writeLn("lk=" + object + "._lock;");
            emitter.enter("if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(" + object + ");");
            this.emitUnwind(emitter, String(this.pc), String(nextPC), true);
            emitter.leave("}");
        };
        BaselineCompiler.prototype.emitPreemptionCheck = function (emitter, nextPC) {
            if (!J2ME.emitCheckPreemption) {
                return;
            }
            emitter.writeLn("PS++;");
            emitter.writeLn("if((PS&" + preemptionSampleMask + ")===0)PE();");
            this.emitUnwind(emitter, String(nextPC), String(nextPC));
        };
        BaselineCompiler.prototype.emitMonitorExit = function (emitter, object) {
            emitter.writeLn("if(" + object + "._lock.level===1&&" + object + "._lock.ready.length===0)" + object + "._lock.level=0;else MX(" + object + ");");
        };
        BaselineCompiler.prototype.emitStackOp = function (opcode) {
            switch (opcode) {
                case 87 /* POP */: {
                    this.popAny();
                    break;
                }
                case 88 /* POP2 */: {
                    this.popAny();
                    this.popAny();
                    break;
                }
                case 89 /* DUP */: {
                    this.emitPushAny(this.peekAny());
                    break;
                }
                case 90 /* DUP_X1 */: {
                    this.emitPopTemporaries(2);
                    this.emitPushTemporary(0, 1, 0);
                    break;
                }
                case 91 /* DUP_X2 */: {
                    this.emitPopTemporaries(3);
                    this.emitPushTemporary(0, 2, 1, 0);
                    break;
                }
                case 92 /* DUP2 */: {
                    this.emitPopTemporaries(2);
                    this.emitPushTemporary(1, 0, 1, 0);
                    break;
                }
                case 93 /* DUP2_X1 */: {
                    this.emitPopTemporaries(3);
                    this.emitPushTemporary(1, 0, 2, 1, 0);
                    break;
                }
                case 94 /* DUP2_X2 */: {
                    this.emitPopTemporaries(4);
                    this.emitPushTemporary(1, 0, 3, 2, 1, 0);
                    break;
                }
                case 95 /* SWAP */: {
                    this.emitPopTemporaries(2);
                    this.emitPushTemporary(0, 1);
                    break;
                }
                default:
                    J2ME.Debug.unexpected(Bytecodes[opcode]);
            }
        };
        BaselineCompiler.prototype.emitDivideByZeroCheck = function (kind, value) {
            if (this.isPrivileged) {
                return;
            }
            if (J2ME.inlineRuntimeCalls && kind !== 6 /* Long */) {
                this.blockEmitter.writeLn(value + " === 0 && TA();");
            }
            else {
                var checkName = kind === 6 /* Long */ ? "CDZL" : "CDZ";
                this.blockEmitter.writeLn(checkName + "(" + value + ");");
            }
        };
        BaselineCompiler.prototype.emitArithmeticOp = function (result, opcode, canTrap) {
            var y = this.pop(result);
            var x = this.pop(result);
            if (canTrap) {
                this.emitDivideByZeroCheck(result, y);
            }
            var v;
            switch (opcode) {
                case 96 /* IADD */:
                    v = x + "+" + y + "|0";
                    break;
                case 100 /* ISUB */:
                    v = x + "-" + y + "|0";
                    break;
                case 104 /* IMUL */:
                    v = "Math.imul(" + x + "," + y + ")";
                    break;
                case 108 /* IDIV */:
                    v = x + "/" + y + "|0";
                    break;
                case 112 /* IREM */:
                    v = x + "%" + y;
                    break;
                case 98 /* FADD */:
                    v = "Math.fround(" + x + "+" + y + ")";
                    break;
                case 102 /* FSUB */:
                    v = "Math.fround(" + x + "-" + y + ")";
                    break;
                case 106 /* FMUL */:
                    v = "Math.fround(" + x + "*" + y + ")";
                    break;
                case 110 /* FDIV */:
                    v = "Math.fround(" + x + "/" + y + ")";
                    break;
                case 114 /* FREM */:
                    v = "Math.fround(" + x + "%" + y + ")";
                    break;
                case 97 /* LADD */:
                    v = x + ".add(" + y + ")";
                    break;
                case 101 /* LSUB */:
                    v = y + ".negate().add(" + x + ")";
                    break;
                case 105 /* LMUL */:
                    v = x + ".multiply(" + y + ")";
                    break;
                case 109 /* LDIV */:
                    v = x + ".div(" + y + ")";
                    break;
                case 113 /* LREM */:
                    v = x + ".modulo(" + y + ")";
                    break;
                case 99 /* DADD */:
                    v = x + "+" + y;
                    break;
                case 103 /* DSUB */:
                    v = x + "-" + y;
                    break;
                case 107 /* DMUL */:
                    v = x + "*" + y;
                    break;
                case 111 /* DDIV */:
                    v = x + "/" + y;
                    break;
                case 115 /* DREM */:
                    v = x + "%" + y;
                    break;
                default:
                    release || assert(false, Bytecodes[opcode]);
            }
            this.emitPush(result, v, 0 /* Sequence */); // TODO: Restrict precedence.
        };
        BaselineCompiler.prototype.emitNegateOp = function (kind) {
            var x = this.pop(kind);
            switch (kind) {
                case 4 /* Int */:
                    this.emitPush(kind, "(- " + x + ")|0", 7 /* BitwiseOR */);
                    break;
                case 6 /* Long */:
                    this.emitPush(kind, x + ".negate()", 18 /* Member */); // TODO: Or is it call?
                    break;
                case 5 /* Float */:
                case 7 /* Double */:
                    this.emitPush(kind, "- " + x, 15 /* UnaryNegation */);
                    break;
                default:
                    J2ME.Debug.unexpected(J2ME.Kind[kind]);
            }
        };
        BaselineCompiler.prototype.emitShiftOp = function (kind, opcode) {
            var s = this.pop(4 /* Int */);
            var x = this.pop(kind);
            var v;
            switch (opcode) {
                case 120 /* ISHL */:
                    this.emitPush(kind, x + "<<" + s, 12 /* BitwiseShift */);
                    return;
                case 122 /* ISHR */:
                    this.emitPush(kind, x + ">>" + s, 12 /* BitwiseShift */);
                    return;
                case 124 /* IUSHR */:
                    this.emitPush(kind, x + ">>>" + s, 12 /* BitwiseShift */);
                    return;
                case 121 /* LSHL */:
                    v = x + ".shiftLeft(" + s + ")";
                    break;
                case 123 /* LSHR */:
                    v = x + ".shiftRight(" + s + ")";
                    break;
                case 125 /* LUSHR */:
                    v = x + ".shiftRightUnsigned(" + s + ")";
                    break;
                default:
                    J2ME.Debug.unexpected(Bytecodes[opcode]);
            }
            this.emitPush(kind, v, 17 /* Call */);
        };
        BaselineCompiler.prototype.emitLogicOp = function (kind, opcode) {
            var y = this.pop(kind);
            var x = this.pop(kind);
            var v;
            switch (opcode) {
                case 126 /* IAND */:
                    this.emitPush(kind, x + "&" + y, 9 /* BitwiseAND */);
                    return;
                case 128 /* IOR */:
                    this.emitPush(kind, x + "|" + y, 7 /* BitwiseOR */);
                    return;
                case 130 /* IXOR */:
                    this.emitPush(kind, x + "^" + y, 8 /* BitwiseXOR */);
                    return;
                case 127 /* LAND */:
                    v = x + ".and(" + y + ")";
                    break;
                case 129 /* LOR */:
                    v = x + ".or(" + y + ")";
                    break;
                case 131 /* LXOR */:
                    v = x + ".xor(" + y + ")";
                    break;
                default:
                    J2ME.Debug.unexpected(Bytecodes[opcode]);
            }
            this.emitPush(kind, v, 17 /* Call */);
        };
        BaselineCompiler.prototype.emitConvertOp = function (from, to, opcode) {
            var x = this.pop(from);
            var v;
            switch (opcode) {
                case 133 /* I2L */:
                    v = "Long.fromInt(" + x + ")";
                    break;
                case 134 /* I2F */:
                case 135 /* I2D */:
                    v = x;
                    break;
                case 145 /* I2B */:
                    v = "(" + x + "<<24)>>24";
                    break;
                case 146 /* I2C */:
                    v = x + "&0xffff";
                    break;
                case 147 /* I2S */:
                    v = "(" + x + "<<16)>>16";
                    break;
                case 136 /* L2I */:
                    v = x + ".toInt()";
                    break;
                case 137 /* L2F */:
                    v = "Math.fround(" + x + ".toNumber())";
                    break;
                case 138 /* L2D */:
                    v = x + ".toNumber()";
                    break;
                case 142 /* D2I */:
                case 139 /* F2I */:
                    v = "util.double2int(" + x + ")";
                    break;
                case 140 /* F2L */:
                    v = "Long.fromNumber(" + x + ")";
                    break;
                case 141 /* F2D */:
                    v = x;
                    break;
                case 143 /* D2L */:
                    v = "util.double2long(" + x + ")";
                    break;
                case 144 /* D2F */:
                    v = "Math.fround(" + x + ")";
                    break;
            }
            this.emitPush(to, v, 0 /* Sequence */); // TODO: Restrict precedence.
        };
        BaselineCompiler.prototype.emitCompareOp = function (kind, isLessThan) {
            var y = this.pop(kind);
            var x = this.pop(kind);
            this.flushBlockStack();
            var sp = this.sp++;
            // Get the top stack slot and make sure it is also it in the |blockStack|.
            var s = this.blockStack[sp] = this.getStackName(sp);
            if (kind === 6 /* Long */) {
                this.blockEmitter.enter("if(" + x + ".greaterThan(" + y + ")){");
                this.blockEmitter.writeLn(s + "=1");
                this.blockEmitter.leaveAndEnter("}else if(" + x + ".lessThan(" + y + ")){");
                this.blockEmitter.writeLn(s + "=-1");
                this.blockEmitter.leaveAndEnter("}else{");
                this.blockEmitter.writeLn(s + "=0");
                this.blockEmitter.leave("}");
            }
            else {
                this.blockEmitter.enter("if(isNaN(" + x + ")||isNaN(" + y + ")){");
                this.blockEmitter.writeLn(s + "=" + (isLessThan ? "-1" : "1"));
                this.blockEmitter.leaveAndEnter("}else if(" + x + ">" + y + ") {");
                this.blockEmitter.writeLn(s + "=1");
                this.blockEmitter.leaveAndEnter("}else if(" + x + "<" + y + "){");
                this.blockEmitter.writeLn(s + "=-1");
                this.blockEmitter.leaveAndEnter("}else{");
                this.blockEmitter.writeLn(s + "=0");
                this.blockEmitter.leave("}");
            }
        };
        BaselineCompiler.prototype.getBlockIndex = function (pc) {
            return pc;
            // return this.getBlock(pc).blockID;
        };
        BaselineCompiler.prototype.getBlock = function (pc) {
            return this.blockMap.getBlock(pc);
        };
        BaselineCompiler.prototype.emitTableSwitch = function (block, stream) {
            var tableSwitch = stream.readTableSwitch();
            var value = this.pop(4 /* Int */);
            // We need some text in the body of the table switch block, otherwise the
            // branch condition variable is ignored.
            var branchBlock = Relooper.addBlock("// Table Switch", String(value));
            Relooper.addBranch(block.relooperBlockID, branchBlock);
            var defaultTarget = this.getBlock(stream.currentBCI + tableSwitch.defaultOffset()).relooperBlockID;
            for (var i = 0; i < tableSwitch.numberOfCases(); i++) {
                var key = tableSwitch.keyAt(i);
                var target = this.getBlock(stream.currentBCI + tableSwitch.offsetAt(i)).relooperBlockID;
                if (target === defaultTarget) {
                    continue;
                }
                var caseTargetBlock = Relooper.addBlock();
                Relooper.addBranch(branchBlock, caseTargetBlock, "case " + key + ":");
                Relooper.addBranch(caseTargetBlock, target);
            }
            Relooper.addBranch(branchBlock, defaultTarget);
        };
        BaselineCompiler.prototype.emitLookupSwitch = function (block, stream) {
            var lookupSwitch = stream.readLookupSwitch();
            var value = this.pop(4 /* Int */);
            // We need some text in the body of the lookup switch block, otherwise the
            // branch condition variable is ignored.
            var branchBlock = Relooper.addBlock("// Lookup Switch", String(value));
            Relooper.addBranch(block.relooperBlockID, branchBlock);
            var defaultTarget = this.getBlock(stream.currentBCI + lookupSwitch.defaultOffset()).relooperBlockID;
            for (var i = 0; i < lookupSwitch.numberOfCases(); i++) {
                var key = lookupSwitch.keyAt(i);
                var target = this.getBlock(stream.currentBCI + lookupSwitch.offsetAt(i)).relooperBlockID;
                if (target === defaultTarget) {
                    continue;
                }
                var caseTargetBlock = Relooper.addBlock();
                Relooper.addBranch(branchBlock, caseTargetBlock, "case " + key + ":");
                Relooper.addBranch(caseTargetBlock, target);
            }
            Relooper.addBranch(branchBlock, defaultTarget);
        };
        BaselineCompiler.prototype.emitBytecode = function (stream, block) {
            var cpi;
            var opcode = stream.currentBC();
            writer && writer.writeLn("emit: pc: " + stream.currentBCI + ", sp: " + this.sp + " " + Bytecodes[opcode]);
            var flushBlockStackAfter = false;
            if ((block.isExceptionEntry || block.hasHandlers) && J2ME.Bytecode.canTrap(opcode)) {
                this.blockEmitter.writeLn("pc=" + this.pc + ";");
                flushBlockStackAfter = true;
            }
            if (needsStackFlushBefore(opcode, this.sp)) {
                this.flushBlockStack();
            }
            switch (opcode) {
                case 0 /* NOP */: break;
                case 1 /* ACONST_NULL */:
                    this.emitPush(8 /* Reference */, "null", 19 /* Primary */);
                    break;
                case 2 /* ICONST_M1 */:
                    this.emitPush(4 /* Int */, opcode - 3 /* ICONST_0 */, 15 /* UnaryNegation */);
                    break;
                case 3 /* ICONST_0 */:
                case 4 /* ICONST_1 */:
                case 5 /* ICONST_2 */:
                case 6 /* ICONST_3 */:
                case 7 /* ICONST_4 */:
                case 8 /* ICONST_5 */:
                    this.emitPush(4 /* Int */, opcode - 3 /* ICONST_0 */, 19 /* Primary */);
                    break;
                case 11 /* FCONST_0 */:
                case 12 /* FCONST_1 */:
                case 13 /* FCONST_2 */:
                    this.emitPush(5 /* Float */, opcode - 11 /* FCONST_0 */, 19 /* Primary */);
                    break;
                case 14 /* DCONST_0 */:
                case 15 /* DCONST_1 */:
                    this.emitPush(7 /* Double */, opcode - 14 /* DCONST_0 */, 19 /* Primary */);
                    break;
                case 9 /* LCONST_0 */:
                case 10 /* LCONST_1 */:
                    this.emitPush(6 /* Long */, longConstant(opcode - 9 /* LCONST_0 */), 19 /* Primary */);
                    break;
                case 16 /* BIPUSH */:
                    this.emitPushInteger(stream.readByte());
                    break;
                case 17 /* SIPUSH */:
                    this.emitPushInteger(stream.readShort());
                    break;
                case 18 /* LDC */:
                case 19 /* LDC_W */:
                case 20 /* LDC2_W */:
                    this.emitLoadConstant(stream.readCPI());
                    break;
                case 21 /* ILOAD */:
                    this.emitLoadLocal(4 /* Int */, stream.readLocalIndex());
                    break;
                case 22 /* LLOAD */:
                    this.emitLoadLocal(6 /* Long */, stream.readLocalIndex());
                    break;
                case 23 /* FLOAD */:
                    this.emitLoadLocal(5 /* Float */, stream.readLocalIndex());
                    break;
                case 24 /* DLOAD */:
                    this.emitLoadLocal(7 /* Double */, stream.readLocalIndex());
                    break;
                case 25 /* ALOAD */:
                    this.emitLoadLocal(8 /* Reference */, stream.readLocalIndex());
                    break;
                case 26 /* ILOAD_0 */:
                case 27 /* ILOAD_1 */:
                case 28 /* ILOAD_2 */:
                case 29 /* ILOAD_3 */:
                    this.emitLoadLocal(4 /* Int */, opcode - 26 /* ILOAD_0 */);
                    break;
                case 30 /* LLOAD_0 */:
                case 31 /* LLOAD_1 */:
                case 32 /* LLOAD_2 */:
                case 33 /* LLOAD_3 */:
                    this.emitLoadLocal(6 /* Long */, opcode - 30 /* LLOAD_0 */);
                    break;
                case 34 /* FLOAD_0 */:
                case 35 /* FLOAD_1 */:
                case 36 /* FLOAD_2 */:
                case 37 /* FLOAD_3 */:
                    this.emitLoadLocal(5 /* Float */, opcode - 34 /* FLOAD_0 */);
                    break;
                case 38 /* DLOAD_0 */:
                case 39 /* DLOAD_1 */:
                case 40 /* DLOAD_2 */:
                case 41 /* DLOAD_3 */:
                    this.emitLoadLocal(7 /* Double */, opcode - 38 /* DLOAD_0 */);
                    break;
                case 42 /* ALOAD_0 */:
                case 43 /* ALOAD_1 */:
                case 44 /* ALOAD_2 */:
                case 45 /* ALOAD_3 */:
                    this.emitLoadLocal(8 /* Reference */, opcode - 42 /* ALOAD_0 */);
                    break;
                case 46 /* IALOAD */:
                    this.emitLoadIndexed(4 /* Int */);
                    break;
                case 47 /* LALOAD */:
                    this.emitLoadIndexed(6 /* Long */);
                    break;
                case 48 /* FALOAD */:
                    this.emitLoadIndexed(5 /* Float */);
                    break;
                case 49 /* DALOAD */:
                    this.emitLoadIndexed(7 /* Double */);
                    break;
                case 50 /* AALOAD */:
                    this.emitLoadIndexed(8 /* Reference */);
                    break;
                case 51 /* BALOAD */:
                    this.emitLoadIndexed(1 /* Byte */);
                    break;
                case 52 /* CALOAD */:
                    this.emitLoadIndexed(3 /* Char */);
                    break;
                case 53 /* SALOAD */:
                    this.emitLoadIndexed(2 /* Short */);
                    break;
                case 54 /* ISTORE */:
                    this.emitStoreLocal(4 /* Int */, stream.readLocalIndex());
                    break;
                case 55 /* LSTORE */:
                    this.emitStoreLocal(6 /* Long */, stream.readLocalIndex());
                    break;
                case 56 /* FSTORE */:
                    this.emitStoreLocal(5 /* Float */, stream.readLocalIndex());
                    break;
                case 57 /* DSTORE */:
                    this.emitStoreLocal(7 /* Double */, stream.readLocalIndex());
                    break;
                case 58 /* ASTORE */:
                    this.emitStoreLocal(8 /* Reference */, stream.readLocalIndex());
                    break;
                case 59 /* ISTORE_0 */:
                case 60 /* ISTORE_1 */:
                case 61 /* ISTORE_2 */:
                case 62 /* ISTORE_3 */:
                    this.emitStoreLocal(4 /* Int */, opcode - 59 /* ISTORE_0 */);
                    break;
                case 63 /* LSTORE_0 */:
                case 64 /* LSTORE_1 */:
                case 65 /* LSTORE_2 */:
                case 66 /* LSTORE_3 */:
                    this.emitStoreLocal(6 /* Long */, opcode - 63 /* LSTORE_0 */);
                    break;
                case 67 /* FSTORE_0 */:
                case 68 /* FSTORE_1 */:
                case 69 /* FSTORE_2 */:
                case 70 /* FSTORE_3 */:
                    this.emitStoreLocal(5 /* Float */, opcode - 67 /* FSTORE_0 */);
                    break;
                case 71 /* DSTORE_0 */:
                case 72 /* DSTORE_1 */:
                case 73 /* DSTORE_2 */:
                case 74 /* DSTORE_3 */:
                    this.emitStoreLocal(7 /* Double */, opcode - 71 /* DSTORE_0 */);
                    break;
                case 75 /* ASTORE_0 */:
                case 76 /* ASTORE_1 */:
                case 77 /* ASTORE_2 */:
                case 78 /* ASTORE_3 */:
                    this.emitStoreLocal(8 /* Reference */, opcode - 75 /* ASTORE_0 */);
                    break;
                case 79 /* IASTORE */:
                    this.emitStoreIndexed(4 /* Int */);
                    break;
                case 80 /* LASTORE */:
                    this.emitStoreIndexed(6 /* Long */);
                    break;
                case 81 /* FASTORE */:
                    this.emitStoreIndexed(5 /* Float */);
                    break;
                case 82 /* DASTORE */:
                    this.emitStoreIndexed(7 /* Double */);
                    break;
                case 83 /* AASTORE */:
                    this.emitStoreIndexed(8 /* Reference */);
                    break;
                case 84 /* BASTORE */:
                    this.emitStoreIndexed(1 /* Byte */);
                    break;
                case 85 /* CASTORE */:
                    this.emitStoreIndexed(3 /* Char */);
                    break;
                case 86 /* SASTORE */:
                    this.emitStoreIndexed(2 /* Short */);
                    break;
                case 87 /* POP */:
                case 88 /* POP2 */:
                case 89 /* DUP */:
                case 90 /* DUP_X1 */:
                case 91 /* DUP_X2 */:
                case 92 /* DUP2 */:
                case 93 /* DUP2_X1 */:
                case 94 /* DUP2_X2 */:
                case 95 /* SWAP */:
                    this.emitStackOp(opcode);
                    break;
                case 96 /* IADD */:
                case 100 /* ISUB */:
                case 104 /* IMUL */:
                    this.emitArithmeticOp(4 /* Int */, opcode, false);
                    break;
                case 108 /* IDIV */:
                case 112 /* IREM */:
                    this.emitArithmeticOp(4 /* Int */, opcode, true);
                    break;
                case 97 /* LADD */:
                case 101 /* LSUB */:
                case 105 /* LMUL */:
                    this.emitArithmeticOp(6 /* Long */, opcode, false);
                    break;
                case 109 /* LDIV */:
                case 113 /* LREM */:
                    this.emitArithmeticOp(6 /* Long */, opcode, true);
                    break;
                case 98 /* FADD */:
                case 102 /* FSUB */:
                case 106 /* FMUL */:
                case 110 /* FDIV */:
                case 114 /* FREM */:
                    this.emitArithmeticOp(5 /* Float */, opcode, false);
                    break;
                case 99 /* DADD */:
                case 103 /* DSUB */:
                case 107 /* DMUL */:
                case 111 /* DDIV */:
                case 115 /* DREM */:
                    this.emitArithmeticOp(7 /* Double */, opcode, false);
                    break;
                case 116 /* INEG */:
                    this.emitNegateOp(4 /* Int */);
                    break;
                case 117 /* LNEG */:
                    this.emitNegateOp(6 /* Long */);
                    break;
                case 118 /* FNEG */:
                    this.emitNegateOp(5 /* Float */);
                    break;
                case 119 /* DNEG */:
                    this.emitNegateOp(7 /* Double */);
                    break;
                case 120 /* ISHL */:
                case 122 /* ISHR */:
                case 124 /* IUSHR */:
                    this.emitShiftOp(4 /* Int */, opcode);
                    break;
                case 126 /* IAND */:
                case 128 /* IOR */:
                case 130 /* IXOR */:
                    this.emitLogicOp(4 /* Int */, opcode);
                    break;
                case 121 /* LSHL */:
                case 123 /* LSHR */:
                case 125 /* LUSHR */:
                    this.emitShiftOp(6 /* Long */, opcode);
                    break;
                case 127 /* LAND */:
                case 129 /* LOR */:
                case 131 /* LXOR */:
                    this.emitLogicOp(6 /* Long */, opcode);
                    break;
                case 132 /* IINC */:
                    this.emitIncrement(stream);
                    break;
                case 133 /* I2L */:
                    this.emitConvertOp(4 /* Int */, 6 /* Long */, opcode);
                    break;
                case 134 /* I2F */:
                    this.emitConvertOp(4 /* Int */, 5 /* Float */, opcode);
                    break;
                case 135 /* I2D */:
                    this.emitConvertOp(4 /* Int */, 7 /* Double */, opcode);
                    break;
                case 145 /* I2B */:
                    this.emitConvertOp(4 /* Int */, 1 /* Byte */, opcode);
                    break;
                case 146 /* I2C */:
                    this.emitConvertOp(4 /* Int */, 3 /* Char */, opcode);
                    break;
                case 147 /* I2S */:
                    this.emitConvertOp(4 /* Int */, 2 /* Short */, opcode);
                    break;
                case 136 /* L2I */:
                    this.emitConvertOp(6 /* Long */, 4 /* Int */, opcode);
                    break;
                case 137 /* L2F */:
                    this.emitConvertOp(6 /* Long */, 5 /* Float */, opcode);
                    break;
                case 138 /* L2D */:
                    this.emitConvertOp(6 /* Long */, 7 /* Double */, opcode);
                    break;
                case 139 /* F2I */:
                    this.emitConvertOp(5 /* Float */, 4 /* Int */, opcode);
                    break;
                case 140 /* F2L */:
                    this.emitConvertOp(5 /* Float */, 6 /* Long */, opcode);
                    break;
                case 141 /* F2D */:
                    this.emitConvertOp(5 /* Float */, 7 /* Double */, opcode);
                    break;
                case 142 /* D2I */:
                    this.emitConvertOp(7 /* Double */, 4 /* Int */, opcode);
                    break;
                case 143 /* D2L */:
                    this.emitConvertOp(7 /* Double */, 6 /* Long */, opcode);
                    break;
                case 144 /* D2F */:
                    this.emitConvertOp(7 /* Double */, 5 /* Float */, opcode);
                    break;
                case 148 /* LCMP */:
                    this.emitCompareOp(6 /* Long */, false);
                    break;
                case 149 /* FCMPL */:
                    this.emitCompareOp(5 /* Float */, true);
                    break;
                case 150 /* FCMPG */:
                    this.emitCompareOp(5 /* Float */, false);
                    break;
                case 151 /* DCMPL */:
                    this.emitCompareOp(7 /* Double */, true);
                    break;
                case 152 /* DCMPG */:
                    this.emitCompareOp(7 /* Double */, false);
                    break;
                case 153 /* IFEQ */:
                    this.emitIfZero(block, stream, 0 /* EQ */);
                    break;
                case 154 /* IFNE */:
                    this.emitIfZero(block, stream, 1 /* NE */);
                    break;
                case 155 /* IFLT */:
                    this.emitIfZero(block, stream, 2 /* LT */);
                    break;
                case 156 /* IFGE */:
                    this.emitIfZero(block, stream, 5 /* GE */);
                    break;
                case 157 /* IFGT */:
                    this.emitIfZero(block, stream, 4 /* GT */);
                    break;
                case 158 /* IFLE */:
                    this.emitIfZero(block, stream, 3 /* LE */);
                    break;
                case 159 /* IF_ICMPEQ */:
                    this.emitIfSame(block, stream, 4 /* Int */, 0 /* EQ */);
                    break;
                case 160 /* IF_ICMPNE */:
                    this.emitIfSame(block, stream, 4 /* Int */, 1 /* NE */);
                    break;
                case 161 /* IF_ICMPLT */:
                    this.emitIfSame(block, stream, 4 /* Int */, 2 /* LT */);
                    break;
                case 162 /* IF_ICMPGE */:
                    this.emitIfSame(block, stream, 4 /* Int */, 5 /* GE */);
                    break;
                case 163 /* IF_ICMPGT */:
                    this.emitIfSame(block, stream, 4 /* Int */, 4 /* GT */);
                    break;
                case 164 /* IF_ICMPLE */:
                    this.emitIfSame(block, stream, 4 /* Int */, 3 /* LE */);
                    break;
                case 165 /* IF_ACMPEQ */:
                    this.emitIfSame(block, stream, 8 /* Reference */, 0 /* EQ */);
                    break;
                case 166 /* IF_ACMPNE */:
                    this.emitIfSame(block, stream, 8 /* Reference */, 1 /* NE */);
                    break;
                case 167 /* GOTO */:
                    this.emitGoto(block, stream);
                    break;
                case 170 /* TABLESWITCH */:
                    this.emitTableSwitch(block, stream);
                    break;
                case 171 /* LOOKUPSWITCH */:
                    this.emitLookupSwitch(block, stream);
                    break;
                case 172 /* IRETURN */:
                    this.emitReturn(4 /* Int */);
                    break;
                case 173 /* LRETURN */:
                    this.emitReturn(6 /* Long */);
                    break;
                case 174 /* FRETURN */:
                    this.emitReturn(5 /* Float */);
                    break;
                case 175 /* DRETURN */:
                    this.emitReturn(7 /* Double */);
                    break;
                case 176 /* ARETURN */:
                    this.emitReturn(8 /* Reference */);
                    break;
                case 177 /* RETURN */:
                    this.emitReturn(9 /* Void */);
                    break;
                case 178 /* GETSTATIC */:
                    cpi = stream.readCPI();
                    this.emitGetField(this.lookupField(cpi, opcode, true), true);
                    break;
                case 179 /* PUTSTATIC */:
                    cpi = stream.readCPI();
                    this.emitPutField(this.lookupField(cpi, opcode, true), true);
                    break;
                case 213 /* RESOLVED_GETFIELD */: opcode = 180 /* GETFIELD */;
                case 180 /* GETFIELD */:
                    cpi = stream.readCPI();
                    this.emitGetField(this.lookupField(cpi, opcode, false), false);
                    break;
                case 214 /* RESOLVED_PUTFIELD */: opcode = 181 /* PUTFIELD */;
                case 181 /* PUTFIELD */:
                    cpi = stream.readCPI();
                    this.emitPutField(this.lookupField(cpi, opcode, false), false);
                    break;
                case 215 /* RESOLVED_INVOKEVIRTUAL */: opcode = 182 /* INVOKEVIRTUAL */;
                case 182 /* INVOKEVIRTUAL */:
                    cpi = stream.readCPI();
                    this.emitInvoke(this.lookupMethod(cpi, opcode, false), opcode, stream.nextBCI);
                    break;
                case 183 /* INVOKESPECIAL */:
                    cpi = stream.readCPI();
                    this.emitInvoke(this.lookupMethod(cpi, opcode, false), opcode, stream.nextBCI);
                    break;
                case 184 /* INVOKESTATIC */:
                    cpi = stream.readCPI();
                    this.emitInvoke(this.lookupMethod(cpi, opcode, true), opcode, stream.nextBCI);
                    break;
                case 185 /* INVOKEINTERFACE */:
                    cpi = stream.readCPI();
                    this.emitInvoke(this.lookupMethod(cpi, opcode, false), opcode, stream.nextBCI);
                    break;
                case 187 /* NEW */:
                    this.emitNewInstance(stream.readCPI());
                    break;
                case 188 /* NEWARRAY */:
                    this.emitNewTypeArray(stream.readLocalIndex());
                    break;
                case 189 /* ANEWARRAY */:
                    this.emitNewObjectArray(stream.readCPI());
                    break;
                case 197 /* MULTIANEWARRAY */:
                    this.emitNewMultiObjectArray(stream.readCPI(), stream);
                    break;
                case 190 /* ARRAYLENGTH */:
                    this.emitArrayLength();
                    break;
                case 191 /* ATHROW */:
                    this.emitThrow(stream.currentBCI);
                    break;
                case 192 /* CHECKCAST */:
                    this.emitCheckCast(stream.readCPI());
                    break;
                case 193 /* INSTANCEOF */:
                    this.emitInstanceOf(stream.readCPI());
                    break;
                case 194 /* MONITORENTER */:
                    this.emitMonitorEnter(this.blockEmitter, stream.nextBCI, this.pop(8 /* Reference */));
                    break;
                case 195 /* MONITOREXIT */:
                    this.emitMonitorExit(this.blockEmitter, this.pop(8 /* Reference */));
                    break;
                case 198 /* IFNULL */:
                    this.emitIfNull(block, stream, 0 /* EQ */);
                    break;
                case 199 /* IFNONNULL */:
                    this.emitIfNull(block, stream, 1 /* NE */);
                    break;
                default:
                    throw new Error("Not Implemented " + Bytecodes[opcode]);
            }
            if (flushBlockStackAfter) {
                this.flushBlockStack();
            }
            writer && writer.writeLn("");
        };
        BaselineCompiler.localNames = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
        /**
         * Make sure that none of these shadow global names, like "U" and "O".
         */
        BaselineCompiler.stackNames = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "_O", "P", "Q", "R", "S", "T", "_U", "V", "W", "X", "Y", "Z"];
        return BaselineCompiler;
    })();
    J2ME.BaselineCompiler = BaselineCompiler;
})(J2ME || (J2ME = {}));
var J2ME;
(function (J2ME) {
    var quote = J2ME.StringUtilities.quote;
    var Emitter = (function () {
        function Emitter(writer, closure, debugInfo, klassHeaderOnly) {
            if (klassHeaderOnly === void 0) { klassHeaderOnly = false; }
            this.writer = writer;
            this.closure = closure;
            this.debugInfo = debugInfo;
            this.klassHeaderOnly = klassHeaderOnly;
            // ...
        }
        return Emitter;
    })();
    J2ME.Emitter = Emitter;
    (function (CompilationTarget) {
        CompilationTarget[CompilationTarget["Runtime"] = 0] = "Runtime";
        CompilationTarget[CompilationTarget["Static"] = 1] = "Static";
    })(J2ME.CompilationTarget || (J2ME.CompilationTarget = {}));
    var CompilationTarget = J2ME.CompilationTarget;
    function getClassInheritanceChain(classInfo) {
        var list = [];
        var klass = classInfo;
        while (klass) {
            list.unshift(klass);
            klass = klass.superClass;
        }
        return list;
    }
    function emitKlass(emitter, classInfo) {
        var writer = emitter.writer;
        var mangledClassName = classInfo.mangledName;
        if (emitter.closure) {
            writer.writeLn("/** @constructor */");
        }
        function emitFields(fields, emitStatic) {
            for (var i = 0; i < fields.length; i++) {
                var fieldInfo = fields[i];
                if (fieldInfo.isStatic !== emitStatic) {
                    continue;
                }
                var kind = J2ME.getSignatureKind(fieldInfo.utf8Signature);
                var defaultValue;
                switch (kind) {
                    case 8 /* Reference */:
                        defaultValue = "null";
                        break;
                    case 6 /* Long */:
                        defaultValue = "Long.ZERO";
                        break;
                    default:
                        defaultValue = "0";
                        break;
                }
                if (emitter.closure) {
                    writer.writeLn("this[" + quote(fieldInfo.mangledName) + "] = " + defaultValue + ";");
                }
                else {
                    writer.writeLn("this." + fieldInfo.mangledName + " = " + defaultValue + ";");
                }
            }
        }
        // Emit class initializer.
        writer.enter("function " + mangledClassName + "() {");
        //
        // Should we or should we not generate hash codes at this point? Eager or lazy, we should at least
        // initialize it zero to keep object shapes fixed.
        // writer.writeLn("this._hashCode = $.nextHashCode(this);");
        writer.writeLn("this._hashCode = 0;");
        emitFields(classInfo.fTable, false);
        writer.leave("}");
        if (emitter.klassHeaderOnly) {
            return;
        }
        if (emitter.closure) {
            writer.writeLn("window[" + quote(mangledClassName) + "] = " + mangledClassName + ";");
        }
    }
    J2ME.emitKlass = emitKlass;
    function classNameWithDots(classInfo) {
        return classInfo.getClassNameSlow().replace(/\//g, '.');
    }
    function emitMethodMetaData(emitter, methodInfo, compiledMethodInfo) {
        var metaData = Object.create(null);
        metaData.osr = compiledMethodInfo.onStackReplacementEntryPoints;
        emitter.writer.writeLn("AOTMD[\"" + methodInfo.mangledClassAndMethodName + "\"] = " + JSON.stringify(metaData) + ";");
    }
    J2ME.emitMethodMetaData = emitMethodMetaData;
    function emitReferencedSymbols(emitter, classInfo, compiledMethods) {
        var referencedClasses = [];
        for (var i = 0; i < compiledMethods.length; i++) {
            var compiledMethod = compiledMethods[i];
            compiledMethod.referencedClasses.forEach(function (classInfo) {
                J2ME.ArrayUtilities.pushUnique(referencedClasses, classInfo);
            });
        }
        var mangledClassName = classInfo.mangledName;
        emitter.writer.writeLn(mangledClassName + ".classSymbols = [" + referencedClasses.map(function (classInfo) {
            return quote(classInfo.getClassNameSlow());
        }).join(", ") + "];");
    }
    J2ME.emitReferencedSymbols = emitReferencedSymbols;
    var failedCompilations = 0;
    function compileClassInfo(emitter, classInfo, methodFilterList, ctx) {
        var writer = emitter.writer;
        var mangledClassName = classInfo.mangledName;
        if (!J2ME.isIdentifierName(mangledClassName)) {
            mangledClassName = quote(mangledClassName);
        }
        var classNameParts;
        emitKlass(emitter, classInfo);
        var methods = classInfo.getMethods();
        var compiledMethods = [];
        for (var i = 0; i < methods.length; i++) {
            var method = methods[i];
            if (method.isNative) {
                continue;
            }
            if (!method.codeAttribute) {
                continue;
            }
            if (methodFilterList !== null && methodFilterList.indexOf(method.implKey) < 0) {
                continue;
            }
            var mangledMethodName = method.mangledName;
            if (!J2ME.isIdentifierName(mangledMethodName)) {
                mangledMethodName = quote(mangledMethodName);
            }
            try {
                var mangledClassAndMethodName = method.mangledClassAndMethodName;
                if (emitter.debugInfo) {
                    writer.writeLn("// " + method.implKey + " (" + mangledClassAndMethodName + ")");
                }
                var compiledMethod = undefined;
                try {
                    compiledMethod = compileMethod(method, ctx, 1 /* Static */);
                }
                catch (e) {
                    J2ME.stderrWriter.errorLn("Compiler Exception: " + method.implKey + " " + e.toString());
                    failedCompilations++;
                }
                if (compiledMethod && compiledMethod.body) {
                    if (methodFilterList) {
                        methodFilterList.splice(methodFilterList.indexOf(method.implKey), 1);
                    }
                    var compiledMethodName = mangledClassAndMethodName;
                    writer.enter("function " + compiledMethodName + "(" + compiledMethod.args.join(",") + ") {");
                    writer.writeLns(compiledMethod.body);
                    writer.leave("}");
                    if (method.name === "<clinit>") {
                        writer.writeLn(mangledClassName + ".staticConstructor = " + mangledClassAndMethodName);
                    }
                    else if (!method.isStatic) {
                        //if (emitter.closure) {
                        //  writer.writeLn(mangledClassName + ".prototype[" + quote(mangledMethodName) + "] = " + mangledClassAndMethodName + ";");
                        //} else {
                        //  writer.writeLn(mangledClassName + ".prototype." + mangledMethodName + " = " + mangledClassAndMethodName + ";");
                        //}
                        if (emitter.closure) {
                            writer.writeLn("window[" + quote(mangledClassAndMethodName) + "] = " + mangledClassAndMethodName + ";");
                        }
                    }
                    emitMethodMetaData(emitter, method, compiledMethod);
                    compiledMethods.push(compiledMethod);
                }
            }
            catch (x) {
                J2ME.stderrWriter.writeLn("XXXX: " + x);
                J2ME.stderrWriter.writeLn(x.stack);
            }
        }
        emitReferencedSymbols(emitter, classInfo, compiledMethods);
        return compiledMethods;
    }
    var CompiledMethodInfo = (function () {
        function CompiledMethodInfo(args, body, referencedClasses, onStackReplacementEntryPoints) {
            if (onStackReplacementEntryPoints === void 0) { onStackReplacementEntryPoints = null; }
            this.args = args;
            this.body = body;
            this.referencedClasses = referencedClasses;
            this.onStackReplacementEntryPoints = onStackReplacementEntryPoints;
            // ...
        }
        return CompiledMethodInfo;
    })();
    J2ME.CompiledMethodInfo = CompiledMethodInfo;
    function compileMethod(methodInfo, ctx, target) {
        var method;
        method = J2ME.baselineCompileMethod(methodInfo, target);
        return method;
    }
    J2ME.compileMethod = compileMethod;
    function compile(jvm, jarFiles, jarFilter, classFilter, methodFilterList, fileFilter, debugInfo) {
        var runtime = new J2ME.Runtime(jvm);
        var ctx = new J2ME.Context(runtime);
        var code = "";
        var writer = new J2ME.IndentingWriter(false, function (s) {
            code += s + "\n";
        });
        var emitter = new Emitter(writer, false, debugInfo, false);
        var compiledMethods = [];
        var classInfoList = [];
        Object.keys(jarFiles).every(function (path) {
            if (path.substr(-4) !== ".jar" || !jarFilter(path)) {
                return true;
            }
            var zipFile = jarFiles[path];
            Object.keys(zipFile.directory).every(function (fileName) {
                if (fileName.substr(-6) !== '.class') {
                    return true;
                }
                try {
                    var className = fileName.substring(0, fileName.length - 6);
                    var classInfo = J2ME.CLASSES.getClass(className);
                    if (classInfo.sourceFile && !classInfo.sourceFile.match(fileFilter)) {
                        return true;
                    }
                    if (!classFilter(classInfo)) {
                        return true;
                    }
                    classInfoList.push(classInfo);
                }
                catch (e) {
                    J2ME.stderrWriter.writeLn(e + ": " + e.stack);
                }
                return true;
            }.bind(this));
            return true;
        }.bind(this));
        var orderedClassInfoList = [];
        function hasDependencies(list, classInfo) {
            var superClass = classInfo.superClass;
            var interfaces = classInfo.getAllInterfaces();
            if (!superClass && interfaces.length === 0) {
                return false;
            }
            for (var i = 0; i < list.length; i++) {
                if (list[i].getClassNameSlow() === superClass.getClassNameSlow()) {
                    return true;
                }
            }
            for (var j = 0; j < interfaces; j++) {
                for (var i = 0; i < list.length; i++) {
                    if (list[i].getClassNameSlow() === interfaces[j].getClassNameSlow()) {
                        return true;
                    }
                }
            }
            return false;
        }
        while (classInfoList.length) {
            for (var i = 0; i < classInfoList.length; i++) {
                var classInfo = classInfoList[i];
                if (!hasDependencies(classInfoList, classInfo)) {
                    orderedClassInfoList.push(classInfo);
                    classInfoList.splice(i--, 1);
                    break;
                }
            }
        }
        var filteredClassInfoList = [];
        for (var i = 0; i < orderedClassInfoList.length; i++) {
            var classInfo = orderedClassInfoList[i];
            var methods = classInfo.getMethods();
            for (var j = 0; j < methods.length; j++) {
                var method = methods[j];
                if (methodFilterList === null || methodFilterList.indexOf(method.implKey) >= 0) {
                    // If at least one method is found, compile the class.
                    filteredClassInfoList.push(classInfo);
                    break;
                }
            }
        }
        for (var i = 0; i < filteredClassInfoList.length; i++) {
            var classInfo = filteredClassInfoList[i];
            if (emitter.debugInfo) {
                writer.writeLn("// " + classInfo.getClassNameSlow() + (classInfo.superClass ? " extends " + classInfo.superClass.getClassNameSlow() : ""));
            }
            // Don't compile interfaces.
            if (classInfo.isInterface) {
                continue;
            }
            J2ME.ArrayUtilities.pushMany(compiledMethods, compileClassInfo(emitter, classInfo, methodFilterList, ctx));
        }
        var color = failedCompilations ? J2ME.IndentingWriter.YELLOW : J2ME.IndentingWriter.GREEN;
        J2ME.stderrWriter.colorLn(color, "Compiled " + compiledMethods.length + " methods OK, " + failedCompilations + " failed.");
        J2ME.stdoutWriter.writeLn(code);
        J2ME.stdoutWriter.enter("/*");
        J2ME.baselineCounter && J2ME.baselineCounter.traceSorted(J2ME.stdoutWriter);
        J2ME.yieldCounter && J2ME.yieldCounter.traceSorted(J2ME.stdoutWriter);
        J2ME.yieldGraph && J2ME.traceYieldGraph(J2ME.stdoutWriter);
        J2ME.stdoutWriter.enter("*/");
        // yieldCounter.traceSorted(stdoutWriter);
    }
    J2ME.compile = compile;
})(J2ME || (J2ME = {}));
// Basics
//# sourceMappingURL=j2me.js.map/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var Override = {};

function asyncImpl(returnKind, promise) {
  var ctx = $.ctx;

  promise.then(function(res) {
    if (returnKind === "J" || returnKind === "D") {
      ctx.current().stack.push2(res);
    } else if (returnKind !== "V") {
      ctx.current().stack.push(res);
    } else {
      // void, do nothing
    }
    ctx.execute();
  }, function(exception) {
    var classInfo = CLASSES.getClass("org/mozilla/internal/Sys");
    var methodInfo = classInfo.getMethodByNameString("throwException", "(Ljava/lang/Exception;)V", true);
    ctx.frames.push(Frame.create(methodInfo, [exception], 0));
    ctx.execute();
  });
  $.pause("Async");
}

Override["java/lang/Math.min.(II)I"] = function(a, b) {
  return Math.min(a, b);
};

Override["java/io/ByteArrayOutputStream.write.([BII)V"] = function(b, off, len) {
  if ((off < 0) || (off > b.length) || (len < 0) ||
      ((off + len) > b.length)) {
    throw $.newIndexOutOfBoundsException();
  }

  if (len == 0) {
    return;
  }

  var count = this.count;
  var buf = this.buf;

  var newcount = count + len;
  if (newcount > buf.length) {
    var newbuf = J2ME.newByteArray(Math.max(buf.length << 1, newcount));
    newbuf.set(buf);
    buf = newbuf;
    this.buf = buf;
  }

  buf.set(b.subarray(off, off + len), count);
  this.count = newcount;
};

Override["java/io/ByteArrayOutputStream.write.(I)V"] = function(value) {
  var count = this.count;
  var buf = this.buf;

  var newcount = count + 1;
  if (newcount > buf.length) {
    var newbuf = J2ME.newByteArray(Math.max(buf.length << 1, newcount));
    newbuf.set(buf);
    buf = newbuf;
    this.buf = buf;
  }

  buf[count] = value;
  this.count = newcount;
};

Override["java/io/ByteArrayInputStream.<init>.([B)V"] = function(buf) {
  if (!buf) {
    throw $.newNullPointerException();
  }

  this.buf = buf;
  this.pos = this.mark = 0;
  this.count = buf.length;
};

Override["java/io/ByteArrayInputStream.<init>.([BII)V"] = function(buf, offset, length) {
  if (!buf) {
    throw $.newNullPointerException();
  }

  this.buf = buf;
  this.pos = this.mark = offset;
  this.count = (offset + length <= buf.length) ? (offset + length) : buf.length;
};

Override["java/io/ByteArrayInputStream.read.()I"] = function() {
  return (this.pos < this.count) ? (this.buf[this.pos++] & 0xFF) : -1;
};

Override["java/io/ByteArrayInputStream.read.([BII)I"] = function(b, off, len) {
  if (!b) {
    throw $.newNullPointerException();
  }

  if ((off < 0) || (off > b.length) || (len < 0) ||
      ((off + len) > b.length)) {
    throw $.newIndexOutOfBoundsException();
  }

  if (this.pos >= this.count) {
    return -1;
  }
  if (this.pos + len > this.count) {
    len = this.count - this.pos;
  }
  if (len === 0) {
    return 0;
  }

  b.set(this.buf.subarray(this.pos, this.pos + len), off);

  this.pos += len;
  return len;
};

Override["java/io/ByteArrayInputStream.skip.(J)J"] = function(long) {
  var n = long.toNumber();

  if (this.pos + n > this.count) {
    n = this.count - this.pos;
  }

  if (n < 0) {
    return Long.fromNumber(0);
  }

  this.pos += n;

  return Long.fromNumber(n);
};

Override["java/io/ByteArrayInputStream.available.()I"] = function() {
  return this.count - this.pos;
};

Override["java/io/ByteArrayInputStream.mark.(I)V"] = function(readAheadLimit) {
  this.mark = this.pos;
};

Override["java/io/ByteArrayInputStream.reset.()V"] = function() {
  this.pos = this.mark;
};

// The following Permissions methods are overriden to avoid expensive calls to
// DomainPolicy.loadValues. This has the added benefit that we avoid many other
// computations.

Override["com/sun/midp/security/Permissions.forDomain.(Ljava/lang/String;)[[B"] = function(name) {
  // NUMBER_OF_PERMISSIONS = PermissionsStrings.PERMISSION_STRINGS.length + 2
  // The 2 is the two hardcoded MIPS and AMS permissions.
  var NUMBER_OF_PERMISSIONS = 61;
  var ALLOW = 1;

  var maximums = J2ME.newByteArray(NUMBER_OF_PERMISSIONS);
  var defaults = J2ME.newByteArray(NUMBER_OF_PERMISSIONS);

  for (var i = 0; i < NUMBER_OF_PERMISSIONS; i++) {
    maximums[i] = defaults[i] = ALLOW;
  }

  var permissions = J2ME.newArray(J2ME.PrimitiveArrayClassInfo.B.klass, 2);
  permissions[0] = maximums;
  permissions[1] = defaults;

  return permissions;
};

// Always return true to make Java think the MIDlet domain is trusted.
Override["com/sun/midp/security/Permissions.isTrusted.(Ljava/lang/String;)Z"] = function(name) {
  return 1;
};

// Returns the ID of the permission. The callers will use this ID to check the
// permission in the permissions array returned by Permissions::forDomain.
Override["com/sun/midp/security/Permissions.getId.(Ljava/lang/String;)I"] = function(name) {
  return 0;
};

// The Java code that uses this method doesn't actually use the return value, but
// passes it to Permissions.getId. So we can return anything.
Override["com/sun/midp/security/Permissions.getName.(I)Ljava/lang/String;"] = function(id) {
  return J2ME.newString("com.sun.midp");
};

Override["com/sun/cldc/i18n/uclc/DefaultCaseConverter.toLowerCase.(C)C"] = function(char) {
    return String.fromCharCode(char).toLowerCase().charCodeAt(0);
};

Override["com/sun/cldc/i18n/uclc/DefaultCaseConverter.toUpperCase.(C)C"] = function(char) {
    return String.fromCharCode(char).toUpperCase().charCodeAt(0);
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var Native = {};

Native["java/lang/System.arraycopy.(Ljava/lang/Object;ILjava/lang/Object;II)V"] = function(src, srcOffset, dst, dstOffset, length) {
    if (!src || !dst)
        throw $.newNullPointerException("Cannot copy to/from a null array.");
    var srcKlass = src.klass;
    var dstKlass = dst.klass;

    if (!srcKlass.isArrayKlass || !dstKlass.isArrayKlass)
        throw $.newArrayStoreException("Can only copy to/from array types.");
    if (srcOffset < 0 || (srcOffset+length) > src.length || dstOffset < 0 || (dstOffset+length) > dst.length || length < 0)
        throw $.newArrayIndexOutOfBoundsException("Invalid index.");
    var srcIsPrimitive = !(src instanceof Array);
    var dstIsPrimitive = !(dst instanceof Array);
    if ((srcIsPrimitive && dstIsPrimitive && srcKlass !== dstKlass) ||
        (srcIsPrimitive && !dstIsPrimitive) ||
        (!srcIsPrimitive && dstIsPrimitive)) {
        throw $.newArrayStoreException("Incompatible component types: " + srcKlass + " -> " + dstKlass);
    }
    if (!dstIsPrimitive) {
        if (srcKlass != dstKlass && !J2ME.isAssignableTo(srcKlass.elementKlass, dstKlass.elementKlass)) {
            var copy = function(to, from) {
                var obj = src[from];
                if (obj && !J2ME.isAssignableTo(obj.klass, dstKlass.elementKlass)) {
                    throw $.newArrayStoreException("Incompatible component types.");
                }
                dst[to] = obj;
            };
            if (dst !== src || dstOffset < srcOffset) {
                for (var n = 0; n < length; ++n)
                    copy(dstOffset++, srcOffset++);
            } else {
                dstOffset += length;
                srcOffset += length;
                for (var n = 0; n < length; ++n)
                    copy(--dstOffset, --srcOffset);
            }
            return;
        }
    }
    if (dst !== src || dstOffset < srcOffset) {
        for (var n = 0; n < length; ++n)
            dst[dstOffset++] = src[srcOffset++];
    } else {
        dstOffset += length;
        srcOffset += length;
        for (var n = 0; n < length; ++n)
            dst[--dstOffset] = src[--srcOffset];
    }
};

var stubProperties = {
  "com.nokia.multisim.slots": "1",
  "com.nokia.mid.imsi": "000000000000000",
  "com.nokia.mid.imei": "",
};

Native["java/lang/System.getProperty0.(Ljava/lang/String;)Ljava/lang/String;"] = function(key) {
    key = J2ME.fromJavaString(key);
    var value;
    switch (key) {
    case "microedition.encoding":
        // The value of this property is different than the value on a real Nokia Asha 503 phone.
        // On the phone, it is: ISO8859_1.
        // If we changed this, we would need to remove the optimizations for UTF_8_Reader and
        // UTF_8_Writer and optimize the ISO8859_1 alternatives.
        value = "UTF-8";
        break;
    case "microedition.io.file.FileConnection.version":
        value = "1.0";
        break;
    case "microedition.locale":
        value = navigator.language;
        break;
    case "microedition.platform":
        value = config.platform ? config.platform : "Nokia503/14.0.4/java_runtime_version=Nokia_Asha_1_2";
        break;
    case "microedition.platformimpl":
        value = null;
        break;
    case "microedition.profiles":
        value = "MIDP-2.1"
        break;
    case "microedition.pim.version":
        value = "1.0";
        break;
    case "microedition.amms.version":
        value = "1.1";
        break;
    case "microedition.media.version":
        value = '1.2';
        break;
    case "mmapi-configuration":
        value = null;
        break;
    case "fileconn.dir.memorycard":
        value = "file:///MemoryCard/";
        break;
    // The names here should be localized.
    case "fileconn.dir.memorycard.name":
        value = "Memory card";
        break;
    case "fileconn.dir.private":
        value = "file:///Private/";
        break;
    case "fileconn.dir.private.name":
        value = "Private";
        break;
    case "fileconn.dir.applications.bookmarks":
        value = null;
        break;
    case "fileconn.dir.received":
        value = "file:///Phone/_my_downloads/";
        break;
    case "fileconn.dir.received.name":
        value = "Downloads";
        break;
    case "fileconn.dir.photos":
        value = "file:///Phone/_my_pictures/";
        break;
    case "fileconn.dir.photos.name":
        value = "Photos";
        break;
    case "fileconn.dir.videos":
        value = "file:///Phone/_my_videos/";
        break;
    case "fileconn.dir.videos.name":
        value = "Videos";
        break;
    case "fileconn.dir.recordings":
        value = "file:///Phone/_my_recordings/";
        break;
    case "fileconn.dir.recordings.name":
        value = "Recordings";
        break;
    case "fileconn.dir.roots.names":
        value = MIDP.fsRootNames.join(";");
        break;
    case "fileconn.dir.roots.external":
        value = MIDP.fsRoots.map(function(v) { return "file:///" + v }).join("\n");
        break;
    case "file.separator":
        value = "/";
        break;
    case "com.sun.cldc.util.j2me.TimeZoneImpl.timezone":
        // Date.toString() returns something like the following:
        //    "Wed Sep 17 2014 12:11:23 GMT-0700 (PDT)"
        //
        // Per http://www.spectrum3847.org/frc2013api/com/sun/cldc/util/j2me/TimeZoneImpl.html,
        // timezones can be of the format GMT+0600, which is what this
        // regex currently matches. (Those actually in GMT would not
        // match the regex, causing the default "GMT" to be returned.)
        // If we find this to be a problem, we could alternately return the
        // zone name as provided in parenthesis, but that seems locale-specific.
        var match = /GMT[+-]\d+/.exec(new Date().toString());
        value = (match && match[0]) || "GMT";
        break;
    case "javax.microedition.io.Connector.protocolpath":
        value = "com.sun.midp.io";
        break;
    case "javax.microedition.io.Connector.protocolpath.fallback":
        value = "com.sun.cldc.io";
        break;
    case "com.nokia.keyboard.type":
        value = "None";
        break;
    case "com.nokia.mid.batterylevel":
        // http://developer.nokia.com/community/wiki/Checking_battery_level_in_Java_ME
        value = Math.floor(navigator.battery.level * 100).toString();
        break;
    case "com.nokia.mid.ui.version":
        value = "1.7";
        break;
    case "com.nokia.mid.mnc":
        if (mobileInfo.icc.mcc && mobileInfo.icc.mnc) {
            // The concatenation of the MCC and MNC for the ICC (i.e. SIM card).
            value = util.pad(mobileInfo.icc.mcc, 3) + util.pad(mobileInfo.icc.mnc, 3);
        } else {
            value = null;
        }
        break;
    case "com.nokia.mid.networkID":
        if (mobileInfo.network.mcc && mobileInfo.network.mnc) {
            // The concatenation of MCC and MNC for the network.
            value = util.pad(mobileInfo.network.mcc, 3) + util.pad(mobileInfo.network.mnc, 3);
        } else {
            value = null;
        }
        break;
    case "com.nokia.mid.ui.customfontsize":
        value = "true";
        break;
    case "classpathext":
        value = null;
        break;
    case "supports.audio.capture":
        value = "true";
        break;
    case "supports.video.capture":
        value = "true";
        break;
    case "supports.recording":
        value = "true";
        break;
    case "audio.encodings":
        value = "encoding=audio/amr";
        break;
    case "video.snapshot.encodings":
        // FIXME Some MIDlets pass a string that contains lots of constraints
        // as the `imageType` which is not yet handled in DirectVideo.jpp, let's
        // just put the whole string here as a workaround and fix this in issue #688.
        value = "encoding=jpeg&quality=80&progressive=true&type=jfif&width=400&height=400";
        break;
    default:
        if (MIDP.additionalProperties[key]) {
            value = MIDP.additionalProperties[key];
        } else if (typeof stubProperties[key] !== "undefined") {
            value = stubProperties[key];
        } else {
            console.warn("UNKNOWN PROPERTY (java/lang/System): " + key);
            stubProperties[key] = value = null;
        }
        break;
    }

    return J2ME.newString(value);
};

Native["java/lang/System.currentTimeMillis.()J"] = function() {
    return Long.fromNumber(Date.now());
};

Native["com/sun/cldchi/jvm/JVM.unchecked_char_arraycopy.([CI[CII)V"] = function(src, srcOffset, dst, dstOffset, length) {
  dst.set(src.subarray(srcOffset, srcOffset + length), dstOffset);
};

Native["com/sun/cldchi/jvm/JVM.unchecked_int_arraycopy.([II[III)V"] = function(src, srcOffset, dst, dstOffset, length) {
  dst.set(src.subarray(srcOffset, srcOffset + length), dstOffset);
};

Native["com/sun/cldchi/jvm/JVM.unchecked_obj_arraycopy.([Ljava/lang/Object;I[Ljava/lang/Object;II)V"] = function(src, srcOffset, dst, dstOffset, length) {
    if (dst !== src || dstOffset < srcOffset) {
        for (var n = 0; n < length; ++n)
            dst[dstOffset++] = src[srcOffset++];
    } else {
        dstOffset += length;
        srcOffset += length;
        for (var n = 0; n < length; ++n)
            dst[--dstOffset] = src[--srcOffset];
    }
};

Native["com/sun/cldchi/jvm/JVM.monotonicTimeMillis.()J"] = function() {
    return Long.fromNumber(performance.now());
};

Native["java/lang/Object.getClass.()Ljava/lang/Class;"] = function() {
    return $.getRuntimeKlass(this.klass).classObject;
};

Native["java/lang/Object.wait.(J)V"] = function(timeout) {
    $.ctx.wait(this, timeout.toNumber());
};

Native["java/lang/Object.notify.()V"] = function() {
    $.ctx.notify(this);
};

Native["java/lang/Object.notifyAll.()V"] = function() {
    $.ctx.notify(this, true);
};

Native["java/lang/Class.getSuperclass.()Ljava/lang/Class;"] = function() {
    var superKlass = this.runtimeKlass.templateKlass.superKlass;
    if (!superKlass) {
      return null;
    }
    return superKlass.classInfo.getClassObject();
};

Native["java/lang/Class.invoke_clinit.()V"] = function() {
    var classInfo = this.runtimeKlass.templateKlass.classInfo;
    var className = classInfo.getClassNameSlow();
    var clinit = classInfo.staticInitializer;
    if (clinit && clinit.classInfo.getClassNameSlow() === className) {
        $.ctx.executeFrame(Frame.create(clinit, [], 0));
    }
};

Native["java/lang/Class.invoke_verify.()V"] = function() {
    // There is currently no verification.
};

Native["java/lang/Class.init9.()V"] = function() {
    $.setClassInitialized(this.runtimeKlass);
};

Native["java/lang/Class.getName.()Ljava/lang/String;"] = function() {
    return J2ME.newString(this.runtimeKlass.templateKlass.classInfo.getClassNameSlow().replace(/\//g, "."));
};

Native["java/lang/Class.forName0.(Ljava/lang/String;)V"] = function(name) {
  var classInfo = null;
  try {
    if (!name)
      throw new J2ME.ClassNotFoundException();
    var className = J2ME.fromJavaString(name).replace(/\./g, "/");
    classInfo = CLASSES.getClass(className);
  } catch (e) {
    if (e instanceof (J2ME.ClassNotFoundException))
      throw $.newClassNotFoundException("'" + e.message + "' not found.");
    throw e;
  }
  // The following can trigger an unwind.
  J2ME.classInitCheck(classInfo);
};

Native["java/lang/Class.forName1.(Ljava/lang/String;)Ljava/lang/Class;"] = function(name) {
  var className = J2ME.fromJavaString(name).replace(/\./g, "/");
  var classInfo = CLASSES.getClass(className);
  var classObject = classInfo.getClassObject();
  return classObject;
};

Native["java/lang/Class.newInstance0.()Ljava/lang/Object;"] = function() {
  if (this.runtimeKlass.templateKlass.classInfo.isInterface ||
      this.runtimeKlass.templateKlass.classInfo.isAbstract) {
    throw $.newInstantiationException("Can't instantiate interfaces or abstract classes");
  }

  if (this.runtimeKlass.templateKlass.classInfo instanceof J2ME.ArrayClassInfo) {
    throw $.newInstantiationException("Can't instantiate array classes");
  }

  return new this.runtimeKlass.templateKlass;
};

Native["java/lang/Class.newInstance1.(Ljava/lang/Object;)V"] = function(o) {
  // The following can trigger an unwind.
  var methodInfo = o.klass.classInfo.getLocalMethodByNameString("<init>", "()V", false);
  if (!methodInfo) {
    throw $.newInstantiationException("Can't instantiate classes without a nullary constructor");
  }
  J2ME.getLinkedMethod(methodInfo).call(o);
};

Native["java/lang/Class.isInterface.()Z"] = function() {
    return this.runtimeKlass.templateKlass.classInfo.isInterface ? 1 : 0;
};

Native["java/lang/Class.isArray.()Z"] = function() {
    return this.runtimeKlass.templateKlass.classInfo instanceof J2ME.ArrayClassInfo ? 1 : 0;
};

Native["java/lang/Class.isAssignableFrom.(Ljava/lang/Class;)Z"] = function(fromClass) {
    if (!fromClass)
        throw $.newNullPointerException();
    return J2ME.isAssignableTo(fromClass.runtimeKlass.templateKlass, this.runtimeKlass.templateKlass) ? 1 : 0;
};

Native["java/lang/Class.isInstance.(Ljava/lang/Object;)Z"] = function(obj) {
    return obj && J2ME.isAssignableTo(obj.klass, this.runtimeKlass.templateKlass) ? 1 : 0;
};

Native["java/lang/Float.floatToIntBits.(F)I"] = (function() {
    var fa = new Float32Array(1);
    var ia = new Int32Array(fa.buffer);
    return function(val) {
        fa[0] = val;
        return ia[0];
    }
})();

Native["java/lang/Double.doubleToLongBits.(D)J"] = (function() {
    var da = new Float64Array(1);
    var ia = new Int32Array(da.buffer);
    return function(val) {
        da[0] = val;
        return Long.fromBits(ia[0], ia[1]);
    }
})();

Native["java/lang/Float.intBitsToFloat.(I)F"] = (function() {
    var fa = new Float32Array(1);
    var ia = new Int32Array(fa.buffer);
    return function(val) {
        ia[0] = val;
        return fa[0];
    }
})();

Native["java/lang/Double.longBitsToDouble.(J)D"] = (function() {
    var da = new Float64Array(1);
    var ia = new Int32Array(da.buffer);
    return function(l) {
        ia[0] = l.low_;
        ia[1] = l.high_;
        return da[0];
    }
})();

Native["java/lang/Throwable.fillInStackTrace.()V"] = function() {
    this.stackTrace = [];
    $.ctx.frames.forEach(function(frame) {
        if (!frame.methodInfo)
            return;
        var methodInfo = frame.methodInfo;
        var methodName = methodInfo.name;
        if (!methodName)
            return;
        var classInfo = methodInfo.classInfo;
        var className = classInfo.getClassNameSlow();
        this.stackTrace.unshift({ className: className, methodName: methodName, methodSignature: methodInfo.signature, offset: frame.bci });
    }.bind(this));
};

Native["java/lang/Throwable.obtainBackTrace.()Ljava/lang/Object;"] = function() {
    var result = null;
    if (this.stackTrace) {
        var depth = this.stackTrace.length;
        var classNames = J2ME.newObjectArray(depth);
        var methodNames = J2ME.newObjectArray(depth);
        var methodSignatures = J2ME.newObjectArray(depth);
        var offsets = J2ME.newIntArray(depth);
        this.stackTrace.forEach(function(e, n) {
            classNames[n] = J2ME.newString(e.className);
            methodNames[n] = J2ME.newString(e.methodName);
            methodSignatures[n] = J2ME.newString(e.methodSignature);
            offsets[n] = e.offset;
        });
        result = J2ME.newObjectArray(3);
        result[0] = classNames;
        result[1] = methodNames;
        result[2] = methodSignatures;
        result[3] = offsets;
    }
    return result;
};

Native["java/lang/Runtime.freeMemory.()J"] = function() {
    return Long.fromInt(0x800000);
};

Native["java/lang/Runtime.totalMemory.()J"] = function() {
    return Long.fromInt(0x1000000);
};

Native["java/lang/Runtime.gc.()V"] = function() {
};

Native["java/lang/Math.floor.(D)D"] = function(val) {
    return Math.floor(val);
};

Native["java/lang/Math.asin.(D)D"] = function(val) {
    return Math.asin(val);
};

Native["java/lang/Math.acos.(D)D"] = function(val) {
    return Math.acos(val);
};

Native["java/lang/Math.atan.(D)D"] = function(val) {
    return Math.atan(val);
};

Native["java/lang/Math.atan2.(DD)D"] = function(x, y) {
    return Math.atan2(x, y);
};

Native["java/lang/Math.sin.(D)D"] = function(val) {
    return Math.sin(val);
};

Native["java/lang/Math.cos.(D)D"] = function(val) {
    return Math.cos(val);
};

Native["java/lang/Math.tan.(D)D"] = function(val) {
    return Math.tan(val);
};

Native["java/lang/Math.sqrt.(D)D"] = function(val) {
    return Math.sqrt(val);
};

Native["java/lang/Math.ceil.(D)D"] = function(val) {
    return Math.ceil(val);
};

Native["java/lang/Math.floor.(D)D"] = function(val) {
    return Math.floor(val);
};

Native["java/lang/Thread.currentThread.()Ljava/lang/Thread;"] = function() {
    return $.ctx.thread;
};

Native["java/lang/Thread.setPriority0.(II)V"] = function(oldPriority, newPriority) {
};

Native["java/lang/Thread.start0.()V"] = function() {
    // The main thread starts during bootstrap and don't allow calling start()
    // on already running threads.
    if (this === $.ctx.runtime.mainThread || this.alive)
        throw $.newIllegalThreadStateException();
    this.alive = true;
    this.pid = util.id();
    // Create a context for the thread and start it.
    var newCtx = new Context($.ctx.runtime);
    newCtx.thread = this;

    var classInfo = CLASSES.getClass("org/mozilla/internal/Sys");
    var run = classInfo.getMethodByNameString("runThread", "(Ljava/lang/Thread;)V", true);
    newCtx.start([new Frame(run, [ this ], 0)]);
}

Native["java/lang/Thread.isAlive.()Z"] = function() {
    return this.alive ? 1 : 0;
};

Native["java/lang/Thread.sleep.(J)V"] = function(delay) {
    asyncImpl("V", new Promise(function(resolve, reject) {
        window.setTimeout(resolve, delay.toNumber());
    }));
};

Native["java/lang/Thread.yield.()V"] = function() {
    $.yield("Thread.yield");
};

Native["java/lang/Thread.activeCount.()I"] = function() {
    return $.ctx.runtime.threadCount;
};

Native["com/sun/cldchi/io/ConsoleOutputStream.write.(I)V"] = function(ch) {
    console.print(ch);
};

Native["com/sun/cldc/io/ResourceInputStream.open.(Ljava/lang/String;)Ljava/lang/Object;"] = function(name) {
    var fileName = J2ME.fromJavaString(name);
    var data = JARStore.loadFile(fileName);
    var obj = null;
    if (data) {
        obj = J2ME.newObject(CLASSES.java_lang_Object.klass);
        obj.data = data;
        obj.pos = 0;
    }
    return obj;
};

Native["com/sun/cldc/io/ResourceInputStream.clone.(Ljava/lang/Object;)Ljava/lang/Object;"] = function(source) {
    var obj = J2ME.newObject(CLASSES.java_lang_Object.klass);
    obj.data = new Uint8Array(source.data);
    obj.pos = source.pos;
    return obj;
};

Native["com/sun/cldc/io/ResourceInputStream.bytesRemain.(Ljava/lang/Object;)I"] = function(handle) {
    return handle.data.length - handle.pos;
};

Native["com/sun/cldc/io/ResourceInputStream.readByte.(Ljava/lang/Object;)I"] = function(handle) {
    return (handle.data.length - handle.pos > 0) ? handle.data[handle.pos++] : -1;
};

Native["com/sun/cldc/io/ResourceInputStream.readBytes.(Ljava/lang/Object;[BII)I"] = function(handle, b, off, len) {
    var data = handle.data;
    var remaining = data.length - handle.pos;
    if (len > remaining)
        len = remaining;
    for (var n = 0; n < len; ++n)
        b[off+n] = data[handle.pos+n];
    handle.pos += len;
    return (len > 0) ? len : -1;
};

Native["java/lang/ref/WeakReference.initializeWeakReference.(Ljava/lang/Object;)V"] = function(target) {
    this.target = target;
};

Native["java/lang/ref/WeakReference.get.()Ljava/lang/Object;"] = function() {
    return this.target ? this.target : null;
};

Native["java/lang/ref/WeakReference.clear.()V"] = function() {
    this.target = null;
};

Native["com/sun/cldc/isolate/Isolate.registerNewIsolate.()V"] = function() {
    this.id = util.id();
};

Native["com/sun/cldc/isolate/Isolate.getStatus.()I"] = function() {
    return this.runtime ? this.runtime.status : J2ME.RuntimeStatus.New;
};

Native["com/sun/cldc/isolate/Isolate.nativeStart.()V"] = function() {
    $.ctx.runtime.jvm.startIsolate(this);
};

Native["com/sun/cldc/isolate/Isolate.waitStatus.(I)V"] = function(status) {
    asyncImpl("V", new Promise((function(resolve, reject) {
        var runtime = this.runtime;
        if (runtime.status >= status) {
            resolve();
            return;
        }
        function waitForStatus() {
            if (runtime.status >= status) {
                resolve();
                return;
            }
            runtime.waitStatus(waitForStatus);
        }
        waitForStatus();
    }).bind(this)));
};

Native["com/sun/cldc/isolate/Isolate.currentIsolate0.()Lcom/sun/cldc/isolate/Isolate;"] = function() {
    return $.ctx.runtime.isolate;
};

Native["com/sun/cldc/isolate/Isolate.getIsolates0.()[Lcom/sun/cldc/isolate/Isolate;"] = function() {
    var isolates = J2ME.newObjectArray(Runtime.all.keys().length);
    var n = 0;
    Runtime.all.forEach(function (runtime) {
        isolates[n++] = runtime.isolate;
    });
    return isolates;
};

Native["com/sun/cldc/isolate/Isolate.id0.()I"] = function() {
    return this.id;
};

Native["com/sun/cldc/isolate/Isolate.setPriority0.(I)V"] = function(newPriority) {
};

var links = {};
var waitingForLinks = {};

Native["com/sun/midp/links/LinkPortal.getLinkCount0.()I"] = function() {
    var ctx = $.ctx;
    asyncImpl("I", new Promise(function(resolve, reject) {
        var isolateId = ctx.runtime.isolate.id;

        if (!links[isolateId]) {
            waitingForLinks[isolateId] = function() {
                resolve(links[isolateId].length);
            }

            return;
        }

        resolve(links[isolateId].length);
    }));
};

Native["com/sun/midp/links/LinkPortal.getLinks0.([Lcom/sun/midp/links/Link;)V"] = function(linkArray) {
    var isolateId = $.ctx.runtime.isolate.id;

    for (var i = 0; i < links[isolateId].length; i++) {
        linkArray[i].nativePointer = links[isolateId][i].nativePointer;
        linkArray[i].sender = links[isolateId][i].sender;
        linkArray[i].receiver = links[isolateId][i].receiver;
    }
};

Native["com/sun/midp/links/LinkPortal.setLinks0.(I[Lcom/sun/midp/links/Link;)V"] = function(id, linkArray) {
    links[id] = linkArray;

    if (waitingForLinks[id]) {
        waitingForLinks[id]();
    }
};

Native["com/sun/midp/links/Link.init0.(II)V"] = function(sender, receiver) {
    this.sender = sender;
    this.receiver = receiver;
    this.nativePointer = util.id();
};

Native["com/sun/midp/links/Link.receive0.(Lcom/sun/midp/links/LinkMessage;Lcom/sun/midp/links/Link;)V"] = function(linkMessage, link) {
    // TODO: Implement when something hits send0
    console.warn("Called com/sun/midp/links/Link.receive0.(Lcom/sun/midp/links/LinkMessage;Lcom/sun/midp/links/Link;)V");
    asyncImpl("V", new Promise(function(){}));
};

Native["com/sun/cldc/i18n/j2me/UTF_8_Reader.init.([B)V"] = function(data) {
    this.decoded = new TextDecoder("UTF-8").decode(data);
};

Native["com/sun/cldc/i18n/j2me/UTF_8_Reader.readNative.([CII)I"] = function(cbuf, off, len) {
    if (this.decoded.length === 0) {
      return -1;
    }

    for (var i = 0; i < len; i++) {
      cbuf[i + off] = this.decoded.charCodeAt(i);
    }

    this.decoded = this.decoded.substring(len);

    return len;
};

Native["java/io/DataOutputStream.UTFToBytes.(Ljava/lang/String;)[B"] = function(jStr) {
    var str = J2ME.fromJavaString(jStr);

    var utflen = 0;

    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if ((c >= 0x0001) && (c <= 0x007F)) {
            utflen++;
        } else if (c > 0x07FF) {
            utflen += 3;
        } else {
            utflen += 2;
        }
    }

    if (utflen > 65535) {
        throw $.newUTFDataFormatException();
    }

    var count = 0;
    var bytearr = J2ME.newByteArray(utflen + 2);
    bytearr[count++] = (utflen >>> 8) & 0xFF;
    bytearr[count++] = (utflen >>> 0) & 0xFF;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if ((c >= 0x0001) && (c <= 0x007F)) {
            bytearr[count++] = c;
        } else if (c > 0x07FF) {
            bytearr[count++] = 0xE0 | ((c >> 12) & 0x0F);
            bytearr[count++] = 0x80 | ((c >>  6) & 0x3F);
            bytearr[count++] = 0x80 | ((c >>  0) & 0x3F);
        } else {
            bytearr[count++] = 0xC0 | ((c >>  6) & 0x1F);
            bytearr[count++] = 0x80 | ((c >>  0) & 0x3F);
        }
    }

    return bytearr;
};

Native["com/sun/cldc/i18n/j2me/UTF_8_Writer.encodeUTF8.([CII)[B"] = function(cbuf, off, len) {
  var outputArray = [];

  var pendingSurrogate = this.pendingSurrogate;

  var inputChar = 0;
  var outputSize = 0;
  var count = 0;

  while (count < len) {
    var outputByte = new Int8Array(4);     // Never more than 4 encoded bytes
    inputChar = 0xffff & cbuf[off + count];
    if (0 != pendingSurrogate) {
      if (0xdc00 <= inputChar && inputChar <= 0xdfff) {
        //000u uuuu xxxx xxxx xxxx xxxx
        //1101 10ww wwxx xxxx   1101 11xx xxxx xxxx
        var highHalf = (pendingSurrogate & 0x03ff) + 0x0040;
        var lowHalf = inputChar & 0x03ff;
        inputChar = (highHalf << 10) | lowHalf;
      } else {
        // write replacement value instead of unpaired surrogate
        outputByte[0] = replacementValue;
        outputSize = 1;
        outputArray.push(outputByte.subarray(0, outputSize));
      }
      pendingSurrogate = 0;
    }
    if (inputChar < 0x80) {
      outputByte[0] = inputChar;
      outputSize = 1;
    } else if (inputChar < 0x800) {
      outputByte[0] = 0xc0 | ((inputChar >> 6) & 0x1f);
      outputByte[1] = 0x80 | (inputChar & 0x3f);
      outputSize = 2;
    } else if (0xd800 <= inputChar && inputChar <= 0xdbff) {
      pendingSurrogate = inputChar;
      outputSize = 0;
    } else if (0xdc00 <= inputChar && inputChar <= 0xdfff) {
      // unpaired surrogate
      outputByte[0] = replacementValue;
      outputSize = 1;
    } else if (inputChar < 0x10000) {
      outputByte[0] = 0xe0 | ((inputChar >> 12) & 0x0f);
      outputByte[1] = 0x80 | ((inputChar >> 6) & 0x3f);
      outputByte[2] = 0x80 | (inputChar & 0x3f);
      outputSize = 3;
    } else {
      /* 21 bits: 1111 0xxx  10xx xxxx  10xx xxxx  10xx xxxx
       * a aabb  bbbb cccc  ccdd dddd
       */
      outputByte[0] = 0xf0 | ((inputChar >> 18) & 0x07);
      outputByte[1] = 0x80 | ((inputChar >> 12) & 0x3f);
      outputByte[2] = 0x80 | ((inputChar >> 6) & 0x3f);
      outputByte[3] = 0x80 | (inputChar & 0x3f);
      outputSize = 4;
    }
    outputArray.push(outputByte.subarray(0, outputSize));
    count++;
  }

  this.pendingSurrogate = pendingSurrogate;

  var totalSize = outputArray.reduce(function(total, cur) {
    return total + cur.length;
  }, 0);

  var res = J2ME.newByteArray(totalSize);
  outputArray.reduce(function(total, cur) {
    res.set(cur, total);
    return total + cur.length;
  }, 0);

  return res;
};

Native["com/sun/cldc/i18n/j2me/UTF_8_Writer.sizeOf.([CII)I"] = function(cbuf, off, len) {
  var inputChar = 0;
  var outputSize = 0;
  var outputCount = 0;
  var count = 0;
  var localPendingSurrogate = this.pendingSurrogate;
  while (count < length) {
    inputChar = 0xffff & cbuf[offset + count];
    if (0 != localPendingSurrogate) {
      if (0xdc00 <= inputChar && inputChar <= 0xdfff) {
        //000u uuuu xxxx xxxx xxxx xxxx
        //1101 10ww wwxx xxxx   1101 11xx xxxx xxxx
        var highHalf = (localPendingSurrogate & 0x03ff) + 0x0040;
        var lowHalf = inputChar & 0x03ff;
        inputChar = (highHalf << 10) | lowHalf;
      } else {
        // going to write replacement value instead of unpaired surrogate
        outputSize = 1;
        outputCount += outputSize;
      }
      localPendingSurrogate = 0;
    }
    if (inputChar < 0x80) {
      outputSize = 1;
    } else if (inputChar < 0x800) {
      outputSize = 2;
    } else if (0xd800 <= inputChar && inputChar <= 0xdbff) {
      localPendingSurrogate = inputChar;
      outputSize = 0;
    } else if (0xdc00 <= inputChar && inputChar <= 0xdfff) {
      // unpaired surrogate
      // going to output replacementValue;
      outputSize = 1;
    } else if (inputChar < 0x10000) {
      outputSize = 3;
    } else {
      /* 21 bits: 1111 0xxx  10xx xxxx  10xx xxxx  10xx xxxx
       * a aabb  bbbb cccc  ccdd dddd
       */
      outputSize = 4;
    }
    outputCount += outputSize;
    count++;
  }

  return outputCount;
};

Native["com/sun/j2me/content/AppProxy.midletIsAdded.(ILjava/lang/String;)V"] = function(suiteId, className) {
  console.warn("com/sun/j2me/content/AppProxy.midletIsAdded.(ILjava/lang/String;)V not implemented");
};

Native["com/nokia/mid/impl/jms/core/Launcher.handleContent.(Ljava/lang/String;)V"] = function(content) {
    var fileName = J2ME.fromJavaString(content);

    var ext = fileName.split('.').pop().toLowerCase();
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Supported_image_formats
    if (["jpg", "jpeg", "gif", "apng", "png", "bmp", "ico"].indexOf(ext) == -1) {
        console.error("File not supported: " + fileName);
        throw $.newException("File not supported: " + fileName);
    }

    var ctx = $.ctx;
    asyncImpl("V", new Promise(function(resolve, reject) {
        // `fileName` is supposed to be a full path, but we don't support
        // partition, e.g. `C:` or `E:` etc, so the `fileName` we got here
        // is something like: `Photos/sampleImage.jpg`, we need to prepend
        // the root dir to make sure it's valid.
        fileName = "/" + fileName;
        fs.open(fileName, function(fd) {
            if (fd == -1) {
                ctx.setAsCurrentContext();
                console.error("File not found: " + fileName);
                reject($.newException("File not found: " + fileName));
                return;
            }

            var maskId = "image-launcher";
            var mask = document.getElementById(maskId);

            function _revokeImageURL() {
                URL.revokeObjectURL(/url\((.+)\)/ig.exec(mask.style.backgroundImage)[1]);
            }

            if (mask) {
                _revokeImageURL();
            } else {
                mask = document.createElement("div");
                mask.id = maskId;
                mask.onclick = mask.ontouchstart = function() {
                    _revokeImageURL();
                    mask.parentNode.removeChild(mask);
                };

                document.getElementById("main").appendChild(mask);
            }

            mask.style.backgroundImage = "url(" +
              URL.createObjectURL(new Blob([fs.read(fd)])) + ")";

            fs.close(fd);
            resolve();
        });
    }));
};

function addUnimplementedNative(signature, returnValue) {
    var doNotWarn;

    if (typeof returnValue === "function") {
      doNotWarn = returnValue;
    } else {
      doNotWarn = function() { return returnValue };
    }

    var warnOnce = function() {
        console.warn(signature + " not implemented");
        warnOnce = doNotWarn;
        return doNotWarn();
    };

    Native[signature] = function() { return warnOnce() };
}

Native["org/mozilla/internal/Sys.eval.(Ljava/lang/String;)V"] = function(src) {
    if (!release) {
        eval(J2ME.fromJavaString(src));
    }
};
/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */


/**
 * string.js: Native implementations of String and StringBuffer.
 *
 * Methods are defined in the same order as the Java source.
 * Any missing methods have been noted in comments.
 */

//################################################################
// java.lang.String (manipulated via the 'str' property)

function isString(obj) {
  return obj && obj.str !== undefined;
}

//****************************************************************
// Constructors

Override["java/lang/String.<init>.()V"] = function() {
  this.str = "";
};

Override["java/lang/String.<init>.(Ljava/lang/String;)V"] = function(jStr) {
  if (!jStr) {
    throw $.newNullPointerException();
  }
  this.str = jStr.str;
};

Override["java/lang/String.<init>.([C)V"] = function(chars) {
  if (!chars) {
    throw $.newNullPointerException();
  }
  this.str = util.fromJavaChars(chars);
};

Override["java/lang/String.<init>.([CII)V"] = function(value, offset, count) {
  if (offset < 0 || count < 0 || offset > value.length - count) {
    throw $.newStringIndexOutOfBoundsException();
  }
  this.str = util.fromJavaChars(value, offset, count);
};

// Several constructors below share this implementation:
function constructFromByteArray(bytes, off, len, enc) {
  enc = normalizeEncoding(enc);
  bytes = bytes.subarray(off, off + len);
  try {
    this.str = new TextDecoder(enc).decode(bytes);
  } catch(e) {
    throw $.newUnsupportedEncodingException();
  }
}

Override["java/lang/String.<init>.([BIILjava/lang/String;)V"] =
  function(bytes, off, len, enc) {
    constructFromByteArray.call(this, bytes, off, len, enc.str);
  };

Override["java/lang/String.<init>.([BLjava/lang/String;)V"] =
  function(bytes, enc) {
    constructFromByteArray.call(this, bytes, 0, bytes.length, enc.str);
  };

Override["java/lang/String.<init>.([BII)V"] =
  function(bytes, offset, len) {
    constructFromByteArray.call(this, bytes, offset, len, "UTF-8");
  };

Override["java/lang/String.<init>.([B)V"] =
  function(bytes) {
    constructFromByteArray.call(this, bytes, 0, bytes.length, "UTF-8");
  };

Override["java/lang/String.<init>.(Ljava/lang/StringBuffer;)V"] =
  function(jBuffer) {
    this.str = util.fromJavaChars(jBuffer.buf, 0, jBuffer.count);
  };

Override["java/lang/String.<init>.(II[C)V"] =
  function(offset, count, value) {
    this.str = util.fromJavaChars(value, offset, count);
  };

//****************************************************************
// Methods

Override["java/lang/String.length.()I"] = function() {
  return this.str.length;
};

Override["java/lang/String.charAt.(I)C"] = function(index) {
  if (index < 0 || index >= this.str.length) {
    throw $.newStringIndexOutOfBoundsException();
  }
  return this.str.charCodeAt(index);
};

Override["java/lang/String.getChars.(II[CI)V"] = function(srcBegin, srcEnd, dst, dstBegin) {
  if (srcBegin < 0 || srcEnd > this.str.length || srcBegin > srcEnd ||
      dstBegin + (srcEnd - srcBegin) > dst.length || dstBegin < 0) {
    throw $.newStringIndexOutOfBoundsException();
  }
  dst.set(util.stringToCharArray(this.str.substring(srcBegin, srcEnd)), dstBegin);
};

// Java returns encodings like "UTF_16"; TextEncoder and friends only
// like hyphens, not underscores.
function normalizeEncoding(enc) {
  var encoding = enc.toLowerCase().replace(/_/g, '-');
  if (encoding == "utf-16") {
    encoding = "utf-16be"; // Java defaults to big-endian, JS to little-endian.
  }
  return encoding;
}

Override["java/lang/String.getBytes.(Ljava/lang/String;)[B"] = function(jEnc) {
  try {
    var encoding = normalizeEncoding(jEnc.str);
    return new Int8Array(new TextEncoder(encoding).encode(this.str));
  } catch (e) {
    throw $.newUnsupportedEncodingException();
  }
};

Override["java/lang/String.getBytes.()[B"] = function() {
  return new Int8Array(new TextEncoder("utf-8").encode(this.str));
};

Override["java/lang/String.equals.(Ljava/lang/Object;)Z"] = function(anObject) {
  return (isString(anObject) && anObject.str === this.str) ? 1 : 0;
};

Override["java/lang/String.equalsIgnoreCase.(Ljava/lang/String;)Z"] = function(anotherString) {
  return (isString(anotherString) && anotherString.str.toLowerCase() === this.str.toLowerCase()) ? 1 : 0;
};

Override["java/lang/String.compareTo.(Ljava/lang/String;)I"] = function(anotherString) {
  // Sadly, JS String doesn't have a compareTo() method, so we must
  // replicate the Java algorithm. (There is String.localeCompare, but
  // that only returns {-1, 0, 1}, not a distance measure, which this
  // requires.
  var len1 = this.str.length;
  var len2 = anotherString.str.length;
  var n = Math.min(len1, len2);
  var v1 = this.str;
  var v2 = anotherString.str;
  for (var k = 0; k < n; k++) {
    var c1 = v1.charCodeAt(k);
    var c2 = v2.charCodeAt(k);
    if (c1 != c2) {
      return c1 - c2;
    }
  }
  return len1 - len2;
};

Override["java/lang/String.regionMatches.(ZILjava/lang/String;II)Z"] = function(ignoreCase, toffset, other, ooffset, len) {
  var a = (ignoreCase ? this.str.toLowerCase() : this.str);
  var b = (ignoreCase ? other.str.toLowerCase() : other.str);
  return a.substr(toffset, len) === b.substr(ooffset, len) ? 1 : 0;
};

Override["java/lang/String.startsWith.(Ljava/lang/String;I)Z"] = function(prefix, toffset) {
  return this.str.substr(toffset, prefix.str.length) === prefix.str ? 1 : 0;
};

Override["java/lang/String.startsWith.(Ljava/lang/String;)Z"] = function(prefix) {
  return this.str.substr(0, prefix.str.length) === prefix.str ? 1 : 0;
};

Override["java/lang/String.endsWith.(Ljava/lang/String;)Z"] = function(suffix) {
  return this.str.indexOf(suffix.str, this.str.length - suffix.str.length) !== -1 ? 1 : 0;
};

Override["java/lang/String.hashCode.()I"] = function() {
  var hash = 0;
  for (var i = 0; i < this.str.length; i++) {
    hash = Math.imul(31, hash) + this.str.charCodeAt(i) | 0;
  }
  return hash;
};

Override["java/lang/String.indexOf.(I)I"] = function(ch) {
  return this.str.indexOf(String.fromCharCode(ch));
};

Override["java/lang/String.indexOf.(II)I"] = function(ch, fromIndex) {
  return this.str.indexOf(String.fromCharCode(ch), fromIndex);
};

Override["java/lang/String.lastIndexOf.(I)I"] = function(ch) {
  return this.str.lastIndexOf(String.fromCharCode(ch));
};

Override["java/lang/String.lastIndexOf.(II)I"] = function(ch, fromIndex) {
  return this.str.lastIndexOf(String.fromCharCode(ch), fromIndex);
};

Override["java/lang/String.indexOf.(Ljava/lang/String;)I"] = function(s) {
  return this.str.indexOf(s.str);
};

Override["java/lang/String.indexOf.(Ljava/lang/String;I)I"] = function(s, fromIndex) {
  return this.str.indexOf(s.str, fromIndex);
};

Override["java/lang/String.substring.(I)Ljava/lang/String;"] = function(beginIndex) {
  if (beginIndex < 0 || beginIndex > this.str.length) {
    throw $.newStringIndexOutOfBoundsException();
  }
  return J2ME.newString(this.str.substring(beginIndex));
};

Override["java/lang/String.substring.(II)Ljava/lang/String;"] = function(beginIndex, endIndex) {
  if (beginIndex < 0 || endIndex > this.str.length || beginIndex > endIndex) {
    throw $.newStringIndexOutOfBoundsException();
  }
  return J2ME.newString(this.str.substring(beginIndex, endIndex));
};

Override["java/lang/String.concat.(Ljava/lang/String;)Ljava/lang/String;"] = function(s) {
  return J2ME.newString(this.str + s.str);
};

// via MDN:
function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

Override["java/lang/String.replace.(CC)Ljava/lang/String;"] = function(oldChar, newChar) {
  // Using a RegExp here to replace all matches of oldChar, rather than just the first.
  return J2ME.newString(this.str.replace(
    new RegExp(escapeRegExp(String.fromCharCode(oldChar)), "g"),
    String.fromCharCode(newChar)));
};

Override["java/lang/String.toLowerCase.()Ljava/lang/String;"] = function() {
  return J2ME.newString(this.str.toLowerCase());
};

Override["java/lang/String.toUpperCase.()Ljava/lang/String;"] = function() {
  return J2ME.newString(this.str.toUpperCase());
};

Override["java/lang/String.trim.()Ljava/lang/String;"] = function() {
  // Java's String.trim() removes any character <= ASCII 32;
  // JavaScript's only removes a few whitespacey chars.
  var start = 0;
  var end = this.str.length;
  while (start < end && this.str.charCodeAt(start) <= 32) {
    start++;
  }
  while (start < end && this.str.charCodeAt(end - 1) <= 32) {
    end--;
  }

  return J2ME.newString(this.str.substring(start, end));
};

Override["java/lang/String.toString.()Ljava/lang/String;"] = function() {
  return this; // Note: returning "this" so that we keep the same object.
};

Override["java/lang/String.toCharArray.()[C"] = function() {
  return util.stringToCharArray(this.str);
};

//****************************************************************
// String.valueOf() for various types

// NOTE: String.valueOf(Object) left in Java to avoid having to call
// back into Java for Object.toString().

Override["java/lang/String.valueOf.([C)Ljava/lang/String;"] = function(chars) {
  if (!chars) {
    throw $.newNullPointerException();
  }
  return J2ME.newString(util.fromJavaChars(chars));
};

Override["java/lang/String.valueOf.([CII)Ljava/lang/String;"] = function(chars, offset, count) {
  if (!chars) {
    throw $.newNullPointerException();
  }
  return J2ME.newString(util.fromJavaChars(chars, offset, count));
};

Override["java/lang/String.valueOf.(Z)Ljava/lang/String;"] = function(bool) {
  return J2ME.newString(bool ? "true" : "false");
};

Override["java/lang/String.valueOf.(C)Ljava/lang/String;"] = function(ch) {
  return J2ME.newString(String.fromCharCode(ch));
};

Override["java/lang/String.valueOf.(I)Ljava/lang/String;"] = function(n) {
  return J2ME.newString(n.toString());
};

Override["java/lang/String.valueOf.(J)Ljava/lang/String;"] = function(n) {
  return J2ME.newString(n.toString());
};


// String.valueOf(float) and String.valueOf(double) have been left in
// Java for now, as they require support for complex formatting rules.
// Additionally, their tests check for coverage of nuanced things like
// positive zero vs. negative zero, which we don't currently support.

var internedStrings = J2ME.internedStrings;

Native["java/lang/String.intern.()Ljava/lang/String;"] = function() {
    var string = J2ME.fromJavaString(this);

    var internedString = internedStrings.get(string);

    if (internedString) {
        return internedString;
    } else {
        internedStrings.set(string, this);
        return this;
    }
};



//################################################################
// java.lang.StringBuffer (manipulated via the 'buf' property)

Override["java/lang/StringBuffer.<init>.()V"] = function() {
  this.buf = new Uint16Array(16); // Initial buffer size: 16, per the Java implementation.
  this.count = 0;
};

Override["java/lang/StringBuffer.<init>.(I)V"] = function(length) {
  if (length < 0) {
    throw $.newNegativeArraySizeException();
  }
  this.buf = new Uint16Array(length);
  this.count = 0;
};

Override["java/lang/StringBuffer.<init>.(Ljava/lang/String;)V"] = function(jStr) {
  var stringBuf = util.stringToCharArray(jStr.str);
  this.buf = new Uint16Array(stringBuf.length + 16); // Add 16, per the Java implementation.
  this.buf.set(stringBuf, 0);
  this.count = stringBuf.length;
};

Override["java/lang/StringBuffer.length.()I"] = function() {
  return this.count;
};

Override["java/lang/StringBuffer.capacity.()I"] = function() {
  return this.buf.length;
};

Override["java/lang/StringBuffer.copy.()V"] = function() {
  // We don't support copying (there's no need unless we also support shared buffers).
};

/**
 * Expand capacity to max(minCapacity, (capacity + 1) * 2).
 *
 * @this StringBuffer
 * @param {number} minCapacity
 */
function expandCapacity(minCapacity) {
  var newCapacity = (this.buf.length + 1) << 1;
  if (minCapacity > newCapacity) {
    newCapacity = minCapacity;
  }

  var oldBuf = this.buf;
  this.buf = new Uint16Array(newCapacity);
  this.buf.set(oldBuf, 0);
}

Override["java/lang/StringBuffer.ensureCapacity.(I)V"] = function(minCapacity) {
  if (this.buf.length < minCapacity) {
    expandCapacity.call(this, minCapacity);
  }
};

// StringBuffer.expandCapacity is private and not needed with these overrides.

Override["java/lang/StringBuffer.setLength.(I)V"] = function(newLength) {
  if (newLength < 0) {
    throw $.newStringIndexOutOfBoundsException();
  }

  if (newLength > this.buf.length) {
    expandCapacity.call(this, newLength);
  }
  for (; this.count < newLength; this.count++) {
    this.buf[this.count] = '\0';
  }
  this.count = newLength;
};


Override["java/lang/StringBuffer.charAt.(I)C"] = function(index) {
  if (index < 0 || index >= this.count) {
    throw $.newStringIndexOutOfBoundsException();
  }
  return this.buf[index];
};

Override["java/lang/StringBuffer.getChars.(II[CI)V"] = function(srcBegin, srcEnd, dst, dstBegin) {
  if (srcBegin < 0 || srcEnd < 0 || srcEnd > this.count || srcBegin > srcEnd) {
    throw $.newStringIndexOutOfBoundsException();
  }
  if (dstBegin + (srcEnd - srcBegin) > dst.length || dstBegin < 0) {
    throw $.newArrayIndexOutOfBoundsException();
  }
  dst.set(this.buf.subarray(srcBegin, srcEnd), dstBegin);
};

Override["java/lang/StringBuffer.setCharAt.(IC)V"] = function(index, ch) {
  if (index < 0 || index >= this.count) {
    throw $.newStringIndexOutOfBoundsException();
  }
  this.buf[index] = ch;
};


/**
 * Append `data`, which should be either a JS String or a Uint16Array.
 * Data must not be null.
 *
 * @this StringBuffer
 * @param {Uint16Array|string} data
 * @return this
 */
function stringBufferAppend(data) {
  if (data == null) {
    throw $.newNullPointerException();
  }
  if (!(data instanceof Uint16Array)) {
    data = util.stringToCharArray(data);
  }
  if (this.buf.length < this.count + data.length) {
    expandCapacity.call(this, this.count + data.length);
  }
  this.buf.set(data, this.count);
  this.count += data.length;
  return this;
}

// StringBuffer.append(java.lang.Object) left in Java to avoid Object.toString().

Override["java/lang/StringBuffer.append.(Ljava/lang/String;)Ljava/lang/StringBuffer;"] = function(jStr) {
  return stringBufferAppend.call(this, jStr ? jStr.str : "null");
};

Override["java/lang/StringBuffer.append.([C)Ljava/lang/StringBuffer;"] = function(chars) {
  if (chars == null) {
    throw $.newNullPointerException();
  }
  return stringBufferAppend.call(this, chars);
};

Override["java/lang/StringBuffer.append.([CII)Ljava/lang/StringBuffer;"] = function(chars, offset, length) {
  if (chars == null) {
    throw $.newNullPointerException();
  }
  if (offset < 0 || offset + length > chars.length) {
    throw $.newArrayIndexOutOfBoundsException();
  }
  return stringBufferAppend.call(this, chars.subarray(offset, offset + length));
};

Override["java/lang/StringBuffer.append.(Z)Ljava/lang/StringBuffer;"] = function(bool) {
  return stringBufferAppend.call(this, bool ? "true" : "false");
};

Override["java/lang/StringBuffer.append.(C)Ljava/lang/StringBuffer;"] = function(ch) {
  if (this.buf.length < this.count + 1) {
    expandCapacity.call(this, this.count + 1);
  }
  this.buf[this.count++] = ch;
  return this;
};

Override["java/lang/StringBuffer.append.(I)Ljava/lang/StringBuffer;"] = function(n) {
  return stringBufferAppend.call(this, n + "");
};

Override["java/lang/StringBuffer.append.(J)Ljava/lang/StringBuffer;"] = function(n) {
  return stringBufferAppend.call(this, n + "");
};

// StringBuffer.append(float) left in Java (see String.valueOf(float) above).

// StringBuffer.append(double) left in Java (see String.valueOf(double) above).

/**
 * Delete characters between [start, end).
 *
 * @this StringBuffer
 * @param {number} start
 * @param {number} end
 * @return this
 */
function stringBufferDelete(start, end) {
  if (start < 0) {
    throw $.newStringIndexOutOfBoundsException();
  }
  if (end > this.count) {
    end = this.count;
  }
  if (start > end) {
    throw $.newStringIndexOutOfBoundsException();
  }

  var len = end - start;
  if (len > 0) {
    // When Gecko 34 is released, we can use TypedArray.copyWithin() instead.
    this.buf.set(this.buf.subarray(end, this.count), start);
    this.count -= len;
  }
  return this;
}

Override["java/lang/StringBuffer.delete.(II)Ljava/lang/StringBuffer;"] = stringBufferDelete;

Override["java/lang/StringBuffer.deleteCharAt.(I)Ljava/lang/StringBuffer;"] = function(index) {
  if (index >= this.count) {
    // stringBufferDelete handles the other boundary checks; this check is specific to deleteCharAt.
    throw $.newStringIndexOutOfBoundsException();
  }
  return stringBufferDelete.call(this, index, index + 1);
};

/**
 * Insert `data` at the given `offset`.
 *
 * @this StringBuffer
 * @param {number} offset
 * @param {Uint16Array|string} data
 * @return this
 */
function stringBufferInsert(offset, data) {
  if (data == null) {
    throw $.newNullPointerException();
  }
  if (offset < 0 || offset > this.count) {
    throw $.newArrayIndexOutOfBoundsException();
  }
  if (!(data instanceof Uint16Array)) {
    data = util.stringToCharArray(data);
  }
  if (this.buf.length < this.count + data.length) {
    expandCapacity.call(this, this.count + data.length);
  }
  // When Gecko 34 is released, we can use TypedArray.copyWithin() instead.
  this.buf.set(this.buf.subarray(offset, this.count), offset + data.length);
  this.buf.set(data, offset);
  this.count += data.length;
  return this;
}

// StringBuffer.insert(Object) left in Java (for String.valueOf()).

Override["java/lang/StringBuffer.insert.(ILjava/lang/String;)Ljava/lang/StringBuffer;"] = function(offset, jStr) {
  return stringBufferInsert.call(this, offset, jStr ? jStr.str : "null");
};

Override["java/lang/StringBuffer.insert.(I[C)Ljava/lang/StringBuffer;"] = function(offset, chars) {
  return stringBufferInsert.call(this, offset, chars);
};

Override["java/lang/StringBuffer.insert.(IZ)Ljava/lang/StringBuffer;"] = function(offset, bool) {
  return stringBufferInsert.call(this, offset, bool ? "true" : "false");
};

Override["java/lang/StringBuffer.insert.(IC)Ljava/lang/StringBuffer;"] = function(offset, ch) {
  return stringBufferInsert.call(this, offset, String.fromCharCode(ch));
};

Override["java/lang/StringBuffer.insert.(II)Ljava/lang/StringBuffer;"] = function(offset, n) {
  return stringBufferInsert.call(this, offset, n + "");
};

Override["java/lang/StringBuffer.insert.(IJ)Ljava/lang/StringBuffer;"] = function(offset, n) {
  return stringBufferInsert.call(this, offset, n + "");
};

// StringBuffer.insert(float) left in Java.

// StringBuffer.insert(double) left in Java.

Override["java/lang/StringBuffer.reverse.()Ljava/lang/StringBuffer;"] = function() {
  var buf = this.buf;
  for (var i = 0, j = this.count - 1; i < j; i++, j--) {
    var tmp = buf[i];
    buf[i] = buf[j];
    buf[j] = tmp;
  }
  return this;
};

Override["java/lang/StringBuffer.toString.()Ljava/lang/String;"] = function() {
  return J2ME.newString(util.fromJavaChars(this.buf, 0, this.count));
};

Override["java/lang/StringBuffer.setShared.()V"] = function() {
  // Our StringBuffers are never shared. Everyone gets their very own!
};

Override["java/lang/StringBuffer.getValue.()[C"] = function() {
  // In theory, this method should only be called by String (which
  // we've overridden to not do), so it should never be called. In any
  // case, mutating this buf would have the same effect here as it
  // would in Java.
  return this.buf;
};
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

;

function load(file, responseType) {
  return new Promise(function(resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", file, true);
    xhr.responseType = responseType;
    xhr.onload = function () {
      resolve(xhr.response);
    };
    xhr.onerror = function() {
      reject();
    };
    xhr.send(null);
  });
}

function loadWithProgress(file, responseType, successCb, failureCb, progressCb, length) {
  var xhr = new XMLHttpRequest({ mozSystem: true });
  xhr.open("GET", file, true);
  xhr.responseType = responseType;

  if (progressCb) {
    xhr.onprogress = function(e) {

      if (e.lengthComputable) {
        progressCb(e.loaded / e.total * 100);
      } else if (length) {
        progressCb(e.loaded / length * 100);
      }
    }
  }

  xhr.onload = function() {
    if (xhr.status === 200) {
      successCb(xhr.response);
    } else {
      failureCb();
    }
  };

  xhr.onerror = function(event) {
    failureCb();
  };

  xhr.send(null);
}

function loadScript(path) {
  return new Promise(function(resolve, reject) {
    var element = document.createElement('script');
    element.setAttribute("type", "text/javascript");
    element.setAttribute("src", path);
    document.getElementsByTagName("head")[0].appendChild(element);
    element.onload = resolve;
  });
}
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var codeLenCodeMap = new Int32Array([
  16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
]);

var lengthDecode = new Int32Array([
  0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,
  0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,
  0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,
  0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102
]);

var distDecode = new Int32Array([
  0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,
  0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,
  0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,
  0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001
]);

var fixedLitCodeTab = [new Int32Array([
  0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,
  0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,
  0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,
  0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,
  0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,
  0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,
  0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,
  0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,
  0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,
  0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,
  0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,
  0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,
  0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,
  0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,
  0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,
  0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,
  0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,
  0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,
  0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,
  0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,
  0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,
  0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,
  0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,
  0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,
  0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,
  0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,
  0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,
  0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,
  0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,
  0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,
  0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,
  0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,
  0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,
  0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,
  0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,
  0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,
  0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,
  0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,
  0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,
  0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,
  0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,
  0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,
  0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,
  0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,
  0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,
  0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,
  0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,
  0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,
  0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,
  0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,
  0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,
  0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,
  0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,
  0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,
  0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,
  0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,
  0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,
  0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,
  0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,
  0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,
  0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,
  0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,
  0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,
  0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff
]), 9];

var fixedDistCodeTab = [new Int32Array([
  0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,
  0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,
  0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,
  0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000
]), 5];

function inflate(bytes, uncompressed_len) {
  var bytesPos = 0;

  var codeSize = 0;
  var codeBuf = 0;

  function getBits(bits) {
    var b;
    while (codeSize < bits) {
      b = bytes[bytesPos++] | 0;
      codeBuf |= b << codeSize;
      codeSize += 8;
    }
    b = codeBuf & ((1 << bits) - 1);
    codeBuf >>= bits;
    codeSize -= bits;
    return b;
  }

  function getCode(table) {
    var codes = table[0];
    var maxLen = table[1];

    while (codeSize < maxLen) {
      var b = bytes[bytesPos++] | 0;
      codeBuf |= (b << codeSize);
      codeSize += 8;
    }
    var code = codes[codeBuf & ((1 << maxLen) - 1)];
    var codeLen = code >> 16;
    var codeVal = code & 0xffff;
    if (codeSize == 0 || codeSize < codeLen || codeLen == 0)
      new Error('Bad encoding in flate stream');
    codeBuf >>= codeLen;
    codeSize -= codeLen;
    return codeVal;
  }

  function generateHuffmanTable(lengths) {
    var n = lengths.length;

    // find max code length
    var maxLen = 0;
    for (var i = 0; i < n; ++i) {
      if (lengths[i] > maxLen)
        maxLen = lengths[i];
    }

    // build the table
    var size = 1 << maxLen;
    var codes = new Int32Array(size);
    for (var len = 1, code = 0, skip = 2;
         len <= maxLen;
         ++len, code <<= 1, skip <<= 1) {
      for (var val = 0; val < n; ++val) {
        if (lengths[val] == len) {
          // bit-reverse the code
          var code2 = 0;
          var t = code;
          for (var i = 0; i < len; ++i) {
            code2 = (code2 << 1) | (t & 1);
            t >>= 1;
          }

          // fill the table entries
          for (var i = code2; i < size; i += skip)
            codes[i] = (len << 16) | val;

          ++code;
        }
      }
    }

    return [codes, maxLen];
  };

  var buffer = new Uint8Array(uncompressed_len);
  var bufferLength = 0;

  function readBlock() {
    var eof = false;

    // read block header
    var hdr = getBits(3);
    if (hdr & 1)
      eof = true;
    hdr >>= 1;

    if (hdr == 0) { // uncompressed block
      var b;

      if (typeof (b = bytes[bytesPos++]) == 'undefined')
        new Error('Bad block header in flate stream');
      var blockLen = b;
      if (typeof (b = bytes[bytesPos++]) == 'undefined')
        new Error('Bad block header in flate stream');
      blockLen |= (b << 8);
      if (typeof (b = bytes[bytesPos++]) == 'undefined')
        new Error('Bad block header in flate stream');
      var check = b;
      if (typeof (b = bytes[bytesPos++]) == 'undefined')
        new Error('Bad block header in flate stream');
      check |= (b << 8);
      if (check != (~blockLen & 0xffff))
        new Error('Bad uncompressed block length in flate stream');

      codeBuf = 0;
      codeSize = 0;

      var end = bufferLength + blockLen;
      for (; bufferLength < end && bytesPos < bytes.length; ++bufferLength, ++bytesPos) {
        buffer[bufferLength] = bytes[bytesPos];
      }

      return bytesPos === bytes.length;
    }

    var litCodeTable;
    var distCodeTable;
    if (hdr == 1) { // compressed block, fixed codes
      litCodeTable = fixedLitCodeTab;
      distCodeTable = fixedDistCodeTab;
    } else if (hdr == 2) { // compressed block, dynamic codes
      var numLitCodes = getBits(5) + 257;
      var numDistCodes = getBits(5) + 1;
      var numCodeLenCodes = getBits(4) + 4;

      // build the code lengths code table
      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);

      for (var i = 0; i < numCodeLenCodes; ++i)
        codeLenCodeLengths[codeLenCodeMap[i]] = getBits(3);
      var codeLenCodeTab = generateHuffmanTable(codeLenCodeLengths);

      // build the literal and distance code tables
      var len = 0;
      var i = 0;
      var codes = numLitCodes + numDistCodes;
      var codeLengths = new Uint8Array(codes);
      while (i < codes) {
        var code = getCode(codeLenCodeTab);
        if (code == 16) {
          var bitsLength = 2, bitsOffset = 3, what = len;
        } else if (code == 17) {
          var bitsLength = 3, bitsOffset = 3, what = (len = 0);
        } else if (code == 18) {
          var bitsLength = 7, bitsOffset = 11, what = (len = 0);
        } else {
          codeLengths[i++] = len = code;
          continue;
        }

        var repeatLength = getBits(bitsLength) + bitsOffset;
        while (repeatLength-- > 0)
          codeLengths[i++] = what;
      }

      litCodeTable = generateHuffmanTable(codeLengths.subarray(0, numLitCodes));
      distCodeTable = generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));
    } else {
      new Error('Unknown block type in flate stream');
    }

    while (true) {
      var code1 = getCode(litCodeTable);
      if (code1 < 256) {
        buffer[bufferLength++] = code1;
        continue;
      }
      if (code1 == 256) {
        return eof;
      }
      code1 -= 257;
      code1 = lengthDecode[code1];
      var code2 = code1 >> 16;
      if (code2 > 0)
        code2 = getBits(code2);
      var len = (code1 & 0xffff) + code2;
      code1 = getCode(distCodeTable);
      code1 = distDecode[code1];
      code2 = code1 >> 16;
      if (code2 > 0)
        code2 = getBits(code2);
      var dist = (code1 & 0xffff) + code2;
      for (var k = 0; k < len; ++k, ++bufferLength)
        buffer[bufferLength] = buffer[bufferLength - dist];
    }
  };

  while (!readBlock())
    ;

  return buffer;
}

var arrays = J2ME.ArrayUtilities.makeArrays(256);

function ZipFile(buffer, extract) {
  var bytes = new Uint8Array(buffer);
  var view = new DataView(buffer);

  // check for magic signature
  if (view.getInt32(0, true) != 0x04034b50)
    return;

  // scan backwards to locate the central directory record
  var pos = bytes.length - 22;
  while (true) {
    if (pos < 0)
      return;
    if (bytes[pos] != 0x50) {
      --pos;
      continue;
    }
    if (view.getInt32(pos, true) == 0x06054b50)
      break;
    pos -= 4;
  }

  // read the central directory
  var directory = Object.create(null);
  var entries = view.getInt16(pos + 8, true);
  var pos = view.getInt32(pos + 16, true);
  while (entries--) {
    // check for directory entry signature
    if (view.getInt32(pos, true) != 0x02014b50)
      return;
    var compression_method = view.getInt16(pos + 10, true);
    var compressed_len = view.getInt32(pos + 20, true);
    var uncompressed_len = view.getInt32(pos + 24, true);
    var filename_len = view.getInt16(pos + 28, true);
    var extra_len = view.getInt16(pos + 30, true);
    var comment_len = view.getInt16(pos + 32, true);
    var local_header_offset = view.getInt32(pos + 42, true);
    // read the filename
    pos += 46;
    if (arrays.length < filename_len) {
      arrays = J2ME.ArrayUtilities.makeArrays(filename_len);
    }
    var array = arrays[filename_len];
    for (var n = 0; n < filename_len; ++n) {
      array[n] = String.fromCharCode(bytes[pos++]);
    }
    var filename = array.join("");
    // locate the compressed data
    var local_extra_len = view.getInt16(local_header_offset + 28, true);
    var data_offset = local_header_offset + 30 + filename_len + local_extra_len;

    // add the entry to the directory
    var compressed_data;
    var data = new Uint8Array(buffer, data_offset, compressed_len);
    if (extract) {
      compressed_data = new Uint8Array(compressed_len);
      compressed_data.set(data);
    } else {
      compressed_data = data;
    }

    directory[filename] = {
      compression_method: compression_method,
      compressed_data: compressed_data,
      uncompressed_len: uncompressed_len,
    };
    // advance to the next entry
    pos += extra_len + comment_len;
  }

  this.directory = directory;
}

ZipFile.prototype = {
  read: function(filename) {
    if (!this.directory)
      return null;
    var entry = this.directory[filename];
    if (!entry)
      return null;
    var data = entry.compressed_data;
    switch (entry.compression_method) {
    case 0: // stored
      return data;
    case 8: // deflated
      return inflate(data, entry.uncompressed_len);
    }
    return null;
  }
};

if (typeof module === 'object') {
  module.exports.ZipFile = ZipFile;
}
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var JARStore = (function() {
  var DATABASE = "JARStore";
  var VERSION = 2;
  var OBJECT_STORE_OLD = "files";
  var OBJECT_STORE_WITH_UNCOMPRESSED_LEN = "files_v2"
  var KEY_PATH = "jarName";

  var database;
  var jars = new Map();
  var jad;

  var upgrade = {
    "0to1": function(database, transaction, next) {
      database.createObjectStore(OBJECT_STORE_OLD, { keyPath: KEY_PATH });
      next();
    },
    "1to2": function(database, transaction, next) {
      database.deleteObjectStore(OBJECT_STORE_OLD);
      // We don't migrate data from the old format to the new one, but
      // rely on JARStore users to recreate the needed data.
      database.createObjectStore(OBJECT_STORE_WITH_UNCOMPRESSED_LEN, { keyPath: KEY_PATH });
      next();
    },
  };

  var openDatabase = new Promise(function(resolve, reject) {
    var request = indexedDB.open(DATABASE, VERSION);

    request.onerror = function() {
      console.error("error opening database: " + request.error.name);
      reject(request.error.name);
    };

    request.onupgradeneeded = function(event) {
      var database = request.result;
      var transaction = request.transaction;

      var version = event.oldVersion;
      (function next() {
        if (version < event.newVersion) {
          upgrade[version + "to" + ++version](database, transaction, next);
        }
      })();
    };

    request.onsuccess = function() {
      database = request.result;
      resolve();
    };
  });

  function addBuiltIn(jarName, jarData) {
    var zip = new ZipFile(jarData, false);

    jars.set(jarName, {
      directory: zip.directory,
      isBuiltIn: true,
    });
  }

  function installJAR(jarName, jarData, jadData) {
    return openDatabase.then(function() {
      return new Promise(function(resolve, reject) {
        var zip = new ZipFile(jarData, true);

        var transaction = database.transaction(OBJECT_STORE_WITH_UNCOMPRESSED_LEN, "readwrite");
        var objectStore = transaction.objectStore(OBJECT_STORE_WITH_UNCOMPRESSED_LEN);
        var request = objectStore.put({
          jarName: jarName,
          jar: zip.directory,
          jad: jadData || null,
        });

        request.onerror = function() {
          console.error("Error installing " + jarName + ": " + request.error.name);
          reject(request.error.name);
        };

        transaction.oncomplete = function() {
          jars.set(jarName, {
            directory: zip.directory,
            isBuiltIn: false,
          });
          resolve();
        };
      });
    });
  }

  function loadJAR(jarName) {
    return openDatabase.then(function() {
      return new Promise(function(resolve, reject) {
        var transaction = database.transaction(OBJECT_STORE_WITH_UNCOMPRESSED_LEN, "readonly");
        var objectStore = transaction.objectStore(OBJECT_STORE_WITH_UNCOMPRESSED_LEN);
        var request = objectStore.get(jarName);

        request.onerror = function() {
          console.error("Error loading " + jarName + ": " + request.error.name);
          reject(request.error.name);
        };

        transaction.oncomplete = function() {
          if (request.result) {
            jars.set(jarName, {
              directory: request.result.jar,
              isBuiltIn: false,
            });

            if (request.result.jad) {
              jad = request.result.jad;
            }

            resolve(true);
          } else {
            resolve(false);
          }
        };
      });
    });
  }

  function loadFileFromJAR(jarName, fileName) {
    var jar = jars.get(jarName);
    if (!jar) {
      return null;
    }

    var entry = jar.directory[fileName];

    if (!entry) {
      return null;
    }

    var bytes;
    if (entry.compression_method === 0) {
      bytes = entry.compressed_data;
    } else if (entry.compression_method === 8) {
      bytes = inflate(entry.compressed_data, entry.uncompressed_len);
    } else {
      return null;
    }

    if (!jar.isBuiltIn && fileName.endsWith(".class")) {
      // Classes are loaded just once and then are cached in ClassRegistry::classes
      delete jar.directory[fileName];
    }

    return bytes;
  }

  function loadFile(fileName) {
    for (var jarName of jars.keys()) {
      var data = loadFileFromJAR(jarName, fileName);
      if (data) {
        return data;
      }
    }
  }

  function getJAD() {
    return jad;
  }

  function clear() {
    return openDatabase.then(function() {
      return new Promise(function(resolve, reject) {
        jars.clear();

        var transaction = database.transaction(OBJECT_STORE_WITH_UNCOMPRESSED_LEN, "readwrite");
        var objectStore = transaction.objectStore(OBJECT_STORE_WITH_UNCOMPRESSED_LEN);
        var request = objectStore.clear();

        request.onerror = function() {
          console.error("Error clearing: " + request.error.name);
          reject(request.error.name);
        };

        request.onsuccess = function() {
          resolve();
        };
      });
    });
  }

  return {
    addBuiltIn: addBuiltIn,
    installJAR: installJAR,
    loadJAR: loadJAR,
    loadFileFromJAR: loadFileFromJAR,
    loadFile: loadFile,
    getJAD: getJAD,
    clear: clear,
  };
})();

if (typeof module === 'object') {
  module.exports.JARStore = JARStore;
}
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
* @fileoverview Defines a Long class for representing a 64-bit two's-complement
* integer value, which faithfully simulates the behavior of a Java "long". This
* implementation is derived from LongLib in GWT.
*
*/

(function (exports) {
    /**
    * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
    * values as *signed* integers.  See the from* functions below for more
    * convenient ways of constructing Longs.
    *
    * The internal representation of a long is the two given signed, 32-bit values.
    * We use 32-bit pieces because these are the size of integers on which
    * Javascript performs bit-operations.  For operations like addition and
    * multiplication, we split each number into 16-bit pieces, which can easily be
    * multiplied within Javascript's floating-point representation without overflow
    * or change in sign.
    *
    * In the algorithms below, we frequently reduce the negative case to the
    * positive case by negating the input(s) and then post-processing the result.
    * Note that we must ALWAYS check specially whether those values are MIN_VALUE
    * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    * a positive number, it overflows back into a negative).  Not handling this
    * case would often result in infinite recursion.
    *
    * @param {number} low  The low (signed) 32 bits of the long.
    * @param {number} high  The high (signed) 32 bits of the long.
    * @constructor
    */
    function Long(low, high) {
        this.low_ = low | 0; // force into 32 signed bits.
        this.high_ = high | 0; // force into 32 signed bits.
    }

    var IntCache = {};

    /**
    * Returns a Long representing the given (32-bit) integer value.
    * @param {number} value The 32-bit integer in question.
    * @return {!Long} The corresponding Long value.
    */
    function fromInt(value) {
        if (-128 <= value && value < 128) {
            var cachedObj = IntCache[value];
            if (cachedObj) {
                return cachedObj;
            }
        }

        var obj = new Long(value, value < 0 ? -1 : 0);
        if (-128 <= value && value < 128) {
            IntCache[value] = obj;
        }
        return obj;
    };

    /**
    * Returns a Long representing the given value, provided that it is a finite
    * number.  Otherwise, zero is returned.
    * @param {number} value The number in question.
    * @return {!Long} The corresponding Long value.
    */
    function fromNumber(value) {
        if (isNaN(value) || !isFinite(value)) {
            return ZERO;
        } else if (value <= -TWO_PWR_63_DBL_) {
            return MIN_VALUE;
        } else if (value + 1 >= TWO_PWR_63_DBL_) {
            return MAX_VALUE;
        } else if (value < 0) {
            return fromNumber(-value).negate();
        } else {
            return new Long((value % TWO_PWR_32_DBL_) | 0, (value / TWO_PWR_32_DBL_) | 0);
        }
    };

    /**
    * Returns a Long representing the 64-bit integer that comes by concatenating
    * the given high and low bits.  Each is assumed to use 32 bits.
    * @param {number} lowBits The low 32-bits.
    * @param {number} highBits The high 32-bits.
    * @return {!Long} The corresponding Long value.
    */
    function fromBits(lowBits, highBits) {
        return new Long(lowBits, highBits);
    };

    /**
    * Returns a Long representation of the given string, written using the given
    * radix.
    * @param {string} str The textual representation of the Long.
    * @param {number=} opt_radix The radix in which the text is written.
    * @return {!Long} The corresponding Long value.
    */
    function fromString(str, opt_radix) {
        if (str.length == 0) {
            throw Error('number format error: empty string');
        }

        var radix = opt_radix || 10;
        if (radix < 2 || 36 < radix) {
            throw Error('radix out of range: ' + radix);
        }

        if (str.charAt(0) == '-') {
            return fromString(str.substring(1), radix).negate();
        } else if (str.indexOf('-') >= 0) {
            throw Error('number format error: interior "-" character: ' + str);
        }

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(Math.pow(radix, 8));

        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i);
            var value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(Math.pow(radix, size));
                result = result.multiply(power).add(fromNumber(value));
            } else {
                result = result.multiply(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        return result;
    };

    /** @return {number} The value, assuming it is a 32-bit integer. */
    Long.prototype.toInt = function () {
        return this.low_;
    };

    /** @return {number} The closest floating-point representation to this value. */
    Long.prototype.toNumber = function () {
        return this.high_ * TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
    };

    /**
    * @param {number=} opt_radix The radix in which the text should be written.
    * @return {string} The textual representation of this value.
    */
    Long.prototype.toString = function (opt_radix) {
        var radix = opt_radix || 10;
        if (radix < 2 || 36 < radix) {
            throw Error('radix out of range: ' + radix);
        }

        if (this.isZero()) {
            return '0';
        }

        if (this.isNegative()) {
            if (this.equals(MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = fromNumber(radix);
                var div = this.div(radixLong);
                var rem = div.multiply(radixLong).subtract(this);
                return div.toString(radix) + rem.toInt().toString(radix);
            } else {
                return '-' + this.negate().toString(radix);
            }
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(Math.pow(radix, 6));

        var rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower);
            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
            var digits = intval.toString(radix);

            rem = remDiv;
            if (rem.isZero()) {
                return digits + result;
            } else {
                while (digits.length < 6) {
                    digits = '0' + digits;
                }
                result = '' + digits + result;
            }
        }
    };

    /** @return {number} The high 32-bits as a signed value. */
    Long.prototype.getHighBits = function () {
        return this.high_;
    };

    /** @return {number} The low 32-bits as a signed value. */
    Long.prototype.getLowBits = function () {
        return this.low_;
    };

    /** @return {number} The low 32-bits as an unsigned value. */
    Long.prototype.getLowBitsUnsigned = function () {
        return (this.low_ >= 0) ? this.low_ : TWO_PWR_32_DBL_ + this.low_;
    };

    /**
    * @return {number} Returns the number of bits needed to represent the absolute
    *     value of this Long.
    */
    Long.prototype.getNumBitsAbs = function () {
        if (this.isNegative()) {
            if (this.equals(MIN_VALUE)) {
                return 64;
            } else {
                return this.negate().getNumBitsAbs();
            }
        } else {
            var val = this.high_ != 0 ? this.high_ : this.low_;
            for (var bit = 31; bit > 0; bit--) {
                if ((val & (1 << bit)) != 0) {
                    break;
                }
            }
            return this.high_ != 0 ? bit + 33 : bit + 1;
        }
    };

    /** @return {boolean} Whether this value is zero. */
    Long.prototype.isZero = function () {
        return this.high_ == 0 && this.low_ == 0;
    };

    /** @return {boolean} Whether this value is negative. */
    Long.prototype.isNegative = function () {
        return this.high_ < 0;
    };

    /** @return {boolean} Whether this value is odd. */
    Long.prototype.isOdd = function () {
        return (this.low_ & 1) == 1;
    };

    /**
    * @param {Long} other Long to compare against.
    * @return {boolean} Whether this Long equals the other.
    */
    Long.prototype.equals = function (other) {
        return (this.high_ == other.high_) && (this.low_ == other.low_);
    };

    /**
    * @param {Long} other Long to compare against.
    * @return {boolean} Whether this Long does not equal the other.
    */
    Long.prototype.notEquals = function (other) {
        return (this.high_ != other.high_) || (this.low_ != other.low_);
    };

    /**
    * @param {Long} other Long to compare against.
    * @return {boolean} Whether this Long is less than the other.
    */
    Long.prototype.lessThan = function (other) {
        return this.compare(other) < 0;
    };

    /**
    * @param {Long} other Long to compare against.
    * @return {boolean} Whether this Long is less than or equal to the other.
    */
    Long.prototype.lessThanOrEqual = function (other) {
        return this.compare(other) <= 0;
    };

    /**
    * @param {Long} other Long to compare against.
    * @return {boolean} Whether this Long is greater than the other.
    */
    Long.prototype.greaterThan = function (other) {
        return this.compare(other) > 0;
    };

    /**
    * @param {Long} other Long to compare against.
    * @return {boolean} Whether this Long is greater than or equal to the other.
    */
    Long.prototype.greaterThanOrEqual = function (other) {
        return this.compare(other) >= 0;
    };

    /**
    * Compares this Long with the given one.
    * @param {Long} other Long to compare against.
    * @return {number} 0 if they are the same, 1 if the this is greater, and -1
    *     if the given one is greater.
    */
    Long.prototype.compare = function (other) {
        if (this.equals(other)) {
            return 0;
        }

        var thisNeg = this.isNegative();
        var otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) {
            return -1;
        }
        if (!thisNeg && otherNeg) {
            return 1;
        }

        // at this point, the signs are the same, so subtraction will not overflow
        if (this.subtract(other).isNegative()) {
            return -1;
        } else {
            return 1;
        }
    };

    /** @return {!Long} The negation of this value. */
    Long.prototype.negate = function () {
        if (this.equals(MIN_VALUE)) {
            return MIN_VALUE;
        } else {
            return this.not().add(ONE);
        }
    };

    /**
    * Returns the sum of this and the given Long.
    * @param {Long} other Long to add to this one.
    * @return {!Long} The sum of this and the given Long.
    */
    Long.prototype.add = function (other) {
        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
        var a48 = this.high_ >>> 16;
        var a32 = this.high_ & 0xFFFF;
        var a16 = this.low_ >>> 16;
        var a00 = this.low_ & 0xFFFF;

        var b48 = other.high_ >>> 16;
        var b32 = other.high_ & 0xFFFF;
        var b16 = other.low_ >>> 16;
        var b00 = other.low_ & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32);
    };

    /**
    * Returns the difference of this and the given Long.
    * @param {Long} other Long to subtract from this.
    * @return {!Long} The difference of this and the given Long.
    */
    Long.prototype.subtract = function (other) {
        return this.add(other.negate());
    };

    /**
    * Returns the product of this and the given long.
    * @param {Long} other Long to multiply with this.
    * @return {!Long} The product of this and the other.
    */
    Long.prototype.multiply = function (other) {
        if (this.isZero() | other.isZero()) {
            return ZERO;
        }

        if (this.equals(MIN_VALUE)) {
            return other.isOdd() ? MIN_VALUE : ZERO;
        } else if (other.equals(MIN_VALUE)) {
            return this.isOdd() ? MIN_VALUE : ZERO;
        }

        if (this.isNegative()) {
            if (other.isNegative()) {
                return this.negate().multiply(other.negate());
            } else {
                return this.negate().multiply(other).negate();
            }
        } else if (other.isNegative()) {
            return this.multiply(other.negate()).negate();
        }

        // If both longs are small, use float multiplication
        if (this.lessThan(TWO_PWR_24_) && other.lessThan(TWO_PWR_24_)) {
            return fromNumber(this.toNumber() * other.toNumber());
        }

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.
        var a48 = this.high_ >>> 16;
        var a32 = this.high_ & 0xFFFF;
        var a16 = this.low_ >>> 16;
        var a00 = this.low_ & 0xFFFF;

        var b48 = other.high_ >>> 16;
        var b32 = other.high_ & 0xFFFF;
        var b16 = other.low_ >>> 16;
        var b00 = other.low_ & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32);
    };

    /**
    * Returns this Long divided by the given one.
    * @param {Long} other Long by which to divide.
    * @return {!Long} This Long divided by the given one.
    */
    Long.prototype.div = function (other) {
        if (other.isZero()) {
            throw Error('division by zero');
        } else if (this.isZero()) {
            return ZERO;
        }

        if (this.equals(MIN_VALUE)) {
            if (other.equals(ONE) || other.equals(NEG_ONE)) {
                return MIN_VALUE;
            } else if (other.equals(MIN_VALUE)) {
                return ONE;
            } else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shiftRight(1);
                var l_approx = halfThis.div(other).shiftLeft(1);
                if (l_approx.equals(ZERO)) {
                    return other.isNegative() ? ONE : NEG_ONE;
                } else {
                    var rem = this.subtract(other.multiply(l_approx));
                    var result = l_approx.add(rem.div(other));
                    return result;
                }
            }
        } else if (other.equals(MIN_VALUE)) {
            return ZERO;
        }

        if (this.isNegative()) {
            if (other.isNegative()) {
                return this.negate().div(other.negate());
            } else {
                return this.negate().div(other).negate();
            }
        } else if (other.isNegative()) {
            return this.div(other.negate()).negate();
        }

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        var res = ZERO;
        var rem = this;
        while (rem.greaterThanOrEqual(other)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = 1;
            if (log2 > 48)
                delta = Math.pow(2, log2 - 48);

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
            var approxRes = fromNumber(approx);
            var approxRem = approxRes.multiply(other);
            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
                approx -= delta;
                approxRes = fromNumber(approx);
                approxRem = approxRes.multiply(other);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero()) {
                approxRes = ONE;
            }

            res = res.add(approxRes);
            rem = rem.subtract(approxRem);
        }
        return res;
    };

    /**
    * Returns this Long modulo the given one.
    * @param {Long} other Long by which to mod.
    * @return {!Long} This Long modulo the given one.
    */
    Long.prototype.modulo = function (other) {
        return this.subtract(this.div(other).multiply(other));
    };

    /** @return {!Long} The bitwise-NOT of this value. */
    Long.prototype.not = function () {
        return fromBits(~this.low_, ~this.high_);
    };

    /**
    * Returns the bitwise-AND of this Long and the given one.
    * @param {Long} other The Long with which to AND.
    * @return {!Long} The bitwise-AND of this and the other.
    */
    Long.prototype.and = function (other) {
        return fromBits(this.low_ & other.low_, this.high_ & other.high_);
    };

    /**
    * Returns the bitwise-OR of this Long and the given one.
    * @param {Long} other The Long with which to OR.
    * @return {!Long} The bitwise-OR of this and the other.
    */
    Long.prototype.or = function (other) {
        return fromBits(this.low_ | other.low_, this.high_ | other.high_);
    };

    /**
    * Returns the bitwise-XOR of this Long and the given one.
    * @param {Long} other The Long with which to XOR.
    * @return {!Long} The bitwise-XOR of this and the other.
    */
    Long.prototype.xor = function (other) {
        return fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
    };

    /**
    * Returns this Long with bits shifted to the left by the given amount.
    * @param {number} numBits The number of bits by which to shift.
    * @return {!Long} This shifted to the left by the given amount.
    */
    Long.prototype.shiftLeft = function (numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this;
        } else {
            var low = this.low_;
            if (numBits < 32) {
                var high = this.high_;
                return fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));
            } else {
                return fromBits(0, low << (numBits - 32));
            }
        }
    };

    /**
    * Returns this Long with bits shifted to the right by the given amount.
    * @param {number} numBits The number of bits by which to shift.
    * @return {!Long} This shifted to the right by the given amount.
    */
    Long.prototype.shiftRight = function (numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this;
        } else {
            var high = this.high_;
            if (numBits < 32) {
                var low = this.low_;
                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);
            } else {
                return fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);
            }
        }
    };

    /**
    * Returns this Long with bits shifted to the right by the given amount, with
    * the new top bits matching the current sign bit.
    * @param {number} numBits The number of bits by which to shift.
    * @return {!Long} This shifted to the right by the given amount, with
    *     zeros placed into the new leading bits.
    */
    Long.prototype.shiftRightUnsigned = function (numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this;
        } else {
            var high = this.high_;
            if (numBits < 32) {
                var low = this.low_;
                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);
            } else if (numBits == 32) {
                return fromBits(high, 0);
            } else {
                return fromBits(high >>> (numBits - 32), 0);
            }
        }
    };

    var ZERO = fromInt(0);
    var ONE = fromInt(1);
    var NEG_ONE = fromInt(-1);
    var MAX_VALUE = fromBits(0xFFFFFFFF, 0x7FFFFFFF);
    var MIN_VALUE = fromBits(0, 0x80000000);

    var TWO_PWR_24_ = fromInt(TWO_PWR_24_DBL_);

    var TWO_PWR_16_DBL_ = 1 << 16;
    var TWO_PWR_24_DBL_ = 1 << 24;
    var TWO_PWR_32_DBL_ = TWO_PWR_16_DBL_ * TWO_PWR_16_DBL_;
    var TWO_PWR_31_DBL_ = TWO_PWR_32_DBL_ / 2;
    var TWO_PWR_48_DBL_ = TWO_PWR_32_DBL_ * TWO_PWR_16_DBL_;
    var TWO_PWR_64_DBL_ = TWO_PWR_32_DBL_ * TWO_PWR_32_DBL_;
    var TWO_PWR_63_DBL_ = TWO_PWR_64_DBL_ / 2;

    exports.ZERO = ZERO;
    exports.ONE = ONE;

    exports.fromInt = fromInt;
    exports.fromNumber = fromNumber;
    exports.fromBits = fromBits;
    exports.fromString = fromString;
    exports.constructor = Long;
})(typeof exports === "undefined" ? this.Long = {} : exports);
// Copyright 2014 Joshua Bell. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// If we're in node require encoding-indexes and attach it to the global.
if (typeof module !== "undefined" && module.exports) {
  this["encoding-indexes"] = require("./encoding-indexes.js")["encoding-indexes"];
}

(function(global) {
  

  //
  // Utilities
  //

  /**
   * @param {number} a The number to test.
   * @param {number} min The minimum value in the range, inclusive.
   * @param {number} max The maximum value in the range, inclusive.
   * @return {boolean} True if a >= min and a <= max.
   */
  function inRange(a, min, max) {
    return min <= a && a <= max;
  }

  /**
   * @param {number} n The numerator.
   * @param {number} d The denominator.
   * @return {number} The result of the integer division of n by d.
   */
  function div(n, d) {
    return Math.floor(n / d);
  }


  //
  // Implementation of Encoding specification
  // http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html
  //

  //
  // 3. Terminology
  //

  //
  // 4. Encodings
  //

  /** @const */ var EOF_byte = -1;
  /** @const */ var EOF_code_point = -1;

  /**
   * @constructor
   * @param {Uint8Array} bytes Array of bytes that provide the stream.
   */
  function ByteInputStream(bytes) {
    /** @type {number} */
    var pos = 0;

    /**
     * @this {ByteInputStream}
     * @return {number} Get the next byte from the stream.
     */
    this.get = function() {
      return (pos >= bytes.length) ? EOF_byte : Number(bytes[pos]);
    };

    /** @param {number} n Number (positive or negative) by which to
     *      offset the byte pointer. */
    this.offset = function(n) {
      pos += n;
      if (pos < 0) {
        throw new Error('Seeking past start of the buffer');
      }
      if (pos > bytes.length) {
        throw new Error('Seeking past EOF');
      }
    };

    /**
     * @param {Array.<number>} test Array of bytes to compare against.
     * @return {boolean} True if the start of the stream matches the test
     *     bytes.
     */
    this.match = function(test) {
      if (test.length > pos + bytes.length) {
        return false;
      }
      var i;
      for (i = 0; i < test.length; i += 1) {
        if (Number(bytes[pos + i]) !== test[i]) {
          return false;
        }
      }
      return true;
    };
  }

  /**
   * @constructor
   * @param {Array.<number>} bytes The array to write bytes into.
   */
  function ByteOutputStream(bytes) {
    /** @type {number} */
    var pos = 0;

    /**
     * @param {...number} var_args The byte or bytes to emit into the stream.
     * @return {number} The last byte emitted.
     */
    this.emit = function(var_args) {
      /** @type {number} */
      var last = EOF_byte;
      var i;
      for (i = 0; i < arguments.length; ++i) {
        last = Number(arguments[i]);
        bytes[pos++] = last;
      }
      return last;
    };
  }

  /**
   * @constructor
   * @param {string} string The source of code units for the stream.
   */
  function CodePointInputStream(string) {
    /**
     * @param {string} string Input string of UTF-16 code units.
     * @return {Array.<number>} Code points.
     */
    function stringToCodePoints(string) {
      /** @type {Array.<number>} */
      var cps = [];
      // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString
      var i = 0, n = string.length;
      while (i < string.length) {
        var c = string.charCodeAt(i);
        if (!inRange(c, 0xD800, 0xDFFF)) {
          cps.push(c);
        } else if (inRange(c, 0xDC00, 0xDFFF)) {
          cps.push(0xFFFD);
        } else { // (inRange(cu, 0xD800, 0xDBFF))
          if (i === n - 1) {
            cps.push(0xFFFD);
          } else {
            var d = string.charCodeAt(i + 1);
            if (inRange(d, 0xDC00, 0xDFFF)) {
              var a = c & 0x3FF;
              var b = d & 0x3FF;
              i += 1;
              cps.push(0x10000 + (a << 10) + b);
            } else {
              cps.push(0xFFFD);
            }
          }
        }
        i += 1;
      }
      return cps;
    }

    /** @type {number} */
    var pos = 0;
    /** @type {Array.<number>} */
    var cps = stringToCodePoints(string);

    /** @param {number} n The number of bytes (positive or negative)
     *      to advance the code point pointer by.*/
    this.offset = function(n) {
      pos += n;
      if (pos < 0) {
        throw new Error('Seeking past start of the buffer');
      }
      if (pos > cps.length) {
        throw new Error('Seeking past EOF');
      }
    };


    /** @return {number} Get the next code point from the stream. */
    this.get = function() {
      if (pos >= cps.length) {
        return EOF_code_point;
      }
      return cps[pos];
    };
  }

  /**
   * @constructor
   */
  function CodePointOutputStream() {
    /** @type {string} */
    var string = '';

    /** @return {string} The accumulated string. */
    this.string = function() {
      return string;
    };

    /** @param {number} c The code point to encode into the stream. */
    this.emit = function(c) {
      if (c <= 0xFFFF) {
        string += String.fromCharCode(c);
      } else {
        c -= 0x10000;
        string += String.fromCharCode(0xD800 + ((c >> 10) & 0x3ff));
        string += String.fromCharCode(0xDC00 + (c & 0x3ff));
      }
    };
  }

  /**
   * @constructor
   * @param {string} message Description of the error.
   */
  function EncodingError(message) {
    this.name = 'EncodingError';
    this.message = message;
    this.code = 0;
  }
  EncodingError.prototype = Error.prototype;

  /**
   * @param {boolean} fatal If true, decoding errors raise an exception.
   * @param {number=} opt_code_point Override the standard fallback code point.
   * @return {number} The code point to insert on a decoding error.
   */
  function decoderError(fatal, opt_code_point) {
    if (fatal) {
      throw new EncodingError('Decoder error');
    }
    return opt_code_point || 0xFFFD;
  }

  /**
   * @param {number} code_point The code point that could not be encoded.
   * @return {number} Always throws, no value is actually returned.
   */
  function encoderError(code_point) {
    throw new EncodingError('The code point ' + code_point +
                            ' could not be encoded.');
  }

  /**
   * @param {string} label The encoding label.
   * @return {?{name:string,labels:Array.<string>}}
   */
  function getEncoding(label) {
    label = String(label).trim().toLowerCase();
    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {
      return label_to_encoding[label];
    }
    return null;
  }

  /** @type {Array.<{encodings: Array.<{name:string,labels:Array.<string>}>,
   *      heading: string}>} */
  var encodings = [
    {
      "encodings": [
        {
          "labels": [
            "unicode-1-1-utf-8",
            "utf-8",
            "utf8"
          ],
          "name": "utf-8"
        }
      ],
      "heading": "The Encoding"
    },
    {
      "encodings": [
        {
          "labels": [
            "866",
            "cp866",
            "csibm866",
            "ibm866"
          ],
          "name": "ibm866"
        },
        {
          "labels": [
            "csisolatin2",
            "iso-8859-2",
            "iso-ir-101",
            "iso8859-2",
            "iso88592",
            "iso_8859-2",
            "iso_8859-2:1987",
            "l2",
            "latin2"
          ],
          "name": "iso-8859-2"
        },
        {
          "labels": [
            "csisolatin3",
            "iso-8859-3",
            "iso-ir-109",
            "iso8859-3",
            "iso88593",
            "iso_8859-3",
            "iso_8859-3:1988",
            "l3",
            "latin3"
          ],
          "name": "iso-8859-3"
        },
        {
          "labels": [
            "csisolatin4",
            "iso-8859-4",
            "iso-ir-110",
            "iso8859-4",
            "iso88594",
            "iso_8859-4",
            "iso_8859-4:1988",
            "l4",
            "latin4"
          ],
          "name": "iso-8859-4"
        },
        {
          "labels": [
            "csisolatincyrillic",
            "cyrillic",
            "iso-8859-5",
            "iso-ir-144",
            "iso8859-5",
            "iso88595",
            "iso_8859-5",
            "iso_8859-5:1988"
          ],
          "name": "iso-8859-5"
        },
        {
          "labels": [
            "arabic",
            "asmo-708",
            "csiso88596e",
            "csiso88596i",
            "csisolatinarabic",
            "ecma-114",
            "iso-8859-6",
            "iso-8859-6-e",
            "iso-8859-6-i",
            "iso-ir-127",
            "iso8859-6",
            "iso88596",
            "iso_8859-6",
            "iso_8859-6:1987"
          ],
          "name": "iso-8859-6"
        },
        {
          "labels": [
            "csisolatingreek",
            "ecma-118",
            "elot_928",
            "greek",
            "greek8",
            "iso-8859-7",
            "iso-ir-126",
            "iso8859-7",
            "iso88597",
            "iso_8859-7",
            "iso_8859-7:1987",
            "sun_eu_greek"
          ],
          "name": "iso-8859-7"
        },
        {
          "labels": [
            "csiso88598e",
            "csisolatinhebrew",
            "hebrew",
            "iso-8859-8",
            "iso-8859-8-e",
            "iso-ir-138",
            "iso8859-8",
            "iso88598",
            "iso_8859-8",
            "iso_8859-8:1988",
            "visual"
          ],
          "name": "iso-8859-8"
        },
        {
          "labels": [
            "csiso88598i",
            "iso-8859-8-i",
            "logical"
          ],
          "name": "iso-8859-8-i"
        },
        {
          "labels": [
            "csisolatin6",
            "iso-8859-10",
            "iso-ir-157",
            "iso8859-10",
            "iso885910",
            "l6",
            "latin6"
          ],
          "name": "iso-8859-10"
        },
        {
          "labels": [
            "iso-8859-13",
            "iso8859-13",
            "iso885913"
          ],
          "name": "iso-8859-13"
        },
        {
          "labels": [
            "iso-8859-14",
            "iso8859-14",
            "iso885914"
          ],
          "name": "iso-8859-14"
        },
        {
          "labels": [
            "csisolatin9",
            "iso-8859-15",
            "iso8859-15",
            "iso885915",
            "iso_8859-15",
            "l9"
          ],
          "name": "iso-8859-15"
        },
        {
          "labels": [
            "iso-8859-16"
          ],
          "name": "iso-8859-16"
        },
        {
          "labels": [
            "cskoi8r",
            "koi",
            "koi8",
            "koi8-r",
            "koi8_r"
          ],
          "name": "koi8-r"
        },
        {
          "labels": [
            "koi8-u"
          ],
          "name": "koi8-u"
        },
        {
          "labels": [
            "csmacintosh",
            "mac",
            "macintosh",
            "x-mac-roman"
          ],
          "name": "macintosh"
        },
        {
          "labels": [
            "dos-874",
            "iso-8859-11",
            "iso8859-11",
            "iso885911",
            "tis-620",
            "windows-874"
          ],
          "name": "windows-874"
        },
        {
          "labels": [
            "cp1250",
            "windows-1250",
            "x-cp1250"
          ],
          "name": "windows-1250"
        },
        {
          "labels": [
            "cp1251",
            "windows-1251",
            "x-cp1251"
          ],
          "name": "windows-1251"
        },
        {
          "labels": [
            "ansi_x3.4-1968",
            "ascii",
            "cp1252",
            "cp819",
            "csisolatin1",
            "ibm819",
            "iso-8859-1",
            "iso-ir-100",
            "iso8859-1",
            "iso88591",
            "iso_8859-1",
            "iso_8859-1:1987",
            "l1",
            "latin1",
            "us-ascii",
            "windows-1252",
            "x-cp1252"
          ],
          "name": "windows-1252"
        },
        {
          "labels": [
            "cp1253",
            "windows-1253",
            "x-cp1253"
          ],
          "name": "windows-1253"
        },
        {
          "labels": [
            "cp1254",
            "csisolatin5",
            "iso-8859-9",
            "iso-ir-148",
            "iso8859-9",
            "iso88599",
            "iso_8859-9",
            "iso_8859-9:1989",
            "l5",
            "latin5",
            "windows-1254",
            "x-cp1254"
          ],
          "name": "windows-1254"
        },
        {
          "labels": [
            "cp1255",
            "windows-1255",
            "x-cp1255"
          ],
          "name": "windows-1255"
        },
        {
          "labels": [
            "cp1256",
            "windows-1256",
            "x-cp1256"
          ],
          "name": "windows-1256"
        },
        {
          "labels": [
            "cp1257",
            "windows-1257",
            "x-cp1257"
          ],
          "name": "windows-1257"
        },
        {
          "labels": [
            "cp1258",
            "windows-1258",
            "x-cp1258"
          ],
          "name": "windows-1258"
        },
        {
          "labels": [
            "x-mac-cyrillic",
            "x-mac-ukrainian"
          ],
          "name": "x-mac-cyrillic"
        }
      ],
      "heading": "Legacy single-byte encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "chinese",
            "csgb2312",
            "csiso58gb231280",
            "gb18030",
            "gb2312",
            "gb_2312",
            "gb_2312-80",
            "gbk",
            "iso-ir-58",
            "x-gbk"
          ],
          "name": "gb18030"
        },
        {
          "labels": [
            "hz-gb-2312"
          ],
          "name": "hz-gb-2312"
        }
      ],
      "heading": "Legacy multi-byte Chinese (simplified) encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "big5",
            "big5-hkscs",
            "cn-big5",
            "csbig5",
            "x-x-big5"
          ],
          "name": "big5"
        }
      ],
      "heading": "Legacy multi-byte Chinese (traditional) encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "cseucpkdfmtjapanese",
            "euc-jp",
            "x-euc-jp"
          ],
          "name": "euc-jp"
        },
        {
          "labels": [
            "csiso2022jp",
            "iso-2022-jp"
          ],
          "name": "iso-2022-jp"
        },
        {
          "labels": [
            "csshiftjis",
            "ms_kanji",
            "shift-jis",
            "shift_jis",
            "sjis",
            "windows-31j",
            "x-sjis"
          ],
          "name": "shift_jis"
        }
      ],
      "heading": "Legacy multi-byte Japanese encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "cseuckr",
            "csksc56011987",
            "euc-kr",
            "iso-ir-149",
            "korean",
            "ks_c_5601-1987",
            "ks_c_5601-1989",
            "ksc5601",
            "ksc_5601",
            "windows-949"
          ],
          "name": "euc-kr"
        }
      ],
      "heading": "Legacy multi-byte Korean encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "csiso2022kr",
            "iso-2022-cn",
            "iso-2022-cn-ext",
            "iso-2022-kr"
          ],
          "name": "replacement"
        },
        {
          "labels": [
            "utf-16be"
          ],
          "name": "utf-16be"
        },
        {
          "labels": [
            "utf-16",
            "utf-16le"
          ],
          "name": "utf-16le"
        },
        {
          "labels": [
            "x-user-defined"
          ],
          "name": "x-user-defined"
        }
      ],
      "heading": "Legacy miscellaneous encodings"
    }
  ];

  var name_to_encoding = {};
  var label_to_encoding = {};
  encodings.forEach(function(category) {
    category['encodings'].forEach(function(encoding) {
      name_to_encoding[encoding['name']] = encoding;
      encoding['labels'].forEach(function(label) {
        label_to_encoding[label] = encoding;
      });
    });
  });

  //
  // 5. Indexes
  //

  /**
   * @param {number} pointer The |pointer| to search for.
   * @param {Array.<?number>|undefined} index The |index| to search within.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in |index|.
   */
  function indexCodePointFor(pointer, index) {
    if (!index) return null;
    return index[pointer] || null;
  }

  /**
   * @param {number} code_point The |code point| to search for.
   * @param {Array.<?number>} index The |index| to search within.
   * @return {?number} The first pointer corresponding to |code point| in
   *     |index|, or null if |code point| is not in |index|.
   */
  function indexPointerFor(code_point, index) {
    var pointer = index.indexOf(code_point);
    return pointer === -1 ? null : pointer;
  }

  /**
   * @param {string} name Name of the index.
   * @return {(Array.<number>|Array.<Array.<number>>)}
   *  */
  function index(name) {
    if (!('encoding-indexes' in global))
      throw new Error("Indexes missing. Did you forget to include encoding-indexes.js?");
    return global['encoding-indexes'][name];
  }

  /**
   * @param {number} pointer The |pointer| to search for in the gb18030 index.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in the gb18030 index.
   */
  function indexGB18030CodePointFor(pointer) {
    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575)) {
      return null;
    }
    var /** @type {number} */ offset = 0,
        /** @type {number} */ code_point_offset = 0,
        /** @type {Array.<Array.<number>>} */ idx = index('gb18030');
    var i;
    for (i = 0; i < idx.length; ++i) {
      var entry = idx[i];
      if (entry[0] <= pointer) {
        offset = entry[0];
        code_point_offset = entry[1];
      } else {
        break;
      }
    }
    return code_point_offset + pointer - offset;
  }

  /**
   * @param {number} code_point The |code point| to locate in the gb18030 index.
   * @return {number} The first pointer corresponding to |code point| in the
   *     gb18030 index.
   */
  function indexGB18030PointerFor(code_point) {
    var /** @type {number} */ offset = 0,
        /** @type {number} */ pointer_offset = 0,
        /** @type {Array.<Array.<number>>} */ idx = index('gb18030');
    var i;
    for (i = 0; i < idx.length; ++i) {
      var entry = idx[i];
      if (entry[1] <= code_point) {
        offset = entry[1];
        pointer_offset = entry[0];
      } else {
        break;
      }
    }
    return pointer_offset + code_point - offset;
  }


  //
  // 7. API
  //

  /** @const */ var DEFAULT_ENCODING = 'utf-8';

  // 7.1 Interface TextDecoder

  /**
   * @constructor
   * @param {string=} opt_encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {Object=} options
   */
  function TextDecoder(opt_encoding, options) {
    if (!(this instanceof TextDecoder)) {
      return new TextDecoder(opt_encoding, options);
    }
    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;
    options = Object(options);
    /** @private */
    this._encoding = getEncoding(opt_encoding);
    if (this._encoding === null || this._encoding.name === 'replacement')
      throw new TypeError('Unknown encoding: ' + opt_encoding);

    if (!this._encoding.getDecoder)
      throw new Error('Decoder not present. Did you forget to include encoding-indexes.js?');

    /** @private @type {boolean} */
    this._streaming = false;
    /** @private @type {boolean} */
    this._BOMseen = false;
    /** @private */
    this._decoder = null;
    /** @private @type {{fatal: boolean}} */
    this._options = { fatal: Boolean(options['fatal']) };

    if (Object.defineProperty) {
      Object.defineProperty(
          this, 'encoding',
          { get: function() { return this._encoding.name; } });
    } else {
      this.encoding = this._encoding.name;
    }

    return this;
  }

  // TODO: Issue if input byte stream is offset by decoder
  // TODO: BOM detection will not work if stream header spans multiple calls
  // (last N bytes of previous stream may need to be retained?)
  TextDecoder.prototype = {
    /**
     * @param {ArrayBufferView=} opt_view The buffer of bytes to decode.
     * @param {Object=} options
     */
    decode: function decode(opt_view, options) {
      if (opt_view && !('buffer' in opt_view && 'byteOffset' in opt_view &&
                        'byteLength' in opt_view)) {
        throw new TypeError('Expected ArrayBufferView');
      } else if (!opt_view) {
        opt_view = new Uint8Array(0);
      }
      options = Object(options);

      if (!this._streaming) {
        this._decoder = this._encoding.getDecoder(this._options);
        this._BOMseen = false;
      }
      this._streaming = Boolean(options['stream']);

      var bytes = new Uint8Array(opt_view.buffer,
                                 opt_view.byteOffset,
                                 opt_view.byteLength);
      var input_stream = new ByteInputStream(bytes);

      var output_stream = new CodePointOutputStream();

      /** @type {number} */
      var code_point;

      while (input_stream.get() !== EOF_byte) {
        code_point = this._decoder.decode(input_stream);
        if (code_point !== null && code_point !== EOF_code_point) {
          output_stream.emit(code_point);
        }
      }
      if (!this._streaming) {
        do {
          code_point = this._decoder.decode(input_stream);
          if (code_point !== null && code_point !== EOF_code_point) {
            output_stream.emit(code_point);
          }
        } while (code_point !== EOF_code_point &&
                 input_stream.get() != EOF_byte);
        this._decoder = null;
      }

      var result = output_stream.string();
      if (!this._BOMseen && result.length) {
        this._BOMseen = true;
        if (['utf-8', 'utf-16le', 'utf-16be'].indexOf(this.encoding) !== -1 &&
           result.charCodeAt(0) === 0xFEFF) {
          result = result.substring(1);
        }
      }

      return result;
    }
  };

  // 7.2 Interface TextEncoder

  /**
   * @constructor
   * @param {string=} opt_encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {{fatal: boolean}=} options
   */
  function TextEncoder(opt_encoding, options) {
    if (!(this instanceof TextEncoder)) {
      return new TextEncoder(opt_encoding, options);
    }
    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;
    options = Object(options);
    /** @private */
    this._encoding = getEncoding(opt_encoding);

    var allowLegacyEncoding = options.NONSTANDARD_allowLegacyEncoding;
    var isLegacyEncoding = (this._encoding.name !== 'utf-8' &&
                            this._encoding.name !== 'utf-16le' &&
                            this._encoding.name !== 'utf-16be');
    if (this._encoding === null || (isLegacyEncoding && !allowLegacyEncoding))
      throw new TypeError('Unknown encoding: ' + opt_encoding);

    if (!this._encoding.getEncoder)
      throw new Error('Encoder not present. Did you forget to include encoding-indexes.js?');

    /** @private @type {boolean} */
    this._streaming = false;
    /** @private */
    this._encoder = null;
    /** @private @type {{fatal: boolean}} */
    this._options = { fatal: Boolean(options['fatal']) };

    if (Object.defineProperty) {
      Object.defineProperty(
          this, 'encoding',
          { get: function() { return this._encoding.name; } });
    } else {
      this.encoding = this._encoding.name;
    }

    return this;
  }

  TextEncoder.prototype = {
    /**
     * @param {string=} opt_string The string to encode.
     * @param {{stream: boolean}=} options
     */
    encode: function encode(opt_string, options) {
      opt_string = opt_string ? String(opt_string) : '';
      options = Object(options);
      // TODO: any options?
      if (!this._streaming) {
        this._encoder = this._encoding.getEncoder(this._options);
      }
      this._streaming = Boolean(options['stream']);

      var bytes = [];
      var output_stream = new ByteOutputStream(bytes);
      var input_stream = new CodePointInputStream(opt_string);
      while (input_stream.get() !== EOF_code_point) {
        this._encoder.encode(output_stream, input_stream);
      }
      if (!this._streaming) {
        /** @type {number} */
        var last_byte;
        do {
          last_byte = this._encoder.encode(output_stream, input_stream);
        } while (last_byte !== EOF_byte);
        this._encoder = null;
      }
      return new Uint8Array(bytes);
    }
  };


  //
  // 8. The encoding
  //

  // 8.1 utf-8

  /**
   * @constructor
    * @param {{fatal: boolean}} options
   */
  function UTF8Decoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ utf8_code_point = 0,
        /** @type {number} */ utf8_bytes_needed = 0,
        /** @type {number} */ utf8_bytes_seen = 0,
        /** @type {number} */ utf8_lower_boundary = 0;

    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        if (utf8_bytes_needed !== 0) {
          return decoderError(fatal);
        }
        return EOF_code_point;
      }
      byte_pointer.offset(1);

      if (utf8_bytes_needed === 0) {
        if (inRange(bite, 0x00, 0x7F)) {
          return bite;
        }
        if (inRange(bite, 0xC2, 0xDF)) {
          utf8_bytes_needed = 1;
          utf8_lower_boundary = 0x80;
          utf8_code_point = bite - 0xC0;
        } else if (inRange(bite, 0xE0, 0xEF)) {
          utf8_bytes_needed = 2;
          utf8_lower_boundary = 0x800;
          utf8_code_point = bite - 0xE0;
        } else if (inRange(bite, 0xF0, 0xF4)) {
          utf8_bytes_needed = 3;
          utf8_lower_boundary = 0x10000;
          utf8_code_point = bite - 0xF0;
        } else {
          return decoderError(fatal);
        }
        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
        return null;
      }
      if (!inRange(bite, 0x80, 0xBF)) {
        utf8_code_point = 0;
        utf8_bytes_needed = 0;
        utf8_bytes_seen = 0;
        utf8_lower_boundary = 0;
        byte_pointer.offset(-1);
        return decoderError(fatal);
      }
      utf8_bytes_seen += 1;
      utf8_code_point = utf8_code_point + (bite - 0x80) *
          Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
      if (utf8_bytes_seen !== utf8_bytes_needed) {
        return null;
      }
      var code_point = utf8_code_point;
      var lower_boundary = utf8_lower_boundary;
      utf8_code_point = 0;
      utf8_bytes_needed = 0;
      utf8_bytes_seen = 0;
      utf8_lower_boundary = 0;
      if (inRange(code_point, lower_boundary, 0x10FFFF) &&
          !inRange(code_point, 0xD800, 0xDFFF)) {
        return code_point;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function UTF8Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      /** @type {number} */
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0xD800, 0xDFFF)) {
        return encoderError(code_point);
      }
      if (inRange(code_point, 0x0000, 0x007f)) {
        return output_byte_stream.emit(code_point);
      }
      var count, offset;
      if (inRange(code_point, 0x0080, 0x07FF)) {
        count = 1;
        offset = 0xC0;
      } else if (inRange(code_point, 0x0800, 0xFFFF)) {
        count = 2;
        offset = 0xE0;
      } else if (inRange(code_point, 0x10000, 0x10FFFF)) {
        count = 3;
        offset = 0xF0;
      }
      var result = output_byte_stream.emit(
          div(code_point, Math.pow(64, count)) + offset);
      while (count > 0) {
        var temp = div(code_point, Math.pow(64, count - 1));
        result = output_byte_stream.emit(0x80 + (temp % 64));
        count -= 1;
      }
      return result;
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['utf-8'].getEncoder = function(options) {
    return new UTF8Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['utf-8'].getDecoder = function(options) {
    return new UTF8Decoder(options);
  };

  //
  // 9. Legacy single-byte encodings
  //

  /**
   * @constructor
   * @param {Array.<number>} index The encoding index.
   * @param {{fatal: boolean}} options
   */
  function SingleByteDecoder(index, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        return EOF_code_point;
      }
      byte_pointer.offset(1);
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      var code_point = index[bite - 0x80];
      if (code_point === null) {
        return decoderError(fatal);
      }
      return code_point;
    };
  }

  /**
   * @constructor
   * @param {Array.<?number>} index The encoding index.
   * @param {{fatal: boolean}} options
   */
  function SingleByteEncoder(index, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, index);
      if (pointer === null) {
        encoderError(code_point);
      }
      return output_byte_stream.emit(pointer + 0x80);
    };
  }

  (function() {
    if (!('encoding-indexes' in global))
      return;
    encodings.forEach(function(category) {
      if (category['heading'] !== 'Legacy single-byte encodings')
        return;
      category['encodings'].forEach(function(encoding) {
        var idx = index(encoding['name']);
        /** @param {{fatal: boolean}} options */
        encoding.getDecoder = function(options) {
          return new SingleByteDecoder(idx, options);
        };
        /** @param {{fatal: boolean}} options */
        encoding.getEncoder = function(options) {
          return new SingleByteEncoder(idx, options);
        };
      });
    });
  }());

  //
  // 10. Legacy multi-byte Chinese (simplified) encodings
  //

  // 9.1 gb18030

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function GB18030Decoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ gb18030_first = 0x00,
        /** @type {number} */ gb18030_second = 0x00,
        /** @type {number} */ gb18030_third = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && gb18030_first === 0x00 &&
          gb18030_second === 0x00 && gb18030_third === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte &&
          (gb18030_first !== 0x00 || gb18030_second !== 0x00 || gb18030_third !== 0x00)) {
        gb18030_first = 0x00;
        gb18030_second = 0x00;
        gb18030_third = 0x00;
        decoderError(fatal);
      }
      byte_pointer.offset(1);
      var code_point;
      if (gb18030_third !== 0x00) {
        code_point = null;
        if (inRange(bite, 0x30, 0x39)) {
          code_point = indexGB18030CodePointFor(
              (((gb18030_first - 0x81) * 10 + (gb18030_second - 0x30)) * 126 +
               (gb18030_third - 0x81)) * 10 + bite - 0x30);
        }
        gb18030_first = 0x00;
        gb18030_second = 0x00;
        gb18030_third = 0x00;
        if (code_point === null) {
          byte_pointer.offset(-3);
          return decoderError(fatal);
        }
        return code_point;
      }
      if (gb18030_second !== 0x00) {
        if (inRange(bite, 0x81, 0xFE)) {
          gb18030_third = bite;
          return null;
        }
        byte_pointer.offset(-2);
        gb18030_first = 0x00;
        gb18030_second = 0x00;
        return decoderError(fatal);
      }
      if (gb18030_first !== 0x00) {
        if (inRange(bite, 0x30, 0x39)) {
          gb18030_second = bite;
          return null;
        }
        var lead = gb18030_first;
        var pointer = null;
        gb18030_first = 0x00;
        var offset = bite < 0x7F ? 0x40 : 0x41;
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE)) {
          pointer = (lead - 0x81) * 190 + (bite - offset);
        }
        code_point = pointer === null ? null :
            indexCodePointFor(pointer, index('gb18030'));
        if (pointer === null) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      if (bite === 0x80) {
        return 0x20AC;
      }
      if (inRange(bite, 0x81, 0xFE)) {
        gb18030_first = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function GB18030Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, index('gb18030'));
      if (pointer !== null) {
        var lead = div(pointer, 190) + 0x81;
        var trail = pointer % 190;
        var offset = trail < 0x3F ? 0x40 : 0x41;
        return output_byte_stream.emit(lead, trail + offset);
      }
      pointer = indexGB18030PointerFor(code_point);
      var byte1 = div(div(div(pointer, 10), 126), 10);
      pointer = pointer - byte1 * 10 * 126 * 10;
      var byte2 = div(div(pointer, 10), 126);
      pointer = pointer - byte2 * 10 * 126;
      var byte3 = div(pointer, 10);
      var byte4 = pointer - byte3 * 10;
      return output_byte_stream.emit(byte1 + 0x81,
                                     byte2 + 0x30,
                                     byte3 + 0x81,
                                     byte4 + 0x30);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['gb18030'].getEncoder = function(options) {
    return new GB18030Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['gb18030'].getDecoder = function(options) {
    return new GB18030Decoder(options);
  };

  // 10.2 hz-gb-2312

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function HZGB2312Decoder(options) {
    var fatal = options.fatal;
    var /** @type {boolean} */ hzgb2312 = false,
        /** @type {number} */ hzgb2312_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && hzgb2312_lead === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && hzgb2312_lead !== 0x00) {
        hzgb2312_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (hzgb2312_lead === 0x7E) {
        hzgb2312_lead = 0x00;
        if (bite === 0x7B) {
          hzgb2312 = true;
          return null;
        }
        if (bite === 0x7D) {
          hzgb2312 = false;
          return null;
        }
        if (bite === 0x7E) {
          return 0x007E;
        }
        if (bite === 0x0A) {
          return null;
        }
        byte_pointer.offset(-1);
        return decoderError(fatal);
      }
      if (hzgb2312_lead !== 0x00) {
        var lead = hzgb2312_lead;
        hzgb2312_lead = 0x00;
        var code_point = null;
        if (inRange(bite, 0x21, 0x7E)) {
          code_point = indexCodePointFor((lead - 1) * 190 +
                                         (bite + 0x3F), index('gb18030'));
        }
        if (bite === 0x0A) {
          hzgb2312 = false;
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (bite === 0x7E) {
        hzgb2312_lead = 0x7E;
        return null;
      }
      if (hzgb2312) {
        if (inRange(bite, 0x20, 0x7F)) {
          hzgb2312_lead = bite;
          return null;
        }
        if (bite === 0x0A) {
          hzgb2312 = false;
        }
        return decoderError(fatal);
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function HZGB2312Encoder(options) {
    var fatal = options.fatal;
    /** @type {boolean} */
    var hzgb2312 = false;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F) && hzgb2312) {
        code_point_pointer.offset(-1);
        hzgb2312 = false;
        return output_byte_stream.emit(0x7E, 0x7D);
      }
      if (code_point === 0x007E) {
        return output_byte_stream.emit(0x7E, 0x7E);
      }
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (!hzgb2312) {
        code_point_pointer.offset(-1);
        hzgb2312 = true;
        return output_byte_stream.emit(0x7E, 0x7B);
      }
      var pointer = indexPointerFor(code_point, index('gb18030'));
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 190) + 1;
      var trail = pointer % 190 - 0x3F;
      if (!inRange(lead, 0x21, 0x7E) || !inRange(trail, 0x21, 0x7E)) {
        return encoderError(code_point);
      }
      return output_byte_stream.emit(lead, trail);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['hz-gb-2312'].getEncoder = function(options) {
    return new HZGB2312Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['hz-gb-2312'].getDecoder = function(options) {
    return new HZGB2312Decoder(options);
  };

  //
  // 11. Legacy multi-byte Chinese (traditional) encodings
  //

  // 11.1 big5

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function Big5Decoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ big5_lead = 0x00,
        /** @type {?number} */ big5_pending = null;

    /**
     * @param {ByteInputStream} byte_pointer The byte steram to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      // NOTE: Hack to support emitting two code points
      if (big5_pending !== null) {
        var pending = big5_pending;
        big5_pending = null;
        return pending;
      }
      var bite = byte_pointer.get();
      if (bite === EOF_byte && big5_lead === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && big5_lead !== 0x00) {
        big5_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (big5_lead !== 0x00) {
        var lead = big5_lead;
        var pointer = null;
        big5_lead = 0x00;
        var offset = bite < 0x7F ? 0x40 : 0x62;
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE)) {
          pointer = (lead - 0x81) * 157 + (bite - offset);
        }
        if (pointer === 1133) {
          big5_pending = 0x0304;
          return 0x00CA;
        }
        if (pointer === 1135) {
          big5_pending = 0x030C;
          return 0x00CA;
        }
        if (pointer === 1164) {
          big5_pending = 0x0304;
          return 0x00EA;
        }
        if (pointer === 1166) {
          big5_pending = 0x030C;
          return 0x00EA;
        }
        var code_point = (pointer === null) ? null :
            indexCodePointFor(pointer, index('big5'));
        if (pointer === null) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      if (inRange(bite, 0x81, 0xFE)) {
        big5_lead = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function Big5Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, index('big5'));
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 157) + 0x81;
      //if (lead < 0xA1) {
      //  return encoderError(code_point);
      //}
      var trail = pointer % 157;
      var offset = trail < 0x3F ? 0x40 : 0x62;
      return output_byte_stream.emit(lead, trail + offset);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['big5'].getEncoder = function(options) {
    return new Big5Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['big5'].getDecoder = function(options) {
    return new Big5Decoder(options);
  };


  //
  // 12. Legacy multi-byte Japanese encodings
  //

  // 12.1 euc.jp

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCJPDecoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ eucjp_first = 0x00,
        /** @type {number} */ eucjp_second = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        if (eucjp_first === 0x00 && eucjp_second === 0x00) {
          return EOF_code_point;
        }
        eucjp_first = 0x00;
        eucjp_second = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);

      var lead, code_point;
      if (eucjp_second !== 0x00) {
        lead = eucjp_second;
        eucjp_second = 0x00;
        code_point = null;
        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
          code_point = indexCodePointFor((lead - 0xA1) * 94 + bite - 0xA1,
                                         index('jis0212'));
        }
        if (!inRange(bite, 0xA1, 0xFE)) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (eucjp_first === 0x8E && inRange(bite, 0xA1, 0xDF)) {
        eucjp_first = 0x00;
        return 0xFF61 + bite - 0xA1;
      }
      if (eucjp_first === 0x8F && inRange(bite, 0xA1, 0xFE)) {
        eucjp_first = 0x00;
        eucjp_second = bite;
        return null;
      }
      if (eucjp_first !== 0x00) {
        lead = eucjp_first;
        eucjp_first = 0x00;
        code_point = null;
        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
          code_point = indexCodePointFor((lead - 0xA1) * 94 + bite - 0xA1,
                                         index('jis0208'));
        }
        if (!inRange(bite, 0xA1, 0xFE)) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      if (bite === 0x8E || bite === 0x8F || (inRange(bite, 0xA1, 0xFE))) {
        eucjp_first = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCJPEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (code_point === 0x00A5) {
        return output_byte_stream.emit(0x5C);
      }
      if (code_point === 0x203E) {
        return output_byte_stream.emit(0x7E);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F)) {
        return output_byte_stream.emit(0x8E, code_point - 0xFF61 + 0xA1);
      }

      var pointer = indexPointerFor(code_point, index('jis0208'));
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 94) + 0xA1;
      var trail = pointer % 94 + 0xA1;
      return output_byte_stream.emit(lead, trail);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['euc-jp'].getEncoder = function(options) {
    return new EUCJPEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['euc-jp'].getDecoder = function(options) {
    return new EUCJPDecoder(options);
  };

  // 12.2 iso-2022-jp

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ISO2022JPDecoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var state = {
      ASCII: 0,
      escape_start: 1,
      escape_middle: 2,
      escape_final: 3,
      lead: 4,
      trail: 5,
      Katakana: 6
    };
    var /** @type {number} */ iso2022jp_state = state.ASCII,
        /** @type {boolean} */ iso2022jp_jis0212 = false,
        /** @type {number} */ iso2022jp_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite !== EOF_byte) {
        byte_pointer.offset(1);
      }
      switch (iso2022jp_state) {
        default:
        case state.ASCII:
          if (bite === 0x1B) {
            iso2022jp_state = state.escape_start;
            return null;
          }
          if (inRange(bite, 0x00, 0x7F)) {
            return bite;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          return decoderError(fatal);

        case state.escape_start:
          if (bite === 0x24 || bite === 0x28) {
            iso2022jp_lead = bite;
            iso2022jp_state = state.escape_middle;
            return null;
          }
          if (bite !== EOF_byte) {
            byte_pointer.offset(-1);
          }
          iso2022jp_state = state.ASCII;
          return decoderError(fatal);

        case state.escape_middle:
          var lead = iso2022jp_lead;
          iso2022jp_lead = 0x00;
          if (lead === 0x24 && (bite === 0x40 || bite === 0x42)) {
            iso2022jp_jis0212 = false;
            iso2022jp_state = state.lead;
            return null;
          }
          if (lead === 0x24 && bite === 0x28) {
            iso2022jp_state = state.escape_final;
            return null;
          }
          if (lead === 0x28 && (bite === 0x42 || bite === 0x4A)) {
            iso2022jp_state = state.ASCII;
            return null;
          }
          if (lead === 0x28 && bite === 0x49) {
            iso2022jp_state = state.Katakana;
            return null;
          }
          if (bite === EOF_byte) {
            byte_pointer.offset(-1);
          } else {
            byte_pointer.offset(-2);
          }
          iso2022jp_state = state.ASCII;
          return decoderError(fatal);

        case state.escape_final:
          if (bite === 0x44) {
            iso2022jp_jis0212 = true;
            iso2022jp_state = state.lead;
            return null;
          }
          if (bite === EOF_byte) {
            byte_pointer.offset(-2);
          } else {
            byte_pointer.offset(-3);
          }
          iso2022jp_state = state.ASCII;
          return decoderError(fatal);

        case state.lead:
          if (bite === 0x0A) {
            iso2022jp_state = state.ASCII;
            return decoderError(fatal, 0x000A);
          }
          if (bite === 0x1B) {
            iso2022jp_state = state.escape_start;
            return null;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          iso2022jp_lead = bite;
          iso2022jp_state = state.trail;
          return null;

        case state.trail:
          iso2022jp_state = state.lead;
          if (bite === EOF_byte) {
            return decoderError(fatal);
          }
          var code_point = null;
          var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;
          if (inRange(iso2022jp_lead, 0x21, 0x7E) &&
              inRange(bite, 0x21, 0x7E)) {
            code_point = (iso2022jp_jis0212 === false) ?
                indexCodePointFor(pointer, index('jis0208')) :
                indexCodePointFor(pointer, index('jis0212'));
          }
          if (code_point === null) {
            return decoderError(fatal);
          }
          return code_point;

        case state.Katakana:
          if (bite === 0x1B) {
            iso2022jp_state = state.escape_start;
            return null;
          }
          if (inRange(bite, 0x21, 0x5F)) {
            return 0xFF61 + bite - 0x21;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          return decoderError(fatal);
      }
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ISO2022JPEncoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var state = {
      ASCII: 0,
      lead: 1,
      Katakana: 2
    };
    var /** @type {number} */ iso2022jp_state = state.ASCII;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if ((inRange(code_point, 0x0000, 0x007F) ||
           code_point === 0x00A5 || code_point === 0x203E) &&
          iso2022jp_state !== state.ASCII) {
        code_point_pointer.offset(-1);
        iso2022jp_state = state.ASCII;
        return output_byte_stream.emit(0x1B, 0x28, 0x42);
      }
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (code_point === 0x00A5) {
        return output_byte_stream.emit(0x5C);
      }
      if (code_point === 0x203E) {
        return output_byte_stream.emit(0x7E);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F) &&
          iso2022jp_state !== state.Katakana) {
        code_point_pointer.offset(-1);
        iso2022jp_state = state.Katakana;
        return output_byte_stream.emit(0x1B, 0x28, 0x49);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F)) {
        return output_byte_stream.emit(code_point - 0xFF61 - 0x21);
      }
      if (iso2022jp_state !== state.lead) {
        code_point_pointer.offset(-1);
        iso2022jp_state = state.lead;
        return output_byte_stream.emit(0x1B, 0x24, 0x42);
      }
      var pointer = indexPointerFor(code_point, index('jis0208'));
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 94) + 0x21;
      var trail = pointer % 94 + 0x21;
      return output_byte_stream.emit(lead, trail);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['iso-2022-jp'].getEncoder = function(options) {
    return new ISO2022JPEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['iso-2022-jp'].getDecoder = function(options) {
    return new ISO2022JPDecoder(options);
  };

  // 12.3 shift_jis

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ShiftJISDecoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ shiftjis_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && shiftjis_lead === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && shiftjis_lead !== 0x00) {
        shiftjis_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (shiftjis_lead !== 0x00) {
        var lead = shiftjis_lead;
        shiftjis_lead = 0x00;
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC)) {
          var offset = (bite < 0x7F) ? 0x40 : 0x41;
          var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;
          var code_point = indexCodePointFor((lead - lead_offset) * 188 +
                                             bite - offset, index('jis0208'));
          if (code_point === null) {
            return decoderError(fatal);
          }
          return code_point;
        }
        byte_pointer.offset(-1);
        return decoderError(fatal);
      }
      if (inRange(bite, 0x00, 0x80)) {
        return bite;
      }
      if (inRange(bite, 0xA1, 0xDF)) {
        return 0xFF61 + bite - 0xA1;
      }
      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {
        shiftjis_lead = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ShiftJISEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x0080)) {
        return output_byte_stream.emit(code_point);
      }
      if (code_point === 0x00A5) {
        return output_byte_stream.emit(0x5C);
      }
      if (code_point === 0x203E) {
        return output_byte_stream.emit(0x7E);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F)) {
        return output_byte_stream.emit(code_point - 0xFF61 + 0xA1);
      }
      var pointer = indexPointerFor(code_point, index('jis0208'));
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 188);
      var lead_offset = lead < 0x1F ? 0x81 : 0xC1;
      var trail = pointer % 188;
      var offset = trail < 0x3F ? 0x40 : 0x41;
      return output_byte_stream.emit(lead + lead_offset, trail + offset);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['shift_jis'].getEncoder = function(options) {
    return new ShiftJISEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['shift_jis'].getDecoder = function(options) {
    return new ShiftJISDecoder(options);
  };

  //
  // 13. Legacy multi-byte Korean encodings
  //

  // 13.1 euc-kr

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCKRDecoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ euckr_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && euckr_lead === 0) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && euckr_lead !== 0) {
        euckr_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (euckr_lead !== 0x00) {
        var lead = euckr_lead;
        var pointer = null;
        euckr_lead = 0x00;

        if (inRange(lead, 0x81, 0xC6)) {
          var temp = (26 + 26 + 126) * (lead - 0x81);
          if (inRange(bite, 0x41, 0x5A)) {
            pointer = temp + bite - 0x41;
          } else if (inRange(bite, 0x61, 0x7A)) {
            pointer = temp + 26 + bite - 0x61;
          } else if (inRange(bite, 0x81, 0xFE)) {
            pointer = temp + 26 + 26 + bite - 0x81;
          }
        }

        if (inRange(lead, 0xC7, 0xFD) && inRange(bite, 0xA1, 0xFE)) {
          pointer = (26 + 26 + 126) * (0xC7 - 0x81) + (lead - 0xC7) * 94 +
              (bite - 0xA1);
        }

        var code_point = (pointer === null) ? null :
            indexCodePointFor(pointer, index('euc-kr'));
        if (pointer === null) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }

      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }

      if (inRange(bite, 0x81, 0xFD)) {
        euckr_lead = bite;
        return null;
      }

      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCKREncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, index('euc-kr'));
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead, trail;
      if (pointer < ((26 + 26 + 126) * (0xC7 - 0x81))) {
        lead = div(pointer, (26 + 26 + 126)) + 0x81;
        trail = pointer % (26 + 26 + 126);
        var offset = trail < 26 ? 0x41 : trail < 26 + 26 ? 0x47 : 0x4D;
        return output_byte_stream.emit(lead, trail + offset);
      }
      pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);
      lead = div(pointer, 94) + 0xC7;
      trail = pointer % 94 + 0xA1;
      return output_byte_stream.emit(lead, trail);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['euc-kr'].getEncoder = function(options) {
    return new EUCKREncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['euc-kr'].getDecoder = function(options) {
    return new EUCKRDecoder(options);
  };


  //
  // 14. Legacy miscellaneous encodings
  //

  // 14.1 replacement

  // Not needed - API throws TypeError

  // 14.2 utf-16

  /**
   * @constructor
   * @param {boolean} utf16_be True if big-endian, false if little-endian.
   * @param {{fatal: boolean}} options
   */
  function UTF16Decoder(utf16_be, options) {
    var fatal = options.fatal;
    var /** @type {?number} */ utf16_lead_byte = null,
        /** @type {?number} */ utf16_lead_surrogate = null;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && utf16_lead_byte === null &&
          utf16_lead_surrogate === null) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && (utf16_lead_byte !== null ||
                                utf16_lead_surrogate !== null)) {
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (utf16_lead_byte === null) {
        utf16_lead_byte = bite;
        return null;
      }
      var code_point;
      if (utf16_be) {
        code_point = (utf16_lead_byte << 8) + bite;
      } else {
        code_point = (bite << 8) + utf16_lead_byte;
      }
      utf16_lead_byte = null;
      if (utf16_lead_surrogate !== null) {
        var lead_surrogate = utf16_lead_surrogate;
        utf16_lead_surrogate = null;
        if (inRange(code_point, 0xDC00, 0xDFFF)) {
          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +
              (code_point - 0xDC00);
        }
        byte_pointer.offset(-2);
        return decoderError(fatal);
      }
      if (inRange(code_point, 0xD800, 0xDBFF)) {
        utf16_lead_surrogate = code_point;
        return null;
      }
      if (inRange(code_point, 0xDC00, 0xDFFF)) {
        return decoderError(fatal);
      }
      return code_point;
    };
  }

  /**
   * @constructor
   * @param {boolean} utf16_be True if big-endian, false if little-endian.
   * @param {{fatal: boolean}} options
   */
  function UTF16Encoder(utf16_be, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      /**
       * @param {number} code_unit
       * @return {number} last byte emitted
       */
      function convert_to_bytes(code_unit) {
        var byte1 = code_unit >> 8;
        var byte2 = code_unit & 0x00FF;
        if (utf16_be) {
          return output_byte_stream.emit(byte1, byte2);
        }
        return output_byte_stream.emit(byte2, byte1);
      }
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0xD800, 0xDFFF)) {
        encoderError(code_point);
      }
      if (code_point <= 0xFFFF) {
        return convert_to_bytes(code_point);
      }
      var lead = div((code_point - 0x10000), 0x400) + 0xD800;
      var trail = ((code_point - 0x10000) % 0x400) + 0xDC00;
      convert_to_bytes(lead);
      return convert_to_bytes(trail);
    };
  }

  // 14.3 utf-16be
  /** @param {{fatal: boolean}} options */
  name_to_encoding['utf-16be'].getEncoder = function(options) {
    return new UTF16Encoder(true, options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['utf-16be'].getDecoder = function(options) {
    return new UTF16Decoder(true, options);
  };

  // 14.4 utf-16le
  /** @param {{fatal: boolean}} options */
  name_to_encoding['utf-16le'].getEncoder = function(options) {
    return new UTF16Encoder(false, options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['utf-16le'].getDecoder = function(options) {
    return new UTF16Decoder(false, options);
  };

  // 14.5 x-user-defined

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function XUserDefinedDecoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        return EOF_code_point;
      }
      byte_pointer.offset(1);
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      return 0xF780 + bite - 0x80;
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function XUserDefinedEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (inRange(code_point, 0xF780, 0xF7FF)) {
        return output_byte_stream.emit(code_point - 0xF780 + 0x80);
      }
      return encoderError(code_point);
    };
  }

  /** @param {{fatal: boolean}} options */
  name_to_encoding['x-user-defined'].getEncoder = function(options) {
    return new XUserDefinedEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  name_to_encoding['x-user-defined'].getDecoder = function(options) {
    return new XUserDefinedDecoder(options);
  };

  // NOTE: currently unused
  /**
   * @param {string} label The encoding label.
   * @param {ByteInputStream} input_stream The byte stream to test.
   */
  function detectEncoding(label, input_stream) {
    if (input_stream.match([0xFF, 0xFE])) {
      input_stream.offset(2);
      return 'utf-16le';
    }
    if (input_stream.match([0xFE, 0xFF])) {
      input_stream.offset(2);
      return 'utf-16be';
    }
    if (input_stream.match([0xEF, 0xBB, 0xBF])) {
      input_stream.offset(3);
      return 'utf-8';
    }
    return label;
  }

  if (!('TextEncoder' in global)) global['TextEncoder'] = TextEncoder;
  if (!('TextDecoder' in global)) global['TextDecoder'] = TextDecoder;
}(this));


var DEBUG_FS = false;

var fs = (function() {
  var reportRequestError = function(type, request) {
    console.error(type + " error " + request.error);
  }

  var Store = function() {
    this.map = new Map();

    // Pending changes to the persistent datastore, indexed by record key.
    //
    // Changes can represent puts or deletes and comprise a type and (for puts)
    // the value to write:
    //   key: { type: "delete" } or key: { type: "put", value: <value> }
    //
    // We index by key, storing only the most recent change for a given key,
    // to coalesce multiple changes, so that we always sync only the most recent
    // change for a given record.
    this.changesToSync = new Map();

    this.db = null;
  };

  Store.DBNAME = "asyncStorage";
  Store.DBVERSION = 4;
  Store.DBSTORENAME_1 = "keyvaluepairs";
  Store.DBSTORENAME_2 = "fs";
  Store.DBSTORENAME_4 = "fs4";
  Store.DBSTORENAME = Store.DBSTORENAME_4;

  Store.prototype.upgrade = {
    "1to2": function(db, transaction, next) {
      // Create new object store.
      var newObjectStore = db.createObjectStore(Store.DBSTORENAME_2);

      // Iterate the keys in the old object store and copy their values
      // to the new one, converting them from old- to new-style records.
      var oldObjectStore = transaction.objectStore(Store.DBSTORENAME_1);
      var oldRecords = {};
      oldObjectStore.openCursor().onsuccess = function(event) {
        var cursor = event.target.result;

        if (cursor) {
          oldRecords[cursor.key] = cursor.value;
          cursor.continue();
          return;
        }

        // Convert the old records to new ones.
        for (var key in oldRecords) {
          // Records that start with an exclamation mark are stats,
          // which we don't iterate (but do use below when processing
          // their equivalent data records).
          if (key[0] == "!") {
            continue;
          }

          var oldRecord = oldRecords[key];
          var oldStat = oldRecords["!" + key];
          var newRecord = oldStat;
          if (newRecord.isDir) {
            newRecord.files = oldRecord;
          } else {
            newRecord.data = oldRecord;
          }
          newObjectStore.put(newRecord, key);
        }

        db.deleteObjectStore(Store.DBSTORENAME_1);
        next();
      };
    },

    "2to3": function(db, transaction, next) {
      var objectStore = transaction.objectStore(Store.DBSTORENAME_2);
      objectStore.createIndex("parentDir", "parentDir", { unique: false });

      // Convert records to the new format:
      // 1. Delete the obsolete "files" property from directory records.
      // 2. Add the new "parentDir" property to all records.
      objectStore.openCursor().onsuccess = function(event) {
        var cursor = event.target.result;
        if (cursor) {
          var newRecord = cursor.value;
          if (newRecord.isDir) {
            delete newRecord.files;
          }
          var path = cursor.key;
          newRecord.parentDir = (path === "/" ? null : dirname(path));
          cursor.update(newRecord);
          cursor.continue();
        } else {
          next();
        }
      };
    },

    "3to4": function(db, transaction, next) {
      // Create new object store.
      var newObjectStore = db.createObjectStore(Store.DBSTORENAME_4, { keyPath: "pathname" });
      newObjectStore.createIndex("parentDir", "parentDir", { unique: false });

      // Iterate the keys in the old object store and copy their values
      // to the new one, converting them from old- to new-style records.
      var oldObjectStore = transaction.objectStore(Store.DBSTORENAME_2);
      oldObjectStore.openCursor().onsuccess = function(event) {
        var cursor = event.target.result;

        if (cursor) {
          var newRecord = cursor.value;
          newRecord.pathname = cursor.key;
          newObjectStore.put(newRecord);
          cursor.continue();
          return;
        }

        db.deleteObjectStore(Store.DBSTORENAME_2);
        next();
      };
    },
  };

  Store.prototype.init = function(cb) {
    var openreq = indexedDB.open(Store.DBNAME, Store.DBVERSION);

    openreq.onerror = function() {
      console.error("error opening database: " + openreq.error.name);
    };

    openreq.onupgradeneeded = (function(event) {
      if (DEBUG_FS) { console.log("upgrade needed from " + event.oldVersion + " to " + event.newVersion); }

      var db = event.target.result;
      var transaction = openreq.transaction;

      if (event.oldVersion == 0) {
        // If the database doesn't exist yet, then all we have to do
        // is create the object store for the latest version of the database.
        // XXX This is brittle, because there are two places where the latest
        // version of the database is created: here and in the most recent
        // upgrade function.  So we should refactor this code, perhaps moving
        // the initial object store creation into a "0to1" upgrade function,
        // or perhaps moving the latest object store creation into a function.
        var objectStore = openreq.result.createObjectStore(Store.DBSTORENAME, { keyPath: "pathname" });
        objectStore.createIndex("parentDir", "parentDir", { unique: false });
      } else {
        var version = event.oldVersion;
        var next = (function() {
          if (version < event.newVersion) {
            if (DEBUG_FS) { console.log("upgrading from " + version + " to " + (version + 1)); }
            this.upgrade[version + "to" + ++version].bind(this)(db, transaction, next);
          }
        }).bind(this);
        next();
      }
    }).bind(this);

    openreq.onsuccess = (function() {
      this.db = openreq.result;

      // Retrieve all records and put them into the in-memory map.
      var transaction = this.db.transaction(Store.DBSTORENAME, "readonly");
      if (DEBUG_FS) { console.log("getAll initiated"); }
      var objectStore = transaction.objectStore(Store.DBSTORENAME);
      var then = performance.now();
      objectStore.getAll().onsuccess = (function(event) {
        var records = event.target.result;
        for (var i = 0; i < records.length; ++i) {
          this.map.set(records[i].pathname, records[i]);
        };
        if (DEBUG_FS) { console.log("getAll completed in " + (performance.now() - then) + "ms"); }
        cb();
      }).bind(this);
    }).bind(this);
  };

  Store.prototype.getItem = function(key) {
    if (this.map.has(key)) {
      return this.map.get(key);
    }

    var value = null;
    this.map.set(key, value);
    return value;
  };

  Store.prototype.setItem = function(key, value) {
    this.map.set(key, value);
    this.changesToSync.set(key, { type: "put", value: value });
  };

  Store.prototype.removeItem = function(key) {
    this.map.set(key, null);
    this.changesToSync.set(key, { type: "delete" });
  };

  Store.prototype.clear = function() {
    this.map.clear();
    this.changesToSync.clear();

    var transaction = this.db.transaction(Store.DBSTORENAME, "readwrite");
    if (DEBUG_FS) { console.log("clear initiated"); }
    var objectStore = transaction.objectStore(Store.DBSTORENAME);
    var req = objectStore.clear();
    req.onerror = function() {
      console.error("Error clearing store: " + req.error.name);
    };
    transaction.oncomplete = function() {
      if (DEBUG_FS) { console.log("clear completed"); }
    };
  }

  Store.prototype.sync = function(cb) {
    cb = cb || function() {};

    // If there are no changes to sync, merely call the callback
    // (in a timeout so the callback always gets called asynchronously).
    if (this.changesToSync.size == 0) {
      setZeroTimeout(cb);
      return;
    }

    var transaction = this.db.transaction(Store.DBSTORENAME, "readwrite");
    if (DEBUG_FS) { console.log("sync initiated"); }
    var objectStore = transaction.objectStore(Store.DBSTORENAME);

    this.changesToSync.forEach((function(change, key) {
      var req;
      if (change.type == "put") {
        change.value.pathname = key;
        req = objectStore.put(change.value);
        if (DEBUG_FS) { console.log("put " + key); }
        req.onerror = function() {
          console.error("Error putting " + key + ": " + req.error.name);
        };
      } else if (change.type == "delete") {
        req = objectStore.delete(key);
        if (DEBUG_FS) { console.log("delete " + key); }
        req.onerror = function() {
          console.error("Error deleting " + key + ": " + req.error.name);
        };
      }
    }).bind(this));

    this.changesToSync.clear();

    transaction.oncomplete = function() {
      if (DEBUG_FS) { console.log("sync completed"); }
      cb();
    };
  }

  Store.prototype.export = function(cb) {
    var records = {};
    var output = {};
    var promises = [];

    this.sync((function() {
      var transaction = this.db.transaction(Store.DBSTORENAME, "readonly");
      if (DEBUG_FS) { console.log("export initiated"); }
      var objectStore = transaction.objectStore(Store.DBSTORENAME);

      var req = objectStore.openCursor();
      req.onerror = function() {
        console.error("export error " + req.error);
      };
      req.onsuccess = function(event) {
        var cursor = event.target.result;
        if (cursor) {
          records[cursor.key] = cursor.value;
          cursor.continue();
        } else {
          Object.keys(records).forEach(function(key) {
            if (DEBUG_FS) { console.log("exporting " + key); }
            var record = records[key];
            if (record.isDir) {
              output[key] = record;
            } else if (record.size === 0) { // Chrome has problems exporting empty blobs.
              record.data = [];
              output[key] = record;
            } else {
              promises.push(new Promise(function(resolve, reject) {
                var reader = new FileReader();
                reader.addEventListener("error", function() {
                  reject("Failed to read: " + key);
                });
                reader.addEventListener("load", function() {
                  record.data = Array.prototype.slice.call(new Int8Array(reader.result));
                  output[key] = record;
                  resolve();
                });
                reader.readAsArrayBuffer(record.data);
              }));
            }
          });

          Promise.all(promises).then(function() {
            var blob = new Blob([JSON.stringify(output)]);
            if (DEBUG_FS) { console.log("export completed"); }
            cb(blob);
          }, function(reason) {
            console.error("Failed to export: " + reason);
          });
        }
      };
    }).bind(this));
  }

  Store.prototype.import = function(file, cb) {
    var reader = new FileReader();
    reader.onload = (function() {
      var input = JSON.parse(reader.result);
      var transaction = this.db.transaction(Store.DBSTORENAME, "readwrite");
      if (DEBUG_FS) { console.log("import initiated"); }
      this.map.clear();
      var objectStore = transaction.objectStore(Store.DBSTORENAME);
      var req = objectStore.clear();
      req.onerror = reportRequestError.bind(null, "import", req);
      Object.keys(input).forEach((function(key) {
        if (DEBUG_FS) { console.log("importing " + key); }
        var record = input[key];
        if (!record.isDir) {
          record.data = new Blob([new Int8Array(record.data)]);
        }
        this.map.set(key, record);
        record.pathname = key;
        var req = objectStore.put(record);
        req.onerror = reportRequestError.bind(null, "import", req);
      }).bind(this));
      transaction.oncomplete = function() {
        if (DEBUG_FS) { console.log("import completed"); }
        cb();
      };
    }).bind(this);
    reader.readAsText(file);
  }

  var store = new Store();

  var FileBuffer = function(array) {
    this.array = array;
    this.contentSize = array.byteLength;
  }

  FileBuffer.prototype.setSize = function(newContentSize) {
    if (newContentSize < this.array.byteLength) {
      this.contentSize = newContentSize;
      return;
    }

    var newBufferSize = 512;

    // The buffer grows exponentially until the content size
    // reaches 524288. After this threshold, it starts to grow
    // linearly in increments of 524288 bytes.
    if (newContentSize < 524288) {
      while (newContentSize > newBufferSize) {
        newBufferSize <<= 1;
      }
    } else {
      while (newContentSize > newBufferSize) {
        newBufferSize += 524288;
      }
    }

    var newArray = new Int8Array(newBufferSize);
    newArray.set(this.array);

    this.array = newArray;
    this.contentSize = newContentSize;
  }

  FileBuffer.prototype.getContent = function() {
    return this.array.subarray(0, this.contentSize);
  }

  function normalizePath(path) {
    // Remove a trailing slash.
    if (path.length != 1 && path.lastIndexOf("/") == path.length-1) {
      path = path.substring(0, path.length-1);
    }

    // Coalesce multiple consecutive slashes.
    path = path.replace(/\/{2,}/, "/");

    // XXX Replace "." and ".." parts.

    return path;
  }

  function dirname(path) {
    path = normalizePath(path);

    var index = path.lastIndexOf("/");
    if (index == -1) {
      return ".";
    }

    while (index >= 0 && path[index] == "/") {
      --index;
    }

    var dir = path.slice(0, index + 1);
    if (dir == "") {
      dir = "/";
    }
    return dir;
  }

  function basename(path) {
    return path.slice(path.lastIndexOf("/") + 1);
  }

  function initRootDir() {
    if (!store.getItem("/")) {
      store.setItem("/", {
        isDir: true,
        mtime: Date.now(),
        parentDir: null,
      });
    }
  }

  function init(cb) {
    store.init(function() {
      initRootDir();
      cb();
    });
  }

  var openedFiles = new Map();
  var lastId = 2;

  function open(path, cb) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs open " + path); }

    var record = store.getItem(path);
    if (record == null || record.isDir) {
      setZeroTimeout(function() { cb(-1) });
    } else {
      var reader = new FileReader();
      reader.addEventListener("error", function() {
        console.error("Failed to read blob data from: " + path);
        setZeroTimeout(function() { cb(-1) });
      });
      reader.addEventListener("load", function() {
        openedFiles.set(++lastId, {
          dirty: false,
          path: path,
          buffer: new FileBuffer(new Int8Array(reader.result)),
          mtime: record.mtime,
          size: record.size,
          position: 0,
          record: record,
        });
        cb(lastId);
      });
      reader.readAsArrayBuffer(record.data);
    }
  }

  function close(fd) {
    if (fd < 0) {
      return;
    }

    var file = openedFiles.get(fd);
    if (file) {
      if (DEBUG_FS) { console.log("fs close " + file.path); }
      flush(fd);
      openedFiles.delete(fd);
    }
  }

  function read(fd, from, to) {
    var file = openedFiles.get(fd);
    if (!file) {
      return null;
    }
    if (DEBUG_FS) { console.log("fs read " + file.path); }

    var buffer = file.buffer;

    if (typeof from === "undefined") {
      from = file.position;
    }

    if (!to || to > buffer.contentSize) {
      to = buffer.contentSize;
    }

    if (from > buffer.contentSize) {
      from = buffer.contentSize;
    }

    file.position += to - from;
    return buffer.array.subarray(from, to);
  }

  function write(fd, data, from) {
    var file = openedFiles.get(fd);

    if (DEBUG_FS) { console.log("fs write " + file.path); }

    if (typeof from == "undefined") {
      from = file.position;
    }

    var buffer = file.buffer;

    if (from > buffer.contentSize) {
      from = buffer.contentSize;
    }

    var newLength = (from + data.byteLength > buffer.contentSize) ? (from + data.byteLength) : (buffer.contentSize);

    buffer.setSize(newLength);

    buffer.array.set(data, from);

    file.position = from + data.byteLength;
    file.mtime = Date.now();
    file.size = buffer.contentSize;
    file.dirty = true;
  }

  function getpos(fd) {
    return openedFiles.get(fd).position;
  }

  function setpos(fd, pos) {
    openedFiles.get(fd).position = pos;
  }

  function getsize(fd) {
    var file = openedFiles.get(fd);

    if (!file) {
      return -1;
    }

    return file.buffer.contentSize;
  }

  function flush(fd) {
    var openedFile = openedFiles.get(fd);

    if (DEBUG_FS) { console.log("fs flush " + openedFile.path); }

    // Bail early if the file has not been modified.
    if (!openedFile.dirty) {
      return;
    }

    openedFile.record.data = new Blob([openedFile.buffer.getContent()]);
    openedFile.record.mtime = openedFile.mtime;
    openedFile.record.size = openedFile.size;
    store.setItem(openedFile.path, openedFile.record);
    openedFile.dirty = false;
  }

  function flushAll() {
    for (var entry of openedFiles) {
      if (entry[1].dirty) {
        flush(entry[0]);
      }
    }

    // After flushing to the in-memory datastore, sync it to the persistent one.
    // We might want to decouple this from the flushAll calls, so we can do them
    // at different interval (f.e. flushing to memory every five seconds
    // but only syncing to the persistent datastore every minute or so), though
    // we should continue to do both immediately on pagehide.
    syncStore();
  }

  // Due to bug #227, we don't support Object::finalize(). But the Java
  // filesystem implementation requires the `finalize` method to save cached
  // file data if user doesn't flush or close the file explicitly. To avoid
  // losing data, we flush files periodically.
  setInterval(flushAll, 5000);

  // Flush files when app goes into background.
  window.addEventListener("pagehide", flushAll);

  function list(path) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs list " + path); }

    var record = store.getItem(path);
    if (record == null) {
      throw new Error("Path does not exist");
    }

    if (!record.isDir) {
      throw new Error("Path is not a directory");
    }

    var files = [];

    store.map.forEach(function(value, key) {
      if (value && value.parentDir === path) {
        files.push(basename(key) + (value.isDir ? "/" : ""));
      }
    });

    return files.sort();
  }

  function exists(path) {
    path = normalizePath(path);

    var record = store.getItem(path);
    if (DEBUG_FS) { console.log("fs exists " + path + ": " + !!record); }

    return !!record;
  }

  function truncate(path, size) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs truncate " + path); }

    var record = store.getItem(path);
    if (record == null || record.isDir) {
      return false;
    }

    if (size >= record.size) {
      return true;
    }

    record.data = record.data.slice(0, size || 0, record.data.type);
    record.mtime = Date.now();
    record.size = size || 0;
    store.setItem(path, record);
    return true;
  }

  function ftruncate(fd, size) {
    var file = openedFiles.get(fd);

    if (DEBUG_FS) { console.log("fs ftruncate " + file.path); }

    if (size != file.buffer.contentSize) {
      file.buffer.setSize(size);
      file.dirty = true;
      file.mtime = Date.now();
      file.size = size;
    }
  }

  function remove(path) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs remove " + path); }

    for (var file of openedFiles.values()) {
      if (file.path === path) {
        if (DEBUG_FS) { console.log("file is open"); }
        return false;
      }
    }

    var record = store.getItem(path);

    if (!record) {
      if (DEBUG_FS) { console.log("file does not exist"); }
      return false;
    }

    // If it's a directory that isn't empty, then we can't remove it.
    if (record.isDir) {
      for (var value of store.map.values()) {
        if (value && value.parentDir === path) {
          if (DEBUG_FS) { console.log("directory is not empty"); }
          return false;
        }
      }
    }

    store.removeItem(path);
    return true;
  }

  function createInternal(path, record) {
    var name = basename(path);
    var dir = dirname(path);

    var parentRecord = store.getItem(dir);

    // If the parent directory doesn't exist or isn't a directory,
    // then we can't create the file.
    if (parentRecord === null || !parentRecord.isDir) {
      console.error("parent directory '" + dir + "' doesn't exist or isn't a directory");
      return false;
    }

    var existingRecord = store.getItem(path);

    // If the file already exists, then we can't create it.
    if (existingRecord) {
      if (DEBUG_FS) { console.error("file '" + path + "' already exists"); }
      return false;
    }

    // Create the file.
    store.setItem(path, record);

    return true;
  }

  function create(path, blob) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs create " + path); }

    var record = {
      isDir: false,
      mtime: Date.now(),
      data: blob,
      size: blob.size,
      parentDir: dirname(path),
    };

    return createInternal(path, record);
  }

  function mkdir(path) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs mkdir " + path); }

    var record = {
      isDir: true,
      mtime: Date.now(),
      parentDir: dirname(path),
    };

    return createInternal(path, record);
  }

  function mkdirp(path) {
    if (DEBUG_FS) { console.log("fs mkdirp " + path); }

    if (path[0] !== "/") {
      console.error("mkdirp called on relative path: " + path);
      return false;
    }

    // Split the path into parts across "/", discarding the initial, empty part.
    var parts = normalizePath(path).split("/").slice(1);

    var partPath = "";

    function mkpart(created) {
      if (!created) {
        return false;
      }

      if (!parts.length) {
        return true;
      }

      partPath += "/" + parts.shift();

      var record = store.getItem(partPath);

      if (!record) {
        // The part doesn't exist; make it, then continue to next part.
        return mkpart(mkdir(partPath));
      } else if (record.isDir) {
        // The part exists and is a directory; continue to next part.
        return mkpart(true);
      } else {
        // The part exists but isn't a directory; fail.
        console.error("mkdirp called on path with non-dir part: " + partPath);
        return false;
      }
    }

    return mkpart(true);
  }

  function size(path) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs size " + path); }

    var record = store.getItem(path);
    if (record == null || record.isDir) {
      return -1;
    } else {
      return record.size;
    }
  }

  // Callers of this function should make sure
  // newPath doesn't exist.
  function rename(oldPath, newPath) {
    oldPath = normalizePath(oldPath);
    newPath = normalizePath(newPath);
    if (DEBUG_FS) { console.log("fs rename " + oldPath + " -> " + newPath); }

    for (var file of openedFiles.values()) {
      if (file.path === oldPath) {
        if (DEBUG_FS) { console.log("file is open"); }
        return false;
      }
    }

    var oldRecord = store.getItem(oldPath);

    // If the old path doesn't exist, we can't move it.
    if (oldRecord == null) {
      return false;
    }

    // If the old path is a dir with files in it, then we don't move it.
    // XXX Move it along with its files.
    if (oldRecord.isDir) {
      for (var value of store.map.values()) {
        if (value && value.parentDir === oldPath) {
          console.error("rename directory containing files not implemented: " + oldPath + " to " + newPath);
          return false;
        }
      }
    }

    store.removeItem(oldPath);
    oldRecord.parentDir = dirname(newPath);
    store.setItem(newPath, oldRecord);
    return true;
  }

  function stat(path) {
    path = normalizePath(path);
    if (DEBUG_FS) { console.log("fs stat " + path); }

    var record = store.getItem(path);

    if (record === null) {
      return null;
    }

    return {
      isDir: record.isDir,
      mtime: record.mtime,
      size: record.size,
    };
  }

  function clear() {
    store.clear();
    initRootDir();
  }

  function syncStore(cb) {
    store.sync(cb);
  }

  function createUniqueFile(parentDir, completeName, blob) {
    var name = completeName;
    var ext = "";
    var extIndex = name.lastIndexOf(".");
    if (extIndex !== -1) {
      ext = name.substring(extIndex);
      name = name.substring(0, extIndex);
    }

    var i = 0;
    function tryFile(fileName) {
      if (exists(parentDir + "/" + fileName)) {
        i++;
        return tryFile(name + "-" + i + ext);
      } else {
        // XXX Shouldn't this be mkdirp if we really want to ensure
        // that the parent directory exists?
        mkdir(parentDir);
        create(parentDir + "/" + fileName, blob);
        return fileName;
      }
    }
    return tryFile(completeName);
  }

  function exportStore(cb) {
    return store.export(cb);
  }

  function importStore(blob, cb) {
    return store.import(blob, cb);
  }

  return {
    normalize: normalizePath,
    dirname: dirname,
    init: init,
    open: open,
    close: close,
    read: read,
    write: write,
    getpos: getpos,
    setpos: setpos,
    getsize: getsize,
    flush: flush,
    list: list,
    exists: exists,
    truncate: truncate,
    ftruncate: ftruncate,
    remove: remove,
    create: create,
    mkdir: mkdir,
    mkdirp: mkdirp,
    size: size,
    rename: rename,
    stat: stat,
    clear: clear,
    syncStore: syncStore,
    exportStore: exportStore,
    importStore: importStore,
    createUniqueFile: createUniqueFile,
  };
})();
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

;

// Directories in the filesystem.
var initialDirs = [
  "/MemoryCard",
  "/Persistent",
  "/Phone",
  "/Phone/_my_downloads",
  "/Phone/_my_pictures",
  "/Phone/_my_videos",
  "/Phone/_my_recordings",
  "/Private",
];

// Files in the filesystem.  We load the data from the source path on the real
// filesystem and write it to the target path on the virtual filesystem.
// Source paths are relative to APP_BASE_DIR.
var initialFiles = [
  { sourcePath: "certs/_main.ks", targetPath: "/_main.ks" },
];

var initFS = new Promise(function(resolve, reject) {
  fs.init(resolve);
}).then(function() {
  if (typeof config !== "undefined" && config.midletClassName == "RunTests") {
    initialDirs.push("/tcktestdir");
  }

  initialDirs.forEach(function(dir) {
    fs.mkdir(dir);
  });
}).then(function() {
  var filePromises = [];

  if (typeof config !== "undefined" && config.midletClassName == "RunTests") {
    initialFiles.push({ sourcePath: "certs/_test.ks", targetPath: "/_test.ks" });
  }

  initialFiles.forEach(function(file) {
    filePromises.push(new Promise(function(resolve, reject) {
      if (fs.exists(file.targetPath)) {
        resolve();
      } else {
        load(APP_BASE_DIR + file.sourcePath, "blob").then(function(data) {
          fs.create(file.targetPath, data);
          resolve();
        });
      }
    }));
  });

  return Promise.all(filePromises);
});
/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
(function() {
/* ########## Begin module implementation ########## */
function initModule(forge) {

/* Utilities API */
var util = forge.util = forge.util || {};

// define isArrayBuffer
util.isArrayBuffer = function(x) {
  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
};

// define isArrayBufferView
var _arrayBufferViews = [];
if(typeof DataView !== 'undefined') {
  _arrayBufferViews.push(DataView);
}
if(typeof Int8Array !== 'undefined') {
  _arrayBufferViews.push(Int8Array);
}
if(typeof Uint8Array !== 'undefined') {
  _arrayBufferViews.push(Uint8Array);
}
if(typeof Uint8ClampedArray !== 'undefined') {
  _arrayBufferViews.push(Uint8ClampedArray);
}
if(typeof Int16Array !== 'undefined') {
  _arrayBufferViews.push(Int16Array);
}
if(typeof Uint16Array !== 'undefined') {
  _arrayBufferViews.push(Uint16Array);
}
if(typeof Int32Array !== 'undefined') {
  _arrayBufferViews.push(Int32Array);
}
if(typeof Uint32Array !== 'undefined') {
  _arrayBufferViews.push(Uint32Array);
}
if(typeof Float32Array !== 'undefined') {
  _arrayBufferViews.push(Float32Array);
}
if(typeof Float64Array !== 'undefined') {
  _arrayBufferViews.push(Float64Array);
}
util.isArrayBufferView = function(x) {
  for(var i = 0; i < _arrayBufferViews.length; ++i) {
    if(x instanceof _arrayBufferViews[i]) {
      return true;
    }
  }
  return false;
};

// TODO: set ByteBuffer to best available backing
util.ByteBuffer = ByteStringBuffer;

/** Buffer w/BinaryString backing */

/**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */
function ByteStringBuffer(b) {
  // TODO: update to match DataBuffer API

  // the data in this buffer
  this.data = '';
  // the pointer for reading from this buffer
  this.read = 0;

  if(typeof b === 'string') {
    this.data = b;
  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
    // convert native buffer to forge buffer
    // FIXME: support native buffers internally instead
    var arr = new Uint8Array(b);
    try {
      this.data = String.fromCharCode.apply(null, arr);
    } catch(e) {
      for(var i = 0; i < arr.length; ++i) {
        this.putByte(arr[i]);
      }
    }
  } else if(b instanceof ByteStringBuffer ||
    (typeof b === 'object' && typeof b.data === 'string' &&
    typeof b.read === 'number')) {
    // copy existing buffer
    this.data = b.data;
    this.read = b.read;
  }
}
util.ByteStringBuffer = ByteStringBuffer;

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.ByteStringBuffer.prototype.length = function() {
  return this.data.length - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.ByteStringBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putByte = function(b) {
  this.data += String.fromCharCode(b);
  return this;
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
  b = String.fromCharCode(b);
  var d = this.data;
  while(n > 0) {
    if(n & 1) {
      d += b;
    }
    n >>>= 1;
    if(n > 0) {
      b += b;
    }
  }
  this.data = d;
  return this;
};

/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a UTF-8 encoded string) to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBytes = function(bytes) {
  // TODO: update to match DataBuffer API
  this.data += bytes;
  return this;
};

/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putString = function(str) {
  this.data += util.encodeUtf8(str);
  return this;
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16 = function(i) {
  this.data +=
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF);
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24 = function(i) {
  this.data +=
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF);
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32 = function(i) {
  this.data +=
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF);
  return this;
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16Le = function(i) {
  this.data +=
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF);
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24Le = function(i) {
  this.data +=
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF);
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32Le = function(i) {
  this.data +=
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 24 & 0xFF);
  return this;
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt = function(i, n) {
  do {
    n -= 8;
    this.data += String.fromCharCode((i >> n) & 0xFF);
  } while(n > 0);
  return this;
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
  this.data += buffer.getBytes();
  return this;
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.getByte = function() {
  return this.data.charCodeAt(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 8 ^
    this.data.charCodeAt(this.read + 1));
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 16 ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 24 ^
    this.data.charCodeAt(this.read + 1) << 16 ^
    this.data.charCodeAt(this.read + 2) << 8 ^
    this.data.charCodeAt(this.read + 3));
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16 ^
    this.data.charCodeAt(this.read + 3) << 24);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer.
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getInt = function(n) {
  var rval = 0;
  do {
    rval = (rval << 8) + this.data.charCodeAt(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer.
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getSignedInt = function(n) {
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out into a UTF-8 string and clears them from the buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a UTF-8 string of bytes.
 */
util.ByteStringBuffer.prototype.getBytes = function(count) {
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
 * the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of UTF-8 encoded characters.
 */
util.ByteStringBuffer.prototype.bytes = function(count) {
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.at = function(i) {
  return this.data.charCodeAt(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.setAt = function(i, b) {
  this.data = this.data.substr(0, this.read + i) +
    String.fromCharCode(b) +
    this.data.substr(this.read + i + 1);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.ByteStringBuffer.prototype.last = function() {
  return this.data.charCodeAt(this.data.length - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.ByteStringBuffer.prototype.copy = function() {
  var c = util.createBuffer(this.data);
  c.read = this.read;
  return c;
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.compact = function() {
  if(this.read > 0) {
    this.data = this.data.slice(this.read);
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.clear = function() {
  this.data = '';
  this.read = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.truncate = function(count) {
  var len = Math.max(0, this.length() - count);
  this.data = this.data.substr(this.read, len);
  this.read = 0;
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.ByteStringBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */
util.ByteStringBuffer.prototype.toString = function() {
  return util.decodeUtf8(this.bytes());
};

/** End Buffer w/BinaryString backing */

/**
 * Creates a buffer that stores bytes. A value may be given to put into the
 * buffer that is either a string of bytes or a UTF-16 string that will
 * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).
 *
 * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode
 *          as UTF-8.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */
util.createBuffer = function(input, encoding) {
  // TODO: deprecate, use new ByteBuffer() instead
  encoding = encoding || 'raw';
  if(input !== undefined && encoding === 'utf8') {
    input = util.encodeUtf8(input);
  }
  return new util.ByteBuffer(input);
};

/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */
util.fillString = function(c, n) {
  var s = '';
  while(n > 0) {
    if(n & 1) {
      s += c;
    }
    n >>>= 1;
    if(n > 0) {
      c += c;
    }
  }
  return s;
};

/**
 * UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript
 * string). Non-ASCII characters will be encoded as multiple bytes according
 * to UTF-8.
 *
 * @param str the string to encode.
 *
 * @return the UTF-8 encoded string.
 */
util.encodeUtf8 = function(str) {
  return unescape(encodeURIComponent(str));
};

} // end module implementation

/* ########## Begin module wrapper ########## */
var name = 'util';
if(typeof define !== 'function') {
  // NodeJS -> AMD
  if(typeof module === 'object' && module.exports) {
    var nodeJS = true;
    define = function(ids, factory) {
      factory(require, module);
    };
  } else {
    // <script>
    if(typeof forge === 'undefined') {
      (1, eval)("var forge = {};");
    }
    return initModule(forge);
  }
}
// AMD
var deps;
var defineFunc = function(require, module) {
  module.exports = function(forge) {
    var mods = deps.map(function(dep) {
      return require(dep);
    }).concat(initModule);
    // handle circular dependencies
    forge = forge || {};
    forge.defined = forge.defined || {};
    if(forge.defined[name]) {
      return forge[name];
    }
    forge.defined[name] = true;
    for(var i = 0; i < mods.length; ++i) {
      mods[i](forge);
    }
    return forge[name];
  };
};
var tmpDefine = define;
define = function(ids, factory) {
  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
  if(nodeJS) {
    define = null;
    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
  }
  define = tmpDefine;
  return define.apply(null, Array.prototype.slice.call(arguments, 0));
};
define(['require', 'module'], function() {
  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
});
})();
/**
 * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
(function() {
/* ########## Begin module implementation ########## */
function initModule(forge) {

var md5 = forge.md5 = forge.md5 || {};
forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};
forge.md.md5 = forge.md.algorithms.md5 = md5;

// A weak map from message digest objects to hashes containing their private
// _state and _input variables.  We store them in this map so other message
// digest objects can access them in md.clone.  They remain inaccessible outside
// the module.
var _privates = new WeakMap();

/**
 * Creates an MD5 message digest object.
 *
 * @return a message digest object.
 */
md5.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  var _private = {
    // MD5 state contains four 32-bit integers
    _state: null,

    // input buffer
    _input: forge.util.createBuffer()
  };

  // used for word storage
  var _w = new Array(16);

  // message digest object
  var md = {
    algorithm: 'md5',
    blockLength: 64,
    digestLength: 16,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true 64-bit message length as two 32-bit ints
    messageLength64: [0, 0]
  };

  _privates.set(md, _private);

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    md.messageLength = 0;
    md.messageLength64 = [0, 0];
    _private._input = forge.util.createBuffer();
    _private._state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    md.messageLength += msg.length;
    md.messageLength64[0] += (msg.length / 0x100000000) >>> 0;
    md.messageLength64[1] += msg.length >>> 0;

    // add bytes to input buffer
    _private._input.putBytes(msg);

    // process bytes
    _update(_private._state, _w, _private._input);

    // compact input buffer every 2K or if empty
    if(_private._input.read > 2048 || _private._input.length() === 0) {
      _private._input.compact();
    }

    return md;
  };

  /**
   * Clones this message digest object, returning a new message digest object
   * whose state is identical to this object's state.
   */
  md.clone = function() {
    var clone = md5.create();

    clone.messageLength = md.messageLength;
    clone.messageLength64[0] = md.messageLength64[0];
    clone.messageLength64[1] = md.messageLength64[1];

    var clonePrivate = _privates.get(clone);

    if (clonePrivate) {
      clonePrivate._input.putBytes(_private._input.bytes());
      clonePrivate._state = {
        h0: _private._state.h0,
        h1: _private._state.h1,
        h2: _private._state.h2,
        h3: _private._state.h3
      };
    } else {
      console.warn("MD5.clone: couldn't find private for clone");
    }

    return clone;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate MD5 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    // 512 bits == 64 bytes, 448 bits == 56 bytes, 64 bits = 8 bytes
    // _padding starts with 1 byte with first bit is set in it which
    // is byte value 128, then there may be up to 63 other pad bytes
    var padBytes = forge.util.createBuffer();
    padBytes.putBytes(_private._input.bytes());
    // 64 - (remaining msg + 8 bytes msg length) mod 64
    padBytes.putBytes(
      _padding.substr(0, 64 - ((md.messageLength64[1] + 8) & 0x3F)));

    /* Now append length of the message. The length is appended in bits
    as a 64-bit number in little-endian order. Since we store the length in
    bytes, we must multiply the 64-bit length by 8 (or left shift by 3). */
    padBytes.putInt32Le(md.messageLength64[1] << 3);
    padBytes.putInt32Le(
      (md.messageLength64[0] << 3) | (md.messageLength64[0] >>> 28));
    var s2 = {
      h0: _private._state.h0,
      h1: _private._state.h1,
      h2: _private._state.h2,
      h3: _private._state.h3
    };
    _update(s2, _w, padBytes);
    var rval = forge.util.createBuffer();
    rval.putInt32Le(s2.h0);
    rval.putInt32Le(s2.h1);
    rval.putInt32Le(s2.h2);
    rval.putInt32Le(s2.h3);
    return rval;
  };

  return md;
};

// padding, constant tables for calculating md5
var _padding = null;
var _g = null;
var _r = null;
var _k = null;
var _initialized = false;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // g values
  _g = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,
    5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,
    0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9];

  // rounds table
  _r = [
    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
    5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
    4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
    6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];

  // get the result of abs(sin(i + 1)) as a 32-bit integer
  _k = new Array(64);
  for(var i = 0; i < 64; ++i) {
    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
  }

  // now initialized
  _initialized = true;
}

/**
 * Updates an MD5 state with the given byte buffer.
 *
 * @param s the MD5 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, f, r, i;
  var len = bytes.length();
  while(len >= 64) {
    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;

    // round 1
    for(i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32Le();
      f = d ^ (b & (c ^ d));
      t = (a + f + _k[i] + w[i]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }
    // round 2
    for(; i < 32; ++i) {
      f = c ^ (d & (b ^ c));
      t = (a + f + _k[i] + w[_g[i]]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }
    // round 3
    for(; i < 48; ++i) {
      f = b ^ c ^ d;
      t = (a + f + _k[i] + w[_g[i]]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }
    // round 4
    for(; i < 64; ++i) {
      f = c ^ (b | ~d);
      t = (a + f + _k[i] + w[_g[i]]);
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += (t << r) | (t >>> (32 - r));
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;

    len -= 64;
  }
}

} // end module implementation

/* ########## Begin module wrapper ########## */
var name = 'md5';
if(typeof define !== 'function') {
  // NodeJS -> AMD
  if(typeof module === 'object' && module.exports) {
    var nodeJS = true;
    define = function(ids, factory) {
      factory(require, module);
    };
  } else {
    // <script>
    if(typeof forge === 'undefined') {
      (1, eval)("var forge = {};");
    }
    return initModule(forge);
  }
}
// AMD
var deps;
var defineFunc = function(require, module) {
  module.exports = function(forge) {
    var mods = deps.map(function(dep) {
      return require(dep);
    }).concat(initModule);
    // handle circular dependencies
    forge = forge || {};
    forge.defined = forge.defined || {};
    if(forge.defined[name]) {
      return forge[name];
    }
    forge.defined[name] = true;
    for(var i = 0; i < mods.length; ++i) {
      mods[i](forge);
    }
    return forge[name];
  };
};
var tmpDefine = define;
define = function(ids, factory) {
  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
  if(nodeJS) {
    define = null;
    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
  }
  define = tmpDefine;
  return define.apply(null, Array.prototype.slice.call(arguments, 0));
};
define(['require', 'module', './util'], function() {
  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
});
})();
// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Basic JavaScript BN library - subset useful for RSA encryption.

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary&0xffffff)==0xefcafe);

// (public) Constructor
function BigInteger(a,b,c) {
  if(a != null)
    if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
}

// return new, unset BigInteger
function nbi() { return new BigInteger(null); }

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i,x,w,j,c,n) {
  while(--n >= 0) {
    var v = x*this[i++]+w[j]+c;
    c = Math.floor(v/0x4000000);
    w[j++] = v&0x3ffffff;
  }
  return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i,x,w,j,c,n) {
  var xl = x&0x7fff, xh = x>>15;
  while(--n >= 0) {
    var l = this[i]&0x7fff;
    var h = this[i++]>>15;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
    w[j++] = l&0x3fffffff;
  }
  return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i,x,w,j,c,n) {
  var xl = x&0x3fff, xh = x>>14;
  while(--n >= 0) {
    var l = this[i]&0x3fff;
    var h = this[i++]>>14;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
    c = (l>>28)+(m>>14)+xh*h;
    w[j++] = l&0xfffffff;
  }
  return c;
}
if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
  BigInteger.prototype.am = am2;
  dbits = 30;
}
else if(j_lm && (navigator.appName != "Netscape")) {
  BigInteger.prototype.am = am1;
  dbits = 26;
}
else { // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1<<dbits)-1);
BigInteger.prototype.DV = (1<<dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2,BI_FP);
BigInteger.prototype.F1 = BI_FP-dbits;
BigInteger.prototype.F2 = 2*dbits-BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr,vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) { return BI_RM.charAt(n); }
function intAt(s,i) {
  var c = BI_RC[s.charCodeAt(i)];
  return (c==null)?-1:c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1;
  this.s = (x<0)?-1:0;
  if(x > 0) this[0] = x;
  else if(x < -1) this[0] = x+this.DV;
  else this.t = 0;
}

// return bigint initialized to value
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

// (protected) set from string and radix
function bnpFromString(s,b) {
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 256) k = 8; // byte array
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else { this.fromRadix(s,b); return; }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while(--i >= 0) {
    var x = (k==8)?s[i]&0xff:intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-") mi = true;
      continue;
    }
    mi = false;
    if(sh == 0)
      this[this.t++] = x;
    else if(sh+k > this.DB) {
      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
      this[this.t++] = (x>>(this.DB-sh));
    }
    else
      this[this.t-1] |= x<<sh;
    sh += k;
    if(sh >= this.DB) sh -= this.DB;
  }
  if(k == 8 && (s[0]&0x80) != 0) {
    this.s = -1;
    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
  }
  this.clamp();
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s&this.DM;
  while(this.t > 0 && this[this.t-1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
  if(this.s < 0) return "-"+this.negate().toString(b);
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else return this.toRadix(b);
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
  var p = this.DB-(i*this.DB)%k;
  if(i-- > 0) {
    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
    while(i >= 0) {
      if(p < k) {
        d = (this[i]&((1<<p)-1))<<(k-p);
        d |= this[--i]>>(p+=this.DB-k);
      }
      else {
        d = (this[i]>>(p-=k))&km;
        if(p <= 0) { p += this.DB; --i; }
      }
      if(d > 0) m = true;
      if(m) r += int2char(d);
    }
  }
  return m?r:"0";
}

// (public) -this
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

// (public) |this|
function bnAbs() { return (this.s<0)?this.negate():this; }

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s-a.s;
  if(r != 0) return r;
  var i = this.t;
  r = i-a.t;
  if(r != 0) return (this.s<0)?-r:r;
  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
  return 0;
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1, t;
  if((t=x>>>16) != 0) { x = t; r += 16; }
  if((t=x>>8) != 0) { x = t; r += 8; }
  if((t=x>>4) != 0) { x = t; r += 4; }
  if((t=x>>2) != 0) { x = t; r += 2; }
  if((t=x>>1) != 0) { x = t; r += 1; }
  return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if(this.t <= 0) return 0;
  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n,r) {
  var i;
  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
  for(i = n-1; i >= 0; --i) r[i] = 0;
  r.t = this.t+n;
  r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n,r) {
  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
  r.t = Math.max(this.t-n,0);
  r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n,r) {
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<cbs)-1;
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
  for(i = this.t-1; i >= 0; --i) {
    r[i+ds+1] = (this[i]>>cbs)|c;
    c = (this[i]&bm)<<bs;
  }
  for(i = ds-1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t+ds+1;
  r.s = this.s;
  r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n,r) {
  r.s = this.s;
  var ds = Math.floor(n/this.DB);
  if(ds >= this.t) { r.t = 0; return; }
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<bs)-1;
  r[0] = this[ds]>>bs;
  for(var i = ds+1; i < this.t; ++i) {
    r[i-ds-1] |= (this[i]&bm)<<cbs;
    r[i-ds] = this[i]>>bs;
  }
  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
  r.t = this.t-ds;
  r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]-a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c -= a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c -= a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = (c<0)?-1:0;
  if(c < -1) r[i++] = this.DV+c;
  else if(c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a,r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i+y.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
  r.s = 0;
  r.clamp();
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2*x.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < x.t-1; ++i) {
    var c = x.am(i,x[i],r,2*i,0,1);
    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
      r[i+x.t] -= x.DV;
      r[i+x.t+1] = 1;
    }
  }
  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
  r.s = 0;
  r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m,q,r) {
  var pm = m.abs();
  if(pm.t <= 0) return;
  var pt = this.abs();
  if(pt.t < pm.t) {
    if(q != null) q.fromInt(0);
    if(r != null) this.copyTo(r);
    return;
  }
  if(r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
  else { pm.copyTo(y); pt.copyTo(r); }
  var ys = y.t;
  var y0 = y[ys-1];
  if(y0 == 0) return;
  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
  y.dlShiftTo(j,t);
  if(r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t,r);
  }
  BigInteger.ONE.dlShiftTo(ys,t);
  t.subTo(y,y);	// "negative" y so we can replace sub with am later
  while(y.t < ys) y[y.t++] = 0;
  while(--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
      y.dlShiftTo(j,t);
      r.subTo(t,r);
      while(r[i] < --qd) r.subTo(t,r);
    }
  }
  if(q != null) {
    r.drShiftTo(ys,q);
    if(ts != ms) BigInteger.ZERO.subTo(q,q);
  }
  r.t = ys;
  r.clamp();
  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
  if(ts < 0) BigInteger.ZERO.subTo(r,r);
}

// (public) this mod a
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a,null,r);
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
  return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) { this.m = m; }
function cConvert(x) {
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
  else return x;
}
function cRevert(x) { return x; }
function cReduce(x) { x.divRemTo(this.m,null,x); }
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if(this.t < 1) return 0;
  var x = this[0];
  if((x&1) == 0) return 0;
  var y = x&3;		// y == 1/x mod 2^2
  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y>0)?this.DV-y:-y;
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp&0x7fff;
  this.mph = this.mp>>15;
  this.um = (1<<(m.DB-15))-1;
  this.mt2 = 2*m.t;
}

// xR mod m
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t,r);
  r.divRemTo(this.m,null,r);
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
  return r;
}

// x/R mod m
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while(x.t <= this.mt2)	// pad x so am has enough room later
    x[x.t++] = 0;
  for(var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i]&0x7fff;
    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
    // use am to combine the multiply-shift-add into one call
    j = i+this.m.t;
    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
    // propagate carry
    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
  }
  x.clamp();
  x.drShiftTo(this.m.t,x);
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = "xy/R mod m"; x,y != r
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e,z) {
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
  g.copyTo(r);
  while(--i >= 0) {
    z.sqrTo(r,r2);
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
    else { var t = r; r = r2; r2 = t; }
  }
  return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e,m) {
  var z;
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e,z);
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
// Copyright (c) 2005-2009  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Extended JavaScript BN functions, required for RSA private ops.

// Version 1.1: new BigInteger("0", 10) returns "proper" zero
// Version 1.2: square() API, isProbablePrime fix

// (public)
function bnClone() { var r = nbi(); this.copyTo(r); return r; }

// (public) return value as integer
function bnIntValue() {
  if(this.s < 0) {
    if(this.t == 1) return this[0]-this.DV;
    else if(this.t == 0) return -1;
  }
  else if(this.t == 1) return this[0];
  else if(this.t == 0) return 0;
  // assumes 16 < DB < 32
  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
}

// (public) return value as byte
function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

// (public) return value as short (assumes DB>=16)
function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

// (protected) return x s.t. r^x < DV
function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

// (public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
  if(this.s < 0) return -1;
  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
  else return 1;
}

// (protected) convert to radix string
function bnpToRadix(b) {
  if(b == null) b = 10;
  if(this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b,cs);
  var d = nbv(a), y = nbi(), z = nbi(), r = "";
  this.divRemTo(d,y,z);
  while(y.signum() > 0) {
    r = (a+z.intValue()).toString(b).substr(1) + r;
    y.divRemTo(d,y,z);
  }
  return z.intValue().toString(b) + r;
}

// (protected) convert from radix string
function bnpFromRadix(s,b) {
  this.fromInt(0);
  if(b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
  for(var i = 0; i < s.length; ++i) {
    var x = intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
      continue;
    }
    w = b*w+x;
    if(++j >= cs) {
      this.dMultiply(d);
      this.dAddOffset(w,0);
      j = 0;
      w = 0;
    }
  }
  if(j > 0) {
    this.dMultiply(Math.pow(b,j));
    this.dAddOffset(w,0);
  }
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) alternate constructor
function bnpFromNumber(a,b,c) {
  if("number" == typeof b) {
    // new BigInteger(int,int,RNG)
    if(a < 2) this.fromInt(1);
    else {
      this.fromNumber(a,c);
      if(!this.testBit(a-1))	// force MSB set
        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
      if(this.isEven()) this.dAddOffset(1,0); // force odd
      while(!this.isProbablePrime(b)) {
        this.dAddOffset(2,0);
        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
      }
    }
  }
  else {
    // new BigInteger(int,RNG)
    var x = new Array(), t = a&7;
    x.length = (a>>3)+1;
    b.nextBytes(x);
    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
    this.fromString(x,256);
  }
}

// (public) convert to bigendian byte array
function bnToByteArray() {
  var i = this.t, r = new Array();
  r[0] = this.s;
  var p = this.DB-(i*this.DB)%8, d, k = 0;
  if(i-- > 0) {
    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
      r[k++] = d|(this.s<<(this.DB-p));
    while(i >= 0) {
      if(p < 8) {
        d = (this[i]&((1<<p)-1))<<(8-p);
        d |= this[--i]>>(p+=this.DB-8);
      }
      else {
        d = (this[i]>>(p-=8))&0xff;
        if(p <= 0) { p += this.DB; --i; }
      }
      if((d&0x80) != 0) d |= -256;
      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
      if(k > 0 || d != this.s) r[k++] = d;
    }
  }
  return r;
}

function bnEquals(a) { return(this.compareTo(a)==0); }
function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

// (protected) r = this op a (bitwise)
function bnpBitwiseTo(a,op,r) {
  var i, f, m = Math.min(a.t,this.t);
  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
  if(a.t < this.t) {
    f = a.s&this.DM;
    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
    r.t = this.t;
  }
  else {
    f = this.s&this.DM;
    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
    r.t = a.t;
  }
  r.s = op(this.s,a.s);
  r.clamp();
}

// (public) this & a
function op_and(x,y) { return x&y; }
function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

// (public) this | a
function op_or(x,y) { return x|y; }
function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

// (public) this ^ a
function op_xor(x,y) { return x^y; }
function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

// (public) this & ~a
function op_andnot(x,y) { return x&~y; }
function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

// (public) ~this
function bnNot() {
  var r = nbi();
  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
  r.t = this.t;
  r.s = ~this.s;
  return r;
}

// (public) this << n
function bnShiftLeft(n) {
  var r = nbi();
  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
  return r;
}

// (public) this >> n
function bnShiftRight(n) {
  var r = nbi();
  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
  return r;
}

// return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
  if(x == 0) return -1;
  var r = 0;
  if((x&0xffff) == 0) { x >>= 16; r += 16; }
  if((x&0xff) == 0) { x >>= 8; r += 8; }
  if((x&0xf) == 0) { x >>= 4; r += 4; }
  if((x&3) == 0) { x >>= 2; r += 2; }
  if((x&1) == 0) ++r;
  return r;
}

// (public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
  for(var i = 0; i < this.t; ++i)
    if(this[i] != 0) return i*this.DB+lbit(this[i]);
  if(this.s < 0) return this.t*this.DB;
  return -1;
}

// return number of 1 bits in x
function cbit(x) {
  var r = 0;
  while(x != 0) { x &= x-1; ++r; }
  return r;
}

// (public) return number of set bits
function bnBitCount() {
  var r = 0, x = this.s&this.DM;
  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
  return r;
}

// (public) true iff nth bit is set
function bnTestBit(n) {
  var j = Math.floor(n/this.DB);
  if(j >= this.t) return(this.s!=0);
  return((this[j]&(1<<(n%this.DB)))!=0);
}

// (protected) this op (1<<n)
function bnpChangeBit(n,op) {
  var r = BigInteger.ONE.shiftLeft(n);
  this.bitwiseTo(r,op,r);
  return r;
}

// (public) this | (1<<n)
function bnSetBit(n) { return this.changeBit(n,op_or); }

// (public) this & ~(1<<n)
function bnClearBit(n) { return this.changeBit(n,op_andnot); }

// (public) this ^ (1<<n)
function bnFlipBit(n) { return this.changeBit(n,op_xor); }

// (protected) r = this + a
function bnpAddTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]+a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c += a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c += a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += a.s;
  }
  r.s = (c<0)?-1:0;
  if(c > 0) r[i++] = c;
  else if(c < -1) r[i++] = this.DV+c;
  r.t = i;
  r.clamp();
}

// (public) this + a
function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

// (public) this - a
function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

// (public) this * a
function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

// (public) this^2
function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

// (public) this / a
function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

// (public) this % a
function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

// (public) [this/a,this%a]
function bnDivideAndRemainder(a) {
  var q = nbi(), r = nbi();
  this.divRemTo(a,q,r);
  return new Array(q,r);
}

// (protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
  this[this.t] = this.am(0,n-1,this,0,0,this.t);
  ++this.t;
  this.clamp();
}

// (protected) this += n << w words, this >= 0
function bnpDAddOffset(n,w) {
  if(n == 0) return;
  while(this.t <= w) this[this.t++] = 0;
  this[w] += n;
  while(this[w] >= this.DV) {
    this[w] -= this.DV;
    if(++w >= this.t) this[this.t++] = 0;
    ++this[w];
  }
}

// A "null" reducer
function NullExp() {}
function nNop(x) { return x; }
function nMulTo(x,y,r) { x.multiplyTo(y,r); }
function nSqrTo(x,r) { x.squareTo(r); }

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;

// (public) this^e
function bnPow(e) { return this.exp(e,new NullExp()); }

// (protected) r = lower n words of "this * a", a.t <= n
// "this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a,n,r) {
  var i = Math.min(this.t+a.t,n);
  r.s = 0; // assumes a,this >= 0
  r.t = i;
  while(i > 0) r[--i] = 0;
  var j;
  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
  r.clamp();
}

// (protected) r = "this * a" without lower n words, n > 0
// "this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a,n,r) {
  --n;
  var i = r.t = this.t+a.t-n;
  r.s = 0; // assumes a,this >= 0
  while(--i >= 0) r[i] = 0;
  for(i = Math.max(n-this.t,0); i < a.t; ++i)
    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
  r.clamp();
  r.drShiftTo(1,r);
}

// Barrett modular reduction
function Barrett(m) {
  // setup Barrett
  this.r2 = nbi();
  this.q3 = nbi();
  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
  this.mu = this.r2.divide(m);
  this.m = m;
}

function barrettConvert(x) {
  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
  else if(x.compareTo(this.m) < 0) return x;
  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
}

function barrettRevert(x) { return x; }

// x = x mod m (HAC 14.42)
function barrettReduce(x) {
  x.drShiftTo(this.m.t-1,this.r2);
  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
  x.subTo(this.r2,x);
  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = x^2 mod m; x != r
function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = x*y mod m; x,y != r
function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;

// (public) this^e % m (HAC 14.85)
function bnModPow(e,m) {
  var i = e.bitLength(), k, r = nbv(1), z;
  if(i <= 0) return r;
  else if(i < 18) k = 1;
  else if(i < 48) k = 3;
  else if(i < 144) k = 4;
  else if(i < 768) k = 5;
  else k = 6;
  if(i < 8)
    z = new Classic(m);
  else if(m.isEven())
    z = new Barrett(m);
  else
    z = new Montgomery(m);

  // precomputation
  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
  g[1] = z.convert(this);
  if(k > 1) {
    var g2 = nbi();
    z.sqrTo(g[1],g2);
    while(n <= km) {
      g[n] = nbi();
      z.mulTo(g2,g[n-2],g[n]);
      n += 2;
    }
  }

  var j = e.t-1, w, is1 = true, r2 = nbi(), t;
  i = nbits(e[j])-1;
  while(j >= 0) {
    if(i >= k1) w = (e[j]>>(i-k1))&km;
    else {
      w = (e[j]&((1<<(i+1))-1))<<(k1-i);
      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
    }

    n = k;
    while((w&1) == 0) { w >>= 1; --n; }
    if((i -= n) < 0) { i += this.DB; --j; }
    if(is1) {	// ret == 1, don't bother squaring or multiplying it
      g[w].copyTo(r);
      is1 = false;
    }
    else {
      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
      z.mulTo(r2,g[w],r);
    }

    while(j >= 0 && (e[j]&(1<<i)) == 0) {
      z.sqrTo(r,r2); t = r; r = r2; r2 = t;
      if(--i < 0) { i = this.DB-1; --j; }
    }
  }
  return z.revert(r);
}

// (public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
  var x = (this.s<0)?this.negate():this.clone();
  var y = (a.s<0)?a.negate():a.clone();
  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
  var i = x.getLowestSetBit(), g = y.getLowestSetBit();
  if(g < 0) return x;
  if(i < g) g = i;
  if(g > 0) {
    x.rShiftTo(g,x);
    y.rShiftTo(g,y);
  }
  while(x.signum() > 0) {
    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
    if(x.compareTo(y) >= 0) {
      x.subTo(y,x);
      x.rShiftTo(1,x);
    }
    else {
      y.subTo(x,y);
      y.rShiftTo(1,y);
    }
  }
  if(g > 0) y.lShiftTo(g,y);
  return y;
}

// (protected) this % n, n < 2^26
function bnpModInt(n) {
  if(n <= 0) return 0;
  var d = this.DV%n, r = (this.s<0)?n-1:0;
  if(this.t > 0)
    if(d == 0) r = this[0]%n;
    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
  return r;
}

// (public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
  var ac = m.isEven();
  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
  var u = m.clone(), v = this.clone();
  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
  while(u.signum() != 0) {
    while(u.isEven()) {
      u.rShiftTo(1,u);
      if(ac) {
        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
        a.rShiftTo(1,a);
      }
      else if(!b.isEven()) b.subTo(m,b);
      b.rShiftTo(1,b);
    }
    while(v.isEven()) {
      v.rShiftTo(1,v);
      if(ac) {
        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
        c.rShiftTo(1,c);
      }
      else if(!d.isEven()) d.subTo(m,d);
      d.rShiftTo(1,d);
    }
    if(u.compareTo(v) >= 0) {
      u.subTo(v,u);
      if(ac) a.subTo(c,a);
      b.subTo(d,b);
    }
    else {
      v.subTo(u,v);
      if(ac) c.subTo(a,c);
      d.subTo(b,d);
    }
  }
  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
  if(d.compareTo(m) >= 0) return d.subtract(m);
  if(d.signum() < 0) d.addTo(m,d); else return d;
  if(d.signum() < 0) return d.add(m); else return d;
}

var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
var lplim = (1<<26)/lowprimes[lowprimes.length-1];

// (public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
  var i, x = this.abs();
  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
    for(i = 0; i < lowprimes.length; ++i)
      if(x[0] == lowprimes[i]) return true;
    return false;
  }
  if(x.isEven()) return false;
  i = 1;
  while(i < lowprimes.length) {
    var m = lowprimes[i], j = i+1;
    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
    m = x.modInt(m);
    while(i < j) if(m%lowprimes[i++] == 0) return false;
  }
  return x.millerRabin(t);
}

// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger.ONE);
  var k = n1.getLowestSetBit();
  if(k <= 0) return false;
  var r = n1.shiftRight(k);
  t = (t+1)>>1;
  if(t > lowprimes.length) t = lowprimes.length;
  var a = nbi();
  for(var i = 0; i < t; ++i) {
    //Pick bases at random, instead of starting at 2
    a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
    var y = a.modPow(r,this);
    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
      var j = 1;
      while(j++ < k && y.compareTo(n1) != 0) {
        y = y.modPowInt(2,this);
        if(y.compareTo(BigInteger.ONE) == 0) return false;
      }
      if(y.compareTo(n1) != 0) return false;
    }
  }
  return true;
}

// protected
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin;

// public
BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

// JSBN-specific extension
BigInteger.prototype.square = bnSquare;

// BigInteger interfaces not implemented in jsbn:

// BigInteger(int signum, byte[] magnitude)
// double doubleValue()
// float floatValue()
// int hashCode()
// long longValue()
// static BigInteger valueOf(long val)
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var contacts = (function() {
  function forEach(callback) {
    var sender = DumbPipe.open("contacts", {}, function(message) {
      if (message) {
        callback(message);
      } else {
        DumbPipe.close(sender);
      }
    });
  }

  function getAll(callback) {
    var contacts = [];
    var sender = DumbPipe.open("contacts", {}, function(contact) {
      if (!contact) {
        callback(contacts);
        DumbPipe.close(sender);
        return;
      }

      contacts.push(contact);
    });
  }

  var requestHandler = null;
  function getNext(callback) {
    if (requestHandler) {
      callback(requestHandler());
      return;
    }

    getAll(function(contacts) {
      var idx = -1;

      requestHandler = function() {
        idx++;

        if (idx < contacts.length) {
          return contacts[idx];
        }

        requestHandler = null;

        return null;
      }

      callback(requestHandler());
    });
  }

  return {
    forEach: forEach,
    getNext: getNext,
  };
})();
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

var DumbPipe = {
  recipients: {},
  nextPipeID: 0,

  open: function(type, message, recipient) {
    var pipeID = this.nextPipeID++;

    this.send({
      command: "open",
      type: type,
      pipeID: pipeID,
      message: message,
    });

    this.recipients[pipeID] = recipient;

    // Return a function that can be used to send a message to the other side.
    var sender = function(message) {
      var envelope = {
        command: "message",
        pipeID: pipeID,
        message: message,
      };
      //console.log("inner send: " + JSON.stringify(envelope));
      this.send(envelope);
    }.bind(this);

    sender.pipeID = pipeID;

    return sender;
  },

  close: function(sender) {
    delete this.recipients[sender.pipeID];

    this.send({
      command: "close",
      pipeID: sender.pipeID,
    });
  },

  sendQueue: [],
  isRunningSendQueue: false,

  send: function(envelope) {
    this.sendQueue.push(envelope);

    if (!this.isRunningSendQueue) {
      this.isRunningSendQueue = true;
      window.setZeroTimeout(this.runSendQueue.bind(this));
    }
  },

  runSendQueue: function() {
    alert(JSON.stringify(this.sendQueue.shift()));

    if (this.sendQueue.length > 0) {
      window.setZeroTimeout(this.runSendQueue.bind(this));
    } else {
      this.isRunningSendQueue = false;
    }
  },

  receiveMessage: function(event) {
    var envelope = event.data;

    if (typeof envelope !== "object" || !("pipeID" in envelope)) {
      return;
    }

    if (this.recipients[envelope.pipeID]) {
      try {
        this.recipients[envelope.pipeID](envelope.message);
      } catch(ex) {
        console.error(ex + "\n" + ex.stack);
      }
    } else {
      console.warn("nonexistent pipe " + envelope.pipeID + " received message " +
                   JSON.stringify(envelope.message));
    }
  },
};

window.addEventListener("message", DumbPipe.receiveMessage.bind(DumbPipe), false);

// If "mozbrowser" isn't enabled on the frame we're loaded in, then override
// the alert/prompt functions to funnel messages to the endpoint in the parent.
if (window.parent !== window) {
  alert = function(message) {
    window.parent.DumbPipe.handleEvent({
      detail: {
        promptType: "alert",
        message: message,
      }
    });
  };

  prompt = function(message) {
    var event = {
      detail: {
        promptType: "prompt",
        message: message,
        unblock: function() {},
      }
    };
    window.parent.DumbPipe.handleEvent(event);
    return event.detail.returnValue;
  };
}
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



/**
 * ContactToVcard provides the functionality necessary to export from
 * MozContacts to vCard 3.0 (https://www.ietf.org/rfc/rfc2426.txt). The reason
 * to choose the 3.0 standard instead of the 4.0 one is that some systems
 * most notoriously Android 4.x don't seem to be able to import vCard 4.0.
 */
var contact2vcard = (function() {
  /** Mapping between contact fields and equivalent vCard fields */
  var VCARD_MAP = {
    'fax' : 'FAX',
    'faxoffice' : 'FAX,WORK',
    'faxhome' : 'FAX,HOME',
    'faxother' : 'FAX',
    'home' : 'HOME',
    'mobile' : 'CELL',
    'pager' : 'PAGER',
    'personal' : 'HOME',
    'pref' : 'PREF',
    'text' : 'TEXT',
    'textphone' : 'TEXTPHONE',
    'voice' : 'VOICE',
    'work' : 'WORK'
  };

  var CRLF = '\r\n';

  /** Field list to be skipped when converting to vCard */
  var VCARD_SKIP_FIELD = ['fb_profile_photo'];
  var VCARD_VERSION = '3.0';
  var HEADER = 'BEGIN:VCARD' + CRLF + 'VERSION:' + VCARD_VERSION + CRLF;
  var FOOTER = 'END:VCARD' + CRLF;

  function blobToBase64(blob, cb) {
    var reader = new FileReader();

    reader.onload = function() {
      var dataUrl = reader.result;
      var base64 = dataUrl.split(',')[1];
      cb(base64);
    };

    reader.readAsDataURL(blob);
  }

  function ISODateString(d) {
    if (typeof d === 'string') {
      d = new Date(d);
    }

    var str = d.toISOString();

    // Remove the milliseconds field
    return str.slice(0, str.indexOf('.')) + 'Z';
  }

  /**
   * Given an array with contact fields (usually containing only one field),
   * returns the equivalent vcard field
   *
   * @param {Array} sourceField source field from a MozContact
   * @param {String} vcardField vCard field name
   * @return {Array} Array of vCard string entries
   */
  function fromContactField(sourceField, vcardField) {
    if (!sourceField || !sourceField.length) {
      return [];
    }

    // Goes to the entries in the given field (usually only one but potentially
    // more) and transforms them into string-based, vCard ones.
    return sourceField.map(function(field) {
      var str = vcardField;
      /**
       * If the field doesn't have an equivalent in vcard standard.
       * Incompatible fields are stored in `VCARD_SKIP_FIELD`.
       *
       * @type {boolean}
       */
      var skipField = false;
      var types = [];

      // Checks existing types and converts them to vcard types if necessary
      // and fill `types` array with the final types.
      if (Array.isArray(field.type)) {
        var fieldType = field.type.map(function(aType) {
          var out = '';
          if (aType) {
            aType = aType.trim().toLowerCase();
            if (VCARD_SKIP_FIELD.indexOf(aType) !== -1) {
              skipField = true;
            }
            out = VCARD_MAP[aType] || aType;
          }
          return out;
        });

        types = types.concat(fieldType);
      }

      if (skipField) {
        return;
      }

      if (field.pref && field.pref === true) {
        types.push('PREF');
      }

      if (types.length) {
        str += ';TYPE=' + types.join(',');
      }

      return str + ':' + (field.value || '');
    });
  }

  function fromStringArray(sourceField, vcardField) {
    if (!sourceField) {
      return '';
    }

    return vcardField + ':' + sourceField.join(',');
  }

  function joinFields(fields) {
    return fields.filter(function(f) { return !!f; }).join(CRLF);
  }

  function toBlob(vcard) {
    return new Blob([vcard], {'type': 'text/vcard'});
  }

  /**
   * Convenience function that converts an array of contacts into a text/vcard
   * blob. The blob is passed to the callback once the conversion is done.
   *
   * @param {Array} contacts An array of mozContact objects.
   * @param {Function} callback A function invoked with the generated blob.
   */
  function ContactToVcardBlob(contacts, callback) {
    if (typeof callback !== 'function') {
      throw Error('callback() is undefined or not a function');
    }

    var str = '';

    ContactToVcard(contacts, function append(vcards, nCards) {
      str += vcards;
    }, function success() {
      callback(str ? toBlob(str) : null);
    });
  }

  /**
   * Converts an array of contacts to a string of vCards. The conversion is
   * done in batches. For every batch the append callback is invoked with a
   * string of vCards and the number of contacts in the batch. Once all
   * contacts have been processed the success callback is invoked.
   *
   * @param {Array} contacts An array of mozContact objects.
   * @param {Function} append A function taking two parameters, the first one
   *        will be passed a string of vCards and the second an integer
   *        representing the number of contacts in the string.
   * @param {Function} success A function with no parameters that will be
   *        invoked once all the contacts have been processed.
   * @param {Number} batchSize An optional parameter specifying the maximum
   *        number of characters that should be added to the output string
   *        before invoking the append callback. If this parameter is not
   *        provided a default value of 1MiB will be used instead.
   */
  function ContactToVcard(contacts, append, success, batchSize, skipPhoto) {
    var vCardsString = '';
    var nextIndex = 0;
    var cardsInBatch = 0;

    batchSize = batchSize || (1024 * 1024);

    if (typeof append !== 'function') {
      throw Error('append() is undefined or not a function');
    }

    if (typeof success !== 'function') {
      throw Error('append() is undefined or not a function');
    }

    /**
     * Append the vCard obtained by converting the contact to the string of
     * vCards and if necessary pass the string to the user-specified callback
     * function. If we're not done processing all the contacts start processing
     * the following one.
     *
     * @param {String} vcard The string obtained from the previously processed
     *        contact.
     */
    function appendVCard(vcard) {
      if (vcard.length > 0) {
        vCardsString += HEADER + vcard + CRLF + FOOTER;
      }

      nextIndex++;
      cardsInBatch++;

      /* Invoke the user-provided callback if we've filled the current batch or
       * if we don't have more contacts to process. */
      if ((vCardsString.length > batchSize) ||
          (nextIndex === contacts.length)) {
        append(vCardsString, cardsInBatch);
        cardsInBatch = 0;
        vCardsString = '';
      }

      if (nextIndex < contacts.length) {
        processContact(contacts[nextIndex]);
      } else {
        success();
      }
    }

    /**
     * Process a contact and invokes appendVCard with the resulting vCard
     * string.
     *
     * @param {Object} contacts A mozContact object.
     */
    function processContact(ct) {
      if (navigator.mozContact && !(ct instanceof navigator.mozContact)) {
        console.error('An instance of mozContact was expected');
        setZeroTimeout(function() { appendVCard(''); });
        return;
      }

      /*
       * N TYPE
       * The structured type value corresponds, in
       * sequence, to the Family Name, Given Name, Additional Names, Honorific
       * Prefixes, and Honorific Suffixes. The text components are separated
       * by the SEMI-COLON character (ASCII decimal 59). Individual text
       * components can include multiple text values (e.g., multiple
       * Additional Names) separated by the COMMA character (ASCII decimal
       * 44). This type is based on the semantics of the X.520 individual name
       * attributes. The property MUST be present in the vCard object.
       **/
      var n = 'n:' + ([
        ct.familyName,
        ct.givenName,
        ct.additionalName,
        ct.honorificPrefix,
        ct.honorificSuffix
      ].map(function(f) {
        f = f || [''];
        return f.join(',') + ';';
      }).join(''));

      // vCard standard does not accept contacts without 'n' or 'fn' fields.
      if (n === 'n:;;;;;' || !ct.name) {
        setZeroTimeout(function() { appendVCard(''); });
        return;
      }

      var allFields = [
        n,
        fromStringArray(ct.name, 'FN'),
        fromStringArray(ct.nickname, 'NICKNAME'),
        fromStringArray(ct.category, 'CATEGORY'),
        fromStringArray(ct.org, 'ORG'),
        fromStringArray(ct.jobTitle, 'TITLE'),
        fromStringArray(ct.note, 'NOTE'),
        fromStringArray(ct.key, 'KEY')
      ];

      if (ct.bday) {
        allFields.push('BDAY:' + ISODateString(ct.bday));
      }
      if (ct.anniversary) {
        allFields.push('ANNIVERSARY:' + ISODateString(ct.anniversary));
      }

      allFields.push('UID:' + ct.id.toString().substr(0,30));

      allFields.push.apply(allFields, fromContactField(ct.email, 'EMAIL'));
      allFields.push.apply(allFields, fromContactField(ct.url, 'URL'));
      allFields.push.apply(allFields, fromContactField(ct.tel, 'TEL'));

      var adrs = fromContactField(ct.adr, 'ADR');
      allFields.push.apply(allFields, adrs.map(function(adrStr, i) {
        var orig = ct.adr[i];
        return adrStr + ([
          '',
          '',
          orig.streetAddress || '', orig.locality || '', orig.region || '',
          orig.postalCode || '', orig.countryName || ''].join(';'));
      }));

      /**
       * PHOTO TYPE
       * The encoding MUST be reset to "b" using the ENCODING
       * parameter in order to specify inline, encoded binary data. If the
       * value is referenced by a URI value, then the default encoding of 8bit
       * is used and no explicit ENCODING parameter is needed.

       * Type value: A single value. The default is binary value. It can also
       * be reset to uri value. The uri value can be used to specify a value
       * outside of this MIME entity.

       * Type special notes: The type can include the type parameter "TYPE" to
       * specify the graphic image format type. The TYPE parameter values MUST
       * be one of the IANA registered image formats or a non-standard image
       * format.
      */
      if ((typeof skipPhoto == 'undefined' || skipPhoto === false) &&
          ct.photo && ct.photo.length) {
        var photoMeta = ['PHOTO', 'ENCODING=b'];
        var blob = ct.photo[0];

        blobToBase64(blob, function(b64) {
          if (blob.type) {
            photoMeta.push('TYPE=' + blob.type);
          }
          allFields.push(photoMeta.join(';') + ':' + b64);
          appendVCard(joinFields(allFields));
        });
      } else {
        setZeroTimeout(function() { appendVCard(joinFields(allFields)); });
      }
    }

    processContact(contacts[0]);
  }

  return {
    ContactToVcard: ContactToVcard,
    ContactToVcardBlob: ContactToVcardBlob,
  };
})();
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var emoji = (function() {
  // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt
  // http://developer.nokia.com/resources/library/Java/developers-guides/data-handling/emoji.html
  var regexString = [
    '\ud83c[\udf00-\udfff]', // U+1F300 to U+1F3FF
    '\ud83d[\udc00-\ude4f]', // U+1F400 to U+1F64F
    '\ud83d[\ude80-\udeff]', // U+1F680 to U+1F6FF
    '[\u0023|\u0030-\u0039]\u20e3', // U+2320E3 to U+3920E3
    '\ud83c\uddef\ud83c\uddf5', // U+1F1EF U+1F1F5 (JP)
    '\ud83c\uddf0\ud83c\uddf7', // U+1F1F0 U+1F1F7 (KR)
    '\ud83c\udde9\ud83c\uddea', // U+1F1E9 U+1F1EA (DE)
    '\ud83c\udde8\ud83c\uddf3', // U+1F1E8 U+1F1F3 (CN)
    '\ud83c\uddfa\ud83c\uddf8', // U+1F1FA U+1F1F8 (US)
    '\ud83c\uddeb\ud83c\uddf7', // U+1F1EB U+1F1F7 (FR)
    '\ud83c\uddea\ud83c\uddf8', // U+1F1EA U+1F1F8 (ES)
    '\ud83c\uddee\ud83c\uddf9', // U+1F1EE U+1F1F9 (IT)
    '\ud83c\uddf7\ud83c\uddfa', // U+1F1F7 U+1F1FA (RU)
    '\ud83c\uddec\ud83c\udde7', // U+1F1EC U+1F1E7 (GB)
    '\ud83c\uddee\ud83c\uddf3', // U+1F1EE U+1F1F3 (IN)
    '\ud83c\uddf2\ud83c\uddfd', // U+1F1F2 U+1F1FD (MX)
    '\ud83c\udde7\ud83c\uddf7', // U+1F1E7 U+1F1F7 (BR)
    '\ud83c\uddf8\ud83c\udde6', // U+1F1F8 U+1F1E6 (SA)
    '\ud83c\uddff\ud83c\udde6', // U+1F1FF U+1F1E6 (ZA)
    '\ud83c\udde6\ud83c\uddf7', // U+1F1E6 U+1F1F7 (AR)
    '\ud83c\uddf3\ud83c\uddf1', // U+1F1F3 U+1F1F1 (NL)
    '\ud83c\uddf9\ud83c\uddf7', // U+1F1F9 U+1F1F7 (TR)
    '\ud83c\uddf2\ud83c\uddfe', // U+1F1F2 U+1F1FE (MY)
    '\ud83c\uddfb\ud83c\uddea', // U+1F1FB U+1F1EA (VE)
    '\ud83c\udde8\ud83c\uddf4', // U+1F1E8 U+1F1F4 (CO)
    '\ud83c\udde8\ud83c\uddf1', // U+1F1E8 U+1F1F1 (CL)
    '\ud83c\udded\ud83c\uddf0', // U+1F1ED U+1F1F0 (HK)
    '\ud83c\uddf3\ud83c\uddec', // U+1F1F3 U+1F1EC (NG)
    '\ud83c\udde8\ud83c\udded', // U+1F1E8 U+1F1ED (CH)
    '\ud83c\uddee\ud83c\uddf1', // U+1F1EE U+1F1F1 (IL)
    '\ud83c\uddf9\ud83c\udded', // U+1F1F9 U+1F1ED (TH)
    '\ud83c\uddf8\ud83c\uddec', // U+1F1F8 U+1F1EC (SG)
    '\ud83c\udde6\ud83c\uddea', // U+1F1E6 U+1F1EA (AE)
    '\ud83c\uddf9\ud83c\uddfc', // U+1F1F9 U+1F1FC (TW)
    '\ud83c\uddea\ud83c\uddec', // U+1F1EA U+1F1EC (EG)
    '\ud83c\udde8\ud83c\udde6', // U+1F1E8 U+1F1E6 (CA)
    '\ud83c\uddf2\ud83c\udde8', // U+1F1F2 U+1F1E8 (MC)
    '\ud83c\udde6\ud83c\uddf9', // U+1F1E6 U+1F1F9 (AT)
    '\ud83c\udde6\ud83c\uddfa', // U+1F1E6 U+1F1FA (AU)
    '\ud83c\udde7\ud83c\udde6', // U+1F1E7 U+1F1E6 (BA)
    '\ud83c\udde7\ud83c\uddea', // U+1F1E7 U+1F1EA (BE)
    '\ud83c\udde8\ud83c\uddee', // U+1F1E8 U+1F1EE (CI)
    '\ud83c\udde8\ud83c\uddf2', // U+1F1E8 U+1F1F2 (CM)
    '\ud83c\udde8\ud83c\uddf7', // U+1F1E8 U+1F1F7 (CR)
    '\ud83c\udde9\ud83c\uddff', // U+1F1E9 U+1F1FF (DZ)
    '\ud83c\uddea\ud83c\udde8', // U+1F1EA U+1F1E8 (EC)
    '\ud83c\uddec\ud83c\udded', // U+1F1EC U+1F1ED (GH)
    '\ud83c\uddec\ud83c\uddf7', // U+1F1EC U+1F1F7 (GR)
    '\ud83c\udded\ud83c\uddf3', // U+1F1ED U+1F1F3 (HN)
    '\ud83c\udded\ud83c\uddf7', // U+1F1ED U+1F1F7 (HR)
    '\ud83c\uddee\ud83c\uddf7', // U+1F1EE U+1F1F7 (IR)
    '\ud83c\uddef\ud83c\uddf4', // U+1F1EF U+1F1F4 (JO)
    '\ud83c\uddf0\ud83c\uddff', // U+1F1F0 U+1F1FF (KZ)
    '\ud83c\uddf1\ud83c\udde7', // U+1F1F1 U+1F1E7 (LB)
    '\ud83c\uddf5\ud83c\uddea', // U+1F1F5 U+1F1EA (PE)
    '\ud83c\uddf5\ud83c\uddf9', // U+1F1F5 U+1F1F9 (PT)
    '\ud83c\uddf8\ud83c\uddfe', // U+1F1F8 U+1F1FE (SY)
    '\ud83c\uddfa\ud83c\udde6', // U+1F1FA U+1F1E6 (UA)
    '\ud83c\uddfa\ud83c\uddfe', // U+1F1FA U+1F1FE (UY)
    '\ud83c\uddfd\ud83c\uddea', // U+1F1FD U+1F1EA (XE)
    '\u00a9',
    '\u00ae',
    '\u2122',
    '\u2139',
    '\u2194',
    '\u2195',
    '\u2196',
    '\u2197',
    '\u2198',
    '\u2199',
    '\u21A9',
    '\u21AA',
    '\u231A',
    '\u231B',
    '\u23E9',
    '\u23EA',
    '\u23EB',
    '\u23EC',
    '\u23F0',
    '\u23F3',
    '\u24C2',
    '\u25AA',
    '\u25AB',
    '\u25B6',
    '\u25C0',
    '\u25FB',
    '\u25FC',
    '\u25FD',
    '\u25FE',
    '\u2600',
    '\u2601',
    '\u260E',
    '\u2611',
    '\u2614',
    '\u2615',
    '\u261D',
    '\u2648',
    '\u2649',
    '\u264A',
    '\u264B',
    '\u264C',
    '\u264D',
    '\u264E',
    '\u264F',
    '\u2650',
    '\u2651',
    '\u2652',
    '\u2653',
    '\u2660',
    '\u2663',
    '\u2665',
    '\u2666',
    '\u2668',
    '\u267B',
    '\u267F',
    '\u2693',
    '\u26A0',
    '\u26A1',
    '\u26AA',
    '\u26AB',
    '\u26BD',
    '\u26BE',
    '\u26C4',
    '\u26C5',
    '\u26CE',
    '\u26D4',
    '\u26EA',
    '\u26FA',
    '\u26F2',
    '\u26F3',
    '\u26F5',
    '\u26FD',
    '\u2702',
    '\u2705',
    '\u2708',
    '\u2709',
    '\u270A',
    '\u270B',
    '\u270C',
    '\u270F',
    '\u2712',
    '\u2714',
    '\u2716',
    '\u2728',
    '\u2733',
    '\u2734',
    '\u2744',
    '\u2747',
    '\u274C',
    '\u274E',
    '\u2753',
    '\u2754',
    '\u2755',
    '\u2757',
    '\u2764',
    '\u2795',
    '\u2796',
    '\u2797',
    '\u27A1',
    '\u27B0',
    '\u27BF',
    '\u2934',
    '\u2935',
    '\u2B05',
    '\u2B06',
    '\u2B07',
    '\u2B1B',
    '\u2B1C',
    '\u2B50',
    '\u2B55',
    '\u3030',
    '\u303D',
    '\u3297',
    '\u3299',
    '\ud83c\udd70', // U+1F170
    '\ud83c\udd71', // U+1F171
    '\ud83c\udd7E', // U+1F17E
    '\ud83c\udd7F', // U+1F17F
    '\ud83c\udd8E', // U+1F18E
    '\ud83c\udd91', // U+1F191
    '\ud83c\udd92', // U+1F192
    '\ud83c\udd93', // U+1F193
    '\ud83c\udd94', // U+1F194
    '\ud83c\udd95', // U+1F195
    '\ud83c\udd96', // U+1F196
    '\ud83c\udd97', // U+1F197
    '\ud83c\udd98', // U+1F198
    '\ud83c\udd99', // U+1F199
    '\ud83c\udd9A', // U+1F19A
    '\ud83c\udE01', // U+1F201
    '\ud83c\udE02', // U+1F202
    '\ud83c\udE1A', // U+1F21A
    '\ud83c\udE2F', // U+1F22F
    '\ud83c\udE32', // U+1F232
    '\ud83c\udE33', // U+1F233
    '\ud83c\udE34', // U+1F234
    '\ud83c\udE35', // U+1F235
    '\ud83c\udE36', // U+1F236
    '\ud83c\udE37', // U+1F237
    '\ud83c\udE38', // U+1F238
    '\ud83c\udE39', // U+1F239
    '\ud83c\udE3A', // U+1F23A
    '\ud83c\udE50', // U+1F250
    '\ud83c\udE51', // U+1F251
  ].join("|");

  var data = {
    "1f466": { "sheet": 0, "x": 0 },
    "1f467": { "sheet": 0, "x": 1 },
    "1f48b": { "sheet": 0, "x": 2 },
    "1f468": { "sheet": 0, "x": 3 },
    "1f469": { "sheet": 0, "x": 4 },
    "1f455": { "sheet": 0, "x": 5 },
    "1f45f": { "sheet": 0, "x": 6 },
    "1f4f7": { "sheet": 0, "x": 7 },
    "260e": { "sheet": 0, "x": 8 },
    "1f4f1": { "sheet": 0, "x": 9 },
    "1f4e0": { "sheet": 0, "x": 10 },
    "1f4bb": { "sheet": 0, "x": 11 },
    "1f44a": { "sheet": 0, "x": 12 },
    "1f44d": { "sheet": 0, "x": 13 },
    "261d": { "sheet": 0, "x": 14 },
    "270a": { "sheet": 0, "x": 15 },
    "270c": { "sheet": 0, "x": 16 },
    "270b": { "sheet": 0, "x": 17 },
    "1f3bf": { "sheet": 0, "x": 18 },
    "26f3": { "sheet": 0, "x": 19 },
    "1f3be": { "sheet": 0, "x": 20 },
    "26be": { "sheet": 0, "x": 21 },
    "1f3c4": { "sheet": 0, "x": 22 },
    "26bd": { "sheet": 0, "x": 23 },
    "1f41f": { "sheet": 0, "x": 24 },
    "1f434": { "sheet": 0, "x": 25 },
    "1f697": { "sheet": 0, "x": 26 },
    "26f5": { "sheet": 0, "x": 27 },
    "2708": { "sheet": 0, "x": 28 },
    "1f683": { "sheet": 0, "x": 29 },
    "1f685": { "sheet": 0, "x": 30 },
    "2753": { "sheet": 0, "x": 31 },
    "2757": { "sheet": 0, "x": 32 },
    "2764": { "sheet": 0, "x": 33 },
    "1f494": { "sheet": 0, "x": 34 },
    "1f550": { "sheet": 0, "x": 35 },
    "1f551": { "sheet": 0, "x": 36 },
    "1f552": { "sheet": 0, "x": 37 },
    "1f553": { "sheet": 0, "x": 38 },
    "1f554": { "sheet": 0, "x": 39 },
    "1f555": { "sheet": 0, "x": 40 },
    "1f556": { "sheet": 0, "x": 41 },
    "1f557": { "sheet": 0, "x": 42 },
    "1f558": { "sheet": 0, "x": 43 },
    "1f559": { "sheet": 0, "x": 44 },
    "1f55a": { "sheet": 0, "x": 45 },
    "1f55b": { "sheet": 0, "x": 46 },
    "1f338": { "sheet": 0, "x": 47 },
    "1f531": { "sheet": 0, "x": 48 },
    "1f339": { "sheet": 0, "x": 49 },
    "1f384": { "sheet": 0, "x": 50 },
    "1f48d": { "sheet": 0, "x": 51 },
    "1f48e": { "sheet": 0, "x": 52 },
    "1f3e0": { "sheet": 0, "x": 53 },
    "26ea": { "sheet": 0, "x": 54 },
    "1f3e2": { "sheet": 0, "x": 55 },
    "1f689": { "sheet": 0, "x": 56 },
    "26fd": { "sheet": 0, "x": 57 },
    "1f5fb": { "sheet": 0, "x": 58 },
    "1f3a4": { "sheet": 0, "x": 59 },
    "1f3a5": { "sheet": 0, "x": 60 },
    "1f3b5": { "sheet": 0, "x": 61 },
    "1f511": { "sheet": 0, "x": 62 },
    "1f3b7": { "sheet": 0, "x": 63 },
    "1f3b8": { "sheet": 0, "x": 64 },
    "1f3ba": { "sheet": 0, "x": 65 },
    "1f374": { "sheet": 0, "x": 66 },
    "1f378": { "sheet": 0, "x": 67 },
    "2615": { "sheet": 0, "x": 68 },
    "1f370": { "sheet": 0, "x": 69 },
    "1f37a": { "sheet": 0, "x": 70 },
    "26c4": { "sheet": 0, "x": 71 },
    "2601": { "sheet": 0, "x": 72 },
    "2600": { "sheet": 0, "x": 73 },
    "2614": { "sheet": 0, "x": 74 },
    "1f319": { "sheet": 0, "x": 75 },
    "1f304": { "sheet": 0, "x": 76 },
    "1f47c": { "sheet": 0, "x": 77 },
    "1f431": { "sheet": 0, "x": 78 },
    "1f42f": { "sheet": 0, "x": 79 },
    "1f43b": { "sheet": 0, "x": 80 },
    "1f436": { "sheet": 0, "x": 81 },
    "1f42d": { "sheet": 0, "x": 82 },
    "1f433": { "sheet": 0, "x": 83 },
    "1f427": { "sheet": 0, "x": 84 },
    "1f60a": { "sheet": 0, "x": 85 },
    "1f603": { "sheet": 0, "x": 86 },
    "1f61e": { "sheet": 0, "x": 87 },
    "1f620": { "sheet": 0, "x": 88 },
    "1f4a9": { "sheet": 0, "x": 89 },

    "1f4ea": { "sheet": 1, "x": 0 },
    "1f4ee": { "sheet": 1, "x": 1 },
    "1f4e9": { "sheet": 1, "x": 2 },
    "1f4f2": { "sheet": 1, "x": 3 },
    "1f61c": { "sheet": 1, "x": 4 },
    "1f60d": { "sheet": 1, "x": 5 },
    "1f631": { "sheet": 1, "x": 6 },
    "1f613": { "sheet": 1, "x": 7 },
    "1f435": { "sheet": 1, "x": 8 },
    "1f419": { "sheet": 1, "x": 9 },
    "1f437": { "sheet": 1, "x": 10 },
    "1f47d": { "sheet": 1, "x": 11 },
    "1f680": { "sheet": 1, "x": 12 },
    "1f451": { "sheet": 1, "x": 13 },
    "1f4a1": { "sheet": 1, "x": 14 },
    "1f340": { "sheet": 1, "x": 15 },
    "1f48f": { "sheet": 1, "x": 16 },
    "1f381": { "sheet": 1, "x": 17 },
    "1f52b": { "sheet": 1, "x": 18 },
    "1f50d": { "sheet": 1, "x": 19 },
    "1f3c3": { "sheet": 1, "x": 20 },
    "1f528": { "sheet": 1, "x": 21 },
    "1f386": { "sheet": 1, "x": 22 },
    "1f341": { "sheet": 1, "x": 23 },
    "1f342": { "sheet": 1, "x": 24 },
    "1f47f": { "sheet": 1, "x": 25 },
    "1f47b": { "sheet": 1, "x": 26 },
    "1f480": { "sheet": 1, "x": 27 },
    "1f525": { "sheet": 1, "x": 28 },
    "1f4bc": { "sheet": 1, "x": 29 },
    "1f4ba": { "sheet": 1, "x": 30 },
    "1f354": { "sheet": 1, "x": 31 },
    "26f2": { "sheet": 1, "x": 32 },
    "26fa": { "sheet": 1, "x": 33 },
    "2668": { "sheet": 1, "x": 34 },
    "1f3a1": { "sheet": 1, "x": 35 },
    "1f3ab": { "sheet": 1, "x": 36 },
    "1f4bf": { "sheet": 1, "x": 37 },
    "1f4c0": { "sheet": 1, "x": 38 },
    "1f4fb": { "sheet": 1, "x": 39 },
    "1f4fc": { "sheet": 1, "x": 40 },
    "1f4fa": { "sheet": 1, "x": 41 },
    "1f47e": { "sheet": 1, "x": 42 },
    "303d": { "sheet": 1, "x": 43 },
    "1f004": { "sheet": 1, "x": 44 },
    "1f19a": { "sheet": 1, "x": 45 },
    "1f4b0": { "sheet": 1, "x": 46 },
    "1f3af": { "sheet": 1, "x": 47 },
    "1f3c6": { "sheet": 1, "x": 48 },
    "1f3c1": { "sheet": 1, "x": 49 },
    "1f3b0": { "sheet": 1, "x": 50 },
    "1f40e": { "sheet": 1, "x": 51 },
    "1f6a4": { "sheet": 1, "x": 52 },
    "1f6b2": { "sheet": 1, "x": 53 },
    "1f6a7": { "sheet": 1, "x": 54 },
    "1f6b9": { "sheet": 1, "x": 55 },
    "1f6ba": { "sheet": 1, "x": 56 },
    "1f6bc": { "sheet": 1, "x": 57 },
    "1f489": { "sheet": 1, "x": 58 },
    "1f4a4": { "sheet": 1, "x": 59 },
    "26a1": { "sheet": 1, "x": 60 },
    "1f460": { "sheet": 1, "x": 61 },
    "1f6c0": { "sheet": 1, "x": 62 },
    "1f6bd": { "sheet": 1, "x": 63 },
    "1f508": { "sheet": 1, "x": 64 },
    "1f4e2": { "sheet": 1, "x": 65 },
    "1f38c": { "sheet": 1, "x": 66 },
    "1f512": { "sheet": 1, "x": 67 },
    "1f513": { "sheet": 1, "x": 68 },
    "1f306": { "sheet": 1, "x": 69 },
    "1f373": { "sheet": 1, "x": 70 },
    "1f4d6": { "sheet": 1, "x": 71 },
    "1f4b1": { "sheet": 1, "x": 72 },
    "1f4b9": { "sheet": 1, "x": 73 },
    "1f4e1": { "sheet": 1, "x": 74 },
    "1f4aa": { "sheet": 1, "x": 75 },
    "1f3e6": { "sheet": 1, "x": 76 },
    "1f6a5": { "sheet": 1, "x": 77 },
    "1f17f": { "sheet": 1, "x": 78 },
    "1f68f": { "sheet": 1, "x": 79 },
    "1f6bb": { "sheet": 1, "x": 80 },
    "1f46e": { "sheet": 1, "x": 81 },
    "1f3e3": { "sheet": 1, "x": 82 },
    "1f3e7": { "sheet": 1, "x": 83 },
    "1f3e5": { "sheet": 1, "x": 84 },
    "1f3ea": { "sheet": 1, "x": 85 },
    "1f3eb": { "sheet": 1, "x": 86 },
    "1f3e8": { "sheet": 1, "x": 87 },
    "1f68c": { "sheet": 1, "x": 88 },
    "1f695": { "sheet": 1, "x": 89 },

    "1f6b6": { "sheet": 2, "x": 0 },
    "1f6a2": { "sheet": 2, "x": 1 },
    "1f201": { "sheet": 2, "x": 2 },
    "1f49f": { "sheet": 2, "x": 3 },
    "2734": { "sheet": 2, "x": 4 },
    "2733": { "sheet": 2, "x": 5 },
    "1f51e": { "sheet": 2, "x": 6 },
    "1f6ad": { "sheet": 2, "x": 7 },
    "1f530": { "sheet": 2, "x": 8 },
    "267f": { "sheet": 2, "x": 9 },
    "1f4f6": { "sheet": 2, "x": 10 },
    "2665": { "sheet": 2, "x": 11 },
    "2666": { "sheet": 2, "x": 12 },
    "2660": { "sheet": 2, "x": 13 },
    "2663": { "sheet": 2, "x": 14 },
    "0023-20e3": { "sheet": 2, "x": 15 },
    "27bf": { "sheet": 2, "x": 16 },
    "1f195": { "sheet": 2, "x": 17 },
    "1f199": { "sheet": 2, "x": 18 },
    "1f192": { "sheet": 2, "x": 19 },
    "1f236": { "sheet": 2, "x": 20 },
    "1f21a": { "sheet": 2, "x": 21 },
    "1f237": { "sheet": 2, "x": 22 },
    "1f238": { "sheet": 2, "x": 23 },
    "1f534": { "sheet": 2, "x": 24 },
    "1f532": { "sheet": 2, "x": 25 },
    "1f533": { "sheet": 2, "x": 26 },
    "0031-20e3": { "sheet": 2, "x": 27 },
    "0032-20e3": { "sheet": 2, "x": 28 },
    "0033-20e3": { "sheet": 2, "x": 29 },
    "0034-20e3": { "sheet": 2, "x": 30 },
    "0035-20e3": { "sheet": 2, "x": 31 },
    "0036-20e3": { "sheet": 2, "x": 32 },
    "0037-20e3": { "sheet": 2, "x": 33 },
    "0038-20e3": { "sheet": 2, "x": 34 },
    "0039-20e3": { "sheet": 2, "x": 35 },
    "0030-20e3": { "sheet": 2, "x": 36 },
    "1f250": { "sheet": 2, "x": 37 },
    "1f239": { "sheet": 2, "x": 38 },
    "1f202": { "sheet": 2, "x": 39 },
    "1f194": { "sheet": 2, "x": 40 },
    "1f235": { "sheet": 2, "x": 41 },
    "1f233": { "sheet": 2, "x": 42 },
    "1f22f": { "sheet": 2, "x": 43 },
    "1f23a": { "sheet": 2, "x": 44 },
    "1f446": { "sheet": 2, "x": 45 },
    "1f447": { "sheet": 2, "x": 46 },
    "1f448": { "sheet": 2, "x": 47 },
    "1f449": { "sheet": 2, "x": 48 },
    "2b06": { "sheet": 2, "x": 49 },
    "2b07": { "sheet": 2, "x": 50 },
    "27a1": { "sheet": 2, "x": 51 },
    "2b05": { "sheet": 2, "x": 52 },
    "2197": { "sheet": 2, "x": 53 },
    "2196": { "sheet": 2, "x": 54 },
    "2198": { "sheet": 2, "x": 55 },
    "2199": { "sheet": 2, "x": 56 },
    "25b6": { "sheet": 2, "x": 57 },
    "25c0": { "sheet": 2, "x": 58 },
    "23e9": { "sheet": 2, "x": 59 },
    "23ea": { "sheet": 2, "x": 60 },
    "1f52f": { "sheet": 2, "x": 61 },
    "2648": { "sheet": 2, "x": 62 },
    "2649": { "sheet": 2, "x": 63 },
    "264a": { "sheet": 2, "x": 64 },
    "264b": { "sheet": 2, "x": 65 },
    "264c": { "sheet": 2, "x": 66 },
    "264d": { "sheet": 2, "x": 67 },
    "264e": { "sheet": 2, "x": 68 },
    "264f": { "sheet": 2, "x": 69 },
    "2650": { "sheet": 2, "x": 70 },
    "2651": { "sheet": 2, "x": 71 },
    "2652": { "sheet": 2, "x": 72 },
    "2653": { "sheet": 2, "x": 73 },
    "26ce": { "sheet": 2, "x": 74 },
    "1f51d": { "sheet": 2, "x": 75 },
    "1f197": { "sheet": 2, "x": 76 },
    "00a9": { "sheet": 2, "x": 77 },
    "00ae": { "sheet": 2, "x": 78 },
    "1f4f3": { "sheet": 2, "x": 79 },
    "1f4f4": { "sheet": 2, "x": 80 },
    "26a0": { "sheet": 2, "x": 81 },
    "1f481": { "sheet": 2, "x": 82 },

    "1f4dd": { "sheet": 3, "x": 0 },
    "1f454": { "sheet": 3, "x": 1 },
    "1f33a": { "sheet": 3, "x": 2 },
    "1f337": { "sheet": 3, "x": 3 },
    "1f33b": { "sheet": 3, "x": 4 },
    "1f490": { "sheet": 3, "x": 5 },
    "1f334": { "sheet": 3, "x": 6 },
    "1f335": { "sheet": 3, "x": 7 },
    "1f6be": { "sheet": 3, "x": 8 },
    "1f3a7": { "sheet": 3, "x": 9 },
    "1f376": { "sheet": 3, "x": 10 },
    "1f37b": { "sheet": 3, "x": 11 },
    "3297": { "sheet": 3, "x": 12 },
    "1f6ac": { "sheet": 3, "x": 13 },
    "1f48a": { "sheet": 3, "x": 14 },
    "1f388": { "sheet": 3, "x": 15 },
    "1f4a3": { "sheet": 3, "x": 16 },
    "1f389": { "sheet": 3, "x": 17 },
    "2702": { "sheet": 3, "x": 18 },
    "1f380": { "sheet": 3, "x": 19 },
    "3299": { "sheet": 3, "x": 20 },
    "1f4bd": { "sheet": 3, "x": 21 },
    "1f4e3": { "sheet": 3, "x": 22 },
    "1f452": { "sheet": 3, "x": 23 },
    "1f457": { "sheet": 3, "x": 24 },
    "1f461": { "sheet": 3, "x": 25 },
    "1f462": { "sheet": 3, "x": 26 },
    "1f484": { "sheet": 3, "x": 27 },
    "1f485": { "sheet": 3, "x": 28 },
    "1f486": { "sheet": 3, "x": 29 },
    "1f487": { "sheet": 3, "x": 30 },
    "1f488": { "sheet": 3, "x": 31 },
    "1f458": { "sheet": 3, "x": 32 },
    "1f459": { "sheet": 3, "x": 33 },
    "1f45c": { "sheet": 3, "x": 34 },
    "1f3ac": { "sheet": 3, "x": 35 },
    "1f514": { "sheet": 3, "x": 36 },
    "1f3b6": { "sheet": 3, "x": 37 },
    "1f493": { "sheet": 3, "x": 38 },
    "1f497": { "sheet": 3, "x": 39 },
    "1f498": { "sheet": 3, "x": 40 },
    "1f499": { "sheet": 3, "x": 41 },
    "1f49a": { "sheet": 3, "x": 42 },
    "1f49b": { "sheet": 3, "x": 43 },
    "1f49c": { "sheet": 3, "x": 44 },
    "2728": { "sheet": 3, "x": 45 },
    "2b50": { "sheet": 3, "x": 46 },
    "1f4a8": { "sheet": 3, "x": 47 },
    "1f4a6": { "sheet": 3, "x": 48 },
    "2b55": { "sheet": 3, "x": 49 },
    "274c": { "sheet": 3, "x": 50 },
    "1f4a2": { "sheet": 3, "x": 51 },
    "1f31f": { "sheet": 3, "x": 52 },
    "2754": { "sheet": 3, "x": 53 },
    "2755": { "sheet": 3, "x": 54 },
    "1f375": { "sheet": 3, "x": 55 },
    "1f35e": { "sheet": 3, "x": 56 },
    "1f366": { "sheet": 3, "x": 57 },
    "1f35f": { "sheet": 3, "x": 58 },
    "1f361": { "sheet": 3, "x": 59 },
    "1f358": { "sheet": 3, "x": 60 },
    "1f35a": { "sheet": 3, "x": 61 },
    "1f35d": { "sheet": 3, "x": 62 },
    "1f35c": { "sheet": 3, "x": 63 },
    "1f35b": { "sheet": 3, "x": 64 },
    "1f359": { "sheet": 3, "x": 65 },
    "1f362": { "sheet": 3, "x": 66 },
    "1f363": { "sheet": 3, "x": 67 },
    "1f34e": { "sheet": 3, "x": 68 },
    "1f34a": { "sheet": 3, "x": 69 },
    "1f353": { "sheet": 3, "x": 70 },
    "1f349": { "sheet": 3, "x": 71 },
    "1f345": { "sheet": 3, "x": 72 },
    "1f346": { "sheet": 3, "x": 73 },
    "1f382": { "sheet": 3, "x": 74 },
    "1f371": { "sheet": 3, "x": 75 },
    "1f372": { "sheet": 3, "x": 76 },

    "1f652": { "sheet": 4, "x": 0 },
    "1f60f": { "sheet": 4, "x": 1 },
    "1f614": { "sheet": 4, "x": 2 },
    "1f601": { "sheet": 4, "x": 3 },
    "1f609": { "sheet": 4, "x": 4 },
    "1f623": { "sheet": 4, "x": 5 },
    "1f616": { "sheet": 4, "x": 6 },
    "1f62a": { "sheet": 4, "x": 7 },
    "1f61d": { "sheet": 4, "x": 8 },
    "1f60c": { "sheet": 4, "x": 9 },
    "1f628": { "sheet": 4, "x": 10 },
    "1f637": { "sheet": 4, "x": 11 },
    "1f633": { "sheet": 4, "x": 12 },
    "1f612": { "sheet": 4, "x": 13 },
    "1f630": { "sheet": 4, "x": 14 },
    "1f632": { "sheet": 4, "x": 15 },
    "1f62d": { "sheet": 4, "x": 16 },
    "1f602": { "sheet": 4, "x": 17 },
    "1f622": { "sheet": 4, "x": 18 },
    "263a": { "sheet": 4, "x": 19 },
    "1f604": { "sheet": 4, "x": 20 },
    "1f621": { "sheet": 4, "x": 21 },
    "1f61a": { "sheet": 4, "x": 22 },
    "1f618": { "sheet": 4, "x": 23 },
    "1f440": { "sheet": 4, "x": 24 },
    "1f443": { "sheet": 4, "x": 25 },
    "1f442": { "sheet": 4, "x": 26 },
    "1f444": { "sheet": 4, "x": 27 },
    "1f64f": { "sheet": 4, "x": 28 },
    "1f44b": { "sheet": 4, "x": 29 },
    "1f44f": { "sheet": 4, "x": 30 },
    "1f44c": { "sheet": 4, "x": 31 },
    "1f44e": { "sheet": 4, "x": 32 },
    "1f450": { "sheet": 4, "x": 33 },
    "1f645": { "sheet": 4, "x": 34 },
    "1f646": { "sheet": 4, "x": 35 },
    "1f491": { "sheet": 4, "x": 36 },
    "1f647": { "sheet": 4, "x": 37 },
    "1f64c": { "sheet": 4, "x": 38 },
    "1f46b": { "sheet": 4, "x": 39 },
    "1f46f": { "sheet": 4, "x": 40 },
    "1f3c0": { "sheet": 4, "x": 41 },
    "1f3c8": { "sheet": 4, "x": 42 },
    "1f3b1": { "sheet": 4, "x": 43 },
    "1f3ca": { "sheet": 4, "x": 44 },
    "1f699": { "sheet": 4, "x": 45 },
    "1f69a": { "sheet": 4, "x": 46 },
    "1f692": { "sheet": 4, "x": 47 },
    "1f691": { "sheet": 4, "x": 48 },
    "1f693": { "sheet": 4, "x": 49 },
    "1f3a2": { "sheet": 4, "x": 50 },
    "1f687": { "sheet": 4, "x": 51 },
    "1f684": { "sheet": 4, "x": 52 },
    "1f38d": { "sheet": 4, "x": 53 },
    "1f49d": { "sheet": 4, "x": 54 },
    "1f38e": { "sheet": 4, "x": 55 },
    "1f393": { "sheet": 4, "x": 56 },
    "1f392": { "sheet": 4, "x": 57 },
    "1f38f": { "sheet": 4, "x": 58 },
    "1f302": { "sheet": 4, "x": 59 },
    "1f492": { "sheet": 4, "x": 60 },
    "1f30a": { "sheet": 4, "x": 61 },
    "1f367": { "sheet": 4, "x": 62 },
    "1f387": { "sheet": 4, "x": 63 },
    "1f41a": { "sheet": 4, "x": 64 },
    "1f390": { "sheet": 4, "x": 65 },
    "1f300": { "sheet": 4, "x": 66 },
    "1f33e": { "sheet": 4, "x": 67 },
    "1f383": { "sheet": 4, "x": 68 },
    "1f391": { "sheet": 4, "x": 69 },
    "1f343": { "sheet": 4, "x": 70 },
    "1f385": { "sheet": 4, "x": 71 },
    "1f305": { "sheet": 4, "x": 72 },
    "1f307": { "sheet": 4, "x": 73 },
    "1f303": { "sheet": 4, "x": 74 },
    "1f308": { "sheet": 4, "x": 75 },

    "1f3e9": { "sheet": 5, "x": 0 },
    "1f3a8": { "sheet": 5, "x": 1 },
    "1f3a9": { "sheet": 5, "x": 2 },
    "1f3ec": { "sheet": 5, "x": 3 },
    "1f3ef": { "sheet": 5, "x": 4 },
    "1f3f0": { "sheet": 5, "x": 5 },
    "1f3a6": { "sheet": 5, "x": 6 },
    "1f3ed": { "sheet": 5, "x": 7 },
    "1f5fc": { "sheet": 5, "x": 8 },
    "UNKNOWN": { "sheet": 5, "x": 9 },
    "1f1ef-1f1f5": { "sheet": 5, "x": 10 },
    "1f1fa-1f1f8": { "sheet": 5, "x": 11 },
    "1f1eb-1f1f7": { "sheet": 5, "x": 12 },
    "1f1e9-1f1ea": { "sheet": 5, "x": 13 },
    "1f1ee-1f1f9": { "sheet": 5, "x": 14 },
    "1f1ec-1f1e7": { "sheet": 5, "x": 15 },
    "1f1ea-1f1f8": { "sheet": 5, "x": 16 },
    "1f1f7-1f1fa": { "sheet": 5, "x": 17 },
    "1f1e8-1f1f3": { "sheet": 5, "x": 18 },
    "1f1f0-1f1f7": { "sheet": 5, "x": 19 },
    "1f471": { "sheet": 5, "x": 20 },
    "1f472": { "sheet": 5, "x": 21 },
    "1f473": { "sheet": 5, "x": 22 },
    "1f474": { "sheet": 5, "x": 23 },
    "1f475": { "sheet": 5, "x": 24 },
    "1f476": { "sheet": 5, "x": 25 },
    "1f477": { "sheet": 5, "x": 26 },
    "1f478": { "sheet": 5, "x": 27 },
    "1f5fd": { "sheet": 5, "x": 28 },
    "1f482": { "sheet": 5, "x": 29 },
    "1f483": { "sheet": 5, "x": 30 },
    "1f42c": { "sheet": 5, "x": 31 },
    "1f426": { "sheet": 5, "x": 32 },
    "1f420": { "sheet": 5, "x": 33 },
    "1f424": { "sheet": 5, "x": 34 },
    "1f439": { "sheet": 5, "x": 35 },
    "1f41b": { "sheet": 5, "x": 36 },
    "1f418": { "sheet": 5, "x": 37 },
    "1f428": { "sheet": 5, "x": 38 },
    "1f412": { "sheet": 5, "x": 39 },
    "1f411": { "sheet": 5, "x": 40 },
    "1f43a": { "sheet": 5, "x": 41 },
    "1f42e": { "sheet": 5, "x": 42 },
    "1f430": { "sheet": 5, "x": 43 },
    "1f40d": { "sheet": 5, "x": 44 },
    "1f414": { "sheet": 5, "x": 45 },
    "1f417": { "sheet": 5, "x": 46 },
    "1f42b": { "sheet": 5, "x": 47 },
    "1f438": { "sheet": 5, "x": 48 },
    "1f170": { "sheet": 5, "x": 49 },
    "1f171": { "sheet": 5, "x": 50 },
    "1f18e": { "sheet": 5, "x": 51 },
    "1f17e": { "sheet": 5, "x": 52 },
    "1f463": { "sheet": 5, "x": 53 },
    "2122": { "sheet": 5, "x": 54 },

    "203c": { "sheet": 6, "x": 0 },
    "2049": { "sheet": 6, "x": 1 },
    "2139": { "sheet": 6, "x": 2 },
    "2194": { "sheet": 6, "x": 3 },
    "2195": { "sheet": 6, "x": 4 },
    "21a9": { "sheet": 6, "x": 5 },
    "21aa": { "sheet": 6, "x": 6 },
    "231a": { "sheet": 6, "x": 7 },
    "231b": { "sheet": 6, "x": 8 },
    "23eb": { "sheet": 6, "x": 9 },
    "23ec": { "sheet": 6, "x": 10 },
    "23f0": { "sheet": 6, "x": 11 },
    "23f3": { "sheet": 6, "x": 12 },
    "24c2": { "sheet": 6, "x": 13 },
    "25aa": { "sheet": 6, "x": 14 },
    "25ab": { "sheet": 6, "x": 15 },
    "2b1c": { "sheet": 6, "x": 16 },
    "2b1b": { "sheet": 6, "x": 17 },
    "25fd": { "sheet": 6, "x": 18 },
    "25fe": { "sheet": 6, "x": 19 },
    "2611": { "sheet": 6, "x": 20 },
    "267b": { "sheet": 6, "x": 21 },
    "2693": { "sheet": 6, "x": 22 },
    "26aa": { "sheet": 6, "x": 23 },
    "26ab": { "sheet": 6, "x": 24 },
    "26c5": { "sheet": 6, "x": 25 },
    "26d4": { "sheet": 6, "x": 26 },
    "2705": { "sheet": 6, "x": 27 },
    "2709": { "sheet": 6, "x": 28 },
    "270f": { "sheet": 6, "x": 29 },
    "2712": { "sheet": 6, "x": 30 },
    "2714": { "sheet": 6, "x": 31 },
    "2716": { "sheet": 6, "x": 32 },
    "2744": { "sheet": 6, "x": 33 },
    "2747": { "sheet": 6, "x": 34 },
    "274e": { "sheet": 6, "x": 35 },
    "2795": { "sheet": 6, "x": 36 },
    "2796": { "sheet": 6, "x": 37 },
    "2797": { "sheet": 6, "x": 38 },
    "27b0": { "sheet": 6, "x": 39 },
    "2934": { "sheet": 6, "x": 40 },
    "2935": { "sheet": 6, "x": 41 },
    "25fc": { "sheet": 6, "x": 42 },
    "25fb": { "sheet": 6, "x": 43 },
    "3030": { "sheet": 6, "x": 44 },
    "1f0cf": { "sheet": 6, "x": 45 },
    "1f191": { "sheet": 6, "x": 46 },
    "1f193": { "sheet": 6, "x": 47 },
    "1f196": { "sheet": 6, "x": 48 },
    "1f198": { "sheet": 6, "x": 49 },
    "1f232": { "sheet": 6, "x": 50 },
    "1f234": { "sheet": 6, "x": 51 },
    "1f251": { "sheet": 6, "x": 52 },
    "1f301": { "sheet": 6, "x": 53 },
    "1f309": { "sheet": 6, "x": 54 },
    "1f30b": { "sheet": 6, "x": 55 },
    "1f30c": { "sheet": 6, "x": 56 },
    "1f30d": { "sheet": 6, "x": 57 },
    "1f30e": { "sheet": 6, "x": 58 },
    "1f30f": { "sheet": 6, "x": 59 },
    "1f310": { "sheet": 6, "x": 60 },
    "1f311": { "sheet": 6, "x": 61 },
    "1f312": { "sheet": 6, "x": 62 },
    "1f313": { "sheet": 6, "x": 63 },
    "1f314": { "sheet": 6, "x": 64 },
    "1f315": { "sheet": 6, "x": 65 },
    "1f316": { "sheet": 6, "x": 66 },
    "1f317": { "sheet": 6, "x": 67 },
    "1f318": { "sheet": 6, "x": 68 },
    "1f31a": { "sheet": 6, "x": 69 },
    "1f31b": { "sheet": 6, "x": 70 },
    "1f31c": { "sheet": 6, "x": 71 },
    "1f31d": { "sheet": 6, "x": 72 },
    "1f31e": { "sheet": 6, "x": 73 },
    "1f320": { "sheet": 6, "x": 74 },
    "1f330": { "sheet": 6, "x": 75 },
    "1f331": { "sheet": 6, "x": 76 },
    "1f332": { "sheet": 6, "x": 77 },
    "1f333": { "sheet": 6, "x": 78 },

    "1f33c": { "sheet": 7, "x": 0 },
    "1f33d": { "sheet": 7, "x": 1 },
    "1f33f": { "sheet": 7, "x": 2 },
    "1f344": { "sheet": 7, "x": 3 },
    "1f347": { "sheet": 7, "x": 4 },
    "1f348": { "sheet": 7, "x": 5 },
    "1f34b": { "sheet": 7, "x": 6 },
    "1f34c": { "sheet": 7, "x": 7 },
    "1f34d": { "sheet": 7, "x": 8 },
    "1f34f": { "sheet": 7, "x": 9 },
    "1f350": { "sheet": 7, "x": 10 },
    "1f351": { "sheet": 7, "x": 11 },
    "1f352": { "sheet": 7, "x": 12 },
    "1f355": { "sheet": 7, "x": 13 },
    "1f356": { "sheet": 7, "x": 14 },
    "1f357": { "sheet": 7, "x": 15 },
    "1f360": { "sheet": 7, "x": 16 },
    "1f364": { "sheet": 7, "x": 17 },
    "1f365": { "sheet": 7, "x": 18 },
    "1f368": { "sheet": 7, "x": 19 },
    "1f369": { "sheet": 7, "x": 20 },
    "1f36a": { "sheet": 7, "x": 21 },
    "1f36b": { "sheet": 7, "x": 22 },
    "1f36c": { "sheet": 7, "x": 23 },
    "1f36d": { "sheet": 7, "x": 24 },
    "1f36e": { "sheet": 7, "x": 25 },
    "1f36f": { "sheet": 7, "x": 26 },
    "1f377": { "sheet": 7, "x": 27 },
    "1f379": { "sheet": 7, "x": 28 },
    "1f37c": { "sheet": 7, "x": 29 },
    "1f38a": { "sheet": 7, "x": 30 },
    "1f38b": { "sheet": 7, "x": 31 },
    "1f3a0": { "sheet": 7, "x": 32 },
    "1f3a3": { "sheet": 7, "x": 33 },
    "1f3aa": { "sheet": 7, "x": 34 },
    "1f3ad": { "sheet": 7, "x": 35 },
    "1f3ae": { "sheet": 7, "x": 36 },
    "1f3b2": { "sheet": 7, "x": 37 },
    "1f3b3": { "sheet": 7, "x": 38 },
    "1f3b4": { "sheet": 7, "x": 39 },
    "1f3b9": { "sheet": 7, "x": 40 },
    "1f3bb": { "sheet": 7, "x": 41 },
    "1f3bc": { "sheet": 7, "x": 42 },
    "1f3bd": { "sheet": 7, "x": 43 },
    "1f3c2": { "sheet": 7, "x": 44 },
    "1f3c7": { "sheet": 7, "x": 45 },
    "1f3c9": { "sheet": 7, "x": 46 },
    "1f3e1": { "sheet": 7, "x": 47 },
    "1f3e4": { "sheet": 7, "x": 48 },
    "1f3ee": { "sheet": 7, "x": 49 },
    "1f400": { "sheet": 7, "x": 50 },
    "1f401": { "sheet": 7, "x": 51 },
    "1f402": { "sheet": 7, "x": 52 },
    "1f403": { "sheet": 7, "x": 53 },
    "1f404": { "sheet": 7, "x": 54 },
    "1f405": { "sheet": 7, "x": 55 },
    "1f406": { "sheet": 7, "x": 56 },
    "1f407": { "sheet": 7, "x": 57 },
    "1f408": { "sheet": 7, "x": 58 },
    "1f409": { "sheet": 7, "x": 59 },
    "1f40a": { "sheet": 7, "x": 60 },
    "1f40b": { "sheet": 7, "x": 61 },
    "1f40c": { "sheet": 7, "x": 62 },
    "1f40f": { "sheet": 7, "x": 63 },
    "1f410": { "sheet": 7, "x": 64 },
    "1f413": { "sheet": 7, "x": 65 },
    "1f415": { "sheet": 7, "x": 66 },
    "1f416": { "sheet": 7, "x": 67 },
    "1f41c": { "sheet": 7, "x": 68 },
    "1f41d": { "sheet": 7, "x": 69 },
    "1f41e": { "sheet": 7, "x": 70 },
    "1f421": { "sheet": 7, "x": 71 },
    "1f422": { "sheet": 7, "x": 72 },
    "1f423": { "sheet": 7, "x": 73 },
    "1f425": { "sheet": 7, "x": 74 },
    "1f429": { "sheet": 7, "x": 75 },
    "1f42a": { "sheet": 7, "x": 76 },
    "1f432": { "sheet": 7, "x": 77 },
    "1f43c": { "sheet": 7, "x": 78 },

    "1f43d": { "sheet": 8, "x": 0 },
    "1f43e": { "sheet": 8, "x": 1 },
    "1f445": { "sheet": 8, "x": 2 },
    "1f453": { "sheet": 8, "x": 3 },
    "1f456": { "sheet": 8, "x": 4 },
    "1f45a": { "sheet": 8, "x": 5 },
    "1f45b": { "sheet": 8, "x": 6 },
    "1f45d": { "sheet": 8, "x": 7 },
    "1f45e": { "sheet": 8, "x": 8 },
    "1f464": { "sheet": 8, "x": 9 },
    "1f465": { "sheet": 8, "x": 10 },
    "1f46a": { "sheet": 8, "x": 11 },
    "1f46c": { "sheet": 8, "x": 12 },
    "1f46d": { "sheet": 8, "x": 13 },
    "1f470": { "sheet": 8, "x": 14 },
    "1f479": { "sheet": 8, "x": 15 },
    "1f47a": { "sheet": 8, "x": 16 },
    "1f48c": { "sheet": 8, "x": 17 },
    "1f495": { "sheet": 8, "x": 18 },
    "1f496": { "sheet": 8, "x": 19 },
    "1f49e": { "sheet": 8, "x": 20 },
    "1f4a0": { "sheet": 8, "x": 21 },
    "1f4a5": { "sheet": 8, "x": 22 },
    "1f4a7": { "sheet": 8, "x": 23 },
    "1f4ab": { "sheet": 8, "x": 24 },
    "1f4ac": { "sheet": 8, "x": 25 },
    "1f4ad": { "sheet": 8, "x": 26 },
    "1f4ae": { "sheet": 8, "x": 27 },
    "1f4af": { "sheet": 8, "x": 28 },
    "1f4b2": { "sheet": 8, "x": 29 },
    "1f4b3": { "sheet": 8, "x": 30 },
    "1f4b4": { "sheet": 8, "x": 31 },
    "1f4b5": { "sheet": 8, "x": 32 },
    "1f4b6": { "sheet": 8, "x": 33 },
    "1f4b7": { "sheet": 8, "x": 34 },
    "1f4b8": { "sheet": 8, "x": 35 },
    "1f4be": { "sheet": 8, "x": 36 },
    "1f4c1": { "sheet": 8, "x": 37 },
    "1f4c2": { "sheet": 8, "x": 38 },
    "1f4c3": { "sheet": 8, "x": 39 },
    "1f4c4": { "sheet": 8, "x": 40 },
    "1f4c5": { "sheet": 8, "x": 41 },
    "1f4c6": { "sheet": 8, "x": 42 },
    "1f4c7": { "sheet": 8, "x": 43 },
    "1f4c8": { "sheet": 8, "x": 44 },
    "1f4c9": { "sheet": 8, "x": 45 },
    "1f4ca": { "sheet": 8, "x": 46 },
    "1f4cb": { "sheet": 8, "x": 47 },
    "1f4cc": { "sheet": 8, "x": 48 },
    "1f4cd": { "sheet": 8, "x": 49 },
    "1f4ce": { "sheet": 8, "x": 50 },
    "1f4cf": { "sheet": 8, "x": 51 },
    "1f4d0": { "sheet": 8, "x": 52 },
    "1f4d1": { "sheet": 8, "x": 53 },
    "1f4d2": { "sheet": 8, "x": 54 },
    "1f4d3": { "sheet": 8, "x": 55 },
    "1f4d4": { "sheet": 8, "x": 56 },
    "1f4d5": { "sheet": 8, "x": 57 },
    "1f4d7": { "sheet": 8, "x": 58 },
    "1f4d8": { "sheet": 8, "x": 59 },
    "1f4d9": { "sheet": 8, "x": 60 },
    "1f4da": { "sheet": 8, "x": 61 },
    "1f4db": { "sheet": 8, "x": 62 },
    "1f4dc": { "sheet": 8, "x": 63 },
    "1f4de": { "sheet": 8, "x": 64 },
    "1f4df": { "sheet": 8, "x": 65 },
    "1f4e4": { "sheet": 8, "x": 66 },
    "1f4e5": { "sheet": 8, "x": 67 },
    "1f4e6": { "sheet": 8, "x": 68 },
    "1f4e7": { "sheet": 8, "x": 69 },
    "1f4e8": { "sheet": 8, "x": 70 },
    "1f4eb": { "sheet": 8, "x": 71 },
    "1f4ec": { "sheet": 8, "x": 72 },
    "1f4ed": { "sheet": 8, "x": 73 },
    "1f4ef": { "sheet": 8, "x": 74 },
    "1f4f0": { "sheet": 8, "x": 75 },
    "1f4f5": { "sheet": 8, "x": 76 },
    "1f4f9": { "sheet": 8, "x": 77 },
    "1f500": { "sheet": 8, "x": 78 },

    "1f501": { "sheet": 9, "x": 0 },
    "1f502": { "sheet": 9, "x": 1 },
    "1f503": { "sheet": 9, "x": 2 },
    "1f504": { "sheet": 9, "x": 3 },
    "1f505": { "sheet": 9, "x": 4 },
    "1f506": { "sheet": 9, "x": 5 },
    "1f507": { "sheet": 9, "x": 6 },
    "1f509": { "sheet": 9, "x": 7 },
    "1f50a": { "sheet": 9, "x": 8 },
    "1f50b": { "sheet": 9, "x": 9 },
    "1f50c": { "sheet": 9, "x": 10 },
    "1f50e": { "sheet": 9, "x": 11 },
    "1f50f": { "sheet": 9, "x": 12 },
    "1f510": { "sheet": 9, "x": 13 },
    "1f515": { "sheet": 9, "x": 14 },
    "1f516": { "sheet": 9, "x": 15 },
    "1f517": { "sheet": 9, "x": 16 },
    "1f518": { "sheet": 9, "x": 17 },
    "1f519": { "sheet": 9, "x": 18 },
    "1f51a": { "sheet": 9, "x": 19 },
    "1f51b": { "sheet": 9, "x": 20 },
    "1f51c": { "sheet": 9, "x": 21 },
    "1f51f": { "sheet": 9, "x": 22 },
    "1f520": { "sheet": 9, "x": 23 },
    "1f521": { "sheet": 9, "x": 24 },
    "1f522": { "sheet": 9, "x": 25 },
    "1f523": { "sheet": 9, "x": 26 },
    "1f524": { "sheet": 9, "x": 27 },
    "1f526": { "sheet": 9, "x": 28 },
    "1f527": { "sheet": 9, "x": 29 },
    "1f529": { "sheet": 9, "x": 30 },
    "1f52a": { "sheet": 9, "x": 31 },
    "1f52c": { "sheet": 9, "x": 32 },
    "1f52d": { "sheet": 9, "x": 33 },
    "1f52e": { "sheet": 9, "x": 34 },
    "1f535": { "sheet": 9, "x": 35 },
    "1f536": { "sheet": 9, "x": 36 },
    "1f537": { "sheet": 9, "x": 37 },
    "1f538": { "sheet": 9, "x": 38 },
    "1f539": { "sheet": 9, "x": 39 },
    "1f53a": { "sheet": 9, "x": 40 },
    "1f53b": { "sheet": 9, "x": 41 },
    "1f53c": { "sheet": 9, "x": 42 },
    "1f53d": { "sheet": 9, "x": 43 },
    "1f55c": { "sheet": 9, "x": 44 },
    "1f55d": { "sheet": 9, "x": 45 },
    "1f55e": { "sheet": 9, "x": 46 },
    "1f55f": { "sheet": 9, "x": 47 },
    "1f560": { "sheet": 9, "x": 48 },
    "1f561": { "sheet": 9, "x": 49 },
    "1f562": { "sheet": 9, "x": 50 },
    "1f563": { "sheet": 9, "x": 51 },
    "1f564": { "sheet": 9, "x": 52 },
    "1f565": { "sheet": 9, "x": 53 },
    "1f566": { "sheet": 9, "x": 54 },
    "1f567": { "sheet": 9, "x": 55 },
    "1f5fe": { "sheet": 9, "x": 56 },
    "1f5ff": { "sheet": 9, "x": 57 },
    "1f600": { "sheet": 9, "x": 58 },
    "1f605": { "sheet": 9, "x": 59 },
    "1f606": { "sheet": 9, "x": 60 },
    "1f607": { "sheet": 9, "x": 61 },
    "1f608": { "sheet": 9, "x": 62 },
    "1f60b": { "sheet": 9, "x": 63 },
    "1f60e": { "sheet": 9, "x": 64 },
    "1f610": { "sheet": 9, "x": 65 },
    "1f611": { "sheet": 9, "x": 66 },
    "1f615": { "sheet": 9, "x": 67 },
    "1f617": { "sheet": 9, "x": 68 },
    "1f619": { "sheet": 9, "x": 69 },
    "1f61b": { "sheet": 9, "x": 70 },
    "1f61f": { "sheet": 9, "x": 71 },
    "1f624": { "sheet": 9, "x": 72 },
    "1f626": { "sheet": 9, "x": 73 },
    "1f627": { "sheet": 9, "x": 74 },
    "1f629": { "sheet": 9, "x": 75 },
    "1f62b": { "sheet": 9, "x": 76 },
    "1f62c": { "sheet": 9, "x": 77 },
    "1f62e": { "sheet": 9, "x": 78 },

    "1f62f": { "sheet": 10, "x": 0 },
    "1f634": { "sheet": 10, "x": 1 },
    "1f635": { "sheet": 10, "x": 2 },
    "1f636": { "sheet": 10, "x": 3 },
    "1f638": { "sheet": 10, "x": 4 },
    "1f639": { "sheet": 10, "x": 5 },
    "1f63a": { "sheet": 10, "x": 6 },
    "1f63b": { "sheet": 10, "x": 7 },
    "1f63c": { "sheet": 10, "x": 8 },
    "1f63d": { "sheet": 10, "x": 9 },
    "1f63e": { "sheet": 10, "x": 10 },
    "1f63f": { "sheet": 10, "x": 11 },
    "1f640": { "sheet": 10, "x": 12 },
    "1f648": { "sheet": 10, "x": 13 },
    "1f649": { "sheet": 10, "x": 14 },
    "1f64a": { "sheet": 10, "x": 15 },
    "1f64b": { "sheet": 10, "x": 16 },
    "1f64d": { "sheet": 10, "x": 17 },
    "1f64e": { "sheet": 10, "x": 18 },
    "1f681": { "sheet": 10, "x": 19 },
    "1f682": { "sheet": 10, "x": 20 },
    "1f686": { "sheet": 10, "x": 21 },
    "1f688": { "sheet": 10, "x": 22 },
    "1f68a": { "sheet": 10, "x": 23 },
    "1f68b": { "sheet": 10, "x": 24 },
    "1f68d": { "sheet": 10, "x": 25 },
    "1f68e": { "sheet": 10, "x": 26 },
    "1f690": { "sheet": 10, "x": 27 },
    "1f694": { "sheet": 10, "x": 28 },
    "1f696": { "sheet": 10, "x": 29 },
    "1f698": { "sheet": 10, "x": 30 },
    "1f69b": { "sheet": 10, "x": 31 },
    "1f69c": { "sheet": 10, "x": 32 },
    "1f69d": { "sheet": 10, "x": 33 },
    "1f69e": { "sheet": 10, "x": 34 },
    "1f69f": { "sheet": 10, "x": 35 },
    "1f6a0": { "sheet": 10, "x": 36 },
    "1f6a1": { "sheet": 10, "x": 37 },
    "1f6a3": { "sheet": 10, "x": 38 },
    "1f6a6": { "sheet": 10, "x": 39 },
    "1f6a8": { "sheet": 10, "x": 40 },
    "1f6a9": { "sheet": 10, "x": 41 },
    "1f6aa": { "sheet": 10, "x": 42 },
    "1f6ab": { "sheet": 10, "x": 43 },
    "1f6ae": { "sheet": 10, "x": 44 },
    "1f6af": { "sheet": 10, "x": 45 },
    "1f6b0": { "sheet": 10, "x": 46 },
    "1f6b1": { "sheet": 10, "x": 47 },
    "1f6b3": { "sheet": 10, "x": 48 },
    "1f6b4": { "sheet": 10, "x": 49 },
    "1f6b5": { "sheet": 10, "x": 50 },
    "1f6b7": { "sheet": 10, "x": 51 },
    "1f6b8": { "sheet": 10, "x": 52 },
    "1f6bf": { "sheet": 10, "x": 53 },
    "1f6c1": { "sheet": 10, "x": 54 },
    "1f6c2": { "sheet": 10, "x": 55 },
    "1f6c3": { "sheet": 10, "x": 56 },
    "1f6c4": { "sheet": 10, "x": 57 },
    "1f6c5": { "sheet": 10, "x": 58 },

    "1f1ee-1f1f3": { "sheet": 12, "x": 0 },
    "1f1f2-1f1fd": { "sheet": 12, "x": 1 },
    "1f1e7-1f1f7": { "sheet": 12, "x": 2 },
    "1f1f8-1f1e6": { "sheet": 12, "x": 3 },
    "1f1ff-1f1e6": { "sheet": 12, "x": 4 },
    "1f1e6-1f1f7": { "sheet": 12, "x": 5 },
    "1f1f3-1f1f1": { "sheet": 12, "x": 6 },
    "1f1f9-1f1f7": { "sheet": 12, "x": 7 },
    "1f1f2-1f1fe": { "sheet": 12, "x": 8 },
    "1f1fb-1f1ea": { "sheet": 12, "x": 9 },
    "1f1e8-1f1f4": { "sheet": 12, "x": 10 },
    "1f1e8-1f1f1": { "sheet": 12, "x": 11 },
    "1f1ed-1f1f0": { "sheet": 12, "x": 12 },
    "1f1f3-1f1ec": { "sheet": 12, "x": 13 },
    "1f1e8-1f1ed": { "sheet": 12, "x": 14 },
    "1f1ee-1f1f1": { "sheet": 12, "x": 15 },
    "1f1f9-1f1ed": { "sheet": 12, "x": 16 },
    "1f1f8-1f1ec": { "sheet": 12, "x": 17 },
    "1f1e6-1f1ea": { "sheet": 12, "x": 18 },
    "1f1f9-1f1fc": { "sheet": 12, "x": 19 },
    "1f1ea-1f1ec": { "sheet": 12, "x": 20 },
    "1f1e8-1f1e6": { "sheet": 12, "x": 21 },
    "1f1f2-1f1e8": { "sheet": 12, "x": 22 },
    "1f1e6-1f1f9": { "sheet": 12, "x": 23 },
    "1f1e6-1f1fa": { "sheet": 12, "x": 24 },
    "1f1e7-1f1e6": { "sheet": 12, "x": 25 },
    "1f1e7-1f1ea": { "sheet": 12, "x": 26 },
    "1f1e8-1f1ee": { "sheet": 12, "x": 27 },
    "1f1e8-1f1f2": { "sheet": 12, "x": 28 },
    "1f1e8-1f1f7": { "sheet": 12, "x": 29 },
    "1f1e9-1f1ff": { "sheet": 12, "x": 30 },
    "1f1ea-1f1e8": { "sheet": 12, "x": 31 },
    "1f1ec-1f1ed": { "sheet": 12, "x": 32 },
    "1f1ec-1f1f7": { "sheet": 12, "x": 33 },
    "1f1ed-1f1f3": { "sheet": 12, "x": 34 },
    "1f1ed-1f1f7": { "sheet": 12, "x": 35 },
    "1f1ee-1f1f7": { "sheet": 12, "x": 36 },
    "1f1ef-1f1f4": { "sheet": 12, "x": 37 },
    "1f1f0-1f1ff": { "sheet": 12, "x": 38 },
    "1f1f1-1f1e7": { "sheet": 12, "x": 39 },
    "1f1f5-1f1ea": { "sheet": 12, "x": 40 },
    "1f1f5-1f1f9": { "sheet": 12, "x": 41 },
    "1f1f8-1f1fe": { "sheet": 12, "x": 42 },
    "1f1fa-1f1e6": { "sheet": 12, "x": 43 },
    "1f1fa-1f1fe": { "sheet": 12, "x": 44 },
    "1f1fd-1f1ea": { "sheet": 12, "x": 45 },
  };

  var images = [];

  var squareSize = 16;

  return {
    regEx: new RegExp(regexString, 'g'),

    squareSize: squareSize,

    loadData: function() {
      return new Promise(function(resolve, reject) {
        var promises = [];

        for (var i = 0; i < 13; i++) {
          if (i == 11) {
            continue;
          }

          images[i] = new Image();
          var num = i.toString(16);
          if (config.customEmojiImageFormat) {
            var fileName = config.customEmojiImageFormat.replace("NUM", num);
            images[i].src = URL.createObjectURL(new Blob([ JARStore.loadFile(fileName) ]));
          } else {
            images[i].src = "style/emoji/emoji" + num + ".png";
          }

          promises.push(new Promise(function(resolve, reject) {
            images[i].onload = resolve;
          }));
        }

        Promise.all(promises).then(resolve);
      });
    },

    getData: function(str, size) {
      var firstCodePoint = str.codePointAt(0);

      var unified = firstCodePoint.toString(16);
      if (unified.length == 2) {
        unified = "00" + unified;
      }

      var len = String.fromCodePoint(firstCodePoint).length;
      if (str.length > len) {
        unified += "-" + str.substr(len).codePointAt(0).toString(16);
      }

      var emoji = data[unified];

      return {
        img: images[emoji.sheet],
        x: emoji.x * squareSize,
      };
    },
  };
})();

/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 2014-12-17
 *
 * By Eli Grey, http://eligrey.com
 * License: X11/MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
	;
	// IE <10 is explicitly unsupported
	if (typeof navigator !== "undefined" &&
	    /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = "download" in save_link
		, click = function(node) {
			var event = doc.createEvent("MouseEvents");
			event.initMouseEvent(
				"click", true, false, view, 0, 0, 0, 0, 0
				, false, false, false, false, 0, null
			);
			node.dispatchEvent(event);
		}
		, webkit_req_fs = view.webkitRequestFileSystem
		, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		, fs_min_size = 0
		// See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and
		// https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047
		// for the reasoning behind the timeout and revocation flow
		, arbitrary_revoke_timeout = 500 // in ms
		, revoke = function(file) {
			var revoker = function() {
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			};
			if (view.chrome) {
				revoker();
			} else {
				setTimeout(revoker, arbitrary_revoke_timeout);
			}
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, FileSaver = function(blob, name) {
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, blob_changed = false
				, object_url
				, target_view
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					// don't create more object URLs than needed
					if (blob_changed || !object_url) {
						object_url = get_URL().createObjectURL(blob);
					}
					if (target_view) {
						target_view.location.href = object_url;
					} else {
						var new_tab = view.open(object_url, "_blank");
						if (new_tab == undefined && typeof safari !== "undefined") {
							//Apple do not allow window.open, see http://bit.ly/1kZffRI
							view.location.href = object_url
						}
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
					revoke(object_url);
				}
				, abortable = function(func) {
					return function() {
						if (filesaver.readyState !== filesaver.DONE) {
							return func.apply(this, arguments);
						}
					};
				}
				, create_if_not_found = {create: true, exclusive: false}
				, slice
			;
			filesaver.readyState = filesaver.INIT;
			if (!name) {
				name = "download";
			}
			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				save_link.href = object_url;
				save_link.download = name;
				click(save_link);
				filesaver.readyState = filesaver.DONE;
				dispatch_all();
				revoke(object_url);
				return;
			}
			// Object and web filesystem URLs have a problem saving in Google Chrome when
			// viewed in a tab, so I force save with application/octet-stream
			// http://code.google.com/p/chromium/issues/detail?id=91158
			// Update: Google errantly closed 91158, I submitted it again:
			// https://code.google.com/p/chromium/issues/detail?id=389642
			if (view.chrome && type && type !== force_saveable_type) {
				slice = blob.slice || blob.webkitSlice;
				blob = slice.call(blob, 0, blob.size, force_saveable_type);
				blob_changed = true;
			}
			// Since I can't be sure that the guessed media type will trigger a download
			// in WebKit, I append .download to the filename.
			// https://bugs.webkit.org/show_bug.cgi?id=65440
			if (webkit_req_fs && name !== "download") {
				name += ".download";
			}
			if (type === force_saveable_type || webkit_req_fs) {
				target_view = view;
			}
			if (!req_fs) {
				fs_error();
				return;
			}
			fs_min_size += blob.size;
			req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
				fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
					var save = function() {
						dir.getFile(name, create_if_not_found, abortable(function(file) {
							file.createWriter(abortable(function(writer) {
								writer.onwriteend = function(event) {
									target_view.location.href = file.toURL();
									filesaver.readyState = filesaver.DONE;
									dispatch(filesaver, "writeend", event);
									revoke(file);
								};
								writer.onerror = function() {
									var error = writer.error;
									if (error.code !== error.ABORT_ERR) {
										fs_error();
									}
								};
								"writestart progress write abort".split(" ").forEach(function(event) {
									writer["on" + event] = filesaver["on" + event];
								});
								writer.write(blob);
								filesaver.abort = function() {
									writer.abort();
									filesaver.readyState = filesaver.DONE;
								};
								filesaver.readyState = filesaver.WRITING;
							}), fs_error);
						}), fs_error);
					};
					dir.getFile(name, {create: false}, abortable(function(file) {
						// delete file if it already exists
						file.remove();
						save();
					}), abortable(function(ex) {
						if (ex.code === ex.NOT_FOUND_ERR) {
							save();
						} else {
							fs_error();
						}
					}));
				}), fs_error);
			}), fs_error);
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name) {
			return new FileSaver(blob, name);
		}
	;
	FS_proto.abort = function() {
		var filesaver = this;
		filesaver.readyState = filesaver.DONE;
		dispatch(filesaver, "abort");
	};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module.exports) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}
/* -*- Mode: JavaScript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var MIDP = (function() {
  var canvas = document.getElementById("canvas");
  var context2D = canvas.getContext("2d");
  context2D.save();

  var isFullScreen = true;
  function setFullScreen(isFS) {
    isFullScreen = isFS;
    updateCanvas();
  };

  function updatePhysicalScreenSize() {
    if (!config.autosize || /no|0/.test(config.autosize)) {
      physicalScreenWidth = document.getElementById('display').clientWidth;
      physicalScreenHeight = document.getElementById('display').clientHeight;
    }
  }

  function updateCanvas() {
    var sidebar = document.getElementById("sidebar");
    var header = document.getElementById("drawer").querySelector("header");
    sidebar.style.display = header.style.display =
        isFullScreen ? "none" : "block";
    var headerHeight = isFullScreen ? 0 : header.offsetHeight;
    var newHeight = physicalScreenHeight - headerHeight;
    var newWidth = physicalScreenWidth;

    if (newHeight != canvas.height || newWidth != canvas.width) {
      canvas.height = newHeight;
      canvas.width = newWidth;
      canvas.style.height = canvas.height + "px";
      canvas.style.width = canvas.width + "px";
      canvas.style.top = headerHeight + "px";
      canvas.dispatchEvent(new Event("canvasresize"));
    }
  };

  function onWindowResize(evt) {
    var newPhysicalScreenWidth = window.outerWidth - horizontalChrome;
    var newPhysicalScreenHeight = window.outerHeight - verticalChrome;

    if (newPhysicalScreenWidth != physicalScreenWidth || newPhysicalScreenHeight != physicalScreenHeight) {
      physicalScreenWidth = newPhysicalScreenWidth;
      physicalScreenHeight = newPhysicalScreenHeight;
      lastWindowInnerHeight = window.innerHeight;
      updateCanvas();
    } else if (lastWindowInnerHeight != window.innerHeight) {
      lastWindowInnerHeight = window.innerHeight;
      sendVirtualKeyboardEvent();
    } else {
      console.warn("Unhandled resize event!");
    }
  };

  var manifest = {};

  Native["com/sun/midp/jarutil/JarReader.readJarEntry0.(Ljava/lang/String;Ljava/lang/String;)[B"] = function(jar, entryName) {
    var bytes = JARStore.loadFileFromJAR(J2ME.fromJavaString(jar), J2ME.fromJavaString(entryName));
    if (!bytes) {
      throw $.newIOException();
    }
    var length = bytes.byteLength;
    var array = J2ME.newByteArray(length);
    for (var n = 0; n < length; ++n) {
      array[n] = bytes[n];
    }
    return array;
  };

  Native["com/sun/midp/log/LoggingBase.report.(IILjava/lang/String;)V"] = function(severity, channelID, message) {
    console.info(J2ME.fromJavaString(message));
  };

  Native["com/sun/midp/security/Permissions.loadGroupList.()[Ljava/lang/String;"] = function() {
    return J2ME.newStringArray(0);
  };

  Native["com/sun/midp/security/Permissions.getGroupMessages.(Ljava/lang/String;)[Ljava/lang/String;"] = function(jName) {
    return null;
  };

  Native["com/sun/midp/security/Permissions.loadGroupPermissions.(Ljava/lang/String;)[Ljava/lang/String;"] = function(name) {
    return J2ME.newStringArray(0);
  };

  Native["com/sun/midp/security/Permissions.loadDomainList.()[Ljava/lang/String;"] = function() {
    return J2ME.newStringArray(0);
  };

  Native["com/sun/midp/security/Permissions.getDefaultValue.(Ljava/lang/String;Ljava/lang/String;)B"] = function(domain, group) {
    return 1;
  };

  Native["com/sun/midp/security/Permissions.getMaxValue.(Ljava/lang/String;Ljava/lang/String;)B"] = function(domain, group) {
    return 1;
  };

  Native["com/sun/midp/security/Permissions.loadingFinished.()V"] = function() {
  };

  Native["com/sun/midp/main/CldcPlatformRequest.dispatchPlatformRequest.(Ljava/lang/String;)Z"] = function(request) {
    request = J2ME.fromJavaString(request);
    if (request.startsWith("http://") || request.startsWith("https://")) {
      if (request.endsWith(".jad")) {
        // The download will start after the MIDlet has terminated its execution.
        pendingMIDletUpdate = request;
        return 1;
      } else {
        DumbPipe.close(DumbPipe.open("windowOpen", request));
      }
    } else if (request.startsWith("x-contacts:add?number=")) {
      new MozActivity({
        name: "new",
        data: {
          type: "webcontacts/contact",
          params: {
            tel: request.substring(22),
          },
        },
      });
    } else {
      console.warn("com/sun/midp/main/CldcPlatformRequest.dispatchPlatformRequest.(Ljava/lang/String;)Z not implemented for: " + request);
    }

    return 0;
  };

  Native["com/sun/midp/main/CommandState.restoreCommandState.(Lcom/sun/midp/main/CommandState;)V"] = function(state) {
    var suiteId = (config.midletClassName === "internal") ? -1 : 1;
    state.suiteId = suiteId;
    state.midletClassName = J2ME.newString(config.midletClassName);
    var args = config.args;
    state.arg0 = J2ME.newString((args.length > 0) ? args[0] : "");
    state.arg1 = J2ME.newString((args.length > 1) ? args[1] : "");
    state.arg2 = J2ME.newString((args.length > 2) ? args[2] : "");
  };

  Native["com/sun/midp/main/MIDletSuiteUtils.getIsolateId.()I"] = function() {
    return $.ctx.runtime.isolate.id;
  };

  var AMSIsolateId;
  Native["com/sun/midp/main/MIDletSuiteUtils.registerAmsIsolateId.()V"] = function() {
    AMSIsolateId = $.ctx.runtime.isolate.id;
  };

  Native["com/sun/midp/main/MIDletSuiteUtils.getAmsIsolateId.()I"] = function() {
    return AMSIsolateId;
  };

  Native["com/sun/midp/main/MIDletSuiteUtils.isAmsIsolate.()Z"] = function() {
    return AMSIsolateId == $.ctx.runtime.isolate.id ? 1 : 0;
  };

  // This function is called before a MIDlet is created (in MIDletStateListener::midletPreStart).
  Native["com/sun/midp/main/MIDletSuiteUtils.vmBeginStartUp.(I)V"] = function(midletIsolateId) {
    // See DisplayContainer::createDisplayId, called by the LCDUIEnvironment constructor,
    // called by CldcMIDletSuiteLoader::createSuiteEnvironment.
    // The formula depens on the ID of the isolate that calls createDisplayId, that is
    // the same isolate that calls vmBeginStartUp. So this is a good place to calculate
    // the display ID.
    displayId = ((midletIsolateId & 0xff)<<24) | (1 & 0x00ffffff);

    asyncImpl("V", Promise.all(loadingMIDletPromises));
  };

  Native["com/sun/midp/main/MIDletSuiteUtils.vmEndStartUp.(I)V"] = function(midletIsolateId) {
  };

  Native["com/sun/midp/main/AppIsolateMIDletSuiteLoader.allocateReservedResources0.()Z"] = function() {
    return 1;
  };

  Native["com/sun/midp/main/Configuration.getProperty0.(Ljava/lang/String;)Ljava/lang/String;"] = function(key) {
    var value;
    switch (J2ME.fromJavaString(key)) {
      case "com.sun.midp.publickeystore.WebPublicKeyStore":
        if (config.midletClassName == "RunTests") {
          value = "_test.ks";
        } else {
          value = "_main.ks";
        }
        break;
      case "com.sun.midp.events.dispatchTableInitSize":
        value = "71";
        break;
      case "microedition.locale":
        value = navigator.language;
        break;
      case "datagram":
        value = "com.sun.midp.io.j2me.datagram.ProtocolPushImpl";
        break;
      case "com.sun.midp.io.j2me.socket.buffersize":
        value = null;
        break;
      case "com.sun.midp.io.http.proxy":
        value = null;
        break;
      case "com.sun.midp.io.http.force_non_persistent":
        value = null;
        break;
      case "com.sun.midp.io.http.max_persistent_connections":
        value = null;
        break;
      case "com.sun.midp.io.http.persistent_connection_linger_time":
        value = null;
        break;
      case "com.sun.midp.io.http.input_buffer_size":
        value = null;
        break;
      case "com.sun.midp.io.http.output_buffer_size":
        value = null;
        break;
      default:
        console.warn("UNKNOWN PROPERTY (com/sun/midp/main/Configuration): " + J2ME.fromJavaString(key));
        value = null;
        break;
    }
    return J2ME.newString(value);
  };

  Native["com/sun/midp/util/ResourceHandler.loadRomizedResource0.(Ljava/lang/String;)[B"] = function(file) {
    var fileName = "assets/0/" + J2ME.fromJavaString(file).replace("_", ".").replace("_png", ".png").replace("_raw", ".raw");
    var data = JARStore.loadFile(fileName);
    if (!data) {
      console.warn("ResourceHandler::loadRomizedResource0: file " + fileName + " not found");
      return null;
    }
    var len = data.byteLength;
    var bytes = J2ME.newByteArray(len);
    for (var n = 0; n < len; ++n) {
      bytes[n] = data[n];
    }
    return bytes;
  };

  var verticalChrome;
  var horizontalChrome;
  var physicalScreenWidth;
  var physicalScreenHeight;
  var lastWindowInnerHeight;
  var isVKVisible;
  if (config.autosize && !/no|0/.test(config.autosize)) {
    document.documentElement.classList.add('autosize');

    // Chrome amounts:
    //   The difference between the outer[Height|Width] and the actual
    //   amount of space we have available. So far, horizontalChrome is
    //   always 0 and verticalChrome is always the size of the status bar,
    //   which has been 30px in testing. These are assumed to be static
    //   throughout the lifetime of the app, and things will break if that
    //   assumption is violated.
    verticalChrome = window.outerHeight - window.innerHeight;
    horizontalChrome = window.outerWidth - window.innerWidth;

    // "Physical" dimensions:
    //   The amount of space available to J2ME. This is always the
    //   outer[Height|Width] minus the [vertical|horizontal]Chrome amount.
    //
    //   Note that these values will not always equal the size of our window.
    //   Specifically, when the FxOS keyboard is visible, the window shrinks,
    //   so `window.inner[Height|Width]` will be
    //   smaller than these values. J2ME apps expect that the keyboard
    //   overlaps the window rather than squishing it, so we simulate that
    //   by keeping track of these "physical" values.
    //
    //   Note also that these values do not take into account the size of
    //   the header, which might shrink our canvas. To find out how much
    //   space is actually available to the current MIDlet, check
    //   `document.getElementById("canvas").[width|height]`.
    physicalScreenWidth = window.outerWidth - horizontalChrome;
    physicalScreenHeight = window.outerHeight - verticalChrome;

    // Cached value of `window.innerHeight` so that we can tell when it
    // changes. This is useful for determining when to send keyboard
    // visibility events.
    lastWindowInnerHeight = window.innerHeight;

    updateCanvas();
    isVKVisible = function() {
      var expectedHeightWithNoKeyboard = window.outerHeight - verticalChrome;
      if (window.innerHeight == expectedHeightWithNoKeyboard) {
        return false;
      } else if (window.innerHeight < expectedHeightWithNoKeyboard) {
        return true;
      } else {
        console.warn("window is taller than expected in isVKVisible!");
        return false;
      }
    };
    window.addEventListener("resize", onWindowResize);
  } else {
    document.documentElement.classList.add('debug-mode');
    physicalScreenWidth = document.getElementById('display').clientWidth;
    physicalScreenHeight = document.getElementById('display').clientHeight;

    updateCanvas();
    isVKVisible = function() {
      return false;
    };
  }

  function sendPenEvent(pt, whichType) {
    sendNativeEvent({
      type: PEN_EVENT,
      intParam1: whichType,
      intParam2: pt.x,
      intParam3: pt.y,
      intParam4: displayId
    }, foregroundIsolateId);
  }

  function sendGestureEvent(pt, distancePt, whichType, aFloatParam1, aIntParam7, aIntParam8, aIntParam9) {
    sendNativeEvent({
      type: GESTURE_EVENT,
      intParam1: whichType,
      intParam2: distancePt && distancePt.x || 0,
      intParam3: distancePt && distancePt.y || 0,
      intParam4: displayId,
      intParam5: pt.x,
      intParam6: pt.y,
      floatParam1: Math.fround(aFloatParam1 || 0.0),
      intParam7: aIntParam7 || 0,
      intParam8: aIntParam8 || 0,
      intParam9: aIntParam9 || 0,
      intParam10: 0,
      intParam11: 0,
      intParam12: 0,
      intParam13: 0,
      intParam14: 0,
      intParam15: 0,
      intParam16: 0
    }, foregroundIsolateId);
  }

  // In the simulator and on device, use touch events; in desktop
  // mode, we must use mouse events (unless you enable touch events
  // in devtools).
  var supportsTouch = ("ontouchstart" in document.documentElement);

  // Cache the canvas position for future computation.
  var canvasRect = canvas.getBoundingClientRect();
  canvas.addEventListener("canvasresize", function() {
    canvasRect = canvas.getBoundingClientRect();
    sendRotationEvent();
  });

  function getEventPoint(event) {
    var item = ((event.touches && event.touches[0]) || // touchstart, touchmove
        (event.changedTouches && event.changedTouches[0]) || // touchend
        event); // mousedown, mouseup, mousemove
    return {
      x: item.pageX - (canvasRect.left | 0),
      y: item.pageY - (canvasRect.top | 0)
    };
  }

  // Input Handling: Some MIDlets (usually older ones) respond to
  // "pen" events; others respond to "gesture" events. We must fire
  // both. A distance threshold ensures that touches with an "intent
  // to tap" will likely result in a tap.

  var LONG_PRESS_TIMEOUT = 1000;
  var MIN_DRAG_DISTANCE_SQUARED = 5 * 5;
  var mouseDownInfo = null;
  var longPressTimeoutID = null;
  var longPressDetected = false;

  canvas.addEventListener(supportsTouch ? "touchstart" : "mousedown", function(event) {
    event.preventDefault(); // Prevent unnecessary fake mouse events.
    var pt = getEventPoint(event);
    sendPenEvent(pt, PRESSED);
    mouseDownInfo = pt;

    longPressDetected = false;
    longPressTimeoutID = setTimeout(function() {
      longPressDetected = true;
      sendGestureEvent(pt, null, GESTURE_LONG_PRESS);
    }, LONG_PRESS_TIMEOUT);
  });

  canvas.addEventListener(supportsTouch ? "touchmove" : "mousemove", function(event) {
    if (!mouseDownInfo) {
      return; // Mousemove on desktop; ignored.
    }
    event.preventDefault();

    if (longPressTimeoutID) {
      clearTimeout(longPressTimeoutID);
      longPressTimeoutID = null;
    }

    var pt = getEventPoint(event);
    sendPenEvent(pt, DRAGGED);
    var distance = {
      x: pt.x - mouseDownInfo.x,
      y: pt.y - mouseDownInfo.y
    };
    // If this gesture is dragging, or we've moved a substantial
    // amount since the original "down" event, begin or continue a
    // drag event. Using squared distance to avoid needing sqrt.
    if (mouseDownInfo.isDragging || (distance.x * distance.x + distance.y * distance.y > MIN_DRAG_DISTANCE_SQUARED)) {
      mouseDownInfo.isDragging = true;
      mouseDownInfo.x = pt.x;
      mouseDownInfo.y = pt.y;
      if (!longPressDetected) {
        sendGestureEvent(pt, distance, GESTURE_DRAG);
      }
    }

    // Just store the dragging event info here, then calc the speed and
    // determine whether the gesture is GESTURE_DROP or GESTURE_FLICK in
    // the mouseup event listener.
    if (!mouseDownInfo.draggingPts) {
      mouseDownInfo.draggingPts = [];
    }

    // Only store the latest two drag events.
    if (mouseDownInfo.draggingPts.length > 1) {
      mouseDownInfo.draggingPts.shift();
    }

    mouseDownInfo.draggingPts.push({
      pt: getEventPoint(event),
      time: new Date().getTime()
    });
  });

  function calcFlickSpeed() {
    var currentDragPT = mouseDownInfo.draggingPts[1];
    var lastDragPT = mouseDownInfo.draggingPts[0];

    var deltaX = currentDragPT.pt.x - lastDragPT.pt.x;
    var deltaY = currentDragPT.pt.y - lastDragPT.pt.y;
    var deltaTimeInMs = currentDragPT.time - lastDragPT.time;

    var speedX = Math.round(deltaX * 1000 / deltaTimeInMs);
    var speedY = Math.round(deltaY * 1000 / deltaTimeInMs);
    var speed  = Math.round(Math.sqrt(speedX * speedX + speedY * speedY));

    var direction = 0;
    if (deltaX >= 0 && deltaY >=0) {
      direction = Math.atan(deltaY / deltaX);
    } else if (deltaX < 0 && deltaY >= 0) {
      direction = Math.PI + Math.atan(deltaY / deltaX);
    } else if (deltaX < 0 && deltaY < 0) {
      direction = Math.atan(deltaY / deltaX) - Math.PI;
    } else if (deltaX >= 0 && deltaY < 0) {
      direction = Math.atan(deltaY / deltaX);
    }

    return {
      direction: direction,
      speed: speed,
      speedX: speedX,
      speedY: speedY
    };
  }

  // The end listener goes on `document` so that we properly detect touchend/mouseup anywhere.
  document.addEventListener(supportsTouch ? "touchend" : "mouseup", function(event) {
    if (!mouseDownInfo) {
      return; // Touchstart wasn't on the canvas.
    }
    event.preventDefault();

    if (longPressTimeoutID) {
      clearTimeout(longPressTimeoutID);
      longPressTimeoutID = null;
    }

    var pt = getEventPoint(event);
    sendPenEvent(pt, RELEASED);

    if (!longPressDetected) {
      if (mouseDownInfo.isDragging) {
        if (mouseDownInfo.draggingPts && mouseDownInfo.draggingPts.length == 2) {
          var deltaTime = new Date().getTime() - mouseDownInfo.draggingPts[1].time;
          var flickSpeed = calcFlickSpeed();
          // On the real Nokia device, if user touch on the screen and
          // move the finger, then stop moving for a while and lift
          // the finger, it will trigger a normal GESTURE_DROP instead
          // of GESTURE_FLICK event, so let's check if the time gap
          // between touchend event and the last touchmove event is
          // larger than a threshold.
          if (deltaTime > 300 || flickSpeed.speed == 0) {
            sendGestureEvent(pt, null, GESTURE_DROP);
          } else {
            sendGestureEvent(pt, null, GESTURE_FLICK,
                             flickSpeed.direction,
                             flickSpeed.speed,
                             flickSpeed.speedX,
                             flickSpeed.speedY);
          }
        } else {
          sendGestureEvent(pt, null, GESTURE_DROP);
        }
      } else {
        sendGestureEvent(pt, null, GESTURE_TAP);
      }
    }

    mouseDownInfo = null; // Clear the way for the next gesture.
  });

  Native["com/sun/midp/midletsuite/MIDletSuiteStorage.loadSuitesIcons0.()I"] = function() {
    return 0;
  };

  Native["com/sun/midp/midletsuite/MIDletSuiteStorage.suiteExists.(I)Z"] = function(id) {
    return id <= 1 ? 1 : 0;
  };

  Native["com/sun/midp/midletsuite/MIDletSuiteStorage.suiteIdToString.(I)Ljava/lang/String;"] = function(id) {
    return J2ME.newString(id.toString());
  };

  Native["com/sun/midp/midletsuite/MIDletSuiteStorage.getMidletSuiteStorageId.(I)I"] = function(suiteId) {
    // We should be able to use the same storage ID for all MIDlet suites.
    return 0; // storageId
  };

  Native["com/sun/midp/midletsuite/MIDletSuiteStorage.getMidletSuiteJarPath.(I)Ljava/lang/String;"] = function(id) {
    return J2ME.newString("");
  };

  Native["com/sun/midp/midletsuite/MIDletSuiteImpl.lockMIDletSuite.(IZ)V"] = function(id, lock) {
    console.warn("MIDletSuiteImpl.lockMIDletSuite.(IZ)V not implemented (" + id + ", " + lock + ")");
  };

  Native["com/sun/midp/midletsuite/MIDletSuiteImpl.unlockMIDletSuite.(I)V"] = function(suiteId) {
    console.warn("MIDletSuiteImpl.unlockMIDletSuite.(I)V not implemented (" + suiteId + ")");
  };

  Native["com/sun/midp/midletsuite/SuiteSettings.load.()V"] = function() {
    this.pushInterruptSetting = 1;
    console.warn("com/sun/midp/midletsuite/SuiteSettings.load.()V incomplete");
  };

  Native["com/sun/midp/midletsuite/SuiteSettings.save0.(IBI[B)V"] = function(suiteId, pushInterruptSetting, pushOptions, permissions) {
    console.warn("SuiteSettings.save0.(IBI[B)V not implemented (" + suiteId + ", " + pushInterruptSetting + ", " + pushOptions + ", " + permissions + ")");
  };

  Native["com/sun/midp/midletsuite/InstallInfo.load.()V"] = function() {
    // The MIDlet has to be trusted for opening SSL connections using port 443.
    this.trusted = 1;
    console.warn("com/sun/midp/midletsuite/InstallInfo.load.()V incomplete");
  };

  Native["com/sun/midp/midletsuite/SuiteProperties.load.()[Ljava/lang/String;"] = function() {
    var keys = Object.keys(manifest);
    var arr = J2ME.newStringArray(keys.length * 2);
    var i = 0;
    keys.forEach(function(key) {
      arr[i++] = J2ME.newString(key);
      arr[i++] = J2ME.newString(manifest[key]);
    });
    return arr;
  };

  Native["javax/microedition/lcdui/SuiteImageCacheImpl.loadAndCreateImmutableImageDataFromCache0.(Ljavax/microedition/lcdui/ImageData;ILjava/lang/String;)Z"] = function(imageData, suiteId, fileName) {
    // We're not implementing the cache because looks like it isn't used much.
    // In a MIDlet I've been testing for a few minutes, there's been only one hit.
    return 0;
  };

  var interIsolateMutexes = [];
  var lastInterIsolateMutexID = -1;

  Native["com/sun/midp/util/isolate/InterIsolateMutex.getID0.(Ljava/lang/String;)I"] = function(jName) {
    var name = J2ME.fromJavaString(jName);

    var mutex;
    for (var i = 0; i < interIsolateMutexes.length; i++) {
      if (interIsolateMutexes[i].name === name) {
        mutex = interIsolateMutexes[i];
      }
    }

    if (!mutex) {
      mutex = {
        name: name,
        id: ++lastInterIsolateMutexID,
        locked: false,
        waiting: [],
      };
      interIsolateMutexes.push(mutex);
    }

    return mutex.id;
  };

  Native["com/sun/midp/util/isolate/InterIsolateMutex.lock0.(I)V"] = function(id) {
    var ctx = $.ctx;
    var mutex;
    for (var i = 0; i < interIsolateMutexes.length; i++) {
      if (interIsolateMutexes[i].id == id) {
        mutex = interIsolateMutexes[i];
        break;
      }
    }

    if (!mutex) {
      throw $.newIllegalStateException("Invalid mutex ID");
    }

    if (!mutex.locked) {
      mutex.locked = true;
      mutex.holder = ctx.runtime.isolate.id;
      return;
    }

    if (mutex.holder == ctx.runtime.isolate.id) {
      throw $.newRuntimeException("Attempting to lock mutex twice within the same Isolate");
    }

    asyncImpl("V", new Promise(function(resolve, reject) {
      mutex.waiting.push(function() {
        mutex.locked = true;
        mutex.holder = ctx.runtime.isolate.id;
        resolve();
      });
    }));
  };

  Native["com/sun/midp/util/isolate/InterIsolateMutex.unlock0.(I)V"] = function(id) {
    var mutex;
    for (var i = 0; i < interIsolateMutexes.length; i++) {
      if (interIsolateMutexes[i].id == id) {
        mutex = interIsolateMutexes[i];
        break;
      }
    }

    if (!mutex) {
      throw $.newIllegalStateException("Invalid mutex ID");
    }

    if (!mutex.locked) {
      throw $.newRuntimeException("Mutex is not locked");
    }

    if (mutex.holder !== $.ctx.runtime.isolate.id) {
      throw $.newRuntimeException("Mutex is locked by different Isolate");
    }

    mutex.locked = false;

    var firstWaiting = mutex.waiting.shift();
    if (firstWaiting) {
      firstWaiting();
    }
  };

  function exit(code) {
    $.stop();
    DumbPipe.open("exit", null, function(message) {});
    document.getElementById("exit-screen").style.display = "block";
  }

  var pendingMIDletUpdate = null;

  Native["com/sun/cldc/isolate/Isolate.stop.(II)V"] = function(code, reason) {
    console.info("Isolate stops with code " + code + " and reason " + reason);
    if (!pendingMIDletUpdate) {
      exit();
      return;
    }

    // Perform updating.
    var dialogTemplateNode = document.getElementById('download-progress-dialog');
    var dialog = dialogTemplateNode.cloneNode(true);
    dialog.style.display = 'block';
    dialog.classList.add('visible');
    dialogTemplateNode.parentNode.appendChild(dialog);

    performDownload(pendingMIDletUpdate, dialog, function(data) {
      dialog.parentElement.removeChild(dialog);

      Promise.all([
        JARStore.installJAR("midlet.jar", data.jarData, data.jadData),
        CompiledMethodCache.clear(),
      ]).then(function() {
        pendingMIDletUpdate = null;
        DumbPipe.close(DumbPipe.open("alert", "Update completed!"));
        DumbPipe.close(DumbPipe.open("reload", {}));
      });
    });
  };

  // The foreground isolate will get the user events (keypresses, etc.)
  var foregroundIsolateId;
  var displayId = -1;
  var nativeEventQueues = {};
  var waitingNativeEventQueue = {};

  function copyEvent(e, obj) {
    var keys = Object.keys(e);
    for (var i = 0; i < keys.length; i++) {
      obj[keys[i]] = e[keys[i]];
    }
  }

  function sendNativeEvent(e, isolateId) {
    var elem = waitingNativeEventQueue[isolateId];
    if (!elem) {
      nativeEventQueues[isolateId].push(e);
      return;
    }

    copyEvent(e, elem.nativeEvent);
    elem.resolve(nativeEventQueues[isolateId].length);

    delete waitingNativeEventQueue[isolateId];
  }

  function sendVirtualKeyboardEvent() {
    if (-1 != displayId && undefined != foregroundIsolateId) {
      sendNativeEvent({
        type: VIRTUAL_KEYBOARD_EVENT,
        intParam1: 0,
        intParam2: 0,
        intParam3: 0,
        intParam4: displayId,
      }, foregroundIsolateId);
    }
  };

  function sendRotationEvent() {
    if (-1 != displayId && undefined != foregroundIsolateId) {
      sendNativeEvent({
        type: ROTATION_EVENT,
        intParam1: 0,
        intParam2: 0,
        intParam3: 0,
        intParam4: displayId,
      }, foregroundIsolateId);
    }
  }

  function sendCommandEvent(id) {
    if (-1 != displayId && undefined != foregroundIsolateId) {
      sendNativeEvent({
        type: COMMAND_EVENT,
        intParam1: id,
        intParam2: 0,
        intParam3: 0,
        intParam4: displayId,
      }, foregroundIsolateId);
    }
  }

  function sendEndOfMediaEvent(pId, duration) {
    if (undefined != foregroundIsolateId) {
      sendNativeEvent({
        type: MMAPI_EVENT,
        intParam1: pId,
        intParam2: duration,
        intParam3: 0,
        intParam4: Media.EVENT_MEDIA_END_OF_MEDIA
      }, foregroundIsolateId);
    }
  }

  function sendMediaSnapshotFinishedEvent(pId) {
    if (undefined != foregroundIsolateId) {
      sendNativeEvent({
        type: MMAPI_EVENT,
        intParam1: pId,
        intParam2: 0,
        intParam3: 0,
        intParam4: Media.EVENT_MEDIA_SNAPSHOT_FINISHED,
      }, foregroundIsolateId);
    }
  }

  var KEY_EVENT = 1;
  var PEN_EVENT = 2;
  var PRESSED = 1;
  var RELEASED = 2;
  var DRAGGED = 3;
  var COMMAND_EVENT = 3;
  var EVENT_QUEUE_SHUTDOWN = 31;
  var ROTATION_EVENT = 43;
  var MMAPI_EVENT = 45;
  var SCREEN_REPAINT_EVENT = 47;
  var VIRTUAL_KEYBOARD_EVENT = 58;
  var GESTURE_EVENT = 71;
  var GESTURE_TAP = 0x1;
  var GESTURE_LONG_PRESS = 0x2;
  var GESTURE_DRAG = 0x4;
  var GESTURE_DROP = 0x8;
  var GESTURE_FLICK = 0x10;
  var GESTURE_LONG_PRESS_REPEATED = 0x20;
  var GESTURE_PINCH = 0x40;
  var GESTURE_DOUBLE_TAP = 0x80;
  var GESTURE_RECOGNITION_START = 0x4000;
  var GESTURE_RECOGNITION_END = 0x8000;

  var suppressKeyEvents = false;

  function keyPress(keyCode) {
    if (!suppressKeyEvents) {
      sendNativeEvent({ type: KEY_EVENT, intParam1: PRESSED, intParam2: keyCode, intParam3: 0, intParam4: displayId }, foregroundIsolateId);
    }
  };

  function keyRelease(keyCode) {
    if (!suppressKeyEvents) {
      sendNativeEvent({ type: KEY_EVENT, intParam1: RELEASED, intParam2: keyCode, intParam3: 0, intParam4: displayId }, foregroundIsolateId);
    }
  };

  window.addEventListener("keypress", function(ev) {
    keyPress(ev.which);
  });

  window.addEventListener("keyup", function(ev) {
    keyRelease(ev.which);
  });

  Native["com/sun/midp/events/EventQueue.getNativeEventQueueHandle.()I"] = function() {
    return 0;
  };

  Native["com/sun/midp/events/EventQueue.resetNativeEventQueue.()V"] = function() {
    nativeEventQueues[$.ctx.runtime.isolate.id] = [];
  };

  Native["com/sun/midp/events/EventQueue.sendNativeEventToIsolate.(Lcom/sun/midp/events/NativeEvent;I)V"] =
    function(obj, isolateId) {
      var e = { type: obj.type };

      var fields = obj.klass.classInfo.fields;
      for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        e[J2ME.fromUTF8(field.utf8Name)] = field.get(obj);
      }

      sendNativeEvent(e, isolateId);
    };

  Native["com/sun/midp/events/NativeEventMonitor.waitForNativeEvent.(Lcom/sun/midp/events/NativeEvent;)I"] =
    function(nativeEvent) {
      var isolateId = $.ctx.runtime.isolate.id;
      var nativeEventQueue = nativeEventQueues[isolateId];

      if (nativeEventQueue.length !== 0) {
        copyEvent(nativeEventQueue.shift(), nativeEvent);
        return nativeEventQueue.length;
      }

      asyncImpl("I", new Promise(function(resolve, reject) {
        waitingNativeEventQueue[isolateId] = {
          resolve: resolve,
        nativeEvent: nativeEvent,
        };
      }));
    };

  Native["com/sun/midp/events/NativeEventMonitor.readNativeEvent.(Lcom/sun/midp/events/NativeEvent;)Z"] =
    function(obj) {
      var isolateId = $.ctx.runtime.isolate.id;
      var nativeEventQueue = nativeEventQueues[isolateId];
      if (!nativeEventQueue.length) {
        return 0;
      }
      copyEvent(nativeEventQueue.shift(), obj);
      return 1;
    };

  var localizedStrings;

  Native["com/sun/midp/l10n/LocalizedStringsBase.getContent.(I)Ljava/lang/String;"] = function(id) {
    if (!MIDP.localizedStrings) {
      var data = JARStore.loadFileFromJAR("java/classes.jar", "l10n/" + (config.language || navigator.language) + ".json");
      if (!data) {
        // Fallback to English
        data = JARStore.loadFileFromJAR("java/classes.jar", "l10n/en-US.json");

        if (!data) {
          throw $.newIOException();
        }
      }

      MIDP.localizedStrings = JSON.parse(util.decodeUtf8(data));
    }

    var value = MIDP.localizedStrings[id];

    if (!value) {
      throw $.newIllegalStateException();
    }

    return J2ME.newString(value);
  };

  Native["javax/microedition/lcdui/Display.drawTrustedIcon0.(IZ)V"] = function(dispId, drawTrusted) {
    console.warn("Display.drawTrustedIcon0.(IZ)V not implemented (" + dispId + ", " + drawTrusted + ")");
  };

  Native["com/sun/midp/events/EventQueue.sendShutdownEvent.()V"] = function() {
    sendNativeEvent({ type: EVENT_QUEUE_SHUTDOWN }, $.ctx.runtime.isolate.id);
  };

  Native["com/sun/midp/main/CommandState.saveCommandState.(Lcom/sun/midp/main/CommandState;)V"] = function(commandState) {
    console.warn("CommandState.saveCommandState.(L...CommandState;)V not implemented (" + commandState + ")");
  };

  Native["com/sun/midp/main/CommandState.exitInternal.(I)V"] = function(status) {
    console.info("Exit: " + status);
    exit();
  };

  Native["com/sun/midp/suspend/SuspendSystem$MIDPSystem.allMidletsKilled.()Z"] = function() {
    console.warn("SuspendSystem$MIDPSystem.allMidletsKilled.()Z not implemented");
    return 0;
  };

  /* We don't care about the system keys SELECT,
     SOFT_BUTTON1, SOFT_BUTTON2, DEBUG_TRACE1, CLAMSHELL_OPEN, CLAMSHELL_CLOSE,
     but we do care about SYSTEM_KEY_CLEAR, so send it when the delete key is pressed.
     */

  var SYSTEM_KEY_POWER = 1;
  var SYSTEM_KEY_SEND = 2;
  var SYSTEM_KEY_END = 3;
  var SYSTEM_KEY_CLEAR = 4;

  var systemKeyMap = {
    8: SYSTEM_KEY_CLEAR, // Backspace
    112: SYSTEM_KEY_POWER, // F1
    116: SYSTEM_KEY_SEND, // F5
    114: SYSTEM_KEY_END, // F3
  };

  Native["javax/microedition/lcdui/KeyConverter.getSystemKey.(I)I"] = function(key) {
    return systemKeyMap[key] || 0;
  };

  var keyMap = {
    1: 119, // UP
    2: 97, // LEFT
    5: 100, // RIGHT
    6: 115, // DOWN
    8: 32, // FIRE
    9: 113, // GAME_A
    10: 101, // GAME_B
    11: 122, // GAME_C
    12: 99, // GAME_D
  };

  Native["javax/microedition/lcdui/KeyConverter.getKeyCode.(I)I"] = function(key) {
    return keyMap[key] || 0;
  };

  var keyNames = {
    119: "Up",
    97: "Left",
    100: "Right",
    115: "Down",
    32: "Select",
    113: "Calendar",
    101: "Addressbook",
    122: "Menu",
    99: "Mail",
  };

  Native["javax/microedition/lcdui/KeyConverter.getKeyName.(I)Ljava/lang/String;"] = function(keyCode) {
    return J2ME.newString((keyCode in keyNames) ? keyNames[keyCode] : String.fromCharCode(keyCode));
  };

  var gameKeys = {
    119: 1,  // UP
    97: 2,   // LEFT
    115: 6,  // DOWN
    100: 5,  // RIGHT
    32: 8,   // FIRE
    113: 9,  // GAME_A
    101: 10, // GAME_B
    122: 11, // GAME_C
    99: 12   // GAME_D
  };

  Native["javax/microedition/lcdui/KeyConverter.getGameAction.(I)I"] = function(keyCode) {
    return gameKeys[keyCode] || 0;
  };

  Native["javax/microedition/lcdui/game/GameCanvas.setSuppressKeyEvents.(Ljavax/microedition/lcdui/Canvas;Z)V"] = function(canvas, shouldSuppress) {
    suppressKeyEvents = shouldSuppress;
  };

  Native["com/sun/midp/main/MIDletProxyList.resetForegroundInNativeState.()V"] = function() {
    displayId = -1;
  };

  Native["com/sun/midp/main/MIDletProxyList.setForegroundInNativeState.(II)V"] = function(isolateId, dispId) {
    displayId = dispId;
    foregroundIsolateId = isolateId;
  };

  var connectionRegistry = {
    // The lastRegistrationId is in common between alarms and push notifications
    lastRegistrationId:  -1,
    pushRegistrations: [],
    alarms: [],
    readyRegistrations: [],
    addReadyRegistration: function(id) {
      this.readyRegistrations.push(id);
      this.notify();
    },
    notify: function() {
      if (!this.readyRegistrations.length || !this.pendingPollCallback) {
        return;
      }
      var cb = this.pendingPollCallback;
      this.pendingPollCallback = null;
      cb(this.readyRegistrations.pop());
    },
    pushNotify: function(protocolName) {
      for (var i = 0; i < this.pushRegistrations.length; i++) {
        if (protocolName == this.pushRegistrations[i].connection) {
          this.addReadyRegistration(this.pushRegistrations[i].id);
        }
      }
    },
    waitForRegistration: function(cb) {
      if (this.pendingPollCallback) {
        throw new Error("There can only be one waiter.");
      }
      this.pendingPollCallback = cb;
      this.notify();
    },
    addConnection: function(connection) {
      connection.id = ++this.lastRegistrationId;
      this.pushRegistrations.push(connection);
      return connection.id;
    },
    addAlarm: function(alarm) {
      alarm.id = ++this.lastRegistrationId;
      this.alarms.push(alarm);
      return alarm.id;
    }
  };

  Native["com/sun/midp/io/j2me/push/ConnectionRegistry.poll0.(J)I"] = function(time) {
    asyncImpl("I", new Promise(function(resolve, reject) {
      connectionRegistry.waitForRegistration(function(id) {
        resolve(id);
      });
    }));
  };

  Native["com/sun/midp/io/j2me/push/ConnectionRegistry.add0.(Ljava/lang/String;)I"] = function(connection) {
    var values = J2ME.fromJavaString(connection).split(',');

    console.warn("ConnectionRegistry.add0.(IL...String;)I isn't completely implemented");

    connectionRegistry.addConnection({
      connection: values[0],
      midlet: values[1],
      filter: values[2],
      suiteId: values[3]
    });

    return 0;
  };

  Native["com/sun/midp/io/j2me/push/ConnectionRegistry.addAlarm0.([BJ)J"] = function(jMidlet, jTime) {
    var time = jTime.toNumber(), midlet = util.decodeUtf8(jMidlet);

    var lastAlarm = 0;
    var id = null;
    var alarms = connectionRegistry.alarms;
    for (var i = 0; i < alarms.length; i++) {
      if (alarms[i].midlet == midlet) {
        if (time != 0) {
          id = alarms[i].id;
          lastAlarm = alarms[i].time;
          alarms[i].time = time;
        } else {
          alarms[i].splice(i, 1);
        }

        break;
      }
    }

    if (lastAlarm == 0 && time != 0) {
      id = connectionRegistry.addAlarm({
        midlet: midlet,
        time: time
      });
    }

    if (id !== null) {
      var relativeTime = time - Date.now();
      if (relativeTime < 0) {
        relativeTime = 0;
      }

      setTimeout(function() {
        connectionRegistry.addReadyRegistration(id);
      }, relativeTime);
    }

    return Long.fromNumber(lastAlarm);
  };

  Native["com/sun/midp/io/j2me/push/ConnectionRegistry.getMIDlet0.(I[BI)I"] = function(handle, regentry, entrysz) {
    var reg;
    var alarms = connectionRegistry.alarms;
    for (var i = 0; i < alarms.length; i++) {
      if (alarms[i].id == handle) {
        reg = alarms[i];
      }
    }

    if (!reg) {
      var pushRegistrations = connectionRegistry.pushRegistrations;
      for (var i = 0; i < pushRegistrations.length; i++) {
        if (pushRegistrations[i].id == handle) {
          reg = pushRegistrations[i];
        }
      }
    }

    if (!reg) {
      console.error("getMIDlet0 returns -1, this should never happen");
      return -1;
    }

    var str;

    if (reg.time) {
      str = reg.midlet + ", 0, 1";
    } else {
      str = reg.connection + ", " + reg.midlet + ", " + reg.filter + ", " + reg.suiteId;
    }

    for (var i = 0; i < str.length; i++) {
      regentry[i] = str.charCodeAt(i);
    }
    regentry[str.length] = 0;

    return 0;
  };

  Native["com/sun/midp/io/j2me/push/ConnectionRegistry.checkInByMidlet0.(ILjava/lang/String;)V"] = function(suiteId, className) {
    console.warn("ConnectionRegistry.checkInByMidlet0.(IL...String;)V not implemented (" + suiteId + ", " + J2ME.fromJavaString(className) + ")");
  };

  Native["com/sun/midp/io/j2me/push/ConnectionRegistry.checkInByName0.([B)I"] = function(name) {
    console.warn("ConnectionRegistry.checkInByName0.([B)V not implemented (" + util.decodeUtf8(name) + ")");
    return 0;
  };

  Native["com/nokia/mid/ui/gestures/GestureInteractiveZone.isSupported.(I)Z"] = function(gestureEventIdentity) {
    console.warn("GestureInteractiveZone.isSupported.(I)Z not implemented (" + gestureEventIdentity + ")");
    return 0;
  };

  addUnimplementedNative("com/nokia/mid/ui/gestures/GestureInteractiveZone.getGestures.()I", 0);

  Native["com/sun/midp/security/SecurityHandler.checkPermission0.(II)Z"] = function(suiteId, permission) {
    return 1;
  };

  Native["com/sun/midp/security/SecurityHandler.checkPermissionStatus0.(II)I"] = function(suiteId, permission) {
    return 1;
  };

  Native["com/sun/midp/io/NetworkConnectionBase.initializeInternal.()V"] = function() {
    console.warn("NetworkConnectionBase.initializeInternal.()V not implemented");
  };

  Native["com/sun/j2me/content/RegistryStore.init.()Z"] = function() {
    console.warn("com/sun/j2me/content/RegistryStore.init.()Z not implemented");
    return 1;
  };

  Native["com/sun/j2me/content/RegistryStore.forSuite0.(I)Ljava/lang/String;"] = function(suiteID) {
    console.warn("com/sun/j2me/content/RegistryStore.forSuite0.(I)Ljava/lang/String; not implemented");
    return J2ME.newString("");
  };

  Native["com/sun/j2me/content/AppProxy.isInSvmMode.()Z"] = function() {
    console.warn("com/sun/j2me/content/AppProxy.isInSvmMode.()Z not implemented");
    return 0;
  };

  addUnimplementedNative("com/sun/j2me/content/InvocationStore.setCleanup0.(ILjava/lang/String;Z)V");
  addUnimplementedNative("com/sun/j2me/content/InvocationStore.get0.(Lcom/sun/j2me/content/InvocationImpl;ILjava/lang/String;IZ)I", 0);
  addUnimplementedNative("com/sun/j2me/content/InvocationStore.getByTid0.(Lcom/sun/j2me/content/InvocationImpl;II)I", 0);
  addUnimplementedNative("com/sun/j2me/content/InvocationStore.resetFlags0.(I)V");
  addUnimplementedNative("com/sun/j2me/content/AppProxy.midletIsRemoved.(ILjava/lang/String;)V");
  addUnimplementedNative("com/nokia/mid/ui/VirtualKeyboard.hideOpenKeypadCommand.(Z)V");
  addUnimplementedNative("com/nokia/mid/ui/VirtualKeyboard.suppressSizeChanged.(Z)V");

  Native["com/nokia/mid/ui/VirtualKeyboard.getCustomKeyboardControl.()Lcom/nokia/mid/ui/CustomKeyboardControl;"] = function() {
    throw $.newIllegalArgumentException("VirtualKeyboard::getCustomKeyboardControl() not implemented")
  };

  var keyboardVisibilityListener = null;
  Native["com/nokia/mid/ui/VirtualKeyboard.setVisibilityListener.(Lcom/nokia/mid/ui/KeyboardVisibilityListener;)V"] = function(listener) {
    keyboardVisibilityListener = listener;
  };

  Native["javax/microedition/lcdui/Display.getKeyboardVisibilityListener.()Lcom/nokia/mid/ui/KeyboardVisibilityListener;"] = function() {
    return keyboardVisibilityListener;
  };

  Native["com/nokia/mid/ui/VirtualKeyboard.isVisible.()Z"] = function() {
    return MIDP.isVKVisible() ? 1 : 0;
  };

  Native["com/nokia/mid/ui/VirtualKeyboard.getXPosition.()I"] = function() {
    return 0;
  };

  Native["com/nokia/mid/ui/VirtualKeyboard.getYPosition.()I"] = function() {
    // We should return the number of pixels between the top of the
    // screen and the top of the keyboard
    return canvas.height - getKeyboardHeight();
  };

  Native["com/nokia/mid/ui/VirtualKeyboard.getWidth.()I"] = function() {
    // The keyboard is always the same width as our window
    return window.innerWidth;
  };

  Native["com/nokia/mid/ui/VirtualKeyboard.getHeight.()I"] = function() {
    return getKeyboardHeight();
  };

  function getKeyboardHeight() {
    return physicalScreenHeight - window.innerHeight;
  };

  return {
    isVKVisible: isVKVisible,
    setFullScreen: setFullScreen,
    manifest: manifest,
    sendCommandEvent: sendCommandEvent,
    sendVirtualKeyboardEvent: sendVirtualKeyboardEvent,
    sendEndOfMediaEvent: sendEndOfMediaEvent,
    sendMediaSnapshotFinishedEvent: sendMediaSnapshotFinishedEvent,
    keyPress: keyPress,
    keyRelease: keyRelease,
    displayId: displayId,
    context2D: context2D,
    updatePhysicalScreenSize: updatePhysicalScreenSize,
    updateCanvas: updateCanvas,
    localizedStrings: localizedStrings,
  };
})();
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var FrameAnimator = function() {};

FrameAnimator.numRegistered = 0;

FrameAnimator.prototype._isRegistered = false;

FrameAnimator.prototype.register = function(x, y, maxFps, maxPps, listener) {
  this.x = x;
  this.y = y;
  this.maxFps = maxFps;
  this.maxPps = maxPps;
  this.listener = listener;
  this._isRegistered = true;
  ++FrameAnimator.numRegistered;
};

FrameAnimator.prototype.unregister = function() {
  this.x = null;
  this.y = null;
  this.maxFps = null;
  this.maxPps = null;
  this.listener = null;
  this._isRegistered = false;
  --FrameAnimator.numRegistered;
};

FrameAnimator.prototype.isRegistered = function() {
  return this._isRegistered;
};

Native["com/nokia/mid/ui/frameanimator/FrameAnimator.init.()V"] = function() {
  this.nativeObject = new FrameAnimator();
};

Native["com/nokia/mid/ui/frameanimator/FrameAnimator.register.(IISSLcom/nokia/mid/ui/frameanimator/FrameAnimatorListener;)Z"] = function(x, y, maxFps, maxPps, listener) {
  if (this.nativeObject.isRegistered()) {
    throw $.newIllegalStateException("FrameAnimator already registered");
  }

  if (!listener) {
    throw $.newNullPointerException("listener is null");
  }

  if (x < -65535 || x > 65535 || y < -65535 || y > 65535) {
    throw $.newIllegalArgumentException("coordinate out of bounds");
  }

  // XXX return false if FrameAnimator.numRegistered >= FRAME_ANIMATOR_MAX_CONCURRENT

  this.nativeObject.register(x, y, maxFps, maxPps, listener);
  return 1;
};

Native["com/nokia/mid/ui/frameanimator/FrameAnimator.unregister.()V"] = function() {
  if (!this.nativeObject.isRegistered()) {
    throw $.newIllegalStateException("FrameAnimator not registered");
  }

  this.nativeObject.unregister();
};

addUnimplementedNative("com/nokia/mid/ui/frameanimator/FrameAnimator.drag.(II)V");
addUnimplementedNative("com/nokia/mid/ui/frameanimator/FrameAnimator.kineticScroll.(IIIF)V");
addUnimplementedNative("com/nokia/mid/ui/frameanimator/FrameAnimator.limitedKineticScroll.(IIIFII)V");
addUnimplementedNative("com/nokia/mid/ui/frameanimator/FrameAnimator.stop.()V");

Native["com/nokia/mid/ui/frameanimator/FrameAnimator.isRegistered.()Z"] = function() {
  return this.nativeObject.isRegistered() ? 1 : 0;
};

Native["com/nokia/mid/ui/frameanimator/FrameAnimator.getNumRegisteredFrameAnimators.()I"] = function() {
  return FrameAnimator.numRegistered;
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var RECORD_STORE_BASE = "/RecordStore";

// The filesystem roots, which are used by both FileSystemRegistry.getRoots
// and System.getProperty to provide inquiring midlets with the list.  Each root
// must have a trailing slash.  See FileSystemRegistry.listRoots for more info.
MIDP.fsRoots = [
    "MemoryCard/",
    "Persistent/",
    "Phone/",
    "Private/",
];
// The names here should be localized.
MIDP.fsRootNames = [
    "Memory card",
    "Persistent",
    "Phone memory",
    "Private",
];

Native["com/sun/midp/io/j2me/storage/File.initConfigRoot.(I)Ljava/lang/String;"] = function(storageId) {
    return J2ME.newString("assets/" + storageId + "/");
};

Native["com/sun/midp/io/j2me/storage/File.initStorageRoot.(I)Ljava/lang/String;"] = function(storageId) {
    return J2ME.newString("assets/" + storageId + "/");
};

Native["com/sun/midp/midletsuite/MIDletSuiteStorage.getSecureFilenameBase.(I)Ljava/lang/String;"] = function(id) {
    return J2ME.newString("");
};

Native["com/sun/midp/rms/RecordStoreUtil.exists.(Ljava/lang/String;Ljava/lang/String;I)Z"] =
function(filenameBase, name, ext) {
    var path = RECORD_STORE_BASE + "/" + J2ME.fromJavaString(filenameBase) + "/" + J2ME.fromJavaString(name) + "." + ext;
    return fs.exists(path) ? 1 : 0;
};

Native["com/sun/midp/rms/RecordStoreUtil.deleteFile.(Ljava/lang/String;Ljava/lang/String;I)V"] =
function(filenameBase, name, ext) {
    var path = RECORD_STORE_BASE + "/" + J2ME.fromJavaString(filenameBase) + "/" + J2ME.fromJavaString(name) + "." + ext;
    fs.remove(path);
};

Native["com/sun/midp/rms/RecordStoreFile.getNumberOfStores.(Ljava/lang/String;)I"] =
function(filenameBase) {
    var path = RECORD_STORE_BASE + "/" + J2ME.fromJavaString(filenameBase);
    return fs.list(path).length;
};

Native["com/sun/midp/rms/RecordStoreFile.getRecordStoreList.(Ljava/lang/String;[Ljava/lang/String;)V"] =
function (filenameBase, names) {
    var path = RECORD_STORE_BASE + "/" + J2ME.fromJavaString(filenameBase);
    var files = fs.list(path);
    for (var i = 0; i < files.length; i++) {
        names[i] = J2ME.newString(files[i]);
    }
};

Native["com/sun/midp/rms/RecordStoreFile.spaceAvailableNewRecordStore0.(Ljava/lang/String;I)I"] = function(filenameBase, storageId) {
    // Pretend there is 50MiB available.  Our implementation is backed
    // by IndexedDB, which has no actual limit beyond space available on device,
    // which I don't think we can determine.  But this should be sufficient
    // to convince the MIDlet to use the API as needed.
    return 50 * 1024 * 1024;
};

Native["com/sun/midp/rms/RecordStoreFile.spaceAvailableRecordStore.(ILjava/lang/String;I)I"] = function(handle, filenameBase, storageId) {
    // Pretend there is 50MiB available.  Our implementation is backed
    // by IndexedDB, which has no actual limit beyond space available on device,
    // which I don't think we can determine.  But this should be sufficient
    // to convince the MIDlet to use the API as needed.
    return 50 * 1024 * 1024;
};

Native["com/sun/midp/rms/RecordStoreFile.openRecordStoreFile.(Ljava/lang/String;Ljava/lang/String;I)I"] =
function(filenameBase, name, ext) {
    var ctx = $.ctx;

    var path = RECORD_STORE_BASE + "/" + J2ME.fromJavaString(filenameBase) + "/" + J2ME.fromJavaString(name) + "." + ext;

    function open() {
        asyncImpl("I", new Promise(function(resolve, reject) {
            fs.open(path, function(fd) {
                if (fd == -1) {
                    ctx.setAsCurrentContext();
                    reject($.newIOException("openRecordStoreFile: open failed"));
                } else {
                    resolve(fd); // handle
                }
            });
        }));
    }

    if (fs.exists(path)) {
        open();
    } else {
        // Per the reference impl, create the file if it doesn't exist.
        var dirname = fs.dirname(path);
        if (!fs.mkdirp(dirname)) {
            throw $.newIOException("openRecordStoreFile: mkdirp failed");
        }

        if (!fs.create(path, new Blob())) {
            throw $.newIOException("openRecordStoreFile: create failed");
        }

        open();
    }
};

Native["com/sun/midp/rms/RecordStoreFile.setPosition.(II)V"] = function(handle, pos) {
    fs.setpos(handle, pos);
};

Native["com/sun/midp/rms/RecordStoreFile.readBytes.(I[BII)I"] = function(handle, buf, offset, numBytes) {
    var from = fs.getpos(handle);
    var to = from + numBytes;
    var readBytes = fs.read(handle, from, to);

    if (readBytes.byteLength <= 0) {
        throw $.newIOException("handle invalid or segment indices out of bounds");
    }

    var subBuffer = buf.subarray(offset, offset + readBytes.byteLength);
    for (var i = 0; i < readBytes.byteLength; i++) {
        subBuffer[i] = readBytes[i];
    }
    return readBytes.byteLength;
};

Native["com/sun/midp/rms/RecordStoreFile.writeBytes.(I[BII)V"] = function(handle, buf, offset, numBytes) {
    fs.write(handle, buf.subarray(offset, offset + numBytes));
};

Native["com/sun/midp/rms/RecordStoreFile.commitWrite.(I)V"] = function(handle) {
    fs.flush(handle);
};

Native["com/sun/midp/rms/RecordStoreFile.closeFile.(I)V"] = function(handle) {
    fs.close(handle);
};

Native["com/sun/midp/rms/RecordStoreFile.truncateFile.(II)V"] = function(handle, size) {
    fs.flush(handle);
    fs.ftruncate(handle, size);
};

MIDP.RecordStoreCache = [];

Native["com/sun/midp/rms/RecordStoreSharedDBHeader.getLookupId0.(ILjava/lang/String;I)I"] =
function(suiteId, jStoreName, headerDataSize) {
    var storeName = J2ME.fromJavaString(jStoreName);

    var sharedHeader =
        MIDP.RecordStoreCache.filter(function(v) { return (v && v.suiteId == suiteId && v.storeName == storeName); })[0];
    if (!sharedHeader) {
        sharedHeader = {
            suiteId: suiteId,
            storeName: storeName,
            headerVersion: 0,
            headerData: null,
            headerDataSize: headerDataSize,
            refCount: 0,
            // Use cache indices as IDs, so we can look up objects by index.
            lookupId: MIDP.RecordStoreCache.length,
        };
        MIDP.RecordStoreCache.push(sharedHeader);
    }
    ++sharedHeader.refCount;

    return sharedHeader.lookupId;
};

Native["com/sun/midp/rms/RecordStoreSharedDBHeader.shareCachedData0.(I[BI)I"] = function(lookupId, headerData, headerDataSize) {
    var sharedHeader = MIDP.RecordStoreCache[lookupId];
    if (!sharedHeader) {
        throw $.newIllegalStateException("invalid header lookup ID");
    }

    if (!headerData) {
        throw $.newIllegalArgumentException("header data is null");
    }

    var size = headerDataSize;
    if (size > sharedHeader.headerDataSize) {
        size = sharedHeader.headerDataSize;
    }
    sharedHeader.headerData = headerData.buffer.slice(0, size);
    ++sharedHeader.headerVersion;

    return sharedHeader.headerVersion;
};

Native["com/sun/midp/rms/RecordStoreSharedDBHeader.updateCachedData0.(I[BII)I"] =
function(lookupId, headerData, headerDataSize, headerVersion) {
    var sharedHeader = MIDP.RecordStoreCache[lookupId];
    if (!sharedHeader) {
        throw $.newIllegalStateException("invalid header lookup ID");
    }

    if (!headerData) {
        throw $.newIllegalArgumentException("header data is null");
    }

    if (sharedHeader.headerVersion > headerVersion && sharedHeader.headerData) {
        var size = sharedHeader.headerDataSize;
        if (size > headerDataSize) {
            size = headerDataSize;
        }
        var sharedHeaderData = new Int8Array(sharedHeader.headerData);
        for (var i = 0; i < size; i++) {
            headerData[i] = sharedHeaderData[i];
        }
        return sharedHeader.headerVersion;
    }

    return headerVersion;
};

Native["com/sun/midp/rms/RecordStoreSharedDBHeader.getHeaderRefCount0.(I)I"] = function(lookupId) {
    var sharedHeader = MIDP.RecordStoreCache[lookupId];
    if (!sharedHeader) {
        throw $.newIllegalStateException("invalid header lookup ID");
    }

    return sharedHeader.refCount;
};

Native["com/sun/midp/rms/RecordStoreSharedDBHeader.cleanup0.()V"] = function() {
    var lookupId = this.lookupId;
    if (MIDP.RecordStoreCache[lookupId] &&
        --MIDP.RecordStoreCache[lookupId].refCount <= 0) {
        // Set to null instead of removing from array to maintain
        // correspondence between lookup IDs and array indices.
        MIDP.RecordStoreCache[lookupId] = null;
    }
};

// In the reference implementation, finalize is identical to cleanup0.
Native["com/sun/midp/rms/RecordStoreSharedDBHeader.finalize.()V"] =
    Native["com/sun/midp/rms/RecordStoreSharedDBHeader.cleanup0.()V"];

Native["com/sun/midp/rms/RecordStoreRegistry.getRecordStoreListeners.(ILjava/lang/String;)[I"] =
function(suiteId, storeName) {
    console.warn("RecordStoreRegistry.getRecordStoreListeners.(IL...String;)[I not implemented (" +
                 suiteId + ", " + J2ME.fromJavaString(storeName) + ")");
    return null;
};

Native["com/sun/midp/rms/RecordStoreRegistry.sendRecordStoreChangeEvent.(ILjava/lang/String;II)V"] =
function(suiteId, storeName, changeType, recordId) {
    console.warn("RecordStoreRegistry.sendRecordStoreChangeEvent.(IL...String;II)V not implemented (" +
                 suiteId + ", " + J2ME.fromJavaString(storeName) + ", " + changeType + ", " + recordId + ")");
};

Native["com/sun/midp/rms/RecordStoreRegistry.startRecordStoreListening.(ILjava/lang/String;)V"] =
function(suiteId, storeName) {
    console.warn("RecordStoreRegistry.startRecordStoreListening.(IL...String;)V not implemented (" +
                 suiteId + ", " + J2ME.fromJavaString(storeName) + ")");
};

Native["com/sun/midp/rms/RecordStoreRegistry.stopRecordStoreListening.(ILjava/lang/String;)V"] =
function(suiteId, storeName) {
    console.warn("RecordStoreRegistry.stopRecordStoreListening.(IL...String;)V not implemented (" +
                 suiteId + ", " + J2ME.fromJavaString(storeName) + ")");
};

Native["com/sun/midp/rms/RecordStoreRegistry.stopAllRecordStoreListeners.(I)V"] = function(taskId) {
    console.warn("RecordStoreRegistry.stopAllRecordStoreListeners.(I)V not implemented (" + taskId + ")");
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.create.()V"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.create: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.create: ignored file");
        return;
    }

    var stat = fs.stat(pathname);

    if (stat !== null || !fs.create(pathname, new Blob())) {
        throw $.newIOException("error creating " + pathname);
    }
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.exists.()Z"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.exists: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.exists: ignored file");
        return 1;
    }

    var exists = fs.exists(pathname);
    DEBUG_FS && console.log("DefaultFileHandler.exists: " + exists);
    return exists ? 1 : 0;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.isDirectory.()Z"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.isDirectory: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.isDirectory: ignored file");
        return 0;
    }

    var stat = fs.stat(pathname);
    var isDirectory = !!stat && stat.isDir;
    DEBUG_FS && console.log("DefaultFileHandler.isDirectory: " + isDirectory);
    return isDirectory ? 1 : 0;
}

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.delete.()V"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.delete: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.delete: ignored file");
        return;
    }

    if (!fs.remove(pathname)) {
        throw $.newIOException();
    }
};


Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.rename0.(Ljava/lang/String;)V"] = function(newName) {
    var pathname = J2ME.fromJavaString(this.nativePath);
    var newPathname = J2ME.fromJavaString(newName);
    DEBUG_FS && console.log("DefaultFileHandler.rename0: " + pathname + " to " + newPathname);

    if (fs.exists(newPathname)) {
        throw $.newIOException("file with new name exists");
    }

    if (!fs.rename(pathname, newPathname)) {
        throw $.newIOException("error renaming file");
    }
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.truncate.(J)V"] = function(byteOffset) {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.lastModified: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.lastModified: ignored file");
        return;
    }

    var stat = fs.stat(pathname);

    if (!stat) {
        throw $.newIOException("file does not exist");
    }

    if (stat.isDir) {
        throw $.newIOException("file is directory");
    }

    // TODO: If the file is open, flush it first.

    fs.truncate(pathname, byteOffset.toNumber());
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.fileSize.()J"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.fileSize: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.fileSize: ignored file");
        return Long.fromNumber(0);
    }

    return Long.fromNumber(fs.size(pathname));
};

addUnimplementedNative("com/sun/cdc/io/j2me/file/DefaultFileHandler.directorySize.(Z)J", Long.fromNumber(0));

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.canRead.()Z"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.canRead: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.canRead: ignored file");
        return 1;
    }

    return fs.exists(pathname) ? 1 : 0;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.canWrite.()Z"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.canWrite: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.canWrite: ignored file");
        return 1;
    }

    return fs.exists(pathname) ? 1 : 0;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.isHidden0.()Z"] = function() {
    // Per the comment in DefaultFileHandler.isHidden, we pretend we're Unix
    // and always return false.
    return 0;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.setReadable.(Z)V"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.setReadable: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.setReadable: ignored file");
        return;
    }

    if (!fs.exists(pathname)) {
        throw $.newIOException("file does not exist");
    }

    // Otherwise this is a noop, as files are always readable in our filesystem.
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.setWritable.(Z)V"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.setWritable: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.setWritable: ignored file");
        return;
    }

    if (!fs.exists(pathname)) {
        throw $.newIOException("file does not exist");
    }

    // Otherwise this is a noop, as files are always writable in our filesystem.
};

addUnimplementedNative("com/sun/cdc/io/j2me/file/DefaultFileHandler.setHidden0.(Z)V");

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.mkdir.()V"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.mkdir: " + pathname);

    if (!fs.mkdir(pathname)) {
        throw $.newIOException("error creating " + pathname);
    };
};

// Pretend there is 1GiB in total and available.
addUnimplementedNative("com/sun/cdc/io/j2me/file/DefaultFileHandler.availableSize.()J",
                       Long.fromNumber(1024 * 1024 * 1024));
addUnimplementedNative("com/sun/cdc/io/j2me/file/DefaultFileHandler.totalSize.()J",
                       Long.fromNumber(1024 * 1024 * 1024));

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.lastModified.()J"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.lastModified: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.lastModified: ignored file");
        return Long.fromNumber(0);
    }

    var stat = fs.stat(pathname);
    return Long.fromNumber(stat != null ? stat.mtime : 0);
};

MIDP.markFileHandler = function(fileHandler, mode, state) {
    switch(mode) {
        case "read":
            fileHandler.isOpenForRead = state ? 1 : 0;
            break;
        case "write":
            fileHandler.isOpenForWrite = state ? 1 : 0;
            break;
    }
};

MIDP.openFileHandler = function(fileHandler, mode) {
    var pathname = J2ME.fromJavaString(fileHandler.nativePath);
    DEBUG_FS && console.log("MIDP.openFileHandler: " + pathname + " for " + mode);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("MIDP.openFileHandler: ignored file");
        return;
    }

    if (fileHandler.nativeDescriptor !== -1) {
        // The file is already open, so we only have to reset its position
        // and mark it as open.
        var fd = fileHandler.nativeDescriptor;
        fs.setpos(fd, 0);
        MIDP.markFileHandler(fileHandler, mode, true);
        return;
    }

    var stat = fs.stat(pathname);

    if (!stat) {
        throw $.newIOException("file does not exist");
    }

    if (stat.isDir) {
        throw $.newIOException("file is a directory");
    }

    var ctx = $.ctx;

    asyncImpl("V", new Promise(function(resolve, reject) {
        fs.open(pathname, function(fd) {
            if (fd === -1) {
              ctx.setAsCurrentContext();
              reject($.newIOException("Failed to open file handler for " + pathname));
              return;
            }
            fileHandler.nativeDescriptor = fd;
            MIDP.markFileHandler(fileHandler, mode, true);
            resolve();
        });
    }));
};

MIDP.closeFileHandler = function(fileHandler, mode) {
    var pathname = J2ME.fromJavaString(fileHandler.nativePath);
    DEBUG_FS && console.log("MIDP.closeFileHandler: " + pathname + " for " + mode);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("MIDP.closeFileHandler: ignored file");
        return;
    }

    MIDP.markFileHandler(fileHandler, mode, false);

    var isOpenForOtherMode;
    switch(mode) {
        case "read":
            isOpenForOtherMode = fileHandler.isOpenForWrite;
            break;
        case "write":
            isOpenForOtherMode = fileHandler.isOpenForRead;
            break;
    }

    // If the file isn't open for the other mode, but it still has a native
    // descriptor, then it's time to close the native file.  Otherwise, we leave
    // it open until it gets closed for the other mode.
    if (isOpenForOtherMode === 0 && fileHandler.nativeDescriptor !== -1) {
        fs.close(fileHandler.nativeDescriptor);
        fileHandler.nativeDescriptor = -1;
    }
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.openForRead.()V"] = function() {
    MIDP.openFileHandler(this, "read");
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.closeForRead.()V"] = function() {
    MIDP.closeFileHandler(this, "read");
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.openForWrite.()V"] = function() {
    MIDP.openFileHandler(this, "write");
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.closeForWrite.()V"] = function() {
    MIDP.closeFileHandler(this, "write");
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.closeForReadWrite.()V"] = function() {
    MIDP.closeFileHandler(this, "read");
    MIDP.closeFileHandler(this, "write");
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.read.([BII)I"] = function(b, off, len) {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.read: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.read: ignored file");
        return -1;
    }

    var fd = this.nativeDescriptor;

    if (off < 0 || len < 0 || off > b.byteLength || (b.byteLength - off) < len) {
        throw $.newIOException();
    }

    if (b.byteLength == 0 || len == 0) {
        return 0;
    }

    var curpos = fs.getpos(fd);
    var data = fs.read(fd, curpos, curpos + len);
    b.set(data, off);

    return (data.byteLength > 0) ? data.byteLength : -1;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.write.([BII)I"] = function(b, off, len) {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.write: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.write: ignored file");
        return len;
    }

    var fd = this.nativeDescriptor;
    fs.write(fd, b.subarray(off, off + len));
    // The "length of data really written," which is always the length requested
    // in our implementation.
    return len;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.positionForWrite.(J)V"] = function(offset) {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.positionForWrite: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.positionForWrite: ignored file");
        return;
    }

    var fd = this.nativeDescriptor;
    fs.setpos(fd, offset.toNumber());
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.flush.()V"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.flush: " + pathname);
    if (config.ignoredFiles.has(pathname)) {
        DEBUG_FS && console.log("DefaultFileHandler.flush: ignored file");
        return;
    }

    var fd = this.nativeDescriptor;
    fs.flush(fd);
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.close.()V"] = function() {
    DEBUG_FS && console.log("DefaultFileHandler.close: " + J2ME.fromJavaString(this.nativePath));

    MIDP.closeFileHandler(this, "read");
    MIDP.closeFileHandler(this, "write");
};

// Not implemented because we don't use native pointers, so we've commented out
// calls to this private method in DefaultFileHandler.
addUnimplementedNative("com/sun/cdc/io/j2me/file/DefaultFileHandler.getNativeName.(Ljava/lang/String;J)J",
                       Long.fromNumber(0));

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.getFileSeparator.()C"] = function() {
    return "/".charCodeAt(0);
}

MIDP.openDirs = new Map();
MIDP.openDirHandle = 0;

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.openDir.()J"] = function() {
    var pathname = J2ME.fromJavaString(this.nativePath);
    DEBUG_FS && console.log("DefaultFileHandler.openDir: " + pathname);

    try {
        var files = fs.list(pathname);
    } catch(ex) {
        if (ex.message == "Path does not exist") {
            throw $.newIOException("Directory does not exist: file://" + pathname);
        }
        if (ex.message == "Path is not a directory") {
            throw $.newIOException("Connection is open on a file: file://" + pathname);
        }
    }

    var openDirHandle = ++MIDP.openDirHandle;

    MIDP.openDirs.set(openDirHandle, {
        files: files,
        index: -1,
    });

    return Long.fromNumber(openDirHandle);
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.closeDir.(J)V"] = function(dirHandle) {
    MIDP.openDirs.delete(dirHandle.toNumber());
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.dirGetNextFile.(JZ)Ljava/lang/String;"] =
function(dirHandle, includeHidden) {
    var iterator = MIDP.openDirs.get(dirHandle.toNumber());
    var nextFile = iterator.files[++iterator.index];
DEBUG_FS && console.log(iterator.index + " " + nextFile);
    return nextFile ? J2ME.newString(nextFile) : null;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.getNativePathForRoot.(Ljava/lang/String;)Ljava/lang/String;"] =
function(root) {
// XXX Ensure root is in MIDP.fsRoots?
DEBUG_FS && console.log("getNativePathForRoot: " + J2ME.fromJavaString(root));
    var nativePath = J2ME.newString("/" + J2ME.fromJavaString(root));
    return nativePath;
};

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.illegalFileNameChars0.()Ljava/lang/String;"] = function() {
    return J2ME.newString('<>:"\\|?');
};

addUnimplementedNative("com/sun/cdc/io/j2me/file/DefaultFileHandler.initialize.()V");

Native["com/sun/cdc/io/j2me/file/DefaultFileHandler.getSuiteIdString.(I)Ljava/lang/String;"] = function(id) {
DEBUG_FS && console.log("getSuiteIdString: " + id);
    // return J2ME.newString(id.toString());
    // The implementation adds this to the path of the file, presumably
    // to segregate files by midlet, but we only run a single midlet
    // per installation, so presumably we don't have to do that.
    return J2ME.newString("");
};

Native["com/sun/cdc/io/j2me/file/Protocol.available.()I"] = function() {
    var fd = this.fileHandler.nativeDescriptor;
    var available = fs.getsize(fd) - fs.getpos(fd);
    DEBUG_FS && console.log("Protocol.available: " + J2ME.fromJavaString(this.fileHandler.nativePath) + ": " + available);
    return available;
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.open.(Ljava/lang/String;I)I"] = function(fileName, mode) {
    var path = "/" + J2ME.fromJavaString(fileName);

    var ctx = $.ctx;

    function open() {
        asyncImpl("I", new Promise(function(resolve, reject) {
            fs.open(path, function(fd) {
                if (fd == -1) {
                    ctx.setAsCurrentContext();
                    reject($.newIOException("RandomAccessStream::open(" + path + ") failed opening the file"));
                } else {
                    resolve(fd);
                }
            });
        }));
    }

    if (fs.exists(path)) {
        open();
    } else if (mode == 1) {
        throw $.newIOException("RandomAccessStream::open(" + path + ") file doesn't exist");
    } else if (fs.create(path, new Blob())) {
        open();
    } else {
        throw $.newIOException("RandomAccessStream::open(" + path + ") failed creating the file");
    }
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.read.(I[BII)I"] =
function(handle, buffer, offset, length) {
    var from = fs.getpos(handle);
    var to = from + length;
    var readBytes = fs.read(handle, from, to);

    if (readBytes.byteLength <= 0) {
        return -1;
    }

    var subBuffer = buffer.subarray(offset, offset + readBytes.byteLength);
    for (var i = 0; i < readBytes.byteLength; i++) {
        subBuffer[i] = readBytes[i];
    }
    return readBytes.byteLength;
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.write.(I[BII)V"] =
function(handle, buffer, offset, length) {
    fs.write(handle, buffer.subarray(offset, offset + length));
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.commitWrite.(I)V"] = function(handle) {
    fs.flush(handle);
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.position.(II)V"] = function(handle, position) {
    fs.setpos(handle, position);
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.sizeOf.(I)I"] = function(handle) {
    var size = fs.getsize(handle);

    if (size == -1) {
        throw $.newIOException("RandomAccessStream::sizeOf(" + handle + ") failed");
    }

    return size;
};

Native["com/sun/midp/io/j2me/storage/RandomAccessStream.close.(I)V"] = function(handle) {
    fs.close(handle);
};

Native["javax/microedition/io/file/FileSystemRegistry.getRoots.()[Ljava/lang/String;"] = function() {
    var array = J2ME.newStringArray(MIDP.fsRoots.length);

    for (var i = 0; i < MIDP.fsRoots.length; i++) {
        array[i] = J2ME.newString(MIDP.fsRoots[i]);
    }

    return array;
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



Native["com/sun/midp/crypto/PRand.getRandomBytes.([BI)Z"] = function(b, nbytes) {
    window.crypto.getRandomValues(b.subarray(0, nbytes));
    return 1;
};

MIDP.hashers = new Map();

/**
 * A 16-byte Int32Array whose values are all initialized to zero.
 * Useful for comparing with other such arrays to determine whether or not
 * they've been populated with other values.  Also useful for resetting
 * data arrays back to their initial state.
 */
MIDP.emptyDataArray = new Int32Array(16);

MIDP.getMD5Hasher = function(data) {
    if (!util.compareTypedArrays(data, MIDP.emptyDataArray)) {
        return MIDP.hashers.get(data);
    }

    var hasher = forge.md.md5.create();
    window.crypto.getRandomValues(data);
    MIDP.hashers.set(data, hasher);
    return hasher;
};

MIDP.bin2String = function(array) {
  var result = "";
  for (var i = 0; i < array.length; i++) {
    result += String.fromCharCode(array[i] & 0xff);
  }
  return result;
};

Native["com/sun/midp/crypto/MD5.nativeUpdate.([BII[I[I[I[I)V"] = function(inBuf, inOff, inLen, state, num, count, data) {
    MIDP.getMD5Hasher(data).update(MIDP.bin2String(new Int8Array(inBuf.subarray(inOff, inOff + inLen))));
};

Native["com/sun/midp/crypto/MD5.nativeFinal.([BII[BI[I[I[I[I)V"] = function(inBuf, inOff, inLen, outBuf, outOff, state, num, count, data) {
    var hasher = MIDP.getMD5Hasher(data);

    if (inBuf) {
        // digest passes `null` for inBuf, and there are no other callers,
        // so this should never happen; but I'm including it for completeness
        // (and in case a subclass ever uses it).
        hasher.update(MIDP.bin2String(inBuf.subarray(inOff, inOff + inLen)));
    }

    var hash = hasher.digest();

    for (var i = 0; i < hash.length(); i++) {
        outBuf[outOff + i] = hash.at(i);
    }

    // XXX Call the reset method instead to completely reset the object.
    data.set(MIDP.emptyDataArray);

    MIDP.hashers.delete(data);
};

Native["com/sun/midp/crypto/MD5.nativeClone.([I)V"] = function(data) {
    for (var key of MIDP.hashers.keys()) {
        if (util.compareTypedArrays(key, data)) {
            var value = MIDP.hashers.get(key);
            var hasher = value.clone();
            window.crypto.getRandomValues(data);
            MIDP.hashers.set(data, hasher);
            break;
        }
    }
};

var hexEncodeArray = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', ];

function bytesToHexString(array) {
    var s = '';
    for (var i = 0; i < array.length; i++) {
      var code = array[i] & 0xFF;
      s += hexEncodeArray[code >>> 4];
      s += hexEncodeArray[code & 0x0F];
    }
    return s;
}

function hexStringToBytes(hex) {
    // The jsbn library (that provides BigInteger support) produces a
    // hexadecimal string that doesn't contain a leading 0 (e.g. "010010" would
    // be "10010").
    var length = hex.length / 2;
    if (length % 1 !== 0) {
      hex = "0" + hex;
    }

    var bytes = new Int8Array(hex.length / 2);

    for (var i = 0; i < hex.length; i += 2) {
        bytes[i/2] = parseInt(hex.substr(i, 2), 16);
    }

    return bytes;
}

Native["com/sun/midp/crypto/RSA.modExp.([B[B[B[B)I"] = function(data, exponent, modulus, result) {
    // The jsbn library doesn't work well with typed arrays, so we're using this
    // hack of translating the numbers to hexadecimal strings before handing
    // them to jsbn (and we're getting the result back in a hex string).

    var bnBase = new BigInteger(bytesToHexString(data), 16);
    var bnExponent = new BigInteger(bytesToHexString(exponent), 16);
    var bnModulus = new BigInteger(bytesToHexString(modulus), 16);
    var bnRemainder = bnBase.modPow(bnExponent, bnModulus);
    var remainder = hexStringToBytes(bnRemainder.toString(16));

    result.set(remainder);
    return remainder.length;
};

Native["com/sun/midp/crypto/ARC4.nativetx.([B[I[I[BII[BI)V"] = function(S, X, Y, inbuf, inoff, inlen, outbuf, outoff) {
    var x = X[0];
    var y = Y[0];

    for (var i = 0; i < inlen; i++) {
        x = (x + 1) & 0xff;
        y = (y + S[x]) & 0xff;

        var tx = S[x];
        S[x] = S[y];
        S[y] = tx;

        var ty = S[x] + S[y] & 0xff;

        outbuf[i+outoff] = S[ty] ^ inbuf[i+inoff];
    }

    X[0] = x;
    Y[0] = y;
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var currentlyFocusedTextEditor;
(function(Native) {
    var tempContext = document.createElement("canvas").getContext("2d");
    tempContext.canvas.width = 0;
    tempContext.canvas.height = 0;

    var NativeDisplay = function() {
        this.fullScreen = 1;
    };

    var NativeDisplays = {
        get: function(id) {
            var d = this._map.get(id);
            if (!d) {
                d = new NativeDisplay();
                this._map.set(id, d);
            }
            return d;
        },

        _map: new Map(),

        foreground: -1
    };

    Native["com/sun/midp/lcdui/DisplayDeviceContainer.getDisplayDevicesIds0.()[I"] = function() {
        var ids = J2ME.newIntArray( 1);
        ids[0] = 1;
        return ids;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.getDisplayName0.(I)Ljava/lang/String;"] = function(id) {
        return null;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.isDisplayPrimary0.(I)Z"] = function(id) {
        console.warn("DisplayDevice.isDisplayPrimary0.(I)Z not implemented (" + id + ")");
        return 1;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.isbuildInDisplay0.(I)Z"] = function(id) {
        return 1;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.getDisplayCapabilities0.(I)I"] = function(id) {
        return 0x3ff;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.isDisplayPenSupported0.(I)Z"] = function(id) {
        return 1;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.isDisplayPenMotionSupported0.(I)Z"] = function(id) {
        return 1;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.reverseOrientation0.(I)Z"] = function(id) {
        return 0;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.getReverseOrientation0.(I)Z"] = function(id) {
        return 0;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.getScreenWidth0.(I)I"] = function(id) {
        return MIDP.context2D.canvas.width;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.getScreenHeight0.(I)I"] = function(id) {
        return MIDP.context2D.canvas.height;
    };

    Native["com/sun/midp/lcdui/DisplayDevice.displayStateChanged0.(II)V"] = function(hardwareId, state) {
        console.warn("DisplayDevice.displayStateChanged0.(II)V not implemented (" + hardwareId + ", " + state + ")");
    };

    Native["com/sun/midp/lcdui/DisplayDevice.setFullScreen0.(IIZ)V"] = function(hardwareId, displayId, mode) {
        var d = NativeDisplays.get(displayId);
        d.fullScreen = mode;
        if (NativeDisplays.foreground === displayId) {
            MIDP.setFullScreen(mode);
        }
    };

    Native["com/sun/midp/lcdui/DisplayDevice.gainedForeground0.(II)V"] = function(hardwareId, displayId) {
        document.getElementById("background-screen").style.display = "none";
        document.getElementById("splash-screen").style.display = "none";
        var d = NativeDisplays.get(displayId);
        NativeDisplays.foreground = displayId;
        MIDP.setFullScreen(d.fullScreen);

        asyncImpl("V", emoji.loadData());

        if (profile === 2) {
          // Use setTimeout to make sure our profiling enter/leave stack is not unpaired.
          setTimeout(function () {
            stopAndSaveTimeline();
          }, 0);
        }
    };

    Native["com/sun/midp/lcdui/DisplayDeviceAccess.vibrate0.(IZ)Z"] = function(displayId, on) {
        return 1;
    };

    Native["com/sun/midp/lcdui/DisplayDeviceAccess.isBacklightSupported0.(I)Z"] = function(displayId) {
        return 1;
    };


    addUnimplementedNative("com/sun/midp/lcdui/DisplayDevice.refresh0.(IIIIII)V");

    function swapRB(pixel) {
        return (pixel & 0xff00ff00) | ((pixel >> 16) & 0xff) | ((pixel & 0xff) << 16);
    }

    function swapRBAndSetAlpha(pixel) {
        return swapRB(pixel) | 0xff000000;
    }

    function ABGRToARGB(abgrData, argbData, width, height, offset, scanlength) {
        var i = 0;
        for (var y = 0; y < height; y++) {
            var j = offset + y * scanlength;

            for (var x = 0; x < width; x++) {
                argbData[j++] = swapRB(abgrData[i++]);
            }
        }
    }

    function ABGRToARGB4444(abgrData, argbData, width, height, offset, scanlength) {
        var i = 0;
        for (var y = 0; y < height; y++) {
            var j = offset + y * scanlength;

            for (var x = 0; x < width; x++) {
                var abgr = abgrData[i++];
                argbData[j++] = (abgr & 0xF0000000) >>> 16 |
                                (abgr & 0x000000F0) << 4 |
                                (abgr & 0x0000F000) >> 8 |
                                (abgr & 0x00F00000) >>> 20;
            }
        }
    }

    var ABGRToRGB565_R_MASK = parseInt("000000000000000011111000", 2);
    var ABGRToRGB565_G_MASK = parseInt("000000001111110000000000", 2);
    var ABGRToRGB565_B_MASK = parseInt("111110000000000000000000", 2);

    function ABGRToRGB565(abgrData, rgbData, width, height, offset, scanlength) {
        var i = 0;
        for (var y = 0; y < height; y++) {
            var j = offset + y * scanlength;

            for (var x = 0; x < width; x++) {
                var abgr = abgrData[i++];
                rgbData[j++] = (abgr & ABGRToRGB565_R_MASK) << 8 |
                               (abgr & ABGRToRGB565_G_MASK) >>> 5 |
                               (abgr & ABGRToRGB565_B_MASK) >>> 19;
            }
        }
    }

    function ARGBToABGR(argbData, abgrData, width, height, offset, scanlength) {
        var i = 0;
        for (var y = 0; y < height; ++y) {
            var j = offset + y * scanlength;

            for (var x = 0; x < width; ++x) {
                abgrData[i++] = swapRB(argbData[j++]);
            }
        }
    }

    function ARGBTo1BGR(argbData, abgrData, width, height, offset, scanlength) {
        var i = 0;
        for (var y = 0; y < height; ++y) {
            var j = offset + y * scanlength;

            for (var x = 0; x < width; ++x) {
                abgrData[i++] = swapRB(argbData[j++]) | 0xFF000000;
            }
        }
    }

    function ARGB4444ToABGR(argbData, abgrData, width, height, offset, scanlength) {
        var i = 0;
        for (var y = 0; y < height; ++y) {
            var j = offset + y * scanlength;

            for (var x = 0; x < width; ++x) {
                var argb = argbData[j++];
                abgrData[i++] = (argb & 0xF000) << 16 |
                                (argb & 0x0F00) >>> 4 |
                                (argb & 0x00F0) << 8 |
                                (argb & 0x000F) << 20;
            }
        }
    }

    function initImageData(imageData, width, height) {
        var canvas = document.createElement("canvas");
        imageData.context = canvas.getContext("2d");
        setImageDataDimensions(imageData, width, height);
        return imageData.context;
    }

    function setImageDataDimensions(imageData, width, height) {
        var canvas = imageData.context.canvas;
        canvas.width = width;
        canvas.height = height;

        imageData.width = width;
        imageData.height = height;
    }

    Native["javax/microedition/lcdui/ImageDataFactory.createImmutableImageDecodeImage.(Ljavax/microedition/lcdui/ImageData;[BII)V"] =
    function(imageData, bytes, offset, length) {
        var ctx = $.ctx;
        asyncImpl("V", new Promise(function(resolve, reject) {
            var blob = new Blob([bytes.subarray(offset, offset + length)], { type: "image/png" });
            var img = new Image();
            img.src = URL.createObjectURL(blob);
            img.onload = function() {
                var context = initImageData(imageData, img.naturalWidth, img.naturalHeight);
                context.drawImage(img, 0, 0);

                URL.revokeObjectURL(img.src);
                resolve();
            }
            img.onerror = function(e) {
               URL.revokeObjectURL(img.src);
               ctx.setAsCurrentContext();
               reject($.newIllegalArgumentException("error decoding image"));
            }
        }));
    };

    Native["javax/microedition/lcdui/ImageDataFactory.createImmutableImageDataRegion.(Ljavax/microedition/lcdui/ImageData;Ljavax/microedition/lcdui/ImageData;IIIIIZ)V"] =
    function(dataDest, dataSource, x, y, width, height, transform, isMutable) {
        var context = initImageData(dataDest, width, height);

        if (transform === TRANS_MIRROR || transform === TRANS_MIRROR_ROT180) {
            context.scale(-1, 1);
        } else if (transform === TRANS_MIRROR_ROT90 || transform === TRANS_MIRROR_ROT270) {
            context.scale(1, -1);
        } else if (transform === TRANS_ROT90 || transform === TRANS_MIRROR_ROT90) {
            context.rotate(Math.PI / 2);
        } else if (transform === TRANS_ROT180 || transform === TRANS_MIRROR_ROT180) {
            context.rotate(Math.PI);
        } else if (transform === TRANS_ROT270 || transform === TRANS_MIRROR_ROT270) {
            context.rotate(1.5 * Math.PI);
        }

        var imgdata = dataSource.context.getImageData(x, y, width, height);
        context.putImageData(imgdata, 0, 0);

        dataDest.isMutable = isMutable;
    };

    Native["javax/microedition/lcdui/ImageDataFactory.createImmutableImageDataCopy.(Ljavax/microedition/lcdui/ImageData;Ljavax/microedition/lcdui/ImageData;)V"] =
    function(dest, source) {
        var srcCanvas = source.context.canvas;
        var context = initImageData(dest, srcCanvas.width, srcCanvas.height);
        context.drawImage(srcCanvas, 0, 0);
    };

    Native["javax/microedition/lcdui/ImageDataFactory.createMutableImageData.(Ljavax/microedition/lcdui/ImageData;II)V"] =
    function(imageData, width, height) {
        var context = initImageData(imageData, width, height);
        context.fillStyle = "rgb(255,255,255)"; // white
        context.fillRect(0, 0, width, height);
    };

    Native["javax/microedition/lcdui/ImageDataFactory.createImmutableImageDecodeRGBImage.(Ljavax/microedition/lcdui/ImageData;[IIIZ)V"] =
    function(imageData, rgbData, width, height, processAlpha) {
        var context = initImageData(imageData, width, height);
        var ctxImageData = context.createImageData(width, height);
        var abgrData = new Int32Array(ctxImageData.data.buffer);

        var converterFunc = processAlpha ? ARGBToABGR : ARGBTo1BGR;
        converterFunc(rgbData, abgrData, width, height, 0, width);

        context.putImageData(ctxImageData, 0, 0);
    };

    Native["javax/microedition/lcdui/ImageData.getRGB.([IIIIIII)V"] = function(rgbData, offset, scanlength, x, y, width, height) {
        var abgrData = new Int32Array(this.context.getImageData(x, y, width, height).data.buffer);
        ABGRToARGB(abgrData, rgbData, width, height, offset, scanlength);
    };

    Native["com/nokia/mid/ui/DirectUtils.makeMutable.(Ljavax/microedition/lcdui/Image;)V"] = function(image) {
        var imageData = image.imageData;
        imageData.isMutable = 1;
    };

    Native["com/nokia/mid/ui/DirectUtils.setPixels.(Ljavax/microedition/lcdui/Image;I)V"] = function(image, argb) {
        var width = image.width;
        var height = image.height;
        var imageData = image.imageData;

        var ctx = imageData.context;
        setImageDataDimensions(imageData, width, height);

        var ctxImageData = ctx.createImageData(width, height);
        var pixels = new Int32Array(ctxImageData.data.buffer);

        var color = swapRB(argb);

        var i = 0;
        for (var y = 0; y < height; ++y) {
            for (var x = 0; x < width; ++x) {
                pixels[i++] = color;
            }
        }

        ctx.putImageData(ctxImageData, 0, 0);
    };

    var FACE_SYSTEM = 0;
    var FACE_MONOSPACE = 32;
    var FACE_PROPORTIONAL = 64;
    var STYLE_PLAIN = 0;
    var STYLE_BOLD = 1;
    var STYLE_ITALIC = 2;
    var STYLE_UNDERLINED = 4;
    var SIZE_SMALL = 8;
    var SIZE_MEDIUM = 0;
    var SIZE_LARGE = 16;

    Native["javax/microedition/lcdui/Font.init.(III)V"] = function(face, style, size) {
        var defaultSize = config.fontSize ? config.fontSize : Math.max(19, (MIDP.context2D.canvas.height / 35) | 0);
        if (size & SIZE_SMALL)
            size = defaultSize / 1.25;
        else if (size & SIZE_LARGE)
            size = defaultSize * 1.25;
        else
            size = defaultSize;
        size |= 0;

        if (style & STYLE_BOLD)
            style = "bold ";
        else if (style & STYLE_ITALIC)
            style = "italic ";
        else
            style = "";

        if (face & FACE_MONOSPACE)
            face = "monospace";
        else if (face & FACE_PROPORTIONAL)
            face = "sans-serif";
        else
            face = "Arial,Helvetica,sans-serif";

        this.baseline = size | 0;
        this.height = (size * 1.3) | 0;

        // Note:
        // When a css string, such as ` 10 pt Arial, Helvetica`, is set to
        // MIDP.context2D.font, it will be formatted to `10 pt Arial,Helvetica`
        // with some spaces removed.
        // We need this css string to have the same format as that of the
        // MIDP.context2D.font to do comparison in withFont() function.
        this.css = style + size + "px " + face;
        this.size = size;
        this.style = style;
        this.face = face;
    };

    function calcStringWidth(font, str) {
        var emojiLen = 0;

        withFont(font, MIDP.context2D);
        var len = measureWidth(MIDP.context2D, str.replace(emoji.regEx, function() {
            emojiLen += font.size;
            return "";
        }));

        return len + emojiLen;
    }

    var defaultFont;
    function getDefaultFont() {
        if (!defaultFont) {
            var classInfo = CLASSES.loadAndLinkClass("javax/microedition/lcdui/Font");
            defaultFont = new classInfo.klass();
            var methodInfo = classInfo.getMethodByNameString("<init>", "(III)V", false);
            J2ME.getLinkedMethod(methodInfo).call(defaultFont, 0, 0, 0);
        }
        return defaultFont;
    }

    Override["javax/microedition/lcdui/Font.getDefaultFont.()Ljavax/microedition/lcdui/Font;"] = function() {
        return getDefaultFont();
    };

    Native["javax/microedition/lcdui/Font.stringWidth.(Ljava/lang/String;)I"] = function(str) {
        return calcStringWidth(this, J2ME.fromJavaString(str));
    };

    Native["javax/microedition/lcdui/Font.charWidth.(C)I"] = function(char) {
        withFont(this, MIDP.context2D);
        return measureWidth(MIDP.context2D, String.fromCharCode(char));
    };

    Native["javax/microedition/lcdui/Font.charsWidth.([CII)I"] = function(str, offset, len) {
        return calcStringWidth(this, util.fromJavaChars(str).slice(offset, offset + len));
    };

    Native["javax/microedition/lcdui/Font.substringWidth.(Ljava/lang/String;II)I"] = function(str, offset, len) {
        return calcStringWidth(this, J2ME.fromJavaString(str).slice(offset, offset + len));
    };

    var HCENTER = 1;
    var VCENTER = 2;
    var LEFT = 4;
    var RIGHT = 8;
    var TOP = 16;
    var BOTTOM = 32;
    var BASELINE = 64;

    function withAnchor(g, c, anchor, x, y, w, h) {
        if (anchor & RIGHT) {
            x -= w;
        } else if (anchor & HCENTER) {
            x -= (w >>> 1) | 0;
        }

        if (anchor & BOTTOM) {
            y -= h;
        } else if (anchor & VCENTER) {
            y -= (h >>> 1) | 0;
        }

        return [x, y];
    }

    function measureWidth(c, str) {
        return c.measureText(str).width | 0;
    }

    function withFont(font, c) {
        if (c.font != font.css) {
          c.font = font.css;
        }
    }

    function withTextAnchor(g, c, anchor, x, y, str) {
        withFont(g.currentFont, c);

        c.textAlign = "left";
        c.textBaseline = "top";

        if (anchor & RIGHT || anchor & HCENTER) {
            var w = measureWidth(c, str);

            if (anchor & RIGHT) {
                x -= w;
            } else if (anchor & HCENTER) {
                x -= (w >>> 1) | 0;
            }
        }

        if (anchor & BOTTOM) {
            c.textBaseline = "bottom";
        } else if (anchor & BASELINE) {
            c.textBaseline = "alphabetic";
        } else if (anchor & VCENTER) {
            throw $.newIllegalArgumentException("VCENTER not allowed with text");
        }

        return [x, y];
    }

    function withPixel(g, c) {
        c.fillStyle = c.strokeStyle = util.abgrIntToCSS(g.pixel);
    }

    /**
     * Like withPixel, but ignores alpha channel, setting the alpha value to 1.
     * Useful when you suspect that the caller is specifying the alpha channel
     * incorrectly, although we should actually figure out why that's happening.
     */
    function withOpaquePixel(g, c) {
        var pixel = g.pixel;
        var b = (pixel >> 16) & 0xff;
        var g = (pixel >> 8) & 0xff;
        var r = pixel & 0xff;
        var style = "rgba(" + r + "," + g + "," + b + "," + 1 + ")";
        c.fillStyle = c.strokeStyle = style;
    }

    /**
     * create the outline of an elliptical arc
     * covering the specified rectangle.
     * @param x the x-coordinate of the center of the ellipse.
     * @param y y-coordinate of the center of the ellipse.
     * @param rw the horizontal radius of the arc.
     * @param rh the vertical radius of the arc.
     * @param arcStart the beginning angle
     * @param arcEnd the ending angle
     * @param closed if true, draw a closed arc sector.
     */
    function createEllipticalArc(c, x, y, rw, rh, arcStart, arcEnd, closed) {
          c.save();
          c.translate(x, y);
          if (closed) {
            c.moveTo(0, 0);
          }
          // draw circle arc which will be stretched into an oval arc
          c.scale(1, rh / rw);
          c.arc(0, 0, rw, arcStart, arcEnd, false);
          if (closed) {
            c.lineTo(0, 0);
          }
          c.restore();
    }

    /**
     * Create a round rectangle path.
     * @param x the x coordinate of the rectangle
     * @param y the y coordinate of the rectangle
     * @param width the width of the rectangle
     * @param height the height of the rectangle
     * @param arcWidth the horizontal diameter of the arc at the four corners
     * @param arcHeight the vertical diameter of the arc at the four corners
     */
    function createRoundRect(c, x, y, width, height, arcWidth, arcHeight) {
        var rw = arcWidth / 2;
        var rh = arcHeight / 2;
        c.moveTo(x + rw, y);
        c.lineTo(x + width - rw, y);
        createEllipticalArc(c, x + width - rw, y + rh, rw, rh, 1.5 * Math.PI, 2 * Math.PI, false);
        c.lineTo(x + width, y + height - rh);
        createEllipticalArc(c, x + width - rw, y + height - rh, rw, rh, 0, 0.5 * Math.PI, false);
        c.lineTo(x + rw, y + height);
        createEllipticalArc(c, x + rw, y + height - rh, rw, rh, 0.5 * Math.PI, Math.PI, false);
        c.lineTo(x, y + rh);
        createEllipticalArc(c, x + rw, y + rh, rw, rh, Math.PI, 1.5 * Math.PI, false);
    }

    Native["javax/microedition/lcdui/Graphics.getDisplayColor.(I)I"] = function(color) {
        return color;
    };

    function getPixel(rgb, gray, isGray) {
        return swapRB(rgb) | 0xff000000;
    }


    Native["javax/microedition/lcdui/Graphics.restoreMIDPRuntimeGC.()V"] = function() {
        this.runtimeClipEnforce = false;
        translate(this, this.aX-this.transX, this.aY-this.transY);
    };

    Native["javax/microedition/lcdui/Graphics.resetGC.()V"] = function() {
        resetGC(this);
    };

    Native["javax/microedition/lcdui/Graphics.reset.(IIII)V"] = function(x1, y1, x2, y2) {
        reset(this, x1, y1, x2, y2);
    };

    Native["javax/microedition/lcdui/Graphics.reset.()V"] = function() {
        reset(this, 0, 0, this.maxWidth, this.maxHeight);
    };

    Native["javax/microedition/lcdui/Graphics.isScreenGraphics.()Z"] = function() {
        return isScreenGraphics(this);
    };

    Native["javax/microedition/lcdui/Graphics.copyArea.(IIIIIII)V"] = function(x_src, y_src, width, height, x_dest, y_dest, anchor) {
        if (isScreenGraphics(this)) {
            throw $.newIllegalStateException();
        }
        console.warn("javax/microedition/lcdui/Graphics.copyArea.(IIIIIII)V not implemented");
    };

    Native["javax/microedition/lcdui/Graphics.setDimensions.(II)V"] = function(w, h) {
        setDimensions(this, w, h);
    };

    Native["javax/microedition/lcdui/Graphics.translate.(II)V"] = function(x, y) {
        translate(this, x, y);
    };

    Native["javax/microedition/lcdui/Graphics.getTranslateX.()I"] = function() {
        return this.transX;
    };

    Native["javax/microedition/lcdui/Graphics.getTranslateY.()I"] = function() {
        return this.transY;
    };

    Native["javax/microedition/lcdui/Graphics.getMaxWidth.()I"] = function() {
        return this.maxWidth;
    };

    Native["javax/microedition/lcdui/Graphics.getMaxHeight.()I"] = function() {
        return this.maxHeight;
    };

    Native["javax/microedition/lcdui/Graphics.getCreator.()Ljava/lang/Object;"] = function() {
        return this.creator;
    };

    Native["javax/microedition/lcdui/Graphics.setCreator.(Ljava/lang/Object;)V"] = function(creator) {
        if (!this.creator) {
            this.creator = creator;
        }
    };

    Native["javax/microedition/lcdui/Graphics.getColor.()I"] = function() {
        return this.rgbColor;
    };

    Native["javax/microedition/lcdui/Graphics.getRedComponent.()I"] = function() {
        return (this.rgbColor >> 16) & 0xff;
    };

    Native["javax/microedition/lcdui/Graphics.getGreenComponent.()I"] = function() {
        return (this.rgbColor >> 8) & 0xff;
    };

    Native["javax/microedition/lcdui/Graphics.getBlueComponent.()I"] = function() {
        return this.rgbColor & 0xff;
    };

    Native["javax/microedition/lcdui/Graphics.getGrayScale.()I"] = function() {
        return this.gray;
    };

    Native["javax/microedition/lcdui/Graphics.setColor.(III)V"] = function(red, green, blue) {
        if ((red < 0)   || (red > 255)
            || (green < 0) || (green > 255)
            || (blue < 0)  || (blue > 255)) {
            throw $.newIllegalArgumentException("Value out of range");
        }

        this.rgbColor = (red << 16) | (green << 8) | blue;
        this.gray = grayVal(red, green, blue);
        this.pixel = getPixel(this.rgbColor, this.gray, false);
    };

    Native["javax/microedition/lcdui/Graphics.setColor.(I)V"] = function(RGB) {
        if (this.pixel == -1 || (RGB & 0x00ffffff) != this.rgbColor) {
            var red   = (RGB >> 16) & 0xff;
            var green = (RGB >> 8)  & 0xff;
            var blue  = (RGB)  & 0xff;

            this.rgbColor = RGB & 0x00ffffff;
            this.gray = grayVal(red, green, blue);
            this.pixel = getPixel(this.rgbColor, this.gray, false);
        }
    };

    Native["javax/microedition/lcdui/Graphics.setGrayScale.(I)V"] = function(value) {
        if ((value < 0) || (value > 255)) {
            throw $.newIllegalArgumentException("Gray value out of range");
        }

        if (this.pixel == -1 || this.gray != value) {
            this.rgbColor = (value << 16) | (value << 8) | value;
            this.gray = value;
            this.pixel = getPixel(this.rgbColor, this.gray, true);
        }
    };

    Native["javax/microedition/lcdui/Graphics.getFont.()Ljavax/microedition/lcdui/Font;"] = function() {
        return this.currentFont;
    };

    Native["javax/microedition/lcdui/Graphics.setFont.(Ljavax/microedition/lcdui/Font;)V"] = function(font) {
        this.currentFont = font ? font : getDefaultFont();
    };

    var SOLID = 0;
    var DOTTED = 1;
    Native["javax/microedition/lcdui/Graphics.setStrokeStyle.(I)V"] = function(style) {
        if ((style != SOLID) && (style != DOTTED)) {
            throw $.newIllegalArgumentException("Gray value out of range");
        }

        this.style = style;
    };

    Native["javax/microedition/lcdui/Graphics.getStrokeStyle.()I"] = function() {
        return this.style;
    };

    Native["javax/microedition/lcdui/Graphics.getClipX.()I"] = function() {
        return this.clipX1;
    };

    Native["javax/microedition/lcdui/Graphics.getClipY.()I"] = function() {
        return this.clipY1;
    };

    Native["javax/microedition/lcdui/Graphics.getClipWidth.()I"] = function() {
        return this.clipX2 - this.clipX1;
    };

    Native["javax/microedition/lcdui/Graphics.getClipHeight.()I"] = function() {
        return this.clipY2 - this.clipY1;
    };

    Native["javax/microedition/lcdui/Graphics.getClip.([I)V"] = function(region) {
        region[0] = this.clipX1;
        region[1] = this.clipY1;
        region[2] = this.clipX2;
        region[3] = this.clipY2;
    };

    Native["javax/microedition/lcdui/Graphics.clipRect.(IIII)V"] = function(x, y, width, height) {
        clipRect(this, x, y, width, height);
    };

    Native["javax/microedition/lcdui/Graphics.getDisplayColor.(I)I"] = function(color) {
        return color;
    };

    // DirectGraphics constants
    var TYPE_USHORT_4444_ARGB = 4444;
    var TYPE_USHORT_565_RGB = 565;

    Native["com/nokia/mid/ui/DirectGraphicsImp.setARGBColor.(I)V"] = function(rgba) {
        var g = this.graphics;
        var red = (rgba >> 16) & 0xff;
        var green = (rgba >> 8) & 0xff;
        var blue = rgba & 0xff;
        g.pixel = swapRB(rgba);
        g.rgbColor = rgba & 0x00ffffff;
        // Conversion matches Graphics#grayVal(int, int, int).
        g.gray = grayVal(red, green, blue);
    };

    Native["com/nokia/mid/ui/DirectGraphicsImp.getAlphaComponent.()I"] = function() {
        var g = this.graphics;
        return (g.pixel >> 24) & 0xff;
    };

    Native["com/nokia/mid/ui/DirectGraphicsImp.getPixels.([SIIIIIII)V"] =
    function(pixels, offset, scanlength, x, y, width, height, format) {
        if (pixels == null) {
            throw $.newNullPointerException("Pixels array is null");
        }

        var converterFunc = null;
        if (format == TYPE_USHORT_4444_ARGB) {
            converterFunc = ABGRToARGB4444;
        } else if (format == TYPE_USHORT_565_RGB) {
            converterFunc = ABGRToRGB565;
        } else {
            throw $.newIllegalArgumentException("Format unsupported");
        }

        var graphics = this.graphics;
        var image = graphics.img;
        if (!image) {
            throw $.newIllegalArgumentException("getPixels with no image not yet supported");
        }
        var imageData = image.imageData;

        var abgrData = new Int32Array(imageData.context.getImageData(x, y, width, height).data.buffer);
        converterFunc(abgrData, pixels, width, height, offset, scanlength);
    };

    Native["com/nokia/mid/ui/DirectGraphicsImp.drawPixels.([SZIIIIIIII)V"] =
    function(pixels, transparency, offset, scanlength, x, y, width, height, manipulation, format) {
        if (pixels == null) {
            throw $.newNullPointerException("Pixels array is null");
        }

        var converterFunc = null;
        if (format == TYPE_USHORT_4444_ARGB && transparency && !manipulation) {
            converterFunc = ARGB4444ToABGR;
        } else {
            throw $.newIllegalArgumentException("Format unsupported");
        }

        var graphics = this.graphics;

        tempContext.canvas.width = width;
        tempContext.canvas.height = height;
        var imageData = tempContext.createImageData(width, height);
        var abgrData = new Int32Array(imageData.data.buffer);

        converterFunc(pixels, abgrData, width, height, offset, scanlength);

        tempContext.putImageData(imageData, 0, 0);

        var c = graphics.context2D;

        c.drawImage(tempContext.canvas, x, y);
        tempContext.canvas.width = 0;
        tempContext.canvas.height = 0;
    };

    Native["javax/microedition/lcdui/Graphics.render.(Ljavax/microedition/lcdui/Image;III)Z"] = function(image, x, y, anchor) {
        return renderImage(this, image, x, y, anchor);
    };

    function renderImage(g, image, x, y, anchor) {
        var texture = image.imageData.context.canvas;

        var c = g.context2D;

        var pair = withAnchor(g, c, anchor, x, y, texture.width, texture.height);
        x = pair[0];
        y = pair[1];

        c.drawImage(texture, x, y);

        return 1;
    }

    Native["javax/microedition/lcdui/Graphics.drawRegion.(Ljavax/microedition/lcdui/Image;IIIIIIII)V"] = function(src, x_src, y_src, width, height, transform, x_dest, y_dest, anchor) {
        if (!src) {
            throw $.newNullPointerException("src image is null");
        }

        if (!renderRegion(this, src, x_src, y_src, width, height,
                          transform, x_dest, y_dest, anchor)) {
            throw $.newIllegalArgumentException();
        }
    };

    Native["javax/microedition/lcdui/Graphics.renderRegion.(Ljavax/microedition/lcdui/Image;IIIIIIII)Z"] = function(image, x_src, y_src, width, height, transform, x_dest, y_dest, anchor) {
        return renderRegion(this, image, x_src, y_src, width, height, transform, x_dest, y_dest, anchor);
    };

    Native["javax/microedition/lcdui/Graphics.drawImage.(Ljavax/microedition/lcdui/Image;III)V"] = function(image, x, y, anchor) {
        if (image == null) {
            throw $.newNullPointerException("image is null");
        }

        if (!renderImage(this, image, x, y, anchor)) {
            throw $.newIllegalArgumentException();
        }
    };

    function parseEmojiString(str) {
        var parts = [];

        var match;
        var lastIndex = 0;
        emoji.regEx.lastIndex = 0;
        while (match = emoji.regEx.exec(str)) {
            parts.push({ text: str.substring(lastIndex, match.index), emoji: match[0] });
            lastIndex = match.index + match[0].length;
        }

        parts.push({ text: str.substring(lastIndex), emoji: null });

        return parts;
    }

    function setClip(g, x, y, width, height) {
        var newX1 = Math.max(0, x) & 0x7fff;
        var newX2 = Math.min(g.maxWidth, x + width) & 0x7fff;
        var newY1 = Math.max(0, y) & 0x7fff;
        var newY2 = Math.min(g.maxHeight, y + height) & 0x7fff;

        if (g.runtimeClipEnforce) {
            newX1 = Math.max(newX1, g.systemClipX1);
            newY1 = Math.max(newY1, g.systemClipY1);
            newX2 = Math.min(newX2, g.systemClipX2);
            newY2 = Math.min(newY2, g.systemClipY2);
        }

        if (width <= 0 || height <= 0 || newX2 <= newX1 || newY2 <= newY1) {
            newX1 = newY1 = newX2 = newY2 = 0;
        }

        if (newX1 == g.clipX1 && newX2 == g.clipX2 && newY1 == g.clipY1 && newY2 == g.clipY2) {
            return;
        }

        // If we're expanding the clip rect, we need to restore the pre-clipped context
        if (newX1 < g.clipX1 || newX2 > g.clipX2 || newY1 < g.clipY1 || newY2 > g.clipY2) {
            g.context2D.restore();
            g.context2D.translate(g.transX, g.transY);
            g.context2D.save();
        }

        g.clipped = newX1 > 0 ||
                    newY1 > 0 ||
                    newX2 < g.maxWidth ||
                    newY2 < g.maxHeight;

        g.clipX1 = newX1;
        g.clipX2 = newX2;
        g.clipY1 = newY1;
        g.clipY2 = newY2;

        if (g.clipped) {
            g.context2D.beginPath();
            g.context2D.rect(g.clipX1, g.clipY1, g.clipX2 - g.clipX1, g.clipY2 - g.clipY1);
            g.context2D.clip();
        }
    }

    function grayVal(red, green, blue) {
        /* CCIR Rec 601 luma (nonlinear rgb to nonlinear "gray") */
        return (red*76 + green*150 + blue*29) >> 8;
    }

    Override["javax/microedition/lcdui/Graphics.<init>.()V"] = function() {
        this.maxWidth = 0;
        this.maxHeight = 0;
        this.transX = 0;
        this.transY = 0;
        this.creator = null;
        this.rgbColor = 0;
        this.gray = 0;
        this.pixel = 0;
        this.aX = 0;
        this.aY = 0;
        this.systemClipX1 = 0;
        this.systemClipX2 = 0;
        this.systemClipY1 = 0;
        this.systemClipY2 = 0;
        this.clipX1 = 0;
        this.clipX2 = 0;
        this.clipY1 = 0;
        this.clipY2 = 0;
        this.currentFont = getDefaultFont();
        this.displayId = -1;
        this.img = null;
        this.style = SOLID;
        this.clipped = false;
    };

    Native["javax/microedition/lcdui/Graphics.initScreen0.(III)V"] = function(displayId, w, h) {
        this.context2D = MIDP.context2D;
        this.displayId = displayId;
        setDimensions(this, w, h);
        resetGC(this);
    };

    Native["javax/microedition/lcdui/Graphics.initImage0.(Ljavax/microedition/lcdui/Image;II)V"] = function(img, w, h) {
        this.context2D = img.imageData.context;
        this.context2D.save();
        this.img = img;
        setDimensions(this, w, h);
        resetGC(this);
    };

    function isScreenGraphics(g) {
        return g.displayId != -1;
    }

    function resetGC(g) {
        g.currentFont = getDefaultFont();
        g.style       = SOLID;
        g.rgbColor    = g.gray = 0;
        g.pixel       = getPixel(g.rgbColor, g.gray, true);
    }

    function reset(g, x1, y1, x2, y2) {
        resetGC(g);
        translate(g, -g.transX, -g.transY);
        setClip(g, x1, y1, x2 - x1, y2 - y1);
    }

    function translate(g, x, y) {
        g.transX += x;
        g.transY += y;
        g.context2D.translate(x, y);
    }

    function setDimensions(g, w, h) {
      g.maxWidth = w & 0x7fff;
      g.maxHeight = h & 0x7fff;
      translate(g, -g.transX, -g.transY);
      setClip(g, 0, 0, g.maxWidth, g.maxHeight);
    }

    function clipRect(g, x, y, width, height) {
        var newX1 = Math.max(0, x) & 0x7fff;
        var newX2 = Math.min(g.maxWidth, x + width) & 0x7fff;
        var newY1 = Math.max(0, y) & 0x7fff;
        var newY2 = Math.min(g.maxHeight, y + height) & 0x7fff;

        g.clipX1 = Math.max(g.clipX1, newX1) & 0x7fff;
        g.clipY1 = Math.max(g.clipY1, newY1) & 0x7fff;
        g.clipX2 = Math.min(g.clipX2, newX2) & 0x7fff;
        g.clipY2 = Math.min(g.clipY2, newY2) & 0x7fff;

        if (width <= 0 || height <= 0 || g.clipX2 <= g.clipX1 || g.clipY2 <= g.clipY1) {
            g.clipX1 = g.clipY1 = g.clipX2 = g.clipY2 = 0;
        }

        g.clipped = g.clipX1 > 0 ||
                    g.clipY1 > 0 ||
                    g.clipX2 < g.maxWidth ||
                    g.clipY2 < g.maxHeight;

        if (g.clipped) {
            g.context2D.beginPath();
            g.context2D.rect(g.clipX1, g.clipY1, g.clipX2 - g.clipX1, g.clipY2 - g.clipY1);
            g.context2D.clip();
        }
    }

    Native["javax/microedition/lcdui/Graphics.setClip.(IIII)V"] = function(x, y, w, h) {
        setClip(this, x, y, w, h);
    };

    Native["javax/microedition/lcdui/Graphics.preserveMIDPRuntimeGC.(IIII)V"] = function(systemX, systemY, systemW, systemH) {
        this.runtimeClipEnforce = true;
        clipRect(this, systemX, systemY, systemW, systemH);

        // this is the first time, we setup
        // the systemClip values.
        this.systemClipX1 = this.clipX1;
        this.systemClipY1 = this.clipY1;
        this.systemClipX2 = this.clipX2;
        this.systemClipY2 = this.clipY2;

        // Preserve the translation system
        translate(this, systemX, systemY);
        this.aX = this.transX;
        this.aY = this.transY;
};


    function drawString(g, str, x, y, anchor, isOpaque) {
        var font = g.currentFont;

        var c = g.context2D;

        if (isOpaque) {
            withOpaquePixel(g, c);
        } else {
            withPixel(g, c);
        }

        parseEmojiString(str).forEach(function(part) {
            if (part.text) {
                var pair = withTextAnchor(g, c, anchor, x, y, part.text);
                var textX = pair[0];
                var textY = pair[1];

                c.fillText(part.text, textX, textY);

                // If there are emojis in the string that we need to draw,
                // we need to calculate the string width
                if (part.emoji) {
                    x += measureWidth(c, part.text);
                }
            }

            if (part.emoji) {
                var emojiData = emoji.getData(part.emoji, font.size);
                c.drawImage(emojiData.img, emojiData.x, 0, emoji.squareSize, emoji.squareSize, x, y, font.size, font.size);
                x += font.size;
            }
        });
    }

    Native["javax/microedition/lcdui/Graphics.drawString.(Ljava/lang/String;III)V"] = function(str, x, y, anchor) {
        drawString(this, J2ME.fromJavaString(str), x, y, anchor, true);
    };

    Native["javax/microedition/lcdui/Graphics.drawSubstring.(Ljava/lang/String;IIIII)V"] = 
    function(str, offset, len, x, y, anchor) {
        drawString(this, J2ME.fromJavaString(str).substr(offset, len), x, y, anchor, false);
    };

    Native["javax/microedition/lcdui/Graphics.drawChars.([CIIIII)V"] = function(data, offset, len, x, y, anchor) {
        drawString(this, util.fromJavaChars(data, offset, len), x, y, anchor, false);
    };

    Native["javax/microedition/lcdui/Graphics.drawChar.(CIII)V"] = function(jChr, x, y, anchor) {
        var chr = String.fromCharCode(jChr);

        var c = this.context2D;

        var pair = withTextAnchor(this, c, anchor, x, y, chr);
        x = pair[0];
        y = pair[1];

        withPixel(this, c);

        c.fillText(chr, x, y);
    };

    Native["javax/microedition/lcdui/Graphics.fillTriangle.(IIIIII)V"] = function(x1, y1, x2, y2, x3, y3) {
        var c = this.context2D;

        withPixel(this, c);

        var dx1 = (x2 - x1) || 1;
        var dy1 = (y2 - y1) || 1;
        var dx2 = (x3 - x1) || 1;
        var dy2 = (y3 - y1) || 1;

        c.beginPath();
        c.moveTo(x1, y1);
        c.lineTo(x1 + dx1, y1 + dy1);
        c.lineTo(x1 + dx2, y1 + dy2);
        c.closePath();
        c.fill();
    };

    Native["javax/microedition/lcdui/Graphics.drawRect.(IIII)V"] = function(x, y, w, h) {
        if (w < 0 || h < 0) {
            return;
        }

        var c = this.context2D;

        withPixel(this, c);

        w = w || 1;
        h = h || 1;

        c.strokeRect(x, y, w, h);
    };

    Native["javax/microedition/lcdui/Graphics.drawRoundRect.(IIIIII)V"] = function(x, y, w, h, arcWidth, arcHeight) {
        if (w < 0 || h < 0) {
            return;
        }

        var c = this.context2D;

        withPixel(this, c);

        w = w || 1;
        h = h || 1;

        c.beginPath();
        createRoundRect(c, x, y, w, h, arcWidth, arcHeight);
        c.stroke();
    };

    Native["javax/microedition/lcdui/Graphics.fillRect.(IIII)V"] = function(x, y, w, h) {
        if (w <= 0 || h <= 0) {
            return;
        }

        var c = this.context2D;

        withPixel(this, c);

        w = w || 1;
        h = h || 1;

        c.fillRect(x, y, w, h);
    };

    Native["javax/microedition/lcdui/Graphics.fillRoundRect.(IIIIII)V"] = function(x, y, w, h, arcWidth, arcHeight) {
        if (w <= 0 || h <= 0) {
            return;
        }

        var c = this.context2D;

        withPixel(this, c);

        w = w || 1;
        h = h || 1;

        c.beginPath();
        createRoundRect(c, x, y, w, h, arcWidth, arcHeight);
        c.fill();
    };

    Native["javax/microedition/lcdui/Graphics.drawArc.(IIIIII)V"] = function(x, y, width, height, startAngle, arcAngle) {
        if (width < 0 || height < 0) {
            return;
        }

        var c = this.context2D;

        withPixel(this, c);

        var endRad = -startAngle * 0.0175;
        var startRad = endRad - arcAngle * 0.0175;
        c.beginPath();
        createEllipticalArc(c, x, y, width / 2, height / 2, startRad, endRad, false);
        c.stroke();
    };

    Native["javax/microedition/lcdui/Graphics.fillArc.(IIIIII)V"] = function(x, y, width, height, startAngle, arcAngle) {
        if (width <= 0 || height <= 0) {
            return;
        }

        var c = this.context2D;

        withPixel(this, c);

        var endRad = -startAngle * 0.0175;
        var startRad = endRad - arcAngle * 0.0175;
        c.beginPath();
        c.moveTo(x, y);
        createEllipticalArc(c, x, y, width / 2, height / 2, startRad, endRad, true);
        c.moveTo(x, y);
        c.fill();
    };

    var TRANS_NONE = 0;
    var TRANS_MIRROR_ROT180 = 1;
    var TRANS_MIRROR = 2;
    var TRANS_ROT180 = 3;
    var TRANS_MIRROR_ROT270 = 4;
    var TRANS_ROT90 = 5;
    var TRANS_ROT270 = 6;
    var TRANS_MIRROR_ROT90 = 7;

    function renderRegion(g, image, sx, sy, sw, sh, transform, x, y, anchor) {
        var imgData = image.imageData,
            texture = imgData.context.canvas;

        var c = g.context2D;
        if (transform !== TRANS_NONE) {
            c.save();
        }

        var pair = withAnchor(g, c, anchor, x, y, sw, sh);
        x = pair[0];
        y = pair[1];

        if (transform === TRANS_MIRROR || transform === TRANS_MIRROR_ROT180) {
            c.scale(-1, 1);
        } else if (transform === TRANS_MIRROR_ROT90 || transform === TRANS_MIRROR_ROT270) {
            c.scale(1, -1);
        } else if (transform === TRANS_ROT90 || transform === TRANS_MIRROR_ROT90) {
            c.rotate(Math.PI / 2);
        } else if (transform === TRANS_ROT180 || transform === TRANS_MIRROR_ROT180) {
            c.rotate(Math.PI);
        } else if (transform === TRANS_ROT270 || transform === TRANS_MIRROR_ROT270) {
            c.rotate(1.5 * Math.PI);
        }

        c.drawImage(texture, sx, sy, sw, sh, x, y, sw, sh);

        if (transform !== TRANS_NONE) {
            c.restore();
        }

        return true;
    };

    Native["javax/microedition/lcdui/Graphics.drawLine.(IIII)V"] = function(x1, y1, x2, y2) {
        var c = this.context2D;

        withPixel(this, c);

        var dx = (x2 - x1);
        var dy = (y2 - y1);
        if (dx === 0) {
            x1 += .5;
        }
        if (dy === 0) {
            y1 += .5;
        }

        c.beginPath();
        c.moveTo(x1, y1);
        c.lineTo(x1 + dx, y1 + dy);
        c.stroke();
        c.closePath();
    };

    Native["javax/microedition/lcdui/Graphics.drawRGB.([IIIIIIIZ)V"] =
    function(rgbData, offset, scanlength, x, y, width, height, processAlpha) {
        tempContext.canvas.height = height;
        tempContext.canvas.width = width;
        var imageData = tempContext.createImageData(width, height);
        var abgrData = new Int32Array(imageData.data.buffer);

        var converterFunc = processAlpha ? ARGBToABGR : ARGBTo1BGR;
        converterFunc(rgbData, abgrData, width, height, offset, scanlength);

        tempContext.putImageData(imageData, 0, 0);

        var c = this.context2D;

        c.drawImage(tempContext.canvas, x, y);
        tempContext.canvas.width = 0;
        tempContext.canvas.height = 0;
    };

    var textEditorId = 0,
        textEditorResolve = null,
        dirtyEditors = [];

    function wakeTextEditorThread(textEditor) {
        dirtyEditors.push(textEditor);
        if (textEditorResolve) {
            textEditorResolve();
            textEditorResolve = null;
        }
    }

    Native["com/nokia/mid/ui/TextEditor.init.(Ljava/lang/String;IIII)V"] =
    function(text, maxSize, constraints, width, height) {
        if (constraints != 0) {
            console.warn("TextEditor.constraints not implemented");
        }

        this.textEditorId = ++textEditorId;
        this.textEditor = TextEditorProvider.getEditor(constraints, null, this.textEditorId);
        this.visible = false;
        this.textEditor.setBackgroundColor(0xFFFFFFFF | 0); // opaque white
        this.textEditor.setForegroundColor(0xFF000000 | 0); // opaque black

        this.getCaretPosition = function() {
            if (this.textEditor.isAttached()) {
                return this.textEditor.getSelectionStart();
            }
            if (this.caretPosition !== null) {
                return this.caretPosition;
            }
            return 0;
        };

        this.setCaretPosition = function(index) {
            if (this.textEditor.isAttached()) {
                this.textEditor.setSelectionRange(index, index);
            } else {
                this.caretPosition = index;
            }
        };

        this.textEditor.setAttribute("maxlength", maxSize);
        this.textEditor.setSize(width, height);
        this.textEditor.setVisible(false);
        var font = this.font;
        this.textEditor.setFont(font);

        this.textEditor.setContent(J2ME.fromJavaString(text));
        this.setCaretPosition(this.textEditor.getContentSize());

        this.textEditor.oninput(function(e) {
            wakeTextEditorThread(this);
        }.bind(this));
    };

    Native["com/nokia/mid/ui/CanvasItem.attachNativeImpl.()V"] = function() {
        this.textEditor.attach();
        if (this.caretPosition !== null) {
            this.textEditor.setSelectionRange(this.caretPosition, this.caretPosition);
            this.caretPosition = null;
        }
    };

    Native["com/nokia/mid/ui/CanvasItem.detachNativeImpl.()V"] = function() {
        this.caretPosition = this.textEditor.getSelectionStart();
        this.textEditor.detach();
    };

    Native["javax/microedition/lcdui/Display.setTitle.(Ljava/lang/String;)V"] = function(title) {
        document.getElementById("display_title").textContent = J2ME.fromJavaString(title);
    };

    Native["com/nokia/mid/ui/CanvasItem.setSize.(II)V"] = function(width, height) {
        this.textEditor.setSize(width, height);
    };

    Native["com/nokia/mid/ui/CanvasItem.setVisible.(Z)V"] = function(visible) {
        this.textEditor.setVisible(visible ? true : false);
        this.visible = visible;
    };

    Native["com/nokia/mid/ui/CanvasItem.getWidth.()I"] = function() {
        return this.textEditor.getWidth();
    };

    Native["com/nokia/mid/ui/CanvasItem.getHeight.()I"] = function() {
        return this.textEditor.getHeight();
    };

    Native["com/nokia/mid/ui/CanvasItem.setPosition0.(II)V"] = function(x, y) {
        this.textEditor.setPosition(x, y);
    };

    Native["com/nokia/mid/ui/CanvasItem.getPositionX.()I"] = function() {
        return this.textEditor.getLeft();
    };

    Native["com/nokia/mid/ui/CanvasItem.getPositionY.()I"] = function() {
        return this.textEditor.getTop();
    };

    Native["com/nokia/mid/ui/CanvasItem.isVisible.()Z"] = function() {
        return this.visible ? 1 : 0;
    };

    Native["com/nokia/mid/ui/TextEditor.setConstraints.(I)V"] = function(constraints) {
        this.textEditor = TextEditorProvider.getEditor(constraints, this.textEditor, this.textEditorId);
    };

    Native["com/nokia/mid/ui/TextEditor.getConstraints.()I"] = function() {
        return this.textEditor.constraints;
    };

    Native["com/nokia/mid/ui/TextEditor.setFocus.(Z)V"] = function(shouldFocus) {
        var promise;
        if (shouldFocus && (currentlyFocusedTextEditor != this.textEditor)) {
            promise = this.textEditor.focus();
            currentlyFocusedTextEditor = this.textEditor;
        } else if (!shouldFocus && (currentlyFocusedTextEditor == this.textEditor)) {
            promise = this.textEditor.blur();
            currentlyFocusedTextEditor = null;
        } else {
            return;
        }
        asyncImpl("V", promise);
    };

    Native["com/nokia/mid/ui/TextEditor.hasFocus.()Z"] = function() {
        return (this.textEditor == currentlyFocusedTextEditor) ? 1 : 0;
    };

    Native["com/nokia/mid/ui/TextEditor.setCaret.(I)V"] = function(index) {
        if (index < 0 || index > this.textEditor.getContentSize()) {
            throw $.newStringIndexOutOfBoundsException();
        }

        this.setCaretPosition(index);
    };

    Native["com/nokia/mid/ui/TextEditor.getCaretPosition.()I"] = function() {
        return this.getCaretPosition();
    };

    Native["com/nokia/mid/ui/TextEditor.getBackgroundColor.()I"] = function() {
        return this.textEditor.getBackgroundColor();
    };
    Native["com/nokia/mid/ui/TextEditor.getForegroundColor.()I"] = function() {
        return this.textEditor.getForegroundColor();
    };
    Native["com/nokia/mid/ui/TextEditor.setBackgroundColor.(I)V"] = function(backgroundColor) {
        this.textEditor.setBackgroundColor(backgroundColor);
    };
    Native["com/nokia/mid/ui/TextEditor.setForegroundColor.(I)V"] = function(foregroundColor) {
        this.textEditor.setForegroundColor(foregroundColor);
    };

    Native["com/nokia/mid/ui/TextEditor.getContent.()Ljava/lang/String;"] = function() {
        return J2ME.newString(this.textEditor.getContent());
    };

    Native["com/nokia/mid/ui/TextEditor.setContent.(Ljava/lang/String;)V"] = function(jStr) {
        var str = J2ME.fromJavaString(jStr);
        this.textEditor.setContent(str);
        this.setCaretPosition(this.textEditor.getContentSize());
    };

    addUnimplementedNative("com/nokia/mid/ui/TextEditor.getLineMarginHeight.()I", 0);
    addUnimplementedNative("com/nokia/mid/ui/TextEditor.getVisibleContentPosition.()I", 0);

    Native["com/nokia/mid/ui/TextEditor.getContentHeight.()I"] = function() {
        return this.textEditor.getContentHeight();
    };

    Native["com/nokia/mid/ui/TextEditor.insert.(Ljava/lang/String;I)V"] = function(jStr, pos) {
        var str = J2ME.fromJavaString(jStr);
        var len = util.toCodePointArray(str).length;
        if (this.textEditor.getContentSize() + len > this.textEditor.getAttribute("maxlength")) {
            throw $.newIllegalArgumentException();
        }
        this.textEditor.setContent(this.textEditor.getSlice(0, pos) + str + this.textEditor.getSlice(pos));
        this.setCaretPosition(pos + len);
    };

    Native["com/nokia/mid/ui/TextEditor.delete.(II)V"] = function(offset, length) {
        var old = this.textEditor.getContent();

        var size = this.textEditor.getContentSize();
        if (offset < 0 || offset > size || length < 0 || offset + length > size) {
            throw $.newStringIndexOutOfBoundsException("offset/length invalid");
        }

        this.textEditor.setContent(this.textEditor.getSlice(0, offset) + this.textEditor.getSlice(offset + length));
        this.setCaretPosition(offset);
    };

    Native["com/nokia/mid/ui/TextEditor.getMaxSize.()I"] = function() {
        return parseInt(this.textEditor.getAttribute("maxlength"));
    };

    Native["com/nokia/mid/ui/TextEditor.setMaxSize.(I)I"] = function(maxSize) {
        if (this.textEditor.getContentSize() > maxSize) {
            var oldCaretPosition = this.getCaretPosition();

            this.textEditor.setContent(this.textEditor.getSlice(0, maxSize));

            if (oldCaretPosition > maxSize) {
                this.setCaretPosition(maxSize);
            }
        }

        this.textEditor.setAttribute("maxlength", maxSize);

        // The return value is the assigned size, which could be less than
        // the size that was requested, although in this case we always set it
        // to the requested size.
        return maxSize;
    };

    Native["com/nokia/mid/ui/TextEditor.size.()I"] = function() {
        return this.textEditor.getContentSize();
    };

    Native["com/nokia/mid/ui/TextEditor.setFont.(Ljavax/microedition/lcdui/Font;)V"] = function(font) {
        this.font = font;
        this.textEditor.setFont(font);
    };

    Native["com/nokia/mid/ui/TextEditorThread.getNextDirtyEditor.()Lcom/nokia/mid/ui/TextEditor;"] = function() {
        if (dirtyEditors.length) {
            return dirtyEditors.shift();
        }

        asyncImpl("Lcom/nokia/mid/ui/TextEditor;", new Promise(function(resolve, reject) {
            textEditorResolve = function() {
                resolve(dirtyEditors.shift());
            }
        }));
    };

    var curDisplayableId = 0;
    var nextMidpDisplayableId = 1;
    var PLAIN = 0;

    Native["javax/microedition/lcdui/DisplayableLFImpl.initialize0.()V"] = function() {
    };

    Native["javax/microedition/lcdui/DisplayableLFImpl.deleteNativeResource0.(I)V"] = function(nativeId) {
        var el = document.getElementById("displayable-" + nativeId);
        if (el) {
            el.parentElement.removeChild(el);
            if (currentlyFocusedTextEditor) {
                currentlyFocusedTextEditor.focus();
            }
        } else if (currentlyFocusedTextEditor) {
            currentlyFocusedTextEditor.blur();
        }
    };

    Native["javax/microedition/lcdui/DisplayableLFImpl.setTitle0.(ILjava/lang/String;)V"] = function(nativeId, title) {
        document.getElementById("display_title").textContent = J2ME.fromJavaString(title);
    };

    Native["javax/microedition/lcdui/CanvasLFImpl.createNativeResource0.(Ljava/lang/String;Ljava/lang/String;)I"] = function(title, ticker) {
        console.warn("javax/microedition/lcdui/CanvasLFImpl.createNativeResource0.(Ljava/lang/String;Ljava/lang/String;)I not implemented");
        curDisplayableId = nextMidpDisplayableId++;
        return curDisplayableId;
    };

    Native["javax/microedition/lcdui/AlertLFImpl.createNativeResource0.(Ljava/lang/String;Ljava/lang/String;I)I"] = function(title, ticker, type) {
        var nativeId = nextMidpDisplayableId++;
        var alertTemplateNode = document.getElementById("lcdui-alert");
        var el = alertTemplateNode.cloneNode(true);
        el.id = "displayable-" + nativeId;
        el.querySelector('h1.title').textContent = J2ME.fromJavaString(title);
        alertTemplateNode.parentNode.appendChild(el);

        return nativeId;
    };

    Native["javax/microedition/lcdui/AlertLFImpl.setNativeContents0.(ILjavax/microedition/lcdui/ImageData;[ILjava/lang/String;)Z"] =
    function(nativeId, imgId, indicatorBounds, text) {
        var el = document.getElementById("displayable-" + nativeId);
        el.querySelector('p.text').textContent = J2ME.fromJavaString(text);

        return 0;
    };

    Native["javax/microedition/lcdui/AlertLFImpl.showNativeResource0.(I)V"] = function(nativeId) {
        var el = document.getElementById("displayable-" + nativeId);
        el.style.display = 'block';
        el.classList.add('visible');
        if (currentlyFocusedTextEditor) {
            currentlyFocusedTextEditor.blur();
        }

        curDisplayableId = nativeId;
    };

    var INDEFINITE = -1;
    var CONTINUOUS_RUNNING = 2;

    Native["javax/microedition/lcdui/GaugeLFImpl.createNativeResource0.(ILjava/lang/String;IZII)I"] =
    function(ownerId, label, layout, interactive, maxValue, initialValue) {
        if (label != null) {
            console.error("Expected null label");
        }

        if (layout != PLAIN) {
            console.error("Expected PLAIN layout");
        }

        if (interactive) {
            console.error("Expected not interactive gauge");
        }

        if (maxValue != INDEFINITE) {
            console.error("Expected INDEFINITE maxValue");
        }

        if (initialValue != CONTINUOUS_RUNNING) {
            console.error("Expected CONTINUOUS_RUNNING initialValue")
        }

        var el = document.getElementById("displayable-" + ownerId);
        el.querySelector("progress").style.display = "inline";

        return nextMidpDisplayableId++;
    };

    Native["javax/microedition/lcdui/TextFieldLFImpl.createNativeResource0.(ILjava/lang/String;ILcom/sun/midp/lcdui/DynamicCharacterArray;ILjava/lang/String;)I"] =
    function(ownerId, label, layout, buffer, constraints, initialInputMode) {
        console.warn("javax/microedition/lcdui/TextFieldLFImpl.createNativeResource0.(ILjava/lang/String;ILcom/sun/midp/lcdui/DynamicCharacterArray;ILjava/lang/String;)I not implemented");
        return nextMidpDisplayableId++;
    };

    Native["javax/microedition/lcdui/ImageItemLFImpl.createNativeResource0.(ILjava/lang/String;ILjavax/microedition/lcdui/ImageData;Ljava/lang/String;I)I"] =
    function(ownerId, label, layout, imageData, altText, appearanceMode) {
        console.warn("javax/microedition/lcdui/ImageItemLFImpl.createNativeResource0.(ILjava/lang/String;ILjavax/microedition/lcdui/ImageData;Ljava/lang/String;I)I not implemented");
        return nextMidpDisplayableId++;
    };

    addUnimplementedNative("javax/microedition/lcdui/FormLFImpl.setScrollPosition0.(I)V");
    addUnimplementedNative("javax/microedition/lcdui/FormLFImpl.getScrollPosition0.()I", 0);

    addUnimplementedNative(
        "javax/microedition/lcdui/FormLFImpl.createNativeResource0.(Ljava/lang/String;Ljava/lang/String;)I",
        function() { return nextMidpDisplayableId++ }
    );

    addUnimplementedNative("javax/microedition/lcdui/FormLFImpl.showNativeResource0.(IIII)V");
    addUnimplementedNative("javax/microedition/lcdui/FormLFImpl.getViewportHeight0.()I", 0);

    addUnimplementedNative(
        "javax/microedition/lcdui/StringItemLFImpl.createNativeResource0.(ILjava/lang/String;ILjava/lang/String;ILjavax/microedition/lcdui/Font;)I",
        function() { return nextMidpDisplayableId++ }
    );

    Native["javax/microedition/lcdui/ItemLFImpl.setSize0.(III)V"] = function(nativeId, w, h) {
        console.warn("javax/microedition/lcdui/ItemLFImpl.setSize0.(III)V not implemented");
    };

    Native["javax/microedition/lcdui/ItemLFImpl.setLocation0.(III)V"] = function(nativeId, x, y) {
        console.warn("javax/microedition/lcdui/ItemLFImpl.setLocation0.(III)V not implemented");
    };

    Native["javax/microedition/lcdui/ItemLFImpl.show0.(I)V"] = function(nativeId) {
        console.warn("javax/microedition/lcdui/ItemLFImpl.show0.(I)V not implemented");
    };

    Native["javax/microedition/lcdui/ItemLFImpl.hide0.(I)V"] = function(nativeId) {
        console.warn("javax/microedition/lcdui/ItemLFImpl.hide0.(I)V not implemented");
    };

    addUnimplementedNative("javax/microedition/lcdui/ItemLFImpl.getMinimumWidth0.(I)I", 10);
    addUnimplementedNative("javax/microedition/lcdui/ItemLFImpl.getMinimumHeight0.(I)I", 10);
    addUnimplementedNative("javax/microedition/lcdui/ItemLFImpl.getPreferredWidth0.(II)I", 10);
    addUnimplementedNative("javax/microedition/lcdui/ItemLFImpl.getPreferredHeight0.(II)I", 10);
    addUnimplementedNative("javax/microedition/lcdui/ItemLFImpl.delete0.(I)V");

    var BACK = 2;
    var CANCEL = 3;
    var OK = 4;

    Native["javax/microedition/lcdui/NativeMenu.updateCommands.([Ljavax/microedition/lcdui/Command;I[Ljavax/microedition/lcdui/Command;I)V"] =
    function(itemCommands, numItemCommands, commands, numCommands) {
        if (numItemCommands != 0) {
            console.error("NativeMenu.updateCommands: item commands not yet supported");
        }

        var el = document.getElementById("displayable-" + curDisplayableId);

        if (!el) {
            document.getElementById("sidebar").querySelector("nav ul").innerHTML = "";
        }

        if (!commands) {
            return;
        }

        var validCommands = commands.filter(function(command) {
            return !!command;
        }).sort(function(a, b) {
            return a.priority - b.priority;
        });

        function sendEvent(command) {
            MIDP.sendCommandEvent(command.id);
        }

        if (el) {
            if (numCommands > 2 && validCommands.length > 2) {
                console.error("NativeMenu.updateCommands: max two commands supported");
            }

            validCommands.slice(0, 2).forEach(function(command, i) {
                var button = el.querySelector(".button" + i);
                button.style.display = 'inline';
                button.textContent = J2ME.fromJavaString(command.shortLabel);

                var commandType = command.commandType;
                if (numCommands == 1 || commandType == OK) {
                    button.classList.add('recommend');
                } else if (commandType == CANCEL || commandType == BACK) {
                    button.classList.add('cancel');
                }

                button.onclick = function(e) {
                    e.preventDefault();
                    sendEvent(command);
                };
            });
        } else {
            var menu = document.getElementById("sidebar").querySelector("nav ul");

            var okCommand = null;
            var backCommand = null;

            var isSidebarEmpty = true;
            validCommands.forEach(function(command) {
                var commandType = command.commandType;
                // Skip the OK command which will shown in the header.
                if (commandType == OK) {
                    okCommand = command;
                    return;
                }
                // Skip the BACK command which will shown in the footer.
                if (commandType == BACK) {
                    backCommand = command;
                    return;
                }
                var li = document.createElement("li");
                var text = J2ME.fromJavaString(command.shortLabel);
                var a = document.createElement("a");
                a.textContent = text;
                li.appendChild(a);

                li.onclick = function(e) {
                    e.preventDefault();

                    window.location.hash = "";

                    sendEvent(command);
                };

                menu.appendChild(li);
                isSidebarEmpty = false;
            });

            document.getElementById("header-drawer-button").style.display =
                isSidebarEmpty ? "none" : "block";

            // If existing, the OK command will be shown in the header.
            var headerBtn = document.getElementById("header-ok-button");
            if (okCommand) {
                headerBtn.style.display = "block";
                headerBtn.onclick = sendEvent.bind(headerBtn, okCommand);
            } else {
                headerBtn.style.display = "none";
            }

            // If existing, the BACK command will be shown in the footer.
            var backBtn = document.getElementById("back-button");
            if (backCommand) {
                backBtn.style.display = "block";
                backBtn.onclick = sendEvent.bind(backBtn, backCommand);
            } else {
                backBtn.style.display = "none";
            }
        }
    };
})(Native);


var TextEditorProvider = (function() {
    var eTextArea = document.getElementById('textarea-editor');
    var currentVisibleEditor = null;

    function extendsObject(targetObj, srcObj) {
        for (var m in srcObj) {
            targetObj[m] = srcObj[m];
        }
        return targetObj;
    }

    var CommonEditorPrototype = {
        attached: false,
        width: 0,
        height: 0,
        left: 0,
        top: 0,
        constraints: 0,
        type: "",
        content: "",
        visible: false,
        id: -1,
        selectionRange: [0, 0],
        focused: false,
        oninputCallback: null,
        inputmode: "",

        // opaque white
        backgroundColor:  0xFFFFFFFF | 0,

        // opaque black
        foregroundColor:  0xFF000000 | 0,

        attach: function() {
            this.attached = true;
        },

        detach: function() {
            this.attached = false;
        },

        isAttached: function() {
            return this.attached;
        },

        decorateTextEditorElem: function() {
            // Set attributes.
            if (this.attributes) {
                for (var attr in this.attributes) {
                    this.textEditorElem.setAttribute(attr, this.attributes[attr]);
                }
            }

            this.textEditorElem.setAttribute("x-inputmode", this.inputmode);

            this.setContent(this.content);

            this.setSelectionRange(this.selectionRange[0], this.selectionRange[1]);
            this.setSize(this.width, this.height);
            this.setFont(this.font);
            this.setPosition(this.left, this.top);
            this.setBackgroundColor(this.backgroundColor);
            this.setForegroundColor(this.foregroundColor);
        },

        _setStyle: function(styleKey, styleValue) {
            if (this.visible) {
                this.textEditorElem.style.setProperty(styleKey, styleValue);
            }
        },

        focus: function() {
            this.focused = true;
            return new Promise(function(resolve, reject) {
                if (currentVisibleEditor !== this ||
                    document.activeElement === this.textEditorElem) {
                    resolve();
                    return;
                }
                setTimeout(this.textEditorElem.focus.bind(this.textEditorElem));
                this.textEditorElem.onfocus = resolve;
            }.bind(this));
        },

        blur: function() {
            this.focused = false;
            return new Promise(function(resolve, reject) {
                if (currentVisibleEditor !== this ||
                    document.activeElement !== this.textEditorElem) {
                    resolve();
                    return;
                }
                setTimeout(this.textEditorElem.blur.bind(this.textEditorElem));
                this.textEditorElem.onblur = resolve;
            }.bind(this));
        },

        getVisible: function() {
            return this.visible;
        },

        setVisible: function(aVisible) {
            // Check if we need to show or hide the html editor elements.
            if ((currentVisibleEditor === this && aVisible) ||
                (currentVisibleEditor !== this && !aVisible)) {
                this.visible = aVisible;
                return;
            }

            this.visible = aVisible;

            if (aVisible) {
                if (currentVisibleEditor) {
                    currentVisibleEditor.visible = false;
                }
                currentVisibleEditor = this;
            } else {
                currentVisibleEditor = null;
            }

            if (aVisible) {
                this.textEditorElem.classList.add("show");
            } else {
                this.textEditorElem.classList.remove("show");
            }

            if (this.visible) {
                var oldId = this.textEditorElem.getAttribute("editorId") || -1;
                if (oldId !== this.id) {
                    this.textEditorElem.setAttribute("editorId", this.id);
                    this.decorateTextEditorElem();
                    if (this.focused) {
                        setTimeout(this.textEditorElem.focus.bind(this.textEditorElem));
                    }
                }
                this.activate();
            } else {
                if (!this.focused) {
                    setTimeout(this.textEditorElem.blur.bind(this.textEditorElem));
                }
                this.deactivate();
            }
        },

        setAttribute: function(attrName, value) {
            if (!this.attributes) {
                this.attributes = { };
            }

            this.attributes[attrName] = value;
            if (this.textEditorElem) {
                this.textEditorElem.setAttribute(attrName, value);
            }
        },

        getAttribute: function(attrName) {
            if (!this.attributes) {
                return null;
            }

            return this.attributes[attrName];
        },

        setFont: function(font) {
            this.font = font;
            this._setStyle("font", font.css);
        },

        setSize: function(width, height) {
            this.width = width;
            this.height = height;
            this._setStyle("width", width + "px");
            this._setStyle("height", height + "px");
        },

        getWidth: function() {
            return this.width;
        },

        getHeight: function() {
            return this.height;
        },

        setPosition: function(left, top) {
            this.left = left;
            this.top = top;
            var t = MIDP.context2D.canvas.offsetTop + top;
            this._setStyle("left", left + "px");
            this._setStyle("top",  t + "px");
        },

        getLeft: function() {
            return this.left;
        },

        getTop: function() {
            return this.top;
        },

        setBackgroundColor: function(color) {
            this.backgroundColor = color;
            this._setStyle("backgroundColor", util.abgrIntToCSS(color));
        },

        getBackgroundColor: function() {
            return this.backgroundColor;
        },

        setForegroundColor: function(color) {
            this.foregroundColor = color;
            this._setStyle("color", util.abgrIntToCSS(color));
        },

        getForegroundColor: function() {
            return this.foregroundColor;
        },

        oninput: function(callback) {
            if (typeof callback == 'function') this.oninputCallback = callback;
        },
    }

    function TextAreaEditor() {
        this.textEditorElem = eTextArea;
    }

    TextAreaEditor.prototype = extendsObject({
        html: '',

        activate: function() {
            this.textEditorElem.onkeydown = function(e) {
                if (this.getContentSize() >= this.getAttribute("maxlength")) {
                    // http://stackoverflow.com/questions/12467240/determine-if-javascript-e-keycode-is-a-printable-non-control-character
                    if ((e.keyCode >= 48 && e.keyCode <= 57)  || // number keys
                        e.keyCode === 32 || e.keyCode === 13 || // spacebar & return key(s) (if you want to allow carriage returns)
                        (e.keyCode >= 65 && e.keyCode <= 90)   || // letter keys
                        (e.keyCode >= 96 && e.keyCode <= 111)  || // numpad keys
                        (e.keyCode >= 186 && e.keyCode <= 192) || // ;=,-./` (in order)
                        (e.keyCode >= 219 && e.keyCode <= 222)) { // [\]' (in order)
                        return false;
                    }
                }
                return true;
            }.bind(this);

            this.textEditorElem.oninput = function(e) {
                if (e.isComposing) {
                    return;
                }

                // Save the current selection.
                var range = this.getSelectionRange();

                // Remove the last <br> tag if any.
                var html = this.textEditorElem.innerHTML;
                var lastBr = html.lastIndexOf("<br>");
                if (lastBr !== -1) {
                    html = html.substring(0, lastBr);
                }

                // Replace <br> by \n so that textContent attribute doesn't
                // strip new lines.
                html = html.replace("<br>", "\n", "g");

                // Convert the emoji images back to characters.
                // The original character is stored in the alt attribute of its
                // object tag with the format of <object ... name='X' ..>.
                html = html.replace(/<object[^>]*name="(\S*)"[^>]*><\/object>/g, '$1');

                this.textEditorElem.innerHTML = html;

                this.setContent(this.textEditorElem.textContent);

                // Restore the current selection after updating emoji images.
                this.setSelectionRange(range[0], range[1]);

                // Notify TextEditor listeners.
                if (this.oninputCallback) {
                    this.oninputCallback();
                }
            }.bind(this);
        },

        deactivate: function() {
            this.textEditorElem.onkeydown = null;
            this.textEditorElem.oninput = null;
        },

        getContent: function() {
            return this.content;
        },

        setContent: function(content) {
            // Filter all the \r characters as we use \n.
            content = content.replace("\r", "", "g");

            this.content = content;

            // Escape the content to avoid malicious injection via innerHTML.
            this.textEditorElem.textContent = content;
            var html = this.textEditorElem.innerHTML;

            if (!this.visible) {
                return;
            }

            var toImg = function(str) {
                var emojiData = emoji.getData(str, this.font.size);

                var scale = this.font.size / emoji.squareSize;

                var style = 'display:inline-block;';
                style += 'width:' + this.font.size + 'px;';
                style += 'height:' + this.font.size + 'px;';
                style += 'background:url(' + emojiData.img.src + ') -' + (emojiData.x * scale) + 'px 0px no-repeat;';
                style += 'background-size:' + (emojiData.img.naturalWidth * scale) + 'px ' + this.font.size + 'px;';

                // We use <object> instead of <img> to not allow image resizing.
                return '<object style="' + style + '" name="' + str + '"></object>';
            }.bind(this);

            // Replace "\n" by <br>
            html = html.replace("\n", "<br>", "g");

            html = html.replace(emoji.regEx, toImg) + "<br>";

            this.textEditorElem.innerHTML = html;
            this.html = html;
        },

        _getNodeTextLength: function(node) {
            if (node.nodeType == Node.TEXT_NODE) {
                return node.textContent.length;
            } else if (node instanceof HTMLBRElement) {
                // Don't count the last <br>
                return node.nextSibling ? 1 : 0;
            } else {
                // It should be an HTMLImageElement of a emoji.
                return util.toCodePointArray(node.name).length;
            }
        },

        _getSelectionOffset: function(node, offset) {
            if (!this.visible) {
                return 0;
            }

            if (node !== this.textEditorElem &&
                node.parentNode !== this.textEditorElem) {
                console.error("_getSelectionOffset called while the editor is unfocused");
                return 0;
            }

            var selectedNode = null;
            var count = 0;

            if (node.nodeType === Node.TEXT_NODE) {
                selectedNode = node;
                count = offset;
                var prev = node.previousSibling;
                while (prev) {
                    count += this._getNodeTextLength(prev);
                    prev = prev.previousSibling;
                }
            } else {
                var children = node.childNodes;
                for (var i = 0; i < offset; i++) {
                    var cur = children[i];
                    count += this._getNodeTextLength(cur);
                }
                selectedNode = children[offset - 1];
            }

            return count;
        },

        getSelectionEnd: function() {
            var sel = window.getSelection();
            return this._getSelectionOffset(sel.focusNode, sel.focusOffset);
        },

        getSelectionStart: function() {
            var sel = window.getSelection();
            return this._getSelectionOffset(sel.anchorNode, sel.anchorOffset);
        },

        getSelectionRange: function() {
            var start = this.getSelectionStart();
            var end = this.getSelectionEnd();

            if (start > end) {
                return [ end, start ];
            }

            return [ start, end ];
        },

        setSelectionRange: function(from, to) {
            this.selectionRange = [from, to];
            if (!this.visible) {
                return;
            }
            if (from != to) {
                console.error("setSelectionRange not supported when from != to");
            }

            var children = this.textEditorElem.childNodes;
            for (var i = 0; i < children.length; i++) {
                var cur = children[i];
                var length = this._getNodeTextLength(cur);

                if (length >= from) {
                    var selection = window.getSelection();
                    var range;
                    if (selection.rangeCount === 0) {
                        // XXX: This makes it so chrome does not break here, but
                        // text boxes still do not behave correctly in chrome.
                        range = document.createRange();
                        selection.addRange(range);
                    } else {
                        range = selection.getRangeAt(0);
                    }
                    if (cur.textContent) {
                        range.setStart(cur, from);
                    } else if (from === 0) {
                        range.setStartBefore(cur);
                    } else {
                        range.setStartAfter(cur);
                    }
                    range.collapse(true);
                    break;
                }

                from -= length;
            }
        },

        getSlice: function(from, to) {
            return util.toCodePointArray(this.content).slice(from, to).join("");
        },

        /*
         * The TextEditor::getContentSize() method returns the length of the content in codepoints
         */
        getContentSize: function() {
            return util.toCodePointArray(this.content).length;
        },

        /*
         * The height of the content is estimated by creating an hidden div
         * with the same style as the TextEditor element.
         */
        getContentHeight: function() {
            var div = document.getElementById("hidden-textarea-editor");
            div.style.setProperty("width", this.getWidth() + "px");
            div.style.setProperty("font", this.font.css);
            div.innerHTML = this.html;
            var height = div.offsetHeight;

            div.innerHTML = "";

            return height;
        },
    }, CommonEditorPrototype);

    function InputEditor(type) {
        this.textEditorElem = document.getElementById(type + "-editor");
    }

    InputEditor.prototype = extendsObject({
        activate: function() {
            this.textEditorElem.oninput = function() {
                this.content = this.textEditorElem.value;
                if (this.oninputCallback) {
                    this.oninputCallback();
                }
            }.bind(this);
        },

        deactivate: function() {
            this.textEditorElem.oninput = null;
        },

        getContent: function() {
            return this.content;
        },

        setContent: function(content) {
            this.content = content;

            if (this.visible) {
                this.textEditorElem.value = content;
            }
        },

        getSelectionStart: function() {
            if (this.visible) {
                return this.textEditorElem.selectionStart;
            }

            return 0;
        },

        getSelectionEnd: function() {
            if (this.visible) {
                return this.textEditorElem.selectionEnd;
            }

            return 0;
        },

        getSelectionRange: function() {
            var start = this.getSelectionStart();
            var end = this.getSelectionEnd();

            if (start > end) {
                return [ end, start ];
            }

            return [ start, end ];
        },

        setSelectionRange: function(from, to) {
            this.selectionRange = [from, to];
            if (!this.visible) {
                return;
            }
            this.textEditorElem.setSelectionRange(from, to);
        },

        getSlice: function(from, to) {
            return this.content.slice(from, to);
        },

        getContentSize: function() {
            return this.content.length;
        },

        getContentHeight: function() {
            return ((this.content.match(/\n/g) || []).length + 1) * this.font.height;
        },
    }, CommonEditorPrototype);

    return {
        getEditor: function(constraints, oldEditor, editorId) {
            // https://docs.oracle.com/javame/config/cldc/ref-impl/midp2.0/jsr118/javax/microedition/lcdui/TextField.html#constraints
            var TextField = {
                ANY:                          0,
                EMAILADDR:                    1,
                NUMERIC:                      2,
                PHONENUMBER:                  3,
                URL:                          4,
                DECIMAL:                      5,
                PASSWORD:               0x10000,
                NON_PREDICTIVE:         0x80000,
                INITIAL_CAPS_WORD:     0x100000,
                INITIAL_CAPS_SENTENCE: 0x200000,
                CONSTRAINT_MASK:         0xFFFF
            };

            function _createEditor(type, constraints, editorId, inputmode) {
                var editor;
                if (type === "textarea") {
                    editor = new TextAreaEditor();
                } else {
                    editor = new InputEditor(type);
                }
                editor.type = type;
                editor.constraints = constraints;
                editor.id = editorId;
                editor.inputmode = inputmode;
                return editor;
            }

            var type = "";
            var inputmode = "";
            var mode = constraints & TextField.CONSTRAINT_MASK;
            if (constraints & TextField.PASSWORD) {
                type = "password";
                if (mode === TextField.NUMERIC) {
                    inputmode = "number";
                }
            } else {
                switch (mode) {
                    case TextField.EMAILADDR:
                        type = "email";
                        break;
                    case TextField.DECIMAL: // fall through
                    case TextField.NUMERIC:
                        type = "number";
                        break;
                    case TextField.PHONENUMBER:
                        type = "tel";
                        break;
                    case TextField.URL:
                        type = "url";
                        break;
                    case TextField.ANY: // fall through
                    default:
                        type = "textarea";
                        break;
                }
                if (constraints & TextField.NON_PREDICTIVE) {
                    // No capitalization and no word suggestions
                    inputmode = "verbatim";
                } else if (constraints & TextField.INITIAL_CAPS_SENTENCE) {
                    // Word suggestions and capitalization at the start of sentences
                    inputmode = "latin-prose";
                } else if (constraints & TextField.INITIAL_CAPS_WORD) {
                    // Word suggestions and capitalization at each word
                    inputmode = "latin-name";
                } else {
                    // Word suggestions but no capitalization
                    inputmode = "latin";
                }
            }

            var newEditor;

            if (!oldEditor) {
                newEditor = _createEditor(type, constraints, editorId, inputmode);
                return newEditor;
            }

            if (type === oldEditor.type) {
                return oldEditor;
            }

            // The type is changed and we need to copy all the attributes.
            var newEditor = _createEditor(type, constraints, editorId, inputmode);
            ["attributes",
             "width", "height",
             "left", "top",
             "backgroundColor", "foregroundColor",
             "attached",
             "content",
             "font",
             "oninputCallback"].forEach(function(attr) {
                newEditor[attr] = oldEditor[attr];
            });

            // Call setVisible to update display.
            var visible = oldEditor.visible;
            oldEditor.setVisible(false);
            newEditor.setVisible(visible);
            return newEditor;
        }
    };
})();
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var LocalMsgConnection = function() {
    this.waitingForConnection = null;
    this.serverWaiting = [];
    this.clientWaiting = [];
    this.serverMessages = [];
    this.clientMessages = [];
}

LocalMsgConnection.prototype.notifyConnection = function() {
    if (this.waitingForConnection) {
        this.waitingForConnection();
    }
}

LocalMsgConnection.prototype.waitConnection = function() {
    return new Promise((function(resolve, reject) {
      this.waitingForConnection = function() {
          this.waitingForConnection = null;
          resolve();
      }
    }).bind(this));
}

LocalMsgConnection.prototype.copyMessage = function(messageQueue, data) {
    var msg = messageQueue.shift();

    for (var i = 0; i < msg.length; i++) {
        data[i] = msg.data[i + msg.offset];
    }

    return msg.length;
}

LocalMsgConnection.prototype.sendMessageToClient = function(message) {
    this.clientMessages.push(message);

    if (this.clientWaiting.length > 0) {
        this.clientWaiting.shift()();
    }
}

LocalMsgConnection.prototype.clientReceiveMessage = function(data) {
    return new Promise((function(resolve, reject) {
        if (this.clientMessages.length == 0) {
            this.clientWaiting.push(function() {
                resolve(this.copyMessage(this.clientMessages, data));
            }.bind(this));

            return;
        }

        resolve(this.copyMessage(this.clientMessages, data));
    }).bind(this));
}

LocalMsgConnection.prototype.sendMessageToServer = function(message) {
    this.serverMessages.push(message);

    if (this.serverWaiting.length > 0) {
        this.serverWaiting.shift()();
    }
}

LocalMsgConnection.prototype.serverReceiveMessage = function(data) {
    return new Promise((function(resolve, reject) {
        if (this.serverMessages.length == 0) {
            this.serverWaiting.push(function() {
                resolve(this.copyMessage(this.serverMessages, data));
            }.bind(this));
            return;
        }

        resolve(this.copyMessage(this.serverMessages, data));
    }).bind(this));
}

var NokiaMessagingLocalMsgConnection = function() {
    LocalMsgConnection.call(this);
    window.addEventListener("nokia.messaging", function(e) {
        this.receiveSMS(e.detail);
    }.bind(this));
}

NokiaMessagingLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaMessagingLocalMsgConnection.prototype.receiveSMS = function(sms) {
  var encoder = new DataEncoder();

  encoder.putStart(DataType.STRUCT, "event");
  encoder.put(DataType.METHOD, "name", "MessageNotify");
  encoder.put(DataType.USHORT, "trans_id", Date.now() % 255); // The meaning of this field is unknown
  encoder.put(DataType.STRING, "type", "SMS"); // The name of this field is unknown
  encoder.put(DataType.ULONG, "message_id", sms.id);
  encoder.putEnd(DataType.STRUCT, "event");

  var data = new TextEncoder().encode(encoder.getData());
  this.sendMessageToClient({
    data: data,
    length: data.length,
    offset: 0,
  });
}

NokiaMessagingLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var encoder = new DataEncoder();

  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  switch (name) {
    case "Common":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "2.[0-10]");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");
    break;

    case "SubscribeMessages":
      promptForMessageText();
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "SubscribeMessages");
      encoder.put(DataType.USHORT, "trans_id", decoder.getValue(DataType.USHORT)); // The meaning of this field is unknown
      encoder.put(DataType.STRING, "result", "OK"); // The name of this field is unknown
      encoder.putEnd(DataType.STRUCT, "event");
    break;

    case "GetMessageEntity":
      var trans_id = decoder.getValue(DataType.USHORT);
      var sms_id = decoder.getValue(DataType.ULONG);

      var sms;
      for (var i = 0; i < MIDP.nokiaSMSMessages.length; i++) {
        if (MIDP.nokiaSMSMessages[i].id == sms_id) {
          sms = MIDP.nokiaSMSMessages[i];
          break;
        }
      }

      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "GetMessageEntity");
      encoder.put(DataType.USHORT, "trans_id", trans_id); // The meaning of this field is unknown
      encoder.put(DataType.STRING, "result", "OK"); // The name of this field is unknown
      encoder.put(DataType.ULONG, "message_id", sms_id);
      encoder.putStart(DataType.LIST, "list_name_unknown"); // The name of this field is unknown
      encoder.put(DataType.WSTRING, "body_text", sms.text);
      encoder.put(DataType.STRING, "address", sms.addr);
      encoder.putEnd(DataType.LIST);
      encoder.putEnd(DataType.STRUCT, "event");
    break;

    case "DeleteMessages":
      decoder.getValue(DataType.USHORT);
      decoder.getStart(DataType.ARRAY);
      var sms_id = decoder.getValue(DataType.ULONG);

      for (var i = 0; i < MIDP.nokiaSMSMessages.length; i++) {
        if (MIDP.nokiaSMSMessages[i].id == sms_id) {
          MIDP.nokiaSMSMessages.splice(i, 1);
          break;
        }
      }

      return;
    break;

    default:
      console.error("(nokia.messaging) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }

  var data = new TextEncoder().encode(encoder.getData());
  this.sendMessageToClient({
    data: data,
    length: data.length,
    offset: 0,
  });
}

var NokiaSASrvRegLocalMsgConnection = function() {
    LocalMsgConnection.call(this);
};

NokiaSASrvRegLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaSASrvRegLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  var encoder = new DataEncoder();

  switch (name) {
    case "Common":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "2.0");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");
      break;
    case "Discovery":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Discovery");
      encoder.put(DataType.BYTE, "unknown_byte_1", 1);
      encoder.put(DataType.STRING, "unknown_string_1", "");
      encoder.putStart(DataType.ARRAY, "services");
      encoder.putStart(DataType.STRUCT, "service");
      encoder.put(DataType.STRING, "ServiceName", "file_ui");
      encoder.put(DataType.URI, "ServiceURI", "nokia.file-ui");
      encoder.put(DataType.STRING, "unknown_string_2", "");
      encoder.put(DataType.WSTRING, "unknown_string_3", "");
      encoder.put(DataType.STRING, "unknown_string_4", "");
      encoder.putEnd(DataType.STRUCT, "service");
      encoder.putEnd(DataType.ARRAY, "services");
      encoder.putEnd(DataType.STRUCT, "event");
      break;
  }

  var data = new TextEncoder().encode(encoder.getData());
  this.sendMessageToClient({
      data: data,
      length: data.length,
      offset: 0,
  });
};

var NokiaPhoneStatusLocalMsgConnection = function() {
  LocalMsgConnection.call(this);

  this.listeners = {
    "battery": false,
    "network_status": false,
    "wifi_status": false,
  };

  window.addEventListener('online', (function() {
    if (this.listeners["network_status"]) {
      this.sendChangeNotify(this.buildNetworkStatus.bind(this), true);
    }

    if (this.listeners["wifi_status"]) {
      this.sendChangeNotify(this.buildWiFiStatus.bind(this), true);
    }
  }).bind(this));;

  window.addEventListener('offline', (function() {
    if (this.listeners["network_status"]) {
      this.sendChangeNotify(this.buildNetworkStatus.bind(this), false);
    }

    if (this.listeners["wifi_status"]) {
      this.sendChangeNotify(this.buildWiFiStatus.bind(this), false);
    }
  }).bind(this));
};

NokiaPhoneStatusLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaPhoneStatusLocalMsgConnection.prototype.buildNetworkStatus = function(encoder, online) {
  encoder.putStart(DataType.STRUCT, "network_status");
  encoder.put(DataType.STRING, "", "Home");  // Name unknown (value is "None", "Home" or "Roam")
  encoder.put(DataType.BOOLEAN, "", online ? 1 : 0);  // Name unknown
  encoder.putEnd(DataType.STRUCT, "network_status");
}

NokiaPhoneStatusLocalMsgConnection.prototype.buildWiFiStatus = function(encoder, online) {
  encoder.putStart(DataType.STRUCT, "wifi_status");
  encoder.put(DataType.BOOLEAN, "", online ? 1 : 0);  // Name unknown, we're assuming we're connected to a wifi network.
  encoder.putEnd(DataType.STRUCT, "wifi_status");
}

NokiaPhoneStatusLocalMsgConnection.prototype.buildBattery = function(encoder) {
  encoder.putStart(DataType.STRUCT, "battery");
  encoder.put(DataType.BYTE, "", 1);  // Name unknown
  encoder.put(DataType.BOOLEAN, "", 1);  // Name unknown
  encoder.putEnd(DataType.STRUCT, "battery");
}

NokiaPhoneStatusLocalMsgConnection.prototype.sendChangeNotify = function(replyBuilder, online) {
  var encoder = new DataEncoder();
  encoder.putStart(DataType.STRUCT, "event");
  encoder.put(DataType.METHOD, "name", "ChangeNotify");
  encoder.put(DataType.STRING, "status", "OK"); // Name and value unknown
  encoder.putStart(DataType.LIST, "subscriptions");

  replyBuilder(encoder, online);

  encoder.putEnd(DataType.LIST, "subscriptions");
  encoder.putEnd(DataType.STRUCT, "event");

  var data = new TextEncoder().encode(encoder.getData());
  this.sendMessageToClient({
    data: data,
    length: data.length,
    offset: 0,
  });
}

NokiaPhoneStatusLocalMsgConnection.prototype.addListener = function(type) {
  if (type === "battery") {
    console.warn("Battery notifications not supported");
    return;
  }

  this.listeners[type] = true;
}

NokiaPhoneStatusLocalMsgConnection.prototype.removeListener = function(type) {
  this.listeners[type] = false;
}

NokiaPhoneStatusLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  var encoder = new DataEncoder();

  switch (name) {
    case "Common":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "1.[0-10]");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });
      break;

    case "Query":
      // This will be true if there is at least one "CurrentStateOnly" request.
      var headerBuilt = false;

      // subscriptions
      decoder.getStart(DataType.LIST);
      while (decoder.getTag() == DataType.STRING) {
        var name = decoder.getName();
        var queryKind = decoder.getValue(DataType.STRING);

        if (queryKind === "CurrentStateOnly") {
          if (!headerBuilt) {
            encoder.putStart(DataType.STRUCT, "event");
            encoder.put(DataType.METHOD, "name", "Query");
            encoder.put(DataType.STRING, "status", "OK");
            encoder.putStart(DataType.LIST, "subscriptions");
            headerBuilt = true;
          }

          switch (name) {
            case "network_status":
              this.buildNetworkStatus(encoder, navigator.onLine);
              break;

            case "wifi_status":
              this.buildWiFiStatus(encoder, navigator.onLine);
              break;

            case "battery":
              this.buildBattery(encoder);
              break;

            default:
              console.error("(nokia.phone-status) Query " + decoder.getName() + " not implemented " +
                            util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
              break;
          }
        } else if (queryKind === "Disable") {
          this.removeListener(name);
        } else if (queryKind === "Enable") {
          this.addListener(name);
        }
      }

      if (headerBuilt) {
        encoder.putEnd(DataType.LIST, "subscriptions");
        encoder.putEnd(DataType.STRUCT, "event");

        var data = new TextEncoder().encode(encoder.getData());
        this.sendMessageToClient({
          data: data,
          length: data.length,
          offset: 0,
        });
      }

      break;

    default:
      console.error("(nokia.phone-status) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }
};

var NokiaContactsLocalMsgConnection = function() {
    LocalMsgConnection.call(this);
}

NokiaContactsLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaContactsLocalMsgConnection.prototype.encodeContact = function(encoder, contact) {
    encoder.putStart(DataType.LIST, "Contact");

    encoder.put(DataType.WSTRING, "ContactID", contact.id.toString().substr(0,30));

    encoder.put(DataType.WSTRING, "DisplayName", contact.name[0]);

    encoder.putStart(DataType.ARRAY, "Numbers");
    contact.tel.forEach(function(tel) {
        encoder.putStart(DataType.LIST, "NumbersList"); // The name of this field is unknown
        // encoder.put(DataType.ULONG, "Kind", ???); // The meaning of this field is unknown
        encoder.put(DataType.WSTRING, "Number", tel.value);
        encoder.putEnd(DataType.LIST, "NumbersList");
    });
    encoder.putEnd(DataType.ARRAY, "Numbers");

    encoder.putEnd(DataType.LIST, "Contact");
}

NokiaContactsLocalMsgConnection.prototype.sendContact = function(trans_id, contact) {
    if (!contact.tel) {
        return;
    }

    var encoder = new DataEncoder();
    encoder.putStart(DataType.STRUCT, "event");
    encoder.put(DataType.METHOD, "name", "Notify");
    encoder.put(DataType.ULONG, "trans_id", trans_id); // The meaning of this field is unknown
    encoder.put(DataType.BYTE, "type", 1); // The name of this field is unknown (the value may be 1, 2, 3 according to the event (I'd guess CREATE, DELETE, UPDATE))
    this.encodeContact(encoder, contact);
    encoder.putEnd(DataType.STRUCT, "event");

    var data = new TextEncoder().encode(encoder.getData());
    this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
    });
};

NokiaContactsLocalMsgConnection.prototype.getFirstOrNext = function(trans_id, method) {
  var gotContact = (function(contact) {
    if (contact && !contact.tel) {
      contacts.getNext(gotContact);
      return;
    }

    var encoder = new DataEncoder();
    encoder.putStart(DataType.STRUCT, "event");
    encoder.put(DataType.METHOD, "name", method);
    encoder.put(DataType.ULONG, "trans_id", trans_id);
    if (contact) {
      encoder.put(DataType.STRING, "result", "OK"); // Name unknown
      encoder.putStart(DataType.ARRAY, "contacts"); // Name unknown
      this.encodeContact(encoder, contact);
      encoder.putEnd(DataType.ARRAY, "contacts"); // Name unknown
    } else {
      encoder.put(DataType.STRING, "result", "Entry not found"); // Name unknown
    }
    encoder.putEnd(DataType.STRUCT, "event");

    var data = new TextEncoder().encode(encoder.getData());
    this.sendMessageToClient({
      data: data,
      length: data.length,
      offset: 0,
    });
  }).bind(this);

  contacts.getNext(gotContact);
};

NokiaContactsLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  switch (name) {
    case "Common":
      var encoder = new DataEncoder();

      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "2.[0-10]");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
          data: data,
          length: data.length,
          offset: 0,
      });
    break;

    case "NotifySubscribe":
      contacts.forEach(this.sendContact.bind(this, decoder.getValue(DataType.ULONG)));
    break;

    case "getFirst":
      var trans_id = decoder.getValue(DataType.ULONG);
      decoder.getEnd(DataType.ARRAY); // Ignore the contents of the "sources" array
      var numEntries = decoder.getValue(DataType.ULONG);
      if (numEntries !== 1) {
        console.error("(nokia.contacts) event getFirst with numEntries != 1 not implemented " +
                      util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      }

      this.getFirstOrNext(trans_id, "getFirst");
    break;

    case "getNext":
      var trans_id = decoder.getValue(DataType.ULONG);
      decoder.getEnd(DataType.ARRAY); // Ignore the contents of the "sources" array
      decoder.getEnd(DataType.LIST); // Ignore the contents of the "filter" list
      decoder.getStart(DataType.LIST);
      var contactID = decoder.getValue(DataType.WSTRING);
      decoder.getEnd(DataType.LIST);
      var includeStartEntry = decoder.getValue(DataType.BOOLEAN);
      if (includeStartEntry == 1) {
        console.error("(nokia.contacts) event getNext with includeStartEntry == true not implemented " +
                      util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      }
      var numEntries = decoder.getValue(DataType.ULONG);
      if (numEntries !== 1) {
        console.error("(nokia.contacts) event getNext with numEntries != 1 not implemented " +
                      util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      }

      this.getFirstOrNext(trans_id, "getNext");
    break;

    default:
      console.error("(nokia.contacts) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }
}

var NokiaFileUILocalMsgConnection = function() {
    LocalMsgConnection.call(this);
};

NokiaFileUILocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaFileUILocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  switch (name) {
    case "Common":
      var encoder = new DataEncoder();

      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "1.0");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
          data: data,
          length: data.length,
          offset: 0,
      });
      break;

    case "FileSelect":
      var trans_id = decoder.getValue(DataType.USHORT);
      var storageType = decoder.getValue(DataType.STRING);
      var mediaType = decoder.getValue(DataType.STRING);
      var multipleSelection = decoder.getValue(DataType.BOOLEAN);
      var startingURL = decoder.getValue(DataType.STRING);

      var accept = '';

      switch (mediaType) {
        case "Picture":
          accept = "image/*";
        break;

        case "Video":
          accept = "video/*";
        break;

        case "Music":
        case "Sound":
          accept = "audio/*";
        break;

        default:
          throw new Error("Media type '" + mediaType + "' not supported");
      }

      var promptTemplateNode = document.getElementById('nokia-fileui-prompt');
      var el = promptTemplateNode.cloneNode(true);
      el.style.display = 'block';
      el.classList.add('visible');

      var fileInput = el.querySelector('input');
      fileInput.accept = accept;

      var btnDone = el.querySelector('button.recommend');
      btnDone.disabled = true;

      var selectedFile = null;

      fileInput.addEventListener('change', function() {
        btnDone.disabled = false;
        selectedFile = this.files[0];
      });

      el.querySelector('button.cancel').addEventListener('click', function() {
        el.parentElement.removeChild(el);
      });

      btnDone.addEventListener('click', (function() {
        el.parentElement.removeChild(el);

        if (!selectedFile) {
          return;
        }

        var ext = "";
        var extIndex = selectedFile.name.lastIndexOf(".");
        if (extIndex != -1) {
          ext = selectedFile.name.substr(extIndex);
        }

        var fileName = fs.createUniqueFile("/Private/nokiafileui", "file" + ext, selectedFile);
        var encoder = new DataEncoder();

        encoder.putStart(DataType.STRUCT, "event");
        encoder.put(DataType.METHOD, "name", "FileSelect");
        encoder.put(DataType.USHORT, "trans_id", trans_id);
        encoder.put(DataType.STRING, "result", "OK"); // Name unknown
        encoder.putStart(DataType.ARRAY, "unknown_array"); // Name unknown
        encoder.putStart(DataType.STRUCT, "unknown_struct"); // Name unknown
        encoder.put(DataType.STRING, "unknown_string_1", ""); // Name and value unknown
        encoder.put(DataType.WSTRING, "unknown_string_2", ""); // Name and value unknown
        encoder.put(DataType.WSTRING, "unknown_string_3", "Private/nokiafileui/" + fileName); // Name unknown
        encoder.put(DataType.BOOLEAN, "unknown_boolean", 1); // Name and value unknown
        encoder.put(DataType.ULONG, "unknown_long", 0); // Name and value unknown
        encoder.putEnd(DataType.STRUCT, "unknown_struct"); // Name unknown
        encoder.putEnd(DataType.ARRAY, "unknown_array"); // Name unknown
        encoder.putEnd(DataType.STRUCT, "event");

        var data = new TextEncoder().encode(encoder.getData());
        this.sendMessageToClient({
          data: data,
          length: data.length,
          offset: 0,
        });
      }).bind(this));

      promptTemplateNode.parentNode.appendChild(el);
    break;

    default:
      console.error("(nokia.file-ui) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }
};

var NokiaImageProcessingLocalMsgConnection = function() {
    LocalMsgConnection.call(this);
};

NokiaImageProcessingLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaImageProcessingLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  switch (name) {
    case "Common":
      var encoder = new DataEncoder();

      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "1.0");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });
      break;

    case "Scale":
      var trans_id = decoder.getValue(DataType.BYTE);
      var fileName = decoder.getValue(DataType.WSTRING);
      var max_vres = 0;
      var max_hres = 0;
      var max_kb = 0;
      decoder.getStart(DataType.LIST);
      while (true) {
        var paramName = decoder.getName();
        var value = decoder.getValue(DataType.USHORT);
        if (paramName === "limits")
          break;

        switch (paramName) {
          case "max_kb":
            max_kb = value;
            break;
          case "max_vres":
            max_vres = value;
            break;
          case "max_hres":
            max_hres = value;
            break;
          default:
            console.error("(nokia.image-processing) event " + name + " with " +
              paramName + " = " + value + " not implemented.");
            return;
        }
      }
      decoder.getEnd(DataType.LIST);
      var aspect = decoder.getValue(DataType.STRING);
      var quality = decoder.getValue(DataType.BYTE) || 80;

      if (aspect != "FullImage" && aspect != "LockToPartialView") {
        console.error("(nokia.image-processing) event " + name + " with aspect != 'FullImage' or 'LockToPartialView' not implemented " +
                      util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
        return;
      }

      fs.open("/" + fileName, (function(fd) {
        var img = null;

        function _cleanupImg() {
          if (img) {
            URL.revokeObjectURL(img.src);
            img.src = '';
            img = null;
          }
        }

        var _sendBackScaledImage = function(blob) {
          _cleanupImg();

          var ext = "";
          var extIndex = fileName.lastIndexOf(".");
          if (extIndex != -1) {
            ext = fileName.substr(extIndex);
          }

          var uniqueFileName = fs.createUniqueFile("/Private/nokiaimageprocessing", "image" + ext, blob);
          var encoder = new DataEncoder();

          encoder.putStart(DataType.STRUCT, "event");
          encoder.put(DataType.METHOD, "name", "Scale");
          encoder.put(DataType.BYTE, "trans_id", trans_id);
          encoder.put(DataType.STRING, "result", "Complete"); // Name unknown
          encoder.put(DataType.WSTRING, "filename", "Private/nokiaimageprocessing/" + uniqueFileName); // Name unknown
          encoder.putEnd(DataType.STRUCT, "event");

          var data = new TextEncoder().encode(encoder.getData());
          this.sendMessageToClient({
            data: data,
            length: data.length,
            offset: 0,
          });
        }.bind(this);

        var imgData = fs.read(fd);
        var fileSize = fs.getsize(fd);
        fs.close(fd);

        img = new Image();
        img.src = URL.createObjectURL(new Blob([ imgData ]));

        img.onload = (function() {
          // If the image size is less than the given max_kb, and height/width
          // are less than max_hres/max_wres, send the original image immediately
          // without any scaling.
          if (max_kb > 0 && (max_kb * 1024) >= fileSize &&
              (max_hres <= 0 || img.naturalHeight <= max_vres) &&
              (max_vres <= 0 || img.naturalWidth <= max_hres)) {
            _sendBackScaledImage(new Blob([ imgData ]));
            return;
          }

          function _imageToBlob(aCanvas, aImage, aHeight, aWidth, aQuality) {
            aCanvas.width = aWidth;
            aCanvas.height = aHeight;
            var ctx = aCanvas.getContext("2d");
            ctx.drawImage(aImage, 0, 0, aWidth, aHeight);

            return new Promise(function(resolve, reject) {
              aCanvas.toBlob(resolve, "image/jpeg", aQuality / 100);
            });
          }

          var canvas = document.createElement("canvas");
          if (max_kb <= 0) {
            _imageToBlob(canvas, img, Math.min(img.naturalHeight, max_vres),
                         Math.min(img.naturalWidth, max_hres), quality).then(_sendBackScaledImage);
            return;
          }

          _imageToBlob(canvas, img, img.naturalHeight,
                       img.naturalWidth, quality).then(function(blob) {
            var imgSizeInKb = blob.size / 1024;

            // Roughly recalc max_vres and max_hres based on the max_kb and the real resolution.
            var ratio = Math.sqrt(max_kb / imgSizeInKb);
            max_hres = Math.min(img.naturalWidth * ratio,
              max_hres <= 0 ? img.naturalWidth : max_hres);
            max_vres = Math.min(img.naturalHeight * ratio,
              max_vres <=0 ? img.naturalHeight : max_vres);

            return _imageToBlob(canvas, img, Math.min(img.naturalHeight, max_vres),
                                Math.min(img.naturalWidth, max_hres), quality);
          }).then(_sendBackScaledImage);
        }).bind(this);

        img.onerror = function(e) {
          console.error("Error in decoding image");
          _cleanupImg();
        };
      }).bind(this));
    break;

    default:
      console.error("(nokia.image-processing) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }
};

var NokiaProductInfoLocalMsgConnection = function() {
    LocalMsgConnection.call(this);
};

NokiaProductInfoLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaProductInfoLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var encoder = new DataEncoder();
  var decoder = new DataDecoder(message.data, message.offset, message.length);
  decoder.getStart(DataType.STRUCT);

  var name = decoder.getValue(DataType.METHOD);
  switch (name) {
    case "Common":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "1.1");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });
      break;
    case "ReadProductInfo":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "ReadProductInfo");
      encoder.put(DataType.STRING, "result", "OK");
      encoder.put(DataType.STRING, "unkown_str_1", "");
      encoder.put(DataType.STRING, "unkown_str_2", "");
      encoder.put(DataType.STRING, "unkown_str_3", "");
      encoder.put(DataType.STRING, "unkown_str_4", ""); // Probably RMCODE
      encoder.put(DataType.STRING, "unkown_str_5", "");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });
      break;
    default:
      console.error("(nokia.status-info) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }
};

var NokiaActiveStandbyLocalMsgConnection = function() {
    LocalMsgConnection.call(this);
}

NokiaActiveStandbyLocalMsgConnection.indicatorActive = false;
NokiaActiveStandbyLocalMsgConnection.pipeSender = null;

NokiaActiveStandbyLocalMsgConnection.prototype = Object.create(LocalMsgConnection.prototype);

NokiaActiveStandbyLocalMsgConnection.prototype.recipient = function(message) {
  switch (message.type) {
    case "close":
      DumbPipe.close(NokiaActiveStandbyLocalMsgConnection.pipeSender);
      NokiaActiveStandbyLocalMsgConnection.pipeSender = null;
    break;
  }
}

NokiaActiveStandbyLocalMsgConnection.prototype.sendMessageToServer = function(message) {
  var encoder = new DataEncoder();

  var decoder = new DataDecoder(message.data, message.offset, message.length);

  decoder.getStart(DataType.STRUCT);
  var name = decoder.getValue(DataType.METHOD);

  switch (name) {
    case "Common":
      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Common");
      encoder.putStart(DataType.STRUCT, "message");
      encoder.put(DataType.METHOD, "name", "ProtocolVersion");
      encoder.put(DataType.STRING, "version", "1.[0-10]");
      encoder.putEnd(DataType.STRUCT, "message");
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });
    break;

    case "Register":
      var client_id = decoder.getValue(DataType.STRING);
      var personalise_view_text = decoder.getValue(DataType.WSTRING);
      decoder.getValue(DataType.BOOLEAN);

      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Register");
      encoder.put(DataType.WSTRING, "client_id", client_id);
      encoder.put(DataType.STRING, "result", "OK"); // Name unknown
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });

      setZeroTimeout((function() {
        var encoder = new DataEncoder();

        encoder.putStart(DataType.STRUCT, "event");
        encoder.put(DataType.METHOD, "name", "Activated");
        encoder.put(DataType.WSTRING, "client_id", client_id);
        encoder.putStart(DataType.LIST, "unknown_list");
        // Unknown DataType.STRING elements
        encoder.putEnd(DataType.LIST, "unknown_list");
        encoder.put(DataType.BYTE, "unkown_byte", 1); // Name unknown
        encoder.put(DataType.SHORT, "unknown_short_1", 0); // Name and value unknown
        encoder.put(DataType.SHORT, "unknown_short_2", 0); // Name and value unknown
        encoder.putEnd(DataType.STRUCT, "event");

        var data = new TextEncoder().encode(encoder.getData());
        this.sendMessageToClient({
          data: data,
          length: data.length,
          offset: 0,
        });
      }).bind(this));
    break;

    case "Update":
      var client_id = decoder.getValue(DataType.STRING);
      var personalise_view_text = decoder.getValue(DataType.WSTRING);
      var activate_scroll_events = decoder.getValue(DataType.BOOLEAN);
      var content_icon = decoder.getNextValue();
      var mime_type = decoder.getValue(DataType.STRING);
      var context_text = decoder.getValue(DataType.WSTRING);

      if (NokiaActiveStandbyLocalMsgConnection.indicatorActive) {
        NokiaActiveStandbyLocalMsgConnection.pipeSender = DumbPipe.open("notification", {
          title: personalise_view_text,
          options: {
            body: context_text,
          },
          icon: content_icon,
          mime_type: mime_type,
        }, this.recipient.bind(this));
      }

      encoder.putStart(DataType.STRUCT, "event");
      encoder.put(DataType.METHOD, "name", "Update");
      encoder.put(DataType.WSTRING, "client_id", client_id);
      encoder.put(DataType.STRING, "result", "OK"); // Name unknown
      encoder.putEnd(DataType.STRUCT, "event");

      var data = new TextEncoder().encode(encoder.getData());
      this.sendMessageToClient({
        data: data,
        length: data.length,
        offset: 0,
      });
      break;

    default:
      console.error("(nokia.active-standby) event " + name + " not implemented " +
                    util.decodeUtf8(new Int8Array(message.data.buffer, message.offset, message.length)));
      return;
  }
}

Native["com/nokia/mid/ui/lcdui/Indicator.setActive.(Z)V"] = function(active) {
  NokiaActiveStandbyLocalMsgConnection.indicatorActive = active;

  if (!active && NokiaActiveStandbyLocalMsgConnection.pipeSender) {
    NokiaActiveStandbyLocalMsgConnection.pipeSender({ type: "close" });
  }
};

MIDP.LocalMsgConnections = {};

// Add some fake servers because some MIDlets assume they exist.
// MIDlets are usually happy even if the servers don't reply, but we should
// remember to implement them in case they will be needed.
MIDP.FakeLocalMsgServers = [ "nokia.profile", "nokia.connectivity-settings" ];

MIDP.FakeLocalMsgServers.forEach(function(server) {
    MIDP.LocalMsgConnections[server] = LocalMsgConnection;
});

MIDP.LocalMsgConnections["nokia.contacts"] = NokiaContactsLocalMsgConnection;
MIDP.LocalMsgConnections["nokia.messaging"] = NokiaMessagingLocalMsgConnection;
MIDP.LocalMsgConnections["nokia.phone-status"] = NokiaPhoneStatusLocalMsgConnection;
MIDP.LocalMsgConnections["nokia.file-ui"] = NokiaFileUILocalMsgConnection;
MIDP.LocalMsgConnections["nokia.image-processing"] = NokiaImageProcessingLocalMsgConnection;
MIDP.LocalMsgConnections["nokia.sa.service-registry"] = NokiaSASrvRegLocalMsgConnection;
MIDP.LocalMsgConnections["nokia.active-standby"] = NokiaActiveStandbyLocalMsgConnection;
MIDP.LocalMsgConnections["nokia.product-info"] = NokiaProductInfoLocalMsgConnection;

Native["org/mozilla/io/LocalMsgConnection.init.(Ljava/lang/String;)V"] = function(jName) {
    var name = J2ME.fromJavaString(jName);

    this.server = (name[2] == ":");
    this.protocolName = name.slice((name[2] == ':') ? 3 : 2);
    asyncImpl("V", new Promise((function(resolve, reject) {
        if (this.server) {
            // It seems that one server only serves on client at a time, let's
            // store an object instead of the constructor.
            this.connection = MIDP.LocalMsgConnections[this.protocolName] = new LocalMsgConnection();
            localmsgServerCreated = true;
            if (localmsgServerWait) {
              localmsgServerWait();
            }
        } else {
            // Actually, there should always be a server, but we need this check
            // for apps that use the Nokia built-in servers (because we haven't
            // implemented them yet).
            if (!MIDP.LocalMsgConnections[this.protocolName]) {
                console.error("localmsg server (" + this.protocolName + ") unimplemented");
                // Return without resolving the promise, we want the thread that is connecting
                // to this unimplemented server to stop indefinitely.
                return;
            }

            if (MIDP.FakeLocalMsgServers.indexOf(this.protocolName) != -1) {
                console.warn("connect to an unimplemented localmsg server (" + this.protocolName + ")");
            }

            this.connection = typeof MIDP.LocalMsgConnections[this.protocolName] === 'function' ?
              new MIDP.LocalMsgConnections[this.protocolName]() : MIDP.LocalMsgConnections[this.protocolName];
            this.connection.notifyConnection();
        }

        resolve();
    }).bind(this)));
};

Native["org/mozilla/io/LocalMsgConnection.waitConnection.()V"] = function() {
    asyncImpl("V", this.connection.waitConnection());
};

Native["org/mozilla/io/LocalMsgConnection.sendData.([BII)V"] = function(data, offset, length) {
    var message = {
      data: data,
      offset: offset,
      length: length,
    };

    if (this.server) {
        this.connection.sendMessageToClient(message);
    } else {
        if (MIDP.FakeLocalMsgServers.indexOf(this.protocolName) != -1) {
            console.warn("sendData (" + util.decodeUtf8(new Int8Array(data.buffer, offset, length)) + ") to an unimplemented localmsg server (" + this.protocolName + ")");
        }

        this.connection.sendMessageToServer(message);
    }
};

Native["org/mozilla/io/LocalMsgConnection.receiveData.([B)I"] = function(data) {
    if (this.server) {
        asyncImpl("I", this.connection.serverReceiveMessage(data));
        return;
    }

    if (MIDP.FakeLocalMsgServers.indexOf(this.protocolName) != -1) {
        console.warn("receiveData from an unimplemented localmsg server (" + this.protocolName + ")");
    }

    asyncImpl("I", this.connection.clientReceiveMessage(data));
};

Native["org/mozilla/io/LocalMsgConnection.closeConnection.()V"] = function() {
    if (this.server) {
        delete MIDP.LocalMsgConnections[this.protocolName];
    }
    delete this.connection;
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var Location = {};

// We only support one single location provider via the geolocation API.
Location.PROVIDER_NAME = "browser";

Location.Providers = {};

// Provider ID should be greater or equal to 1.
Location.Providers.nextId = 1;

var LocationProvider = function() {
    this.state = LocationProvider.OUT_OF_SERVICE;
    this.position = {
        timestamp: 0,
        latitude: 0,
        longitude: 0,
        altitude: NaN,
        horizontalAccuracy: NaN,
        verticalAccuracy: NaN,
        speed: NaN,
        heading: NaN
    };

    // DumbPipe sender
    this.sender = null;

    // Called when location data is received.
    this.ondata = null;
};

LocationProvider.OUT_OF_SERVICE = 1;

// DumbPipe recipient
LocationProvider.prototype.recipient = function(message) {
    if (message.type === "data") {
        this.state = message.state;
        this.position = message.position;
        if (this.ondata) {
            this.ondata();
        }
    }
};

LocationProvider.prototype.start = function() {
    this.sender = DumbPipe.open("locationprovider", {},
                                this.recipient.bind(this));
};

LocationProvider.prototype.stop = function() {
    this.sender({ type: "close" });
    DumbPipe.close(this.sender);
};

LocationProvider.prototype.requestData = function() {
    return new Promise(function(resolve, reject) {
        this.sender({ type: "requestData" });
        this.ondata = resolve;
    }.bind(this));
};

Native["com/sun/j2me/location/PlatformLocationProvider.getListOfLocationProviders.()Ljava/lang/String;"] = function() {
    // If there are more than one providers, separate them by comma.
    return J2ME.newString(Location.PROVIDER_NAME);
};

addUnimplementedNative("com/sun/j2me/location/CriteriaImpl.initNativeClass.()V");

Native["com/sun/j2me/location/PlatformLocationProvider.getBestProviderByCriteriaImpl.(Lcom/sun/j2me/location/CriteriaImpl;)Z"] = function(criteria) {
    criteria.providerName = J2ME.newString(Location.PROVIDER_NAME);
    return 1;
};

addUnimplementedNative("com/sun/j2me/location/LocationProviderInfo.initNativeClass.()V");
addUnimplementedNative("com/sun/j2me/location/LocationInfo.initNativeClass.()V");

Native["com/sun/j2me/location/PlatformLocationProvider.open.(Ljava/lang/String;)I"] = function(name) {
    var provider = new LocationProvider();
    provider.start();
    var id = Location.Providers.nextId;
    Location.Providers.nextId = Location.Providers.nextId % 0xff + 1;
    Location.Providers[id] = provider;
    return id;
};

Native["com/sun/j2me/location/PlatformLocationProvider.resetImpl.(I)V"] = function(providerId) {
    var provider = Location.Providers[providerId];
    provider.stop();
    Location.Providers[providerId] = null;
};

Native["com/sun/j2me/location/PlatformLocationProvider.getCriteria.(Ljava/lang/String;Lcom/sun/j2me/location/LocationProviderInfo;)Z"] = function(name, criteria) {
    criteria.canReportAltitude = 1;
    criteria.canReportSpeedCource = 1;
    criteria.averageResponseTime = 10000;
    return 1;
};

Native["com/sun/j2me/location/PlatformLocationProvider.setUpdateIntervalImpl.(II)V"] = function(providerId, interval) {
    console.warn("com/sun/j2me/location/PlatformLocationProvider.setUpdateIntervalImpl.(II)V not implemented");
};

Native["com/sun/j2me/location/PlatformLocationProvider.getLastLocationImpl.(ILcom/sun/j2me/location/LocationInfo;)Z"] = function(providerId, locationInfo) {
    var provider = Location.Providers[providerId];
    var pos = provider.position;
    locationInfo.isValid = 1;
    locationInfo.timestamp = Long.fromNumber(pos.timestamp);
    locationInfo.latitude = pos.latitude;
    locationInfo.longitude = pos.longitude;
    locationInfo.altitude = Math.fround(pos.altitude);
    locationInfo.horizontalAccuracy =  Math.fround(pos.horizontalAccuracy);
    locationInfo.verticalAccuracy =  Math.fround(pos.verticalAccuracy);
    locationInfo.speed = Math.fround(pos.speed);
    locationInfo.course =  Math.fround(pos.course);
    locationInfo.method = 0;
    return 1;
};

Native["com/sun/j2me/location/PlatformLocationProvider.getStateImpl.(I)I"] = function(providerId) {
    var provider = Location.Providers[providerId];
    return provider.state;
};

Native["com/sun/j2me/location/PlatformLocationProvider.waitForNewLocation.(IJ)Z"] = function(providerId, timeout) {
    asyncImpl("Z", new Promise(function(resolve, reject) {
        var provider = Location.Providers[providerId];
        provider.requestData().then(resolve.bind(null, 1));
        setTimeout(resolve.bind(null, 0), timeout);
    }));
};

Native["com/sun/j2me/location/PlatformLocationProvider.receiveNewLocationImpl.(IJ)Z"] = function(providerId, timestamp) {
    var provider = Location.Providers[providerId];
    var result = Math.abs(timestamp.toNumber() - provider.position.timestamp) < 10000;
    return result ? 1 : 0;
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var Media = {};

Media.ContentTypes = {
    memory: [
    ],

    file: [
        "audio/ogg",
        "audio/x-wav",
        "audio/mpeg",
        "image/jpeg",
        "image/png",
        "audio/amr"
    ],

    http: [
        "audio/x-wav",
        "audio/mpeg",
        "image/jpeg",
        "image/png",
        "audio/amr"
    ],

    https: [
        "audio/x-wav",
        "audio/mpeg",
        "image/jpeg",
        "image/png",
        "audio/amr"
    ],

    rtp: [],

    rtsp: [],

    capture: []
};

Media.ListCache = {
    create: function(data) {
        var id = this._nextId;
        this._cached[id] = data;
        if (++this._nextId > 0xffff) {
            this._nextId = 0;
        }
        return id;
    },

    get: function(id) {
        return this._cached[id];
    },

    remove: function(id) {
        delete this._cached[id];
    },

    _cached: {},
    // A valid ID should be greater than 0.
    _nextId: 1
}

Media.extToFormat = new Map([
    ["mp3", "MPEG_layer_3"],
    ["jpg", "JPEG"],
    ["jpeg", "JPEG"],
    ["png", "PNG"],
    ["wav", "wav"],
    ["ogg", "ogg"],
    ["mp4", "MPEG4"],
    ["webm", "WebM"],
]);

Media.contentTypeToFormat = new Map([
    ["audio/ogg", "ogg"],
    ["audio/amr", "amr"],
    ["audio/x-wav", "wav"],
    ["audio/mpeg", "MPEG_layer_3"],
    ["image/jpeg", "JPEG"],
    ["image/png", "PNG"],
    ["video/mp4", "MPEG4"],
    ["video/webm", "WebM"],
]);

Media.formatToContentType = new Map();
for (var elem of Media.contentTypeToFormat) {
    Media.formatToContentType.set(elem[1], elem[0])
}

Media.supportedAudioFormats = ["MPEG_layer_3", "wav", "amr", "ogg"];
Media.supportedImageFormats = ["JPEG", "PNG"];
Media.supportedVideoFormats = ["MPEG4", "WebM"];

Media.EVENT_MEDIA_END_OF_MEDIA = 1;
Media.EVENT_MEDIA_SNAPSHOT_FINISHED = 11;

Media.convert3gpToAmr = function(inBuffer) {
    // The buffer to store the converted amr file.
    var outBuffer = new Uint8Array(inBuffer.length);

    // Add AMR header.
    var AMR_HEADER = "#!AMR\n";
    outBuffer.set(new TextEncoder("utf-8").encode(AMR_HEADER));
    var outOffset = AMR_HEADER.length;

    var textDecoder = new TextDecoder("utf-8");
    var inOffset = 0;
    while (inOffset + 8 < inBuffer.length) {
        // Get the box size
        var size = 0;
        for (var i = 0; i < 4; i++) {
            size = inBuffer[inOffset + i] + (size << 8);
        }
        // Search the box of type mdat.
        var type = textDecoder.decode(inBuffer.subarray(inOffset + 4, inOffset + 8));
        if (type === "mdat" && inOffset + size <= inBuffer.length) {
            // Extract raw AMR data from the box and append to the out buffer.
            var data = inBuffer.subarray(inOffset + 8, inOffset + size);
            outBuffer.set(data, outOffset);
            outOffset += data.length;
        }
        inOffset += size;
    }

    if (outOffset === AMR_HEADER.length) {
        console.warn("Failed to extract AMR from 3GP file.");
    }
    return outBuffer.subarray(0, outOffset);
};

Native["com/sun/mmedia/DefaultConfiguration.nListContentTypesOpen.(Ljava/lang/String;)I"] = function(jProtocol) {
    var protocol = J2ME.fromJavaString(jProtocol);
    var types = [];
    if (protocol) {
        types = Media.ContentTypes[protocol].slice();
        if (!types) {
            console.warn("Unknown protocol type: " + protocol);
            return 0;
        }
    } else {
        for (var p in Media.ContentTypes) {
            Media.ContentTypes[p].forEach(function(type) {
                if (types.indexOf(type) === -1) {
                    types.push(type);
                }
            });
        }
    }
    if (types.length == 0) {
        return 0;
    }
    return Media.ListCache.create(types);
};

Native["com/sun/mmedia/DefaultConfiguration.nListContentTypesNext.(I)Ljava/lang/String;"] = function(hdlr) {
    var cached = Media.ListCache.get(hdlr);
    if (!cached) {
        console.error("Invalid hdlr: " + hdlr);
        return null;
    }
    var s = cached.shift();
    return s ? J2ME.newString(s) : null;
};

Native["com/sun/mmedia/DefaultConfiguration.nListContentTypesClose.(I)V"] = function(hdlr) {
    Media.ListCache.remove(hdlr);
};

Native["com/sun/mmedia/DefaultConfiguration.nListProtocolsOpen.(Ljava/lang/String;)I"] = function(jMime) {
    var mime = J2ME.fromJavaString(jMime);
    var protocols = [];
    for (var protocol in Media.ContentTypes) {
        if (!mime || Media.ContentTypes[protocol].indexOf(mime) >= 0) {
            protocols.push(protocol);
        }
    }
    if (!protocols.length) {
        return 0;
    }
    return Media.ListCache.create(protocols);
};

Native["com/sun/mmedia/DefaultConfiguration.nListProtocolsNext.(I)Ljava/lang/String;"] = function(hdlr) {
    var cached = Media.ListCache.get(hdlr);
    if (!cached) {
        console.error("Invalid hdlr: " + hdlr);
        return null;
    }
    var s = cached.shift();
    return s ? J2ME.newString(s) : null;
};

Native["com/sun/mmedia/DefaultConfiguration.nListProtocolsClose.(I)V"] = function(hdlr) {
    Media.ListCache.remove(hdlr);
};

Media.PlayerCache = {
};

function AudioPlayer(playerContainer) {
    this.playerContainer = playerContainer;

    this.messageHandlers = {
        mediaTime: [],
        duration: []
    };

    this.sender = DumbPipe.open("audioplayer", {}, function(message) {
        switch (message.type) {
            case "end":
                MIDP.sendEndOfMediaEvent(this.playerContainer.pId, message.duration);
                break;
            case "mediaTime": // fall through
            case "duration":
                var f = this.messageHandlers[message.type].shift();
                if (f) {
                    f(message.data);
                }
                break;
            default:
                console.error("Unknown audioplayer message type: " + message.type)
                break;
        }
    }.bind(this));

    /* @type HTMLAudioElement */
    this.audio = new Audio();
    this.paused = true;
    this.loaded = false;
    this.volume = 100;
    this.muted = false;

    this.isVideoControlSupported = false;
    this.isVolumeControlSupported = true;
}

AudioPlayer.prototype.realize = function() {
    return Promise.resolve(1);
};

AudioPlayer.prototype.start = function() {
    if (this.playerContainer.contentSize == 0) {
        console.warn("Cannot start playing.");
        return;
    }

    var array = null;
    if (!this.loaded) {
        var data = this.playerContainer.data.subarray(0, this.playerContainer.contentSize);
        // Convert the data to a regular Array to traverse the mozbrowser boundary.
        var array = Array.prototype.slice.call(data);
        array.constructor = Array;
        this.loaded = true;
    }
    this.sender({
        type: "start",
        contentType: this.playerContainer.contentType,
        data: array
    });
    this.paused = false;
};

AudioPlayer.prototype.pause = function() {
    if (this.paused) {
        return;
    }
    this.sender({ type: "pause" });
    this.paused = true;
};

AudioPlayer.prototype.resume = function() {
    if (!this.paused) {
        return;
    }
    this.sender({ type: "play" });
    this.paused = false;
};

AudioPlayer.prototype.close = function() {
    this.sender({ type: "close" });
    this.paused = true;
    this.loaded = false;
    DumbPipe.close(this.sender);
};

AudioPlayer.prototype.getMediaTime = function() {
    return new Promise(function(resolve, reject) {
        this.sender({ type: "getMediaTime" });
        this.messageHandlers.mediaTime.push(function(data) {
            resolve(data);
        });
    }.bind(this));
};

// The range of ms has already been checked, we don't need to check it again.
AudioPlayer.prototype.setMediaTime = function(ms) {
    this.sender({ type: "setMediaTime", data: ms });
    return ms;
};

AudioPlayer.prototype.getVolume = function() {
    return this.volume;
};

AudioPlayer.prototype.setVolume = function(level) {
    if (level < 0) {
        level = 0;
    } else if (level > 100) {
        level = 100;
    }
    this.sender({ type: "setVolume", data: level });
    this.volume = level;
    return level;
};

AudioPlayer.prototype.getMute = function() {
    return this.muted;
};

AudioPlayer.prototype.setMute = function(mute) {
    this.muted = mute;
    this.sender({ type: "setMute", data: mute });
};

AudioPlayer.prototype.getDuration = function() {
    return new Promise(function(resolve, reject) {
        this.sender({ type: "getDuration" });
        this.messageHandlers.duration.push(function(data) {
            resolve(data);
        });
    }.bind(this));
};

function ImagePlayer(playerContainer) {
    this.url = playerContainer.url;

    this.image = new Image();
    this.image.style.position = "absolute";
    this.image.style.visibility = "hidden";

    this.isVideoControlSupported = true;
    this.isVolumeControlSupported = false;
}

ImagePlayer.prototype.realize = function() {
    var ctx = $.ctx;

    var p = new Promise((function(resolve, reject) {
        this.image.onload = resolve.bind(null, 1);
        this.image.onerror = function() {
            ctx.setAsCurrentContext();
            reject($.newMediaException("Failed to load image"));
        };

        if (this.url.startsWith("file")) {
            fs.open(this.url.substring(7), (function(fd) {
                var imgData = fs.read(fd);
                fs.close(fd);
                this.image.src = URL.createObjectURL(new Blob([ imgData ]));
            }).bind(this));
        } else {
            this.image.src = this.url;
        }
    }).bind(this));

    p.catch(function() {
      // Ignore promise rejection, we only need to revoke the object URL
    }).then((function() {
        if (!this.image.src) {
            return;
        }
        URL.revokeObjectURL(this.image.src);
    }).bind(this));

    return p;
}

ImagePlayer.prototype.start = function() {
}

ImagePlayer.prototype.pause = function() {
}

ImagePlayer.prototype.close = function() {
    if (this.image.parentNode) {
        this.image.parentNode.removeChild(this.image);
    }
}

ImagePlayer.prototype.getMediaTime = function() {
    return -1;
}

ImagePlayer.prototype.getWidth = function() {
    return this.image.naturalWidth;
}

ImagePlayer.prototype.getHeight = function() {
    return this.image.naturalHeight;
}

ImagePlayer.prototype.setLocation = function(x, y, w, h) {
    this.image.style.left = x + "px";
    this.image.style.top = y + "px";
    this.image.style.width = w + "px";
    this.image.style.height = h + "px";
    document.getElementById("main").appendChild(this.image);
}

ImagePlayer.prototype.setVisible = function(visible) {
    this.image.style.visibility = visible ? "visible" : "hidden";
}

function VideoPlayer(playerContainer) {
    this.playerContainer = playerContainer;

    this.video = document.createElement("video");
    this.video.style.position = "absolute";
    this.video.style.visibility = "hidden";

    this.isVideoControlSupported = true;
    this.isVolumeControlSupported = true;

    // VideoPlayer::start could be called while the video element
    // is hidden, causing the call to HTMLVideoElement::play to be
    // ignored.
    // Thus, we need to call HTMLVideoElement::play when the element
    // gets visible.
    this.isPlaying = false;
}

VideoPlayer.prototype.realize = function() {
    var ctx = $.ctx;

    var p = new Promise((function(resolve, reject) {
        this.video.addEventListener("canplay", (function onCanPlay() {
            this.video.removeEventListener("canplay", onCanPlay);
            resolve(1);
        }).bind(this));

        this.video.onerror = function() {
            ctx.setAsCurrentContext();
            reject($.newMediaException("Failed to load video"));
        };

        if (this.playerContainer.url.startsWith("file")) {
            fs.open(this.playerContainer.url.substring(7), (function(fd) {
                var videoData = fs.read(fd);
                fs.close(fd);
                this.video.src = URL.createObjectURL(new Blob([ videoData ]),
                                                     { type: this.playerContainer.contentType });
            }).bind(this));
        } else {
            this.video.src = this.playerContainer.url;
        }
    }).bind(this));

    p.catch(function() {
      // Ignore promise rejection, we only need to revoke the object URL
    }).then((function() {
        if (!this.video.src) {
            return;
        }
        URL.revokeObjectURL(this.video.src);
    }).bind(this));

    return p;
}

VideoPlayer.prototype.start = function() {
    if (this.video.style.visibility === "hidden") {
        this.isPlaying = true;
    } else {
        this.video.play();
    }
}

VideoPlayer.prototype.pause = function() {
    this.video.pause();
    this.isPlaying = false;
}

VideoPlayer.prototype.close = function() {
    if (this.video.parentNode) {
        this.video.parentNode.removeChild(this.video);
    }
    this.pause();
}

VideoPlayer.prototype.getMediaTime = function() {
    return Math.round(this.video.currentTime * 1000);
}

VideoPlayer.prototype.getWidth = function() {
    return this.video.videoWidth;
}

VideoPlayer.prototype.getHeight = function() {
    return this.video.videoHeight;
}

VideoPlayer.prototype.setLocation = function(x, y, w, h) {
    this.video.style.left = x + "px";
    this.video.style.top = y + "px";
    this.video.style.width = w + "px";
    this.video.style.height = h + "px";
    document.getElementById("main").appendChild(this.video);
}

VideoPlayer.prototype.setVisible = function(visible) {
    this.video.style.visibility = visible ? "visible" : "hidden";
    if (visible && this.isPlaying) {
        this.video.play();
    }
}

VideoPlayer.prototype.getVolume = function() {
    return Math.floor(this.video.volume * 100);
};

VideoPlayer.prototype.setVolume = function(level) {
    if (level < 0) {
        level = 0;
    } else if (level > 100) {
        level = 100;
    }
    this.video.volume = level / 100;
    return level;
};

function ImageRecorder(playerContainer) {
    this.playerContainer = playerContainer;

    this.sender = null;

    this.width = -1;
    this.height = -1;

    this.isVideoControlSupported = true;
    this.isVolumeControlSupported = false;

    this.realizeResolver = null;

    this.snapshotData = null;
    this.ctx = $.ctx;
}

ImageRecorder.prototype.realize = function() {
    return new Promise((function(resolve, reject) {
        this.realizeResolver = resolve;
        this.realizeRejector = reject;
        this.sender = DumbPipe.open("camera", {}, this.recipient.bind(this));
    }).bind(this));
}

ImageRecorder.prototype.recipient = function(message) {
    switch (message.type) {
        case "initerror":
            this.ctx.setAsCurrentContext();
            if (message.name == "PermissionDeniedError") {
                this.realizeRejector($.newSecurityException("Not permitted to init camera"));
            } else {
                this.realizeRejector($.newMediaException("Failed to init camera, no camera?"));
            }
            this.realizeResolver = null;
            this.realizeRejector = null;
            this.sender({ type: "close" });
            break;

        case "gotstream":
            this.width = message.width;
            this.height = message.height;
            this.realizeResolver(1);
            this.realizeResolver = null;
            this.realizeRejector = null;
            break;

        case "snapshot":
            this.snapshotData = new Int8Array(message.data);
            MIDP.sendMediaSnapshotFinishedEvent(this.playerContainer.pId);
            break;
    }
}

ImageRecorder.prototype.start = function() {
}

ImageRecorder.prototype.pause = function() {
}

ImageRecorder.prototype.close = function() {
    this.sender({ type: "close" });
}

ImageRecorder.prototype.getMediaTime = function() {
    return -1;
}

ImageRecorder.prototype.getWidth = function() {
    return this.width;
}

ImageRecorder.prototype.getHeight = function() {
    return this.height;
}

ImageRecorder.prototype.setLocation = function(x, y, w, h) {
    var displayElem = document.getElementById("display");
    this.sender({
        type: "setPosition",
        x: x + displayElem.offsetLeft,
        y: y + displayElem.offsetTop,
        w: w,
        h: h,
    });
}

ImageRecorder.prototype.setVisible = function(visible) {
    this.sender({ type: "setVisible", visible: visible });
}

ImageRecorder.prototype.startSnapshot = function(imageType) {
    var type = imageType ? this.playerContainer.getEncodingParam(imageType) : "image/jpeg";
    if (type === "jpeg") {
        type = "image/jpeg";
    }

    this.sender({ type: "snapshot", imageType: type });
}

ImageRecorder.prototype.getSnapshotData = function(imageType) {
    return this.snapshotData;
}

function PlayerContainer(url, pId) {
    this.url = url;
    // `pId` is the player id used in PlayerImpl.java, don't confuse with the id we used
    // here in Javascript. The reason we need to hold this `pId` is we need to send it
    // back when dispatch events, such as Media.EVENT_MEDIA_SNAPSHOT_FINISHED and
    // Media.EVENT_MEDIA_END_OF_MEDIA.
    this.pId = pId;

    this.mediaFormat = url ? this.guessFormatFromURL(url) : "UNKNOWN";
    this.contentType = "";

    this.wholeContentSize = -1;
    this.contentSize = 0;
    this.data = null;

    this.player = null;
}

// default buffer size 1 MB
PlayerContainer.DEFAULT_BUFFER_SIZE  = 1024 * 1024;

PlayerContainer.prototype.isImageCapture = function() {
    return !!(this.url && this.url.startsWith("capture://image"));
};

PlayerContainer.prototype.isAudioCapture = function() {
    return !!(this.url && this.url.startsWith("capture://audio"));
};

PlayerContainer.prototype.getEncodingParam = function(url) {
    var encoding = null;

    var idx = url.indexOf("encoding=");
    if (idx > -1) {
        var encodingKeyPair = url.substring(idx).split("&")[0].split("=");
        encoding = encodingKeyPair.length == 2 ? encodingKeyPair[1] : encoding;
    }

    return encoding;
};

PlayerContainer.prototype.guessFormatFromURL = function() {
    if (this.isAudioCapture()) {
        var encoding = "audio/ogg" || this.getEncodingParam(this.url); // Same as system property |audio.encodings|

        var format = Media.contentTypeToFormat.get(encoding);

        return format || "UNKNOWN";
    }

    if (this.isImageCapture()) {
        return "JPEG";
    }

    return Media.extToFormat.get(this.url.substr(this.url.lastIndexOf(".") + 1)) || "UNKNOWN";
}

PlayerContainer.prototype.realize = function(contentType) {
    return new Promise((function(resolve, reject) {
        if (contentType) {
            this.contentType = contentType;
            this.mediaFormat = Media.contentTypeToFormat.get(contentType) || this.mediaFormat;
            if (this.mediaFormat === "UNKNOWN") {
                console.warn("Unsupported content type: " + contentType);
                resolve(0);
                return;
            }
        } else {
            this.contentType = Media.formatToContentType.get(this.mediaFormat);
        }

        if (Media.supportedAudioFormats.indexOf(this.mediaFormat) !== -1) {
            this.player = new AudioPlayer(this);
            if (this.isAudioCapture()) {
                this.audioRecorder = new AudioRecorder(contentType);
            }
            this.player.realize().then(resolve);
        } else if (Media.supportedImageFormats.indexOf(this.mediaFormat) !== -1) {
            if (this.isImageCapture()) {
                this.player = new ImageRecorder(this);
            } else {
                this.player = new ImagePlayer(this);
            }
            this.player.realize().then(resolve, reject);
        } else if (Media.supportedVideoFormats.indexOf(this.mediaFormat) !== -1) {
            this.player = new VideoPlayer(this);
            this.player.realize().then(resolve, reject);
        } else {
            console.warn("Unsupported media format (" + this.mediaFormat + ") for " + this.url);
            resolve(0);
        }
    }).bind(this));
};

PlayerContainer.prototype.close = function() {
    this.data = null;
    if (this.player) {
        this.player.close();
    }
};

/**
 * @return current time in ms.
 */
PlayerContainer.prototype.getMediaTime = function() {
    return this.player.getMediaTime();
};

PlayerContainer.prototype.getBufferSize = function() {
    return this.wholeContentSize === -1 ? PlayerContainer.DEFAULT_BUFFER_SIZE :
                                          this.wholeContentSize;
};

PlayerContainer.prototype.getMediaFormat = function() {
    if (this.contentSize === 0) {
        return this.mediaFormat;
    }

    var headerString = util.decodeUtf8(this.data.subarray(0, 50));

    // Refer to https://www.ffmpeg.org/doxygen/0.6/amr_8c-source.html.
    if (headerString.indexOf("#!AMR\n") === 0){
        return "amr";
    }

    // Refer to https://www.ffmpeg.org/doxygen/0.6/wav_8c-source.html
    if (headerString.indexOf("RIFF") === 0 && headerString.indexOf("WAVE") === 8) {
        return "wav";
    }

    // Refer to http://www.sonicspot.com/guide/midifiles.html
    if (headerString.indexOf("MThd") === 0) {
        return "mid";
    }

    // https://wiki.xiph.org/Ogg#Detecting_Ogg_files_and_extracting_information
    if (headerString.indexOf("OggS") === 0) {
        return "ogg";
    }

    return this.mediaFormat;
};

PlayerContainer.prototype.getContentType = function() {
    return this.contentType;
};

PlayerContainer.prototype.isHandledByDevice = function() {
    // TODO: Handle download in JS also for audio formats
    return this.url !== null && Media.supportedAudioFormats.indexOf(this.mediaFormat) === -1;
};

PlayerContainer.prototype.isVideoControlSupported = function() {
    return this.player.isVideoControlSupported;
};

PlayerContainer.prototype.isVolumeControlSupported = function() {
    return this.player.isVolumeControlSupported;
};

PlayerContainer.prototype.writeBuffer = function(buffer) {
    if (this.contentSize === 0) {
        this.data = J2ME.newByteArray(this.getBufferSize());
    }

    this.data.set(buffer, this.contentSize);
    this.contentSize += buffer.length;
};

PlayerContainer.prototype.start = function() {
    this.player.start();
};

PlayerContainer.prototype.pause = function() {
    this.player.pause();
};

PlayerContainer.prototype.resume = function() {
    this.player.resume();
};

PlayerContainer.prototype.getVolume = function() {
    return this.player.getVolume();
};

PlayerContainer.prototype.setVolume = function(level) {
    this.player.setVolume(level);
};

PlayerContainer.prototype.getMute = function() {
    return this.player.getMute();
};

PlayerContainer.prototype.setMute = function(mute) {
    return this.player.setMute(mute);
};

PlayerContainer.prototype.getWidth = function() {
    return this.player.getWidth();
}

PlayerContainer.prototype.getHeight = function() {
    return this.player.getHeight();
}

PlayerContainer.prototype.setLocation = function(x, y, w, h) {
    this.player.setLocation(x, y, w, h);
}

PlayerContainer.prototype.setVisible = function(visible) {
    this.player.setVisible(visible);
}

PlayerContainer.prototype.getRecordedSize = function() {
    return this.audioRecorder.data.byteLength;
};

PlayerContainer.prototype.getRecordedData = function(offset, size, buffer) {
    var toRead = (size < this.audioRecorder.data.length) ? size : this.audioRecorder.data.byteLength;
    buffer.set(this.audioRecorder.data.subarray(0, toRead), offset);
    this.audioRecorder.data = new Int8Array(this.audioRecorder.data.buffer.slice(toRead));
};

PlayerContainer.prototype.startSnapshot = function(imageType) {
    this.player.startSnapshot(imageType);
}

PlayerContainer.prototype.getSnapshotData = function() {
    return this.player.getSnapshotData();
}

PlayerContainer.prototype.getDuration = function() {
    return this.player.getDuration();
}

var AudioRecorder = function(aMimeType) {
    this.mimeType = aMimeType || "audio/3gpp";
    this.eventListeners = {};
    this.data = new Int8Array();
    this.sender = DumbPipe.open("audiorecorder", {
        mimeType: this.mimeType
    }, this.recipient.bind(this));
};

AudioRecorder.prototype.getContentType = function() {
    if (this.mimeType == "audio/3gpp") {
        return "audio/amr";
    }

    return this.mimeType;
};

AudioRecorder.prototype.recipient = function(message) {
    var callback = this["on" + message.type];
    if (typeof callback === "function") {
        callback(message);
    }

    if (this.eventListeners[message.type]) {
        this.eventListeners[message.type].forEach(function(listener) {
            if (typeof listener === "function") {
                listener(message);
            }
        });
    }
};

AudioRecorder.prototype.addEventListener = function(name, callback) {
    if (!callback || !name) {
        return;
    }

    if (!this.eventListeners[name]) {
        this.eventListeners[name] = [];
    }

    this.eventListeners[name].push(callback);
};

AudioRecorder.prototype.removeEventListener = function(name, callback) {
    if (!name || !callback || !this.eventListeners[name]) {
        return;
    }

    var newArray = [];
    this.eventListeners[name].forEach(function(listener) {
        if (callback != listener) {
            newArray.push(listener);
        }
    });

    this.eventListeners[name] = newArray;
};

AudioRecorder.prototype.start = function() {
    return new Promise(function(resolve, reject) {
        this.onstart = function() {
            this.onstart = null;
            this.onerror = null;
            resolve(1);
        }.bind(this);

        this.onerror = function() {
            this.onstart = null;
            this.onerror = null;
            resolve(0);
        }.bind(this);

        this.sender({ type: "start" });
    }.bind(this));
};

AudioRecorder.prototype.stop = function() {
    return new Promise(function(resolve, reject) {
        // To make sure the Player in Java can fetch data immediately, we
        // need to return after data is back.
        this.ondata = function ondata(message) {
            _cleanEventListeners();

            // The audio data we received are encoded with a proper format, it doesn't
            // make sense to concatenate them like the socket, so let just override
            // the buffered data here.
            var data = new Int8Array(message.data);
            if (this.getContentType() === "audio/amr") {
                data = Media.convert3gpToAmr(data);
            }
            this.data = data;
            resolve(1);
        }.bind(this);

        var _onerror = function() {
            _cleanEventListeners();
            resolve(0);
        }.bind(this);

        var _cleanEventListeners = function() {
            this.ondata = null;
            this.removeEventListener("error", _onerror);
        }.bind(this);

        this.addEventListener("error", _onerror);
        this.sender({ type: "stop" });
    }.bind(this));
};

AudioRecorder.prototype.pause = function() {
    return new Promise(function(resolve, reject) {
        // In Java, |stopRecord| might be called before |commit|, which triggers
        // the calling sequence:
        //    nPause -> nGetRecordedSize -> nGetRecordedData -> nClose
        //
        // to make sure the Player in Java can fetch data in such a case, we
        // need to request data immediately.
        //
        this.ondata = function ondata(message) {
            this.ondata = null;

            // The audio data we received are encoded with a proper format, it doesn't
            // make sense to concatenate them like the socket, so let just override
            // the buffered data here.
            this.data = new Int8Array(message.data);
            resolve(1);
        }.bind(this);

        // Have to request data first before pausing.
        this.requestData();
        this.sender({ type: "pause" });
    }.bind(this));
};

AudioRecorder.prototype.requestData = function() {
    this.sender({ type: "requestData" });
};

AudioRecorder.prototype.close = function() {
    if (this._closed) {
        return Promise.resolve(1);
    }

    // Make sure recording is stopped on the other side.
    return this.stop().then(function(result) {
        DumbPipe.close(this.sender);
        this._closed = true;
        return result;
    }.bind(this));
};

Native["com/sun/mmedia/PlayerImpl.nInit.(IILjava/lang/String;)I"] = function(appId, pId, jURI) {
    var url = J2ME.fromJavaString(jURI);
    var id = pId + (appId << 32);
    Media.PlayerCache[id] = new PlayerContainer(url, pId);
    return id;
};

/**
 * @return 0 - failed; 1 - succeeded.
 */
Native["com/sun/mmedia/PlayerImpl.nTerm.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];
    if (!player) {
        return 1;
    }
    player.close();
    delete Media.PlayerCache[handle];
    return 1;
};

Native["com/sun/mmedia/PlayerImpl.nGetMediaFormat.(I)Ljava/lang/String;"] = function(handle) {
    var player = Media.PlayerCache[handle];
    player.mediaFormat = player.getMediaFormat();
    return J2ME.newString(player.mediaFormat);
};

Native["com/sun/mmedia/DirectPlayer.nGetContentType.(I)Ljava/lang/String;"] = function(handle) {
    return J2ME.newString(Media.PlayerCache[handle].getContentType());
};

Native["com/sun/mmedia/PlayerImpl.nIsHandledByDevice.(I)Z"] = function(handle) {
    return Media.PlayerCache[handle].isHandledByDevice() ? 1 : 0;
};

Native["com/sun/mmedia/PlayerImpl.nRealize.(ILjava/lang/String;)Z"] = function(handle, jMime) {
    var mime = J2ME.fromJavaString(jMime);
    var player = Media.PlayerCache[handle];
    asyncImpl("Z", player.realize(mime));
};

Native["com/sun/mmedia/MediaDownload.nGetJavaBufferSize.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];
    return player.getBufferSize();
};

Native["com/sun/mmedia/MediaDownload.nGetFirstPacketSize.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];
    return player.getBufferSize() >>> 1;
};

Native["com/sun/mmedia/MediaDownload.nBuffering.(I[BII)I"] = function(handle, buffer, offset, size) {
    var player = Media.PlayerCache[handle];
    var bufferSize = player.getBufferSize();

    // Check the parameters.
    if (buffer === null || size === 0) {
        return bufferSize >>> 1;
    }

    player.writeBuffer(buffer.subarray(offset, offset + size));

    // Returns the package size and set it to the half of the java buffer size.
    return bufferSize >>> 1;
};

Native["com/sun/mmedia/MediaDownload.nNeedMoreDataImmediatelly.(I)Z"] = function(handle) {
    console.warn("com/sun/mmedia/MediaDownload.nNeedMoreDataImmediatelly.(I)Z not implemented");
    return 1;
};

Native["com/sun/mmedia/MediaDownload.nSetWholeContentSize.(IJ)V"] = function(handle, contentSize) {
    var player = Media.PlayerCache[handle];
    player.wholeContentSize = contentSize.toNumber();
};

Native["com/sun/mmedia/DirectPlayer.nIsToneControlSupported.(I)Z"] = function(handle) {
    console.info("To support ToneControl, implement com.sun.mmedia.DirectTone.");
    return 0;
};

Native["com/sun/mmedia/DirectPlayer.nIsMIDIControlSupported.(I)Z"] = function(handle) {
    console.info("To support MIDIControl, implement com.sun.mmedia.DirectMIDI.");
    return 0;
};

Native["com/sun/mmedia/DirectPlayer.nIsVideoControlSupported.(I)Z"] = function(handle) {
    return Media.PlayerCache[handle].isVideoControlSupported() ? 1 : 0;
};

Native["com/sun/mmedia/DirectPlayer.nIsVolumeControlSupported.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    return player.isVolumeControlSupported() ? 1 : 0;
};

Native["com/sun/mmedia/DirectPlayer.nIsNeedBuffering.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nIsNeedBuffering.(I)Z not implemented.");
    return 0;
};

Native["com/sun/mmedia/DirectPlayer.nPcmAudioPlayback.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nPcmAudioPlayback.(I)Z not implemented.");
    return 0;
};

// Device is available?
Native["com/sun/mmedia/DirectPlayer.nAcquireDevice.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nAcquireDevice.(I)Z not implemented.");
    return 1;
};

// Relase device reference
Native["com/sun/mmedia/DirectPlayer.nReleaseDevice.(I)V"] = function(handle) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nReleaseDevice.(I)V not implemented.");
};

Native["com/sun/mmedia/DirectPlayer.nSwitchToForeground.(II)Z"] = function(handle, options) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nSwitchToForeground.(II)Z not implemented. ");
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nSwitchToBackground.(II)Z"] = function(handle, options) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nSwitchToBackground.(II)Z not implemented. ");
    return 1;
};

// Start Prefetch of Native Player
Native["com/sun/mmedia/DirectPlayer.nPrefetch.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    console.warn("com/sun/mmedia/DirectPlayer.nPrefetch.(I)Z not implemented.");
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nGetMediaTime.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];
    var mediaTime = player.getMediaTime();
    if (mediaTime instanceof Promise) {
        asyncImpl("I", mediaTime);
    } else {
        return mediaTime;
    }
};

Native["com/sun/mmedia/DirectPlayer.nSetMediaTime.(IJ)I"] = function(handle, ms) {
    var container = Media.PlayerCache[handle];
    return container.player.setMediaTime(ms.toInt());
};

Native["com/sun/mmedia/DirectPlayer.nStart.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    player.start();
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nStop.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    player.close();
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nTerm.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];
    player.close();
    delete Media.PlayerCache[handle];
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nPause.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    player.pause();
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nResume.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    player.resume();
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nGetWidth.(I)I"] = function(handle) {
    return Media.PlayerCache[handle].getWidth();
};

Native["com/sun/mmedia/DirectPlayer.nGetHeight.(I)I"] = function(handle) {
    return Media.PlayerCache[handle].getHeight();
};

Native["com/sun/mmedia/DirectPlayer.nSetLocation.(IIIII)Z"] = function(handle, x, y, w, h) {
    Media.PlayerCache[handle].setLocation(x, y, w, h);
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nSetVisible.(IZ)Z"] = function(handle, visible) {
    Media.PlayerCache[handle].setVisible(visible);
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nIsRecordControlSupported.(I)Z"] = function(handle) {
    return !!(Media.PlayerCache[handle] && Media.PlayerCache[handle].audioRecorder) ? 1 : 0;
};

Native["com/sun/mmedia/DirectPlayer.nGetDuration.(I)I"] = function(handle) {
    var duration = Media.PlayerCache[handle].getDuration();
    if (duration instanceof Promise) {
        asyncImpl("I", duration);
    } else {
        return duration;
    }
};

Native["com/sun/mmedia/DirectRecord.nSetLocator.(ILjava/lang/String;)I"] = function(handle, locator) {
    // Let the DirectRecord class handle writing to files / uploading via HTTP
    return 0;
};

Native["com/sun/mmedia/DirectRecord.nGetRecordedSize.(I)I"] = function(handle) {
    return Media.PlayerCache[handle].getRecordedSize();
};

Native["com/sun/mmedia/DirectRecord.nGetRecordedData.(III[B)I"] = function(handle, offset, size, buffer) {
    Media.PlayerCache[handle].getRecordedData(offset, size, buffer);
    return 1;
};

Native["com/sun/mmedia/DirectRecord.nCommit.(I)I"] = function(handle) {
    // In DirectRecord.java, before nCommit, nPause or nStop is called,
    // which means all the recorded data has been fetched, so do nothing here.
    return 1;
};

Native["com/sun/mmedia/DirectRecord.nPause.(I)I"] = function(handle) {
    asyncImpl("I", Media.PlayerCache[handle].audioRecorder.pause());
};

Native["com/sun/mmedia/DirectRecord.nStop.(I)I"] = function(handle) {
    asyncImpl("I", Media.PlayerCache[handle].audioRecorder.stop());
};

Native["com/sun/mmedia/DirectRecord.nClose.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];

    if (!player || !player.audioRecorder) {
        // We need to check if |audioRecorder| is still available, because |nClose|
        // might be called twice in DirectRecord.java, and only IOException is
        // handled in DirectRecord.java, let use IOException instead of IllegalStateException.
        throw $.newIOException();
    }

    asyncImpl("I", player.audioRecorder.close().then(function(result) {
       delete player.audioRecorder;
       return result;
    }));
};

Native["com/sun/mmedia/DirectRecord.nStart.(I)I"] = function(handle) {
    // In DirectRecord.java, nStart plays two roles: real start and resume.
    // Let's handle this on the other side of the DumbPipe.
    asyncImpl("I", Media.PlayerCache[handle].audioRecorder.start());
};

Native["com/sun/mmedia/DirectRecord.nGetRecordedType.(I)Ljava/lang/String;"] = function(handle) {
    return J2ME.newString(Media.PlayerCache[handle].audioRecorder.getContentType());
};

/**
 * @return the volume level between 0 and 100 if succeeded. Otherwise -1.
 */
Native["com/sun/mmedia/DirectVolume.nGetVolume.(I)I"] = function(handle) {
    var player = Media.PlayerCache[handle];
    return player.getVolume();
};

/**
 * @param level The volume level between 0 and 100.
 * @return the volume level set between 0 and 100 if succeeded. Otherwise -1.
 */
Native["com/sun/mmedia/DirectVolume.nSetVolume.(II)I"] = function(handle, level) {
    var player = Media.PlayerCache[handle];
    player.setVolume(level);
    return level;
};

Native["com/sun/mmedia/DirectVolume.nIsMuted.(I)Z"] = function(handle) {
    var player = Media.PlayerCache[handle];
    return player.getMute() ? 1 : 0;
};

Native["com/sun/mmedia/DirectVolume.nSetMute.(IZ)Z"] = function(handle, mute) {
    var player = Media.PlayerCache[handle];
    player.setMute(mute);
    return 1;
};

Media.TonePlayerCache = {
};

function TonePlayer() {
    this.audioContext = new AudioContext();

    // Use oscillator to generate tone.
    // @type {OscillatorNode}
    this.oscillator = null;

    // The gain node to control volume.
    this.gainNode = this.audioContext.createGain();
    this.gainNode.connect(this.audioContext.destination);
}

// Volume fade time in seconds.
TonePlayer.FADE_TIME = 0.1;

/*
 * Play back a tone as specified by a note and its duration.
 * A note is given in the range of 0 to 127 inclusive.  The frequency
 * of the note can be calculated from the following formula:
 *     SEMITONE_CONST = 17.31234049066755 = 1/(ln(2^(1/12)))
 *     note = ln(freq/8.176)*SEMITONE_CONST
 *     The musical note A = MIDI note 69 (0x45) = 440 Hz.
 * For the Asha implementaion, the note is shift by adding 21.
 * @param  note  Defines the tone of the note as specified by the above formula.
 * @param  duration  The duration of the tone in milli-seconds. Duration must be
 * positive.
 * @param  volume Audio volume range from 0 to 100.
 */
TonePlayer.prototype.playTone = function(note, duration, volume) {
    if (duration <= 0) {
        return;
    }
    duration /= 1000;

    if (note < 0) {
        note = 0;
    } else if (note > 127) {
        note = 127;
    }
    if (volume < 0) {
        volume = 0;
    } else if (volume > 100) {
        volume = 100;
    }
    volume /= 100;

    // Abort the previous tone.
    if (this.oscillator) {
        this.oscillator.onended = null;
        this.oscillator.disconnect();
    }

    var current = this.audioContext.currentTime;

    this.oscillator = this.audioContext.createOscillator();
    this.oscillator.connect(this.gainNode);

    // The default fequency is equivalent to 69 - 21 note and while 1 note = 100
    // cents.
    // Detune the frequency to the target note.
    this.oscillator.detune.value = (note - 69 + 21) * 100;

    // Fade in.
    this.oscillator.start(current);
    this.gainNode.gain.linearRampToValueAtTime(0, current);
    this.gainNode.gain.linearRampToValueAtTime(volume, current + TonePlayer.FADE_TIME);

    // Fade out.
    this.oscillator.stop(current + duration);
    this.gainNode.gain.linearRampToValueAtTime(volume, current + duration - TonePlayer.FADE_TIME);
    this.gainNode.gain.linearRampToValueAtTime(0, current + duration);
    this.oscillator.onended = function() {
        this.oscillator.disconnect();
        this.oscillator = null;
    }.bind(this);
};

TonePlayer.prototype.stopTone = function() {
    if (!this.oscillator) {
        return;
    }
    var current = this.audioContext.currentTime;
    this.gainNode.gain.linearRampToValueAtTime(0, current + TonePlayer.FADE_TIME);
};

Native["com/sun/mmedia/NativeTonePlayer.nPlayTone.(IIII)Z"] = function(appId, note, duration, volume) {
    if (!Media.TonePlayerCache[appId]) {
        Media.TonePlayerCache[appId] = new TonePlayer();
    }
    Media.TonePlayerCache[appId].playTone(note, duration, volume);
    return 1;
};

Native["com/sun/mmedia/NativeTonePlayer.nStopTone.(I)Z"] = function(appId) {
    Media.TonePlayerCache[appId].stopTone();
    return 1;
};

Native["com/sun/mmedia/DirectPlayer.nStartSnapshot.(ILjava/lang/String;)V"] = function(handle, imageType) {
    Media.PlayerCache[handle].startSnapshot(J2ME.fromJavaString(imageType));
};

Native["com/sun/mmedia/DirectPlayer.nGetSnapshotData.(I)[B"] = function(handle) {
    return Media.PlayerCache[handle].getSnapshotData();
};

Native["com/sun/amms/GlobalMgrImpl.nCreatePeer.()I"] = function() {
    console.warn("com/sun/amms/GlobalMgrImpl.nCreatePeer.()I not implemented.");
    return 1;
};

Native["com/sun/amms/GlobalMgrImpl.nGetControlPeer.([B)I"] = function(typeName) {
    console.warn("com/sun/amms/GlobalMgrImpl.nGetControlPeer.([B)I not implemented.");
    return 2;
};

Native["com/sun/amms/directcontrol/DirectVolumeControl.nSetMute.(Z)V"] = function(mute) {
    console.warn("com/sun/amms/directcontrol/DirectVolumeControl.nSetMute.(Z)V not implemented.");
};

Native["com/sun/amms/directcontrol/DirectVolumeControl.nGetLevel.()I"] = function() {
    console.warn("com/sun/amms/directcontrol/DirectVolumeControl.nGetLevel.()I not implemented.");
    return 100;
};

addUnimplementedNative("com/sun/amms/directcontrol/DirectVolumeControl.nIsMuted.()Z", 0);
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var AccelerometerSensor = {};

AccelerometerSensor.IS_MOBILE = navigator.userAgent.search("Mobile") !== -1;

AccelerometerSensor.model = {
    description: "Acceleration sensor measures acceleration in SI units for x, y and z - axis.",
    model: "FirefoxOS",
    quantity: "acceleration",
    contextType: "user",
    connectionType: 1, // ChannelType.TYPE_DOUBLE = 1
    maxBufferSize: 256,
    availabilityPush: 0,
    conditionPush: 0,
    channelCount: 3,
    properties: [
        "vendor", "FirefoxOS",
        "version", "1.0",
        "maxSamplingRate", "20.0",
        "location", "NoLoc",
        "security", "private"
    ]
};

var doubleToLongBits = (function() {
    var da = new Float64Array(1);
    var ia = new Int32Array(da.buffer);
    return function(val) {
        da[0] = val;
        return Long.fromBits(ia[0], ia[1]);
    }
})();

AccelerometerSensor.channels = [ {
        scale: 0,
        name: "axis_x",
        unit: "m/s^2",
        dataType: 1, // 1 == Double type
        accuracy: 1,
        mrangeArray: [
            doubleToLongBits(-19.6), // smallest value
            doubleToLongBits(19.6),  // largest value
            doubleToLongBits(0.153)  // resolution
        ]
    }, {
        scale: 0,
        name: "axis_y",
        unit: "m/s^2",
        dataType: 1, // 1 == Double type
        accuracy: 1,
        mrangeArray: [
            doubleToLongBits(-19.6), // smallest value
            doubleToLongBits(19.6),  // largest value
            doubleToLongBits(0.153)  // resolution
        ]
    }, {
        scale: 0,
        name: "axis_z",
        unit: "m/s^2",
        dataType: 1, // 1 == Double type
        accuracy: 1,
        mrangeArray: [
            doubleToLongBits(-19.6), // smallest value
            doubleToLongBits(19.6),  // largest value
            doubleToLongBits(0.153)  // resolution
        ]
    }
];

// Simulate acceleration data by moving mouse.
AccelerometerSensor.simulator = {
    _intervalId: -1,

    start: function() {
        var currentMouseX = -1;
        var currentMouseY = -1;
        var c = MIDP.context2D.canvas;
        c.onmousemove = function(ev) {
            currentMouseX =ev.layerX;
            currentMouseY =ev.layerY;
        };

        var time = 0;
        var mouseX = -1;
        var mouseY = -1;
        var velocityX = -1;
        var velocityY = -1;
        this._intervalId = setInterval(function() {
            var previousTime = time;
            var previousMouseX = mouseX;
            var previousMouseY = mouseY;
            var previousVelocityX = velocityX;
            var previousVelocityY = velocityY;

            time = Date.now();
            var dt = (time - previousTime) / 1000;
            mouseX = currentMouseX * c.width / c.offsetWidth / 5000;
            mouseY = currentMouseY * c.height / c.offsetHeight / 5000;
            velocityX = (mouseX - previousMouseX) / dt;
            velocityY = (mouseY - previousMouseY) / dt;
            var ax = (velocityX - previousVelocityX) / dt;
            var ay = ax;
            var az = (velocityY - previousVelocityY) / dt;

            AccelerometerSensor.handleEvent({
                accelerationIncludingGravity: { x: ax, y: ay, z: az }
            });
        }, 50);
    },

    stop: function() {
        MIDP.context2D.canvas.onmousemove = null;
        clearInterval(this._interalId);
    }
};

AccelerometerSensor.open = function() {
    window.addEventListener('devicemotion', this);
    if (!this.IS_MOBILE) {
        this.simulator.start();
    }
};

AccelerometerSensor.close = function() {
    window.removeEventListener('devicemotion', this);
    if (!this.IS_MOBILE) {
        this.simulator.stop();
    }
};

AccelerometerSensor.readBuffer = (function() {
    var offset = 0;

    var write_int32 = function(out, value) {
      var a = new Int8Array(4);
      new Int32Array(a.buffer)[0] = value;
      Array.prototype.reverse.apply(a);
      out.set(a, offset);
      offset += 4;
    };

    var write_boolean = function(out, value) {
      out[offset++] = value;
    };

    var write_float32 = function(out, value) {
      var a = new Int8Array(4);
      new Float32Array(a.buffer)[0] = value;
      Array.prototype.reverse.apply(a);
      out.set(a, offset);
      offset += 4;
    };

    var write_double64 = function(out, value) {
      var a = new Int8Array(8);
      new Float64Array(a.buffer)[0] = value;
      Array.prototype.reverse.apply(a);
      out.set(a, offset);
      offset += 8;
    };

    var DATA_LENGTH = 1;
    var result = new Int8Array(5 + DATA_LENGTH * 13);

    return function(channelNumber) {
        offset = 0;
        result[offset++] = this.channels[channelNumber].dataType;
        // Set data length
        write_int32(result, DATA_LENGTH);
        // Set validity
        write_boolean(result, 1);
        // Set uncertainty
        write_float32(result, 0);
        // Set sensor data.
        write_double64(result, this.acceleration[channelNumber]);
        return result;
    };
})();

AccelerometerSensor.acceleration = [0, 0, 0];

// Event handler to handle devicemotion event.
AccelerometerSensor.handleEvent = function(evt) {
    var a = evt.accelerationIncludingGravity;
    this.acceleration[0] = a.x;
    this.acceleration[1] = a.y;
    this.acceleration[2] = a.z;
};

Native["com/sun/javame/sensor/SensorRegistry.doGetNumberOfSensors.()I"] = function() {
    // Only support the acceleration sensor.
    return 1;
};

Native["com/sun/javame/sensor/Sensor.doGetSensorModel.(ILcom/sun/javame/sensor/SensorModel;)V"] = function(number, model) {
    if (number !== 0) {
        console.error("Invalid sensor number: " + number);
        return;
    }
    var m = AccelerometerSensor.model;
    model.description = J2ME.newString(m.description);
    model.model = J2ME.newString(m.model);
    model.quantity = J2ME.newString(m.quantity);
    model.contextType = J2ME.newString(m.contextType);
    model.connectionType = m.connectionType;
    model.maxBufferSize = m.maxBufferSize;
    model.availabilityPush = m.availabilityPush;
    model.conditionPush = m.conditionPush;
    model.channelCount = m.channelCount;
    model.errorCodes = J2ME.newArray(J2ME.PrimitiveArrayClassInfo.I.klass, 0);
    model.errorMsgs = J2ME.newStringArray(0);

    var n = m.properties.length;
    var p = J2ME.newStringArray(n);
    for (var i = 0; i < n; i++) {
        p[i] = J2ME.newString(m.properties[i]);
    }
    model.properties = p;
};

Native["com/sun/javame/sensor/ChannelImpl.doGetChannelModel.(IILcom/sun/javame/sensor/ChannelModel;)V"] = function(sensorsNumber, number, model) {
    if (sensorsNumber !== 0) {
        console.error("Invalid sensor number: " + sensorsNumber);
        return;
    }
    if (number < 0 || number >= AccelerometerSensor.channels.length) {
        console.error("Invalid channel number: " + number);
        return;
    }
    var c = AccelerometerSensor.channels[number];
    model.scale = c.scale;
    model.name = J2ME.newString(c.name);
    model.unit = J2ME.newString(c.unit);
    model.dataType = c.dataType;
    model.accuracy = c.accuracy;
    model.mrangeCount = c.mrangeArray.length;

    var n = c.mrangeArray.length;
    var array = J2ME.newArray(J2ME.PrimitiveArrayClassInfo.J.klass, n);
    for (var i = 0; i < n; i++) {
        array[i] = c.mrangeArray[i];
    }
    model.mrageArray = array;
};

Native["com/sun/javame/sensor/NativeSensor.doIsAvailable.(I)Z"] = function(number) {
    // Only support the acceleration sensor with number = 0.
    return number === 0 ? 1 : 0;
};

Native["com/sun/javame/sensor/NativeSensor.doInitSensor.(I)Z"] = function(number) {
    if (number !== 0) {
        return 0;
    }
    AccelerometerSensor.open();
    return 1;
};

Native["com/sun/javame/sensor/NativeSensor.doFinishSensor.(I)Z"] = function(number) {
    if (number !== 0) {
        return 0;
    }
    AccelerometerSensor.close();
    return 1;
};

Native["com/sun/javame/sensor/NativeChannel.doMeasureData.(II)[B"] = function(sensorNumber, channelNumber) {
    if (sensorNumber !== 0 || channelNumber < 0 || channelNumber >= 3) {
        if (sensorNumber !== 0) {
            console.error("Invalid sensor number: " + sensorsNumber);
        } else {
            console.error("Invalid channel number: " + channelNumber);
        }
        return J2ME.newArray(J2ME.PrimitiveArrayClassInfo.B.klass, 0);
    }

    asyncImpl("[B", new Promise(function(resolve, reject) {
        var result = AccelerometerSensor.readBuffer(channelNumber);
        setTimeout(resolve.bind(null, result), 50);
    }));
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



var SOCKET_OPT = {
  DELAY: 0,
  LINGER: 1,
  KEEPALIVE: 2,
  RCVBUF: 3,
  SNDBUF: 4,
};

Native["com/sun/midp/io/j2me/socket/Protocol.getIpNumber0.(Ljava/lang/String;[B)I"] = function(host, ipBytes) {
    // We'd need to modify ipBytes, that is an array with length 0
    // But we don't really need to do that, because getIpNumber0 is called only
    // before open0. So we just need to store the host and pass it to
    // mozTCPSocket::open.
    this.host = J2ME.fromJavaString(host);
    return 0;
};

Native["com/sun/midp/io/j2me/socket/Protocol.getHost0.(Z)Ljava/lang/String;"] = function(local) {
    return local ? "127.0.0.1" : this.socket.host;
};

function Socket(host, port) {
    this.sender = DumbPipe.open("socket", { host: host, port: port }, this.recipient.bind(this));
    this.isClosed = false;
}

Socket.prototype.recipient = function(message) {
    if (message.type == "close") {
        this.isClosed = true;
        DumbPipe.close(this.sender);
    }
    var callback = this["on" + message.type];
    if (callback) {
        callback(message);
    }
}

Socket.prototype.send = function(data, offset, length) {
    // Convert the data to a regular Array to traverse the mozbrowser boundary.
    data = Array.prototype.slice.call(data.subarray(offset, offset + length));
    data.constructor = Array;

    this.sender({ type: "send", data: data });
}

Socket.prototype.close = function() {
    this.sender({ type: "close" });
}

Native["com/sun/midp/io/j2me/socket/Protocol.open0.([BI)V"] = function(ipBytes, port) {
    // console.log("Protocol.open0: " + this.host + ":" + port);
    var ctx = $.ctx;
    asyncImpl("V", new Promise((function(resolve, reject) {
        this.socket = new Socket(this.host, port);

        this.options = {};
        this.options[SOCKET_OPT.DELAY] = 1;
        this.options[SOCKET_OPT.LINGER] = 0;
        this.options[SOCKET_OPT.KEEPALIVE] = 1;
        this.options[SOCKET_OPT.RCVBUF] = 8192;
        this.options[SOCKET_OPT.SNDBUF] = 8192;

        this.data = new Int8Array();
        this.waitingData = null;

        this.socket.onopen = function() {
            // console.log("this.socket.onopen");
            resolve();
        }

        this.socket.onerror = function(message) {
            ctx.setAsCurrentContext();
            // console.log("this.socket.onerror: " + message.error);
            reject($.newIOException(message.error));
        }

        this.socket.onclose = function() {
            if (this.waitingData) {
                this.waitingData();
            }
        }.bind(this);

        this.socket.ondata = (function(message) {
            // console.log("this.socket.ondata: " + JSON.stringify(message));
            if (this.data.byteLength === 0) {
                this.data = new Int8Array(message.data);
            } else {
                var newArray = new Int8Array(this.data.byteLength + message.data.byteLength);
                newArray.set(this.data);
                newArray.set(new Int8Array(message.data), this.data.byteLength);
                this.data = newArray;
            }

            if (this.waitingData) {
                this.waitingData();
            }
        }).bind(this);
    }).bind(this)));
};

Native["com/sun/midp/io/j2me/socket/Protocol.available0.()I"] = function() {
    // console.log("Protocol.available0: " + this.data.byteLength);
    return this.data.byteLength;
};

Native["com/sun/midp/io/j2me/socket/Protocol.read0.([BII)I"] = function(data, offset, length) {
    // console.log("Protocol.read0: " + this.socket.isClosed);

    asyncImpl("I", new Promise((function(resolve, reject) {
        // There might be data left in the buffer when the socket is closed, so we
        // should allow buffer reading even the socket has been closed.
        if (this.socket.isClosed && this.data.length == 0) {
            resolve(-1);
            return;
        }

        var copyData = (function() {
            var toRead = (length < this.data.byteLength) ? length : this.data.byteLength;

            data.set(this.data.subarray(0, toRead), offset);

            this.data = this.data.subarray(toRead);

            resolve(toRead);
        }).bind(this);

        if (this.data.byteLength == 0) {
            this.waitingData = (function() {
                this.waitingData = null;
                copyData();
            }).bind(this);

            return;
        }

        copyData();
    }).bind(this)));
};

Native["com/sun/midp/io/j2me/socket/Protocol.write0.([BII)I"] = function(data, offset, length) {
    var ctx = $.ctx;
    asyncImpl("I", new Promise(function(resolve, reject) {
        if (this.socket.isClosed) {
          ctx.setAsCurrentContext();
          reject($.newIOException("socket is closed"));
          return;
        }

        this.socket.onsend = function(message) {
            this.socket.onsend = null;
            if ("error" in message) {
                console.error(message.error);
                ctx.setAsCurrentContext();
                reject($.newIOException("error writing to socket"));
            } else if (message.result) {
                resolve(length);
            } else {
                this.socket.ondrain = function() {
                    this.socket.ondrain = null;
                    resolve(length);
                }.bind(this);
            }
        }.bind(this);

        this.socket.send(data, offset, length);
    }.bind(this)));
};

Native["com/sun/midp/io/j2me/socket/Protocol.setSockOpt0.(II)V"] = function(option, value) {
    if (!(option in this.options)) {
        throw $.newIllegalArgumentException("Unsupported socket option");
    }

    this.options[option] = value;
};

Native["com/sun/midp/io/j2me/socket/Protocol.getSockOpt0.(I)I"] = function(option) {
    if (!(option in this.options)) {
        throw new $.newIllegalArgumentException("Unsupported socket option");
    }

    return this.options[option];
};

Native["com/sun/midp/io/j2me/socket/Protocol.close0.()V"] = function() {
    // console.log("Protocol.close0: " + this.socket.isClosed);

    asyncImpl("V", new Promise((function(resolve, reject) {
        if (this.socket.isClosed) {
            resolve();
            return;
        }

        this.socket.onclose = (function() {
            // console.log("this.socket.onclose");
            this.socket.onclose = null;
            resolve();
        }).bind(this);

        this.socket.close();
    }).bind(this)));
};

Native["com/sun/midp/io/j2me/socket/Protocol.shutdownOutput0.()V"] = function() {
    // We don't have the ability to close the output stream independently
    // of the connection as a whole.  But we don't seem to have to do anything
    // here, since this has just two call sites: one in Protocol.disconnect,
    // right before closing the socket; the other in Protocol.closeOutputStream,
    // which says it will be "called once by the child output stream," although
    // I can't find an actual caller.
};

Native["com/sun/midp/io/j2me/socket/Protocol.notifyClosedInput0.()V"] = function() {
    if (this.waitingData) {
        console.warn("Protocol.notifyClosedInput0.()V unimplemented while thread is blocked on read0");
    }
};

Native["com/sun/midp/io/j2me/socket/Protocol.notifyClosedOutput0.()V"] = function() {
    if (this.socket.ondrain) {
        console.warn("Protocol.notifyClosedOutput0.()V unimplemented while thread is blocked on write0");
    }
};
/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* vim: set shiftwidth=4 tabstop=4 autoindent cindent expandtab: */



MIDP.lastSMSConnection = -1;
MIDP.lastSMSID = -1;
MIDP.smsConnections = {};
MIDP.j2meSMSMessages = [];
MIDP.j2meSMSWaiting = null;
MIDP.nokiaSMSMessages = [];

/**
 * Simulate a received SMS with the given text, sent to the specified addr.
 * (It appears the value of `addr` is unimportant for most apps.)
 */
function receiveSms(text, addr) {
    var sms = {
      text: text,
      addr: addr,
      id: ++MIDP.lastSMSID,
    };

    MIDP.nokiaSMSMessages.push(sms);
    MIDP.j2meSMSMessages.push(sms);

    window.dispatchEvent(new CustomEvent("nokia.messaging", {
      detail: sms
    }));

    if (MIDP.j2meSMSWaiting) {
      MIDP.j2meSMSWaiting();
    }
}

/**
 * This app is listening for SMS messages; for most apps, that means
 * they're looking for the content of a message the app's servers just
 * sent. Prompt the user to enter that code here, and forward it to
 * the app.
 */
function promptForMessageText() {
    var smsTemplateNode = document.getElementById('sms-listener-prompt');
    var el = smsTemplateNode.cloneNode(true);
    el.style.display = 'block';
    el.classList.add('visible');

    el.querySelector('p.verificationText').textContent = MIDlet.SMSDialogVerificationText;

    var input = el.querySelector('input');
    var btnCancel = el.querySelector('button.cancel');
    var btnDone = el.querySelector('button.recommend');

    btnDone.disabled = true; // Wait for input before enabling.
    input.addEventListener('input', function() {
        btnDone.disabled = (input.value.length === 0);
    });

    btnCancel.addEventListener('click', function() {
        console.warn('SMS prompt canceled.');
        clearInterval(intervalID);
        clearTimeout(timeoutID);
        el.parentElement.removeChild(el);
    });

    btnDone.addEventListener('click', function() {
        clearInterval(intervalID);
        clearTimeout(timeoutID);
        el.parentElement.removeChild(el);
        // We don't have easy access to our own phone number; use a
        // dummy unknown value instead.
        receiveSms(MIDlet.SMSDialogReceiveFilter(input.value), 'unknown');
    });

    function toTimeText(ms) {
      var seconds = ms / 1000;
      var minutes = Math.floor(seconds / 60);
      seconds -= minutes * 60;

      var text = minutes + ":";

      if (seconds > 10) {
        text += seconds;
      } else {
        text += "0" + seconds;
      }

      return text;
    }

    el.querySelector('p.timeLeft').textContent = toTimeText(MIDlet.SMSDialogTimeout) +
                                                 " " + MIDlet.SMSDialogTimeoutText;

    smsTemplateNode.parentNode.appendChild(el);
    if (currentlyFocusedTextEditor) {
      currentlyFocusedTextEditor.blur();
      currentlyFocusedTextEditor = null;
    }

    var elapsedMS = 0;
    var intervalID = setInterval(function() {
      elapsedMS += 1000;
      el.querySelector('p.timeLeft').textContent = toTimeText(MIDlet.SMSDialogTimeout - elapsedMS) +
                                                   " " + MIDlet.SMSDialogTimeoutText;
      el.querySelector('progress.timeLeftBar').value = elapsedMS / MIDlet.SMSDialogTimeout * 100;
    }, 1000);

    // Remove the dialog after a timeout
    var timeoutID = setTimeout(function() {
        clearInterval(intervalID);
        el.parentElement.removeChild(el);
    }, MIDlet.SMSDialogTimeout);
}

Native["com/sun/midp/io/j2me/sms/Protocol.open0.(Ljava/lang/String;II)I"] = function(host, msid, port) {
    MIDP.smsConnections[++MIDP.lastSMSConnection] = {
      port: port,
      msid: msid,
      host: J2ME.fromJavaString(host),
    };

    return ++MIDP.lastSMSConnection;
};

Native["com/sun/midp/io/j2me/sms/Protocol.receive0.(IIILcom/sun/midp/io/j2me/sms/Protocol$SMSPacket;)I"] =
function(port, msid, handle, smsPacket) {
    asyncImpl("I", new Promise(function(resolve, reject) {
        function receiveSMS() {
            var sms = MIDP.j2meSMSMessages.shift();
            var text = sms.text;
            var addr = sms.addr;

            var message = J2ME.newByteArray(text.length);
            for (var i = 0; i < text.length; i++) {
                message[i] = text.charCodeAt(i);
            }

            var address = J2ME.newByteArray(addr.length);
            for (var i = 0; i < addr.length; i++) {
                address[i] = addr.charCodeAt(i);
            }

            smsPacket.message = message;
            smsPacket.address = address;
            smsPacket.port = port;
            smsPacket.sentAt = Long.fromNumber(Date.now());
            smsPacket.messageType = 0; // GSM_TEXT

            return text.length;
        }

        if (MIDP.j2meSMSMessages.length > 0) {
          resolve(receiveSMS());
        } else {
          MIDP.j2meSMSWaiting = function() {
            MIDP.j2meSMSWaiting = null;
            resolve(receiveSMS());
          }
        }
    }));
};

Native["com/sun/midp/io/j2me/sms/Protocol.close0.(III)I"] = function(port, handle, deRegister) {
    delete MIDP.smsConnections[handle];
    return 0;
};

Native["com/sun/midp/io/j2me/sms/Protocol.numberOfSegments0.([BIIZ)I"] = function(msgBuffer, msgLen, msgType, hasPort) {
    console.warn("com/sun/midp/io/j2me/sms/Protocol.numberOfSegments0.([BIIZ)I not implemented");
    return 1;
};

Native["com/sun/midp/io/j2me/sms/Protocol.send0.(IILjava/lang/String;II[B)I"] =
function(handle, type, host, destPort, sourcePort, message) {
    var ctx = $.ctx;
    asyncImpl("I", new Promise(function(resolve, reject) {
        var activity = new MozActivity({
            name: "new",
            data: {
              type: "websms/sms",
              number: J2ME.fromJavaString(host),
              body: new TextDecoder('utf-16be').decode(message),
            },
        });

        activity.onsuccess = function() {
          resolve(message.byteLength);
        };

        activity.onerror = function() {
          ctx.setAsCurrentContext();
          reject($.newIOException("Error while sending SMS message"));
        };
    }));
};
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var DataType = {
  BOOLEAN: 0,
  CHAR: 1,
  BYTE: 2,
  WCHAR: 3,
  SHORT: 4,
  USHORT: 5,
  LONG: 6,
  ULONG: 7,
  FLOAT: 8,
  DOUBLE: 9,
  STRING: 10,
  WSTRING: 11,
  URI: 12,
  METHOD: 13,
  STRUCT: 14,
  LIST: 15,
  ARRAY: 16,
};

var DataEncoder = function() {
  this.data = [];
}

DataEncoder.START = 1;
DataEncoder.END = 2;

DataEncoder.prototype.putStart = function(tag, name) {
  this.data.push({
    type: DataEncoder.START,
    tag: tag,
    name: name,
  });
}

DataEncoder.prototype.putEnd = function(tag, name) {
  this.data.push({
    type: DataEncoder.END,
    tag: tag,
    name: name,
  })
}

DataEncoder.prototype.put = function(tag, name, value) {
  this.data.push({
    tag: tag,
    name: name,
    value: value,
  });
}

DataEncoder.prototype.putNoTag = function(name, value) {
  this.data.push({
    name: name,
    value: value,
  });
}

DataEncoder.prototype.getData = function() {
  return JSON.stringify(this.data);
}

var DataDecoder = function(data, offset, length) {
  this.data = JSON.parse(util.decodeUtf8(new Int8Array(data.buffer, offset, length)));
  this.current = [];
}

DataDecoder.prototype.find = function(tag, type) {
  var elem;
  var i = 0;
  while (elem = this.data[i++]) {
    if ((!type || elem.type == type) && elem.tag == tag) {
      this.data = this.data.slice(i);
      return elem;
    }

    if (elem.type == DataEncoder.END) {
      break;
    }
  }
}

DataDecoder.prototype.getStart = function(tag) {
  var elem = this.find(tag, DataEncoder.START);
  if (!elem) {
    return false;
  }

  this.current.push(elem);

  return true;
}

DataDecoder.prototype.getEnd = function(tag) {
  var elem = this.find(tag, DataEncoder.END);
  if (!elem) {
    return false;
  }

  // If this happens, a father has ended before a child
  if (elem.tag != this.current[this.current.length - 1].tag ||
      elem.name != this.current[this.current.length - 1].name) {
    return false;
  }

  this.current.pop();

  return true;
}

DataDecoder.prototype.getValue = function(tag) {
  var elem = this.find(tag);
  return elem ? elem.value : undefined;
}

DataDecoder.prototype.getNextValue = function() {
  var elem = this.data.shift();
  return elem ? elem.value : undefined;
}

DataDecoder.prototype.getName = function() {
  return this.data[0].name;
}

DataDecoder.prototype.getTag = function() {
  return this.data[0].tag;
}

DataDecoder.prototype.getType = function() {
  return this.data[0].type || -1;
}

Native["com/nokia/mid/s40/codec/DataEncoder.init.()V"] = function() {
  this.encoder = new DataEncoder();
};

Native["com/nokia/mid/s40/codec/DataEncoder.putStart.(ILjava/lang/String;)V"] = function(tag, name) {
  this.encoder.putStart(tag, J2ME.fromJavaString(name));
};

Native["com/nokia/mid/s40/codec/DataEncoder.put.(ILjava/lang/String;Ljava/lang/String;)V"] = function(tag, name, value) {
  this.encoder.put(tag, J2ME.fromJavaString(name), J2ME.fromJavaString(value));
};

Native["com/nokia/mid/s40/codec/DataEncoder.put.(ILjava/lang/String;J)V"] = function(tag, name, value) {
  this.encoder.put(tag, J2ME.fromJavaString(name), value.toNumber());
};

Native["com/nokia/mid/s40/codec/DataEncoder.put.(ILjava/lang/String;Z)V"] = function(tag, name, value) {
  this.encoder.put(tag, J2ME.fromJavaString(name), value);
};

Native["com/nokia/mid/s40/codec/DataEncoder.put.(Ljava/lang/String;[BI)V"] = function(name, data, length) {
  var array = Array.prototype.slice.call(data.subarray(0, length));
  array.constructor = Array;
  this.encoder.putNoTag(J2ME.fromJavaString(name), array);
};

Native["com/nokia/mid/s40/codec/DataEncoder.putEnd.(ILjava/lang/String;)V"] = function(tag, name) {
  this.encoder.putEnd(tag, J2ME.fromJavaString(name));
};

Native["com/nokia/mid/s40/codec/DataEncoder.getData.()[B"] = function() {
  var data = this.encoder.getData();

  var array = J2ME.newByteArray(data.length);
  for (var i = 0; i < data.length; i++) {
    array[i] = data.charCodeAt(i);
  }

  return array;
};

Native["com/nokia/mid/s40/codec/DataDecoder.init.([BII)V"] = function(data, offset, length) {
  this.decoder = new DataDecoder(data, offset, length);
};

Native["com/nokia/mid/s40/codec/DataDecoder.getStart.(I)V"] = function(tag) {
  if (!this.decoder.getStart(tag)) {
    throw $.newIOException("no start found " + tag);
  }
};

Native["com/nokia/mid/s40/codec/DataDecoder.getEnd.(I)V"] = function(tag) {
  if (!this.decoder.getEnd(tag)) {
    throw $.newIOException("no end found " + tag);
  }
};

Native["com/nokia/mid/s40/codec/DataDecoder.getString.(I)Ljava/lang/String;"] = function(tag) {
  var str = this.decoder.getValue(tag);
  if (str === undefined) {
    throw $.newIOException("tag (" + tag + ") invalid");
  }
  return J2ME.newString(str);
};

Native["com/nokia/mid/s40/codec/DataDecoder.getInteger.(I)J"] = function(tag) {
  var num = this.decoder.getValue(tag);
  if (num === undefined) {
    throw $.newIOException("tag (" + tag + ") invalid");
  }
  return Long.fromNumber(num);
};

Native["com/nokia/mid/s40/codec/DataDecoder.getBoolean.()Z"] = function() {
  var val = this.decoder.getNextValue();
  if (val === undefined) {
    throw $.newIOException();
  }
  return val === 1 ? 1 : 0;
};

Native["com/nokia/mid/s40/codec/DataDecoder.getName.()Ljava/lang/String;"] = function() {
  var name = this.decoder.getName();
  if (name === undefined) {
    throw $.newIOException();
  }
  return J2ME.newString(name);
};

Native["com/nokia/mid/s40/codec/DataDecoder.getType.()I"] = function() {
  var tag = this.decoder.getTag();
  if (tag === undefined) {
    throw $.newIOException();
  }
  return tag;
};

Native["com/nokia/mid/s40/codec/DataDecoder.listHasMoreItems.()Z"] = function() {
  return this.decoder.getType() != DataEncoder.END ? 1 : 0;
};
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var PIM = {};
PIM.CONTACT_LIST = 1;
PIM.EVENT_LIST = 2;
PIM.TODO_LIST = 3;
PIM.READ_ONLY = 1;
PIM.WRITE_ONLY = 2;
PIM.READ_WRITE = 3;

PIM.Contact = {
  FORMATTED_NAME: 105,
  TEL: 115,
  UID: 117,
};

PIM.PIMItem = {
  BINARY: 0,
  BOOLEAN: 1,
  DATE: 2,
  INT: 3,
  STRING: 4,
  STRING_ARRAY: 5,
};

PIM.supportedFields = [
{
  field: PIM.Contact.FORMATTED_NAME,
  dataType: PIM.PIMItem.STRING,
  maxValues: -1,
},
{
  field: PIM.Contact.TEL,
  dataType: PIM.PIMItem.STRING,
  maxValues: -1,
},
{
  field: PIM.Contact.UID,
  dataType: PIM.PIMItem.STRING,
  maxValues: 1,
},
];

PIM.lastListHandle = 0;
PIM.openLists = {};

Native["com/sun/j2me/pim/PIMProxy.getListNamesCount0.(I)I"] = function(listType) {
  console.warn("PIMProxy.getListNamesCount0.(I)I incomplete");

  if (listType === PIM.CONTACT_LIST) {
    return 1;
  }

  return 0;
};

Native["com/sun/j2me/pim/PIMProxy.getListNames0.([Ljava/lang/String;)V"] = function(names) {
  console.warn("PIMProxy.getListNames0.([Ljava/lang/String;)V incomplete");
  names[0] = J2ME.newString("ContactList");
};

Native["com/sun/j2me/pim/PIMProxy.listOpen0.(ILjava/lang/String;I)I"] = function(listType, listName, mode) {
  console.warn("PIMProxy.listOpen0.(ILjava/lang/String;I)I incomplete");

  if (mode !== PIM.READ_ONLY) {
    console.warn("PIMProxy.listOpen0.(ILjava/lang/String;I)I in write mode not implemented");
    return 0;
  }

  if (listType === PIM.CONTACT_LIST) {
    PIM.openLists[++PIM.lastListHandle] = {};
    return PIM.lastListHandle;
  }

  return 0;
};

Native["com/sun/j2me/pim/PIMProxy.getNextItemDescription0.(I[I)Z"] = function(listHandle, description) {
  console.warn("PIMProxy.getNextItemDescription0.(I[I)Z incomplete");

  asyncImpl("Z", new Promise(function(resolve, reject) {
    contacts.getNext(function(contact) {
      if (contact == null) {
        resolve(0);
        return;
      }

      var str = '';

      contact2vcard.ContactToVcard([ contact ], function(vcards, nCards) {
        str += vcards;
      }, function() {
        PIM.curVcard = new TextEncoder('utf8').encode(str);

        description[0] = contact.id;
        description[1] = PIM.curVcard.byteLength;
        description[2] = 1;

        resolve(1);
      });
    });
  }));
};

Native["com/sun/j2me/pim/PIMProxy.getNextItemData0.(I[BI)Z"] = function(itemHandle, data, dataHandle) {
  console.warn("PIMProxy.getNextItemData0.(I[BI)Z incomplete");
  data.set(PIM.curVcard);
  return 1;
};

Native["com/sun/j2me/pim/PIMProxy.getItemCategories0.(II)Ljava/lang/String;"] = function(itemHandle, dataHandle) {
  console.warn("PIMProxy.getItemCategories0.(II)Ljava/lang/String; not implemented");
  return null;
};

Native["com/sun/j2me/pim/PIMProxy.listClose0.(I)Z"] = function(listHandle, description) {
  if (!(listHandle in PIM.openLists)) {
    return 0;
  }

  delete PIM.openLists[listHandle];
  return 1;
};

Native["com/sun/j2me/pim/PIMProxy.getDefaultListName.(I)Ljava/lang/String;"] = function(listType) {
  if (listType === PIM.CONTACT_LIST) {
    return J2ME.newString("ContactList");
  }

  if (listType === PIM.EVENT_LIST) {
    return J2ME.newString("EventList");
  }

  if (listType === PIM.TODO_LIST) {
    return J2ME.newString("TodoList");
  }

  return null;
};

Native["com/sun/j2me/pim/PIMProxy.getFieldsCount0.(I[I)I"] = function(listHandle, dataHandle) {
  return PIM.supportedFields.length;
};

Native["com/sun/j2me/pim/PIMProxy.getFieldLabelsCount0.(III)I"] = function(listHandle, fieldIndex, dataHandle) {
  console.warn("PIMProxy.getFieldLabelsCount0.(III)I not implemented");
  return 1;
};

Native["com/sun/j2me/pim/PIMProxy.getFields0.(I[Lcom/sun/j2me/pim/PIMFieldDescriptor;I)V"] = function(listHandle, desc, dataHandle) {
  console.warn("PIMProxy.getFields0.(I[Lcom/sun/j2me/pim/PIMFieldDescriptor;I)V incomplete");

  PIM.supportedFields.forEach(function(field, i) {
    desc[i].field = field.field;
    desc[i].dataType = field.dataType;
    desc[i].maxValues = field.maxValues;
  });
};

Native["com/sun/j2me/pim/PIMProxy.getAttributesCount0.(I[I)I"] = function(listHandle, dataHandle) {
  console.warn("PIMProxy.getAttributesCount0.(I[I)I not implemented");
  return 0;
};

Native["com/sun/j2me/pim/PIMProxy.getAttributes0.(I[Lcom/sun/j2me/pim/PIMAttribute;I)V"] = function(listHandle, attr, dataHandle) {
  console.warn("PIMProxy.getAttributes0.(I[Lcom/sun/j2me/pim/PIMAttribute;I)V not implemented");
};
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



Native["com/nokia/mid/ui/DeviceControl.startVibra.(IJ)V"] = function(freq, longDuration) {
  // If method is called during a previously called vibration that has been
  // activated from this method, the previous vibration is stopped and the new
  // one is activated using the new set of parameters.
  navigator.vibrate(0);

  // Value 0 can be used for detecting whether or not there is a vibration device.
  if (freq === 0) {
    return;
  }

  var duration = longDuration.toNumber();

  if (freq < 0 || freq > 100 || duration < 0) {
    throw new $.newIllegalArgumentException();
  }

  navigator.vibrate(duration);
};

Native["com/nokia/mid/ui/DeviceControl.stopVibra.()V"] = function() {
  navigator.vibrate(0);
};
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



var fgMidletNumber;
var fgMidletClass;

function backgroundCheck() {
  var bgServer = MIDP.manifest["Nokia-MIDlet-bg-server"];
  if (!bgServer) {
    document.getElementById("splash-screen").style.display = "block";
    document.getElementById("background-screen").style.display = "none";
    return;
  }

  // We're assuming there are only two midlets
  fgMidletNumber = (bgServer == 2) ? 1 : 2;
  fgMidletClass = MIDP.manifest["MIDlet-" + fgMidletNumber].split(",")[2];

  DumbPipe.close(DumbPipe.open("backgroundCheck", {}));
}

Native["com/nokia/mid/s40/bg/BGUtils.getFGMIDletClass.()Ljava/lang/String;"] = function() {
  return J2ME.newString(fgMidletClass);
};

Native["com/nokia/mid/s40/bg/BGUtils.getFGMIDletNumber.()I"] = function() {
  return fgMidletNumber;
};

MIDP.additionalProperties = {};

Native["com/nokia/mid/s40/bg/BGUtils.addSystemProperties.(Ljava/lang/String;)V"] = function(args) {
  J2ME.fromJavaString(args).split(";").splice(1).forEach(function(arg) {
    var elems = arg.split("=");
    MIDP.additionalProperties[elems[0]] = elems[1];
  });
};

var localmsgServerCreated = false;
var localmsgServerWait = null;

Native["com/nokia/mid/s40/bg/BGUtils.waitUserInteraction.()V"] = function() {
  asyncImpl("V", new Promise(function(resolve, reject) {
    // If the page is visible, just start the FG MIDlet
    if (!document.hidden) {
      resolve();
      return;
    }

    // Otherwise, wait until the page becomes visible, then start the FG MIDlet
    document.addEventListener("visibilitychange", function onVisible() {
      if (!document.hidden) {
        document.removeEventListener("visibilitychange", onVisible, false);
        resolve();
      }
    }, false);
  }).then(function() {
    return new Promise(function(resolve, reject) {
      if (localmsgServerCreated) {
        resolve();
        return;
      }

      localmsgServerWait = resolve;
    });
  }).then(function() {
    document.getElementById("splash-screen").style.display = "block";
    document.getElementById("background-screen").style.display = "none";
  }));
};
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



Override["com/nokia/mid/ui/gestures/GestureInteractiveZone.<init>.(I)V"] = function(gestures) {
  this.gestures = gestures;
};

Native["com/nokia/mid/ui/gestures/GestureInteractiveZone.setRectangle.(IIII)V"] = function(x, y, width, height) {
  this.rect = {
    x: x,
    y: y,
    width: width,
    height: height,
  };
};

Native["com/nokia/mid/ui/gestures/GestureInteractiveZone.contains.(II)Z"] = function(x, y) {
  if (!this.rect ||
      x >= this.rect.x && x <= (this.rect.x + this.rect.width) &&
      y >= this.rect.y && y <= (this.rect.y + this.rect.height)) {
    return 1;
  }

  return 0;
};

Native["com/nokia/mid/ui/gestures/GestureInteractiveZone.supports.(I)Z"] = function(type) {
  return ((type & this.gestures) == type) ? 1 : 0;
};
function makeSendKey(keyCode) {
  return function() {
    MIDP.keyPress(keyCode);
  }
}

document.getElementById("up").ontouchstart = makeSendKey(119);
document.getElementById("down").ontouchstart = makeSendKey(115);
document.getElementById("left").ontouchstart = makeSendKey(97);
document.getElementById("right").ontouchstart = makeSendKey(100);
document.getElementById("fire").ontouchstart = makeSendKey(32);
var startCompile = performance.now();
// java/lang/Object
function $G_qyIrdQ() {
 this._hashCode = 0;
}
// java/lang/Object.equals.(Ljava/lang/Object;)Z ($G_qyIrdQ_3)
function $G_qyIrdQ_3(b) {
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if (a!==b) {
 A=0;
 } else {
 A=1;
 }
 return A;
}
AOTMD["$G_qyIrdQ_3"] = {"osr":[]};
// java/lang/Object.toString.()Ljava/lang/String; ($G_qyIrdQ_4)
function $G_qyIrdQ_4() {
 var re,k0=$G_qyIrdQ;
 var a;
 a=this;
 var A,B;
 var pc=0;
 try{
 var label=0;
 A=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((A));
 re=a.v0();
 re=re.v16();
 re=A.v19(re);
 re=re.v19(k0.c(6));
 A=re;
 re=a.v1();
 U&&B1(23);
 re=$G_HAwZDR.m(1)(re);
 U&&B1(26);
 re=A.v19(re);
 re=re.v3();
 return re;
 }catch(ex){
 if(U){$.T(ex,[a],[A,B],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_qyIrdQ_4"] = {"osr":[]};
// java/lang/Object.wait.()V ($G_qyIrdQ_9)
function $G_qyIrdQ_9() {
 var re;
 var a;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=a.v6(Long.ZERO);
 if(U){$.B(2,5,[a],[],null);return;}
 return;
}
AOTMD["$G_qyIrdQ_9"] = {"osr":[]};
$G_qyIrdQ.classSymbols = ["java/lang/StringBuffer", "java/lang/Object", "java/lang/Class", "java/lang/Integer"];
// com/nokia/mid/s40/codec/DataEncoder extends java/lang/Object
function $FkHRT_j() {
 this._hashCode = 0;
}
// com/nokia/mid/s40/codec/DataEncoder.<init>.(Ljava/lang/String;)V ($FkHRT_j_0)
function $FkHRT_j_0(b) {
 var re,k0=$FkHRT_j;
 var a,b;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 re=k0.m(1).call(a);
 return;
}
AOTMD["$FkHRT_j_0"] = {"osr":[]};
$FkHRT_j.classSymbols = ["java/lang/Object", "com/nokia/mid/s40/codec/DataEncoder"];
// com/nokia/mid/ui/CanvasItem extends java/lang/Object
function $FXDl7Zb() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/nokia/mid/ui/CanvasItem.setPosition.(II)V ($FXDl7Zb_9)
function $FXDl7Zb_9(b,c) {
 var re;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=a.v16(b,c);
 if(U){$.B(3,6,[a,b,c],[],null);return;}
 return;
}
AOTMD["$FXDl7Zb_9"] = {"osr":[]};
// com/nokia/mid/ui/CanvasItem.getParent.()Ljava/lang/Object; ($FXDl7Zb_19)
function $FXDl7Zb_19() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$FXDl7Zb_19"] = {"osr":[]};
$FXDl7Zb.classSymbols = ["com/nokia/mid/ui/CanvasItem"];
// com/nokia/mid/ui/DirectGraphicsImp extends java/lang/Object
function $GBPi16Si() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/nokia/mid/ui/DirectGraphicsImp.<init>.(Ljavax/microedition/lcdui/Graphics;)V ($GBPi16Si_0)
function $GBPi16Si_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$GBPi16Si_0"] = {"osr":[]};
$GBPi16Si.classSymbols = ["java/lang/Object", "com/nokia/mid/ui/DirectGraphicsImp"];
// com/nokia/mid/ui/DirectUtils extends java/lang/Object
function $G_x9mdgc() {
 this._hashCode = 0;
}
// com/nokia/mid/ui/DirectUtils.getDirectGraphics.(Ljavax/microedition/lcdui/Graphics;)Lcom/nokia/mid/ui/DirectGraphics; ($G_x9mdgc_1)
function $G_x9mdgc_1(a) {
 var re;
 var a;
 var A,B,C;
 var pc=0;
 var label=0;
 if ($.initialized["com/nokia/mid/ui/DirectGraphicsImp"] === undefined) { $.$GBPi16Si.classObject.initialize(); }
 A=new $GBPi16Si();
 re=$GBPi16Si.m(0).call((A),a);
 return A;
}
AOTMD["$G_x9mdgc_1"] = {"osr":[]};
// com/nokia/mid/ui/DirectUtils.createImage.(III)Ljavax/microedition/lcdui/Image; ($G_x9mdgc_2)
function $G_x9mdgc_2(a,b,c) {
 var re,k0=$G_x9mdgc;
 var a,b,c,d;
 var A,B;
 var pc=0;
 var label=0;
 if ($.initialized["javax/microedition/lcdui/Image"] === undefined) { $.$Fmpjqpe.classObject.initialize(); }
 re=$Fmpjqpe.m(0)(a,b);
 if(U){$.B(2,5,[a,b,c,d],[],null);return;}
 d=re;
 re=k0.m(3)(d,c);
 return d;
}
AOTMD["$G_x9mdgc_2"] = {"osr":[]};
$G_x9mdgc.classSymbols = ["com/nokia/mid/ui/DirectGraphicsImp", "javax/microedition/lcdui/Image", "com/nokia/mid/ui/DirectUtils"];
// com/nokia/mid/ui/gestures/GestureEventImpl extends java/lang/Object
function $G_bVkHWq() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/nokia/mid/ui/gestures/GestureEventImpl.getType.()I ($G_bVkHWq_1)
function $G_bVkHWq_1() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f2);
}
AOTMD["$G_bVkHWq_1"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getDragDistanceX.()I ($G_bVkHWq_2)
function $G_bVkHWq_2() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f3);
}
AOTMD["$G_bVkHWq_2"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getDragDistanceY.()I ($G_bVkHWq_3)
function $G_bVkHWq_3() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f4);
}
AOTMD["$G_bVkHWq_3"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getStartX.()I ($G_bVkHWq_4)
function $G_bVkHWq_4() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f6);
}
AOTMD["$G_bVkHWq_4"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getStartY.()I ($G_bVkHWq_5)
function $G_bVkHWq_5() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f7);
}
AOTMD["$G_bVkHWq_5"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getFlickDirection.()F ($G_bVkHWq_6)
function $G_bVkHWq_6() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f18);
}
AOTMD["$G_bVkHWq_6"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getFlickSpeed.()I ($G_bVkHWq_7)
function $G_bVkHWq_7() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f8);
}
AOTMD["$G_bVkHWq_7"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getFlickSpeedX.()I ($G_bVkHWq_8)
function $G_bVkHWq_8() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f9);
}
AOTMD["$G_bVkHWq_8"] = {"osr":[]};
// com/nokia/mid/ui/gestures/GestureEventImpl.getFlickSpeedY.()I ($G_bVkHWq_9)
function $G_bVkHWq_9() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f0).f10);
}
AOTMD["$G_bVkHWq_9"] = {"osr":[]};
$G_bVkHWq.classSymbols = ["com/nokia/mid/ui/gestures/GestureEventImpl", "com/sun/midp/events/NativeEvent"];
// com/nokia/mid/ui/gestures/GestureRegistrationManager extends java/lang/Object
function $G_3atTc0() {
 this._hashCode = 0;
}
// com/nokia/mid/ui/gestures/GestureRegistrationManager.process.(Lcom/sun/midp/events/Event;)V ($G_3atTc0_3)
function $G_3atTc0_3(b) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 CCK(b,$G_f3ke7f);
 ($.$G_3atTc0.s3).f0=b;
 c=0;
 } else if (!(pc===12)) {
 }
 while(1) {
 A=c;
 re=($.$G_3atTc0.s1).v15();
 U&&B1(16);
 if (A>=re) {
 break;
 }
 re=($.$G_3atTc0.s1).v23(c);
 U&&B0(26);
 CCK(re,$G$Q6E_gq);
 d=re;
 e=d.f1;
 A=e;
 re=($.$G_3atTc0.s3).v12();
 U&&B1(44);
 B=re;
 re=($.$G_3atTc0.s3).v13();
 U&&B2(50);
 re=A.v18(B,re);
 U&&B0(53);
 do {
 if (re!==0) {
 A=e;
 re=($.$G_3atTc0.s3).v9();
 U&&B1(67);
 re=A.v19(re);
 U&&B0(70);
 if (!(re!==0)) {
 break;
 }
 re=($.$G_3atTc0.s2).v15((d.f0));
 U&&B0(86);
 CCI(re,$FnJZT2p);
 f=re;
 if (!(f===null)) {
 re=f.$GB_tp_w((d.f0),e,($.$G_3atTc0.s3));
 U&&B0(110,115);
 }
 } else {
 }
 } while(0);
 c+=1;
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_3atTc0_3"] = {"osr":[12]};
$G_3atTc0.classSymbols = ["com/nokia/mid/ui/gestures/GestureRegistrationManager", "com/sun/midp/events/NativeEvent", "com/nokia/mid/ui/gestures/GestureEventImpl", "java/util/Vector", "com/nokia/mid/ui/gestures/ZoneRegistration", "com/nokia/mid/ui/gestures/GestureInteractiveZone", "java/util/Hashtable", "com/nokia/mid/ui/gestures/GestureListener"];
// com/nokia/mid/ui/TextEditor extends com/nokia/mid/ui/CanvasItem
function $FrktS3b() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = 0;
 this.f3 = null;
}
// com/nokia/mid/ui/TextEditor.getFont.()Ljavax/microedition/lcdui/Font; ($FrktS3b_15)
function $FrktS3b_15() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f3);
}
AOTMD["$FrktS3b_15"] = {"osr":[]};
// com/nokia/mid/ui/TextEditor.isMultiline.()Z ($FrktS3b_37)
function $FrktS3b_37() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f2);
}
AOTMD["$FrktS3b_37"] = {"osr":[]};
$FrktS3b.classSymbols = ["com/nokia/mid/ui/TextEditor"];
// com/sun/cldc/i18n/Helper extends java/lang/Object
function $G_LW4cMY() {
 this._hashCode = 0;
}
// com/sun/cldc/i18n/Helper.normalizeEncodingName.(Ljava/lang/String;)Ljava/lang/String; ($G_LW4cMY_13)
function $G_LW4cMY_13(a) {
 var re;
 var a,b,c,d;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 A=new $G_qRAz2W();
 re=$G_qRAz2W.m(2).call((A),a);
 b=A;
 d=0;
 } else if (!(pc===11)) {
 }
 while(1) {
 A=d;
 re=b.v9();
 if (A>=re) {
 break;
 }
 re=b.v15(d);
 c=re;
 if (c===45) {
 label = 6;
 } else {
 if (c!==58) {
 A=b;
 B=d;
 re=$G$WgS_KT.m(9)(c);
 re=A.v17(B,re);
 } else {
 label = 6;
 }
 }
 if (label == 6) {
 label = 0;
 re=b.v17(d,95);
 }
 d+=1;
 }
 re=b.v3();
 return re;
}
AOTMD["$G_LW4cMY_13"] = {"osr":[11]};
$G_LW4cMY.classSymbols = ["java/lang/StringBuffer", "java/lang/Character"];
// com/sun/cldc/i18n/uclc/DefaultCaseConverter extends java/lang/Object
function $G_NmYBMr() {
 this._hashCode = 0;
}
// com/sun/cldc/i18n/uclc/DefaultCaseConverter.isDigit.(C)Z ($G_NmYBMr_5)
function $G_NmYBMr_5(a) {
 var a;
 var A,B;
 var pc=0;
 var label=0;
 if (a<48) {
 label = 4;
 } else {
 if (a>57) {
 label = 4;
 } else {
 A=1;
 }
 }
 if (label == 4) {
 A=0;
 }
 return A;
}
AOTMD["$G_NmYBMr_5"] = {"osr":[]};
// com/sun/cldc/i18n/uclc/DefaultCaseConverter.digit.(CI)I ($G_NmYBMr_6)
function $G_NmYBMr_6(a,b) {
 var k0=$G_NmYBMr,re;
 var a,b,c;
 var A,B;
 var pc=0;
 var label=0;
 c=-1;
 do {
 if (!(b<2)) {
 if (!(b>36)) {
 re=k0.m(5)(a);
 if (!(re===0)) {
 c=a-48|0;
 break;
 }
 re=k0.m(2)(a);
 if (!(re!==0)) {
 re=k0.m(1)(a);
 if (re===0) {
 break;
 }
 }
 c=(a&31)+9|0;
 }
 }
 } while(0);
 if (c>=b) {
 A=-1;
 return A;
 } else {
 A=c;
 return A;
 }
}
AOTMD["$G_NmYBMr_6"] = {"osr":[]};
$G_NmYBMr.classSymbols = ["com/sun/cldc/i18n/uclc/DefaultCaseConverter"];
// com/sun/midp/events/DispatchData extends java/lang/Object
function $G$xQDXTg() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// com/sun/midp/events/DispatchData.<init>.(Lcom/sun/midp/events/EventListener;)V ($G$xQDXTg_0)
function $G$xQDXTg_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$G$xQDXTg_0"] = {"osr":[]};
$G$xQDXTg.classSymbols = ["java/lang/Object", "com/sun/midp/events/DispatchData"];
// com/sun/midp/events/Event extends java/lang/Object
function $G$IhEmnZ() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
}
// com/sun/midp/events/Event.<init>.(I)V ($G$IhEmnZ_0)
function $G$IhEmnZ_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$G$IhEmnZ_0"] = {"osr":[]};
// com/sun/midp/events/Event.getType.()I ($G$IhEmnZ_1)
function $G$IhEmnZ_1() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$G$IhEmnZ_1"] = {"osr":[]};
$G$IhEmnZ.classSymbols = ["java/lang/Object", "com/sun/midp/events/Event"];
// com/sun/midp/events/EventQueue extends java/lang/Object
function $G$bUOQCe() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = null;
 this.f4 = null;
 this.f5 = 0;
 this.f6 = 0;
 this.f7 = null;
 this.f8 = null;
 this.f9 = 0;
}
// com/sun/midp/events/EventQueue.registerEventListener.(ILcom/sun/midp/events/EventListener;)V ($G$bUOQCe_10)
function $G$bUOQCe_10(b,c) {
 var th=$.ctx.thread;
 var re,k0=$G$bUOQCe,lk;
 var a,b,c,d,e,f,g;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 if (!(b>0)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(1).call((A),k0.c(27));
 throw A;
 }
 if (!(c!==null)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(1).call((A),k0.c(29));
 throw A;
 }
 pc=29;
 A=a.f1;
 B=A;
 d=B;
 pc=34;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(34,35,[a,b,c,d,e,f,g],[],null);return;}
 }
 pc=37;
 A=b;
 B=a.f4;
 pc=40;
 B=B.length;
 if (!(A<=B)) {
 pc=47;
 if ($.initialized["com/sun/midp/events/DispatchData"] === undefined) { $.$G$xQDXTg.classObject.initialize(); }
 (b+1|0) < 0 && TN();
 A=NA($G$xQDXTg,(b+1|0));
 e=A;
 f=0;
 label = 7;
 }
 } else if (pc===55) {
 label = 7;
 } else if (pc===110) {
 g=A;
 pc=113;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=116;
 throw g;
 A=g;
 } else {
 }
 if (label == 7) {
 while(1) {
 label = 0;
 pc=58;
 A=f;
 B=a.f4;
 pc=61;
 B=B.length;
 if (A>=B) {
 break;
 }
 pc=70;
 A=e;
 B=f;
 C=a.f4;
 pc=75;
 if ((f >>> 0) >= (C.length >>> 0)) TI(f);
 C=C[f];
 pc=76;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 CAS(A, C);
 A[B] = C;
 f+=1;
 label = 7;
 }
 pc=86;
 a.f4=e;
 }
 pc=90;
 A=a.f4;
 pc=96;
 if ($.initialized["com/sun/midp/events/DispatchData"] === undefined) { $.$G$xQDXTg.classObject.initialize(); }
 B=b-1|0;
 C=new $G$xQDXTg();
 pc=101;
 re=$G$xQDXTg.m(0).call((C),c);
 pc=104;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 CAS(A, C);
 A[B] = C;
 pc=106;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 return;
 }catch(ex){
 A=TE(ex);
 if(pc>=35&&pc<107){pc=110;continue;}
 if(pc>=110&&pc<114){pc=110;continue;}
 throw A;
 }
 }
}
AOTMD["$G$bUOQCe_10"] = {"osr":[55,110]};
// com/sun/midp/events/EventQueue.post.(Lcom/sun/midp/events/Event;)V ($G$bUOQCe_11)
function $G$bUOQCe_11(b) {
 var th=$.ctx.thread;
 var re,lk,k0=$G$bUOQCe;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f1;
 B=A;
 d=B;
 pc=6;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c,d,e],[],null);return;}
 }
 pc=8;
 A=b.f0;
 if (!(A>=1)) {
 pc=19;
 A=2;
 B=1000;
 C=k0.c(32);
 pc=21;
 if ($.initialized["com/sun/midp/log/LoggingBase"] === undefined) { $.$G_jcmeic.classObject.initialize(); }
 re=$G_jcmeic.m(1)(A,B,C);
 pc=25;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=26;
 return;
 }
 pc=28;
 A=b.f0;
 pc=32;
 B=a.f4;
 pc=35;
 B=B.length;
 if (!(A<=B)) {
 pc=43;
 A=2;
 B=1000;
 C=new $G_qRAz2W();
 pc=47;
 re=$G_qRAz2W.m(0).call((C));
 pc=50;
 D=k0.c(36);
 pc=52;
 re=C.v19(D);
 C=re;
 pc=56;
 D=b.f0;
 pc=59;
 re=C.v24(D);
 U&&B2(59);
 C=re;
 pc=62;
 re=C.v3();
 C=re;
 pc=65;
 if ($.initialized["com/sun/midp/log/LoggingBase"] === undefined) { $.$G_jcmeic.classObject.initialize(); }
 re=$G_jcmeic.m(1)(A,B,C);
 pc=69;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=70;
 return;
 }
 pc=72;
 A=b.f0;
 do {
 if (!(A===31)) {
 pc=81;
 A=a.f4;
 pc=85;
 B=b.f0;
 pc=90;
 if ((B-1|0 >>> 0) >= (A.length >>> 0)) TI(B-1|0);
 A=A[B-1|0];
 c=A;
 if (!(c!==null)) {
 pc=100;
 A=2;
 B=1000;
 C=new $G_qRAz2W();
 pc=104;
 re=$G_qRAz2W.m(0).call((C));
 pc=107;
 D=k0.c(36);
 pc=109;
 re=C.v19(D);
 C=re;
 pc=113;
 D=b.f0;
 pc=116;
 re=C.v24(D);
 U&&B2(116);
 C=re;
 pc=119;
 re=C.v3();
 C=re;
 pc=122;
 if ($.initialized["com/sun/midp/log/LoggingBase"] === undefined) { $.$G_jcmeic.classObject.initialize(); }
 re=$G_jcmeic.m(1)(A,B,C);
 pc=126;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=127;
 return;
 }
 pc=129;
 A=c.f0;
 pc=134;
 B=b;
 C=c.f1;
 pc=137;
 re=A.$G$LWgxK(B,C);
 U&&B0(137,142);
 A=re;
 if (A!==0) {
 pc=150;
 c.f1=b;
 break;
 } else {
 pc=146;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=147;
 return;
 }
 }
 } while(0);
 pc=154;
 A=a.f3;
 if (A===null) {
 pc=173;
 a.f2=b;
 } else {
 pc=161;
 A=a.f3;
 pc=165;
 A.f1=b;
 }
 pc=178;
 a.f3=b;
 pc=182;
 A=a.f1;
 pc=185;
 re=A.v5();
 pc=189;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 return;
 } else if (pc===193) {
 e=A;
 pc=196;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=199;
 throw e;
 A=e;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C,D],null);return;}
 A=TE(ex);
 if(pc>=7&&pc<26){pc=193;continue;}
 if(pc>=27&&pc<70){pc=193;continue;}
 if(pc>=71&&pc<127){pc=193;continue;}
 if(pc>=128&&pc<147){pc=193;continue;}
 if(pc>=148&&pc<190){pc=193;continue;}
 if(pc>=193&&pc<197){pc=193;continue;}
 throw A;
 }
 }
}
AOTMD["$G$bUOQCe_11"] = {"osr":[193]};
// com/sun/midp/events/EventQueue.run.()V ($G$bUOQCe_14)
function $G$bUOQCe_14() {
 var th=$.ctx.thread;
 var re,lk,k0=$G$bUOQCe;
 var a,b,c,d,e;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 b=null;
 a.f6=1;
 } else if (pc===115) {
 e=A;
 pc=118;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=121;
 throw e;
 A=e;
 } else if (pc===155) {
 d=A;
 pc=157;
 A=IOK(d,$G_kHtcSa)|0;
 if (!(A!==0)) {
 re=d.v10();
 U&&B0(164);
 }
 re=k0.m(15)(d);
 } else if (!(pc===7)) {
 }
 while(1) {
 pc=8;
 A=a.f1;
 B=A;
 d=B;
 pc=13;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(13,14,[a,b,c,d,e],[],null);return;}
 }
 while(1) {
 pc=15;
 A=a.f2;
 if (A!==null) {
 break;
 }
 pc=22;
 A=a.f1;
 pc=25;
 re=A.v8();
 U&&B0(25);
 }
 pc=32;
 A=a.f2;
 b=A;
 pc=38;
 A=a;
 B=b.f1;
 pc=41;
 A.f2=B;
 pc=46;
 b.f1=null;
 pc=50;
 A=a.f2;
 if (!(A!==null)) {
 pc=58;
 a.f3=null;
 }
 pc=62;
 A=b.f0;
 if (!(A!==31)) {
 break;
 }
 pc=86;
 A=a.f4;
 pc=90;
 B=b.f0;
 pc=95;
 if ((B-1|0 >>> 0) >= (A.length >>> 0)) TI(B-1|0);
 A=A[B-1|0];
 c=A;
 pc=98;
 A=c.f1;
 if (!(A!==b)) {
 pc=107;
 c.f1=null;
 }
 pc=111;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=123;
 A=c.f0;
 pc=127;
 re=A.$G_BB$AI(b);
 U&&B0(127,132);
 pc=133;
 A=IOK(b,$G_f3ke7f)|0;
 if (!(A===0)) {
 pc=140;
 A=a.f8;
 pc=144;
 CCK(b,$G_f3ke7f);
 B=b;
 pc=147;
 re=A.v10(B);
 U&&B0(147);
 }
 b=null;
 }
 pc=72;
 a.f6=0;
 pc=76;
 A=a.f1;
 pc=79;
 re=A.v5();
 pc=83;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=84;
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=14&&pc<84){pc=115;continue;}
 if(pc>=85&&pc<112){pc=115;continue;}
 if(pc>=115&&pc<119){pc=115;continue;}
 if(pc>=7&&pc<84&&IOK(A,$G_VRHXsT)){pc=155;continue;}
 if(pc>=85&&pc<152&&IOK(A,$G_VRHXsT)){pc=155;continue;}
 throw A;
 }
 }
}
AOTMD["$G$bUOQCe_14"] = {"osr":[7]};
$G$bUOQCe.classSymbols = ["java/lang/IllegalArgumentException", "com/sun/midp/events/EventQueue", "com/sun/midp/events/DispatchData", "com/sun/midp/events/Event", "com/sun/midp/log/LoggingBase", "java/lang/StringBuffer", "com/sun/midp/events/EventListener", "java/lang/Object", "com/sun/midp/events/NativeEvent", "com/sun/midp/events/NativeEventPool", "java/lang/OutOfMemoryError", "java/lang/Throwable"];
// com/sun/midp/events/NativeEvent extends com/sun/midp/events/Event
function $G_f3ke7f() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = 0;
 this.f6 = 0;
 this.f7 = 0;
 this.f8 = 0;
 this.f9 = 0;
 this.f10 = 0;
 this.f11 = 0;
 this.f12 = 0;
 this.f13 = 0;
 this.f14 = 0;
 this.f15 = 0;
 this.f16 = 0;
 this.f17 = 0;
 this.f18 = 0;
 this.f19 = null;
 this.f20 = null;
 this.f21 = null;
 this.f22 = null;
 this.f23 = null;
 this.f24 = null;
}
// com/sun/midp/events/NativeEvent.<init>.()V ($G_f3ke7f_0)
function $G_f3ke7f_0() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$G$IhEmnZ.m(0).call(a,0);
 return;
}
AOTMD["$G_f3ke7f_0"] = {"osr":[]};
// com/sun/midp/events/NativeEvent.<init>.(I)V ($G_f3ke7f_1)
function $G_f3ke7f_1(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$G$IhEmnZ.m(0).call(a,b);
 return;
}
AOTMD["$G_f3ke7f_1"] = {"osr":[]};
// com/sun/midp/events/NativeEvent.clear.()V ($G_f3ke7f_2)
function $G_f3ke7f_2() {
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 a.f0=0;
 a.f2=0;
 a.f3=0;
 a.f4=0;
 a.f5=0;
 a.f6=0;
 a.f7=0;
 a.f19=null;
 a.f20=null;
 a.f21=null;
 a.f22=null;
 a.f23=null;
 a.f24=null;
 return;
}
AOTMD["$G_f3ke7f_2"] = {"osr":[]};
$G_f3ke7f.classSymbols = ["com/sun/midp/events/Event", "com/sun/midp/events/NativeEvent"];
// com/sun/midp/events/NativeEventMonitor extends java/lang/Object
function $F0Y9_6m() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
}
// com/sun/midp/events/NativeEventMonitor.run.()V ($F0Y9_6m_3)
function $F0Y9_6m_3() {
 var th=$.ctx.thread;
 var re,k0=$F0Y9_6m,lk;
 var a,b,c,d,e;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 while(1) {
 pc=1;
 A=a.f2;
 pc=4;
 re=A.v9();
 U&&B0(4);
 A=re;
 b=A;
 pc=9;
 re=k0.m(0)(b);
 U&&B0(9);
 A=re;
 c=A;
 pc=14;
 A=a.f0;
 B=A;
 d=B;
 pc=19;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(19,20,[a,b,c,d,e],[],null);return;}
 }
 pc=21;
 A=a.f1;
 pc=25;
 re=A.v16(b);
 U&&B0(25);
 while(1) {
 if (c<=0) {
 break;
 }
 pc=33;
 A=a.f2;
 pc=36;
 re=A.v9();
 U&&B0(36);
 A=re;
 b=A;
 pc=41;
 re=k0.m(1)(b);
 A=re;
 if (!(A!==0)) {
 label = 9;
 break;
 }
 pc=51;
 A=a.f1;
 pc=55;
 re=A.v16(b);
 U&&B0(55);
 c+=-1;
 }
 if (label == 9) {
 label = 0;
 }
 pc=65;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 }
 } else if (pc===69) {
 e=A;
 pc=72;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=75;
 throw e;
 A=e;
 } else if (pc===79) {
 b=A;
 pc=81;
 A=IOK(b,$G_kHtcSa)|0;
 if (A!==0) {
 if ($.initialized["com/sun/midp/events/EventQueue"] === undefined) { $.$G$bUOQCe.classObject.initialize(); }
 A=b;
 U&&B1(92,92);
 re=$G$bUOQCe.m(15)(A);
 return;
 }
 re=b.v10();
 U&&B0(88);
 if ($.initialized["com/sun/midp/events/EventQueue"] === undefined) { $.$G$bUOQCe.classObject.initialize(); }
 A=b;
 U&&B1(92,92);
 re=$G$bUOQCe.m(15)(A);
 return;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B],null);return;}
 A=TE(ex);
 if(pc>=20&&pc<66){pc=69;continue;}
 if(pc>=69&&pc<73){pc=69;continue;}
 if(pc>=0&&pc<79&&IOK(A,$G_VRHXsT)){pc=79;continue;}
 throw A;
 }
 }
}
AOTMD["$F0Y9_6m_3"] = {"osr":[0,69]};
$F0Y9_6m.classSymbols = ["com/sun/midp/events/NativeEventMonitor", "com/sun/midp/events/NativeEventPool", "com/sun/midp/events/EventQueue", "java/lang/OutOfMemoryError", "java/lang/Throwable"];
// com/sun/midp/events/NativeEventPool extends java/lang/Object
function $GBm_Iy_j() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
}
// com/sun/midp/events/NativeEventPool.get.()Lcom/sun/midp/events/NativeEvent; ($GBm_Iy_j_1)
function $GBm_Iy_j_1() {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f0;
 B=A;
 b=B;
 pc=6;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c],[],null);return;}
 }
 pc=8;
 A=a.f1;
 if (A!==0) {
 A=a;
 pc=26;
 B=(A).f1;
 pc=31;
 A.f1=B-1|0;
 pc=35;
 A=a.f0;
 pc=39;
 B=a.f1;
 pc=42;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 A=A[B];
 pc=44;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=45;
 return A;
 } else {
 pc=14;
 if ($.initialized["com/sun/midp/events/NativeEvent"] === undefined) { $.$G_f3ke7f.classObject.initialize(); }
 A=new $G_f3ke7f();
 pc=18;
 re=$G_f3ke7f.m(0).call((A));
 pc=22;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=23;
 return A;
 }
 } else if (pc===46) {
 c=A;
 pc=48;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=50;
 throw c;
 A=c;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=7&&pc<23){pc=46;continue;}
 if(pc>=24&&pc<45){pc=46;continue;}
 if(pc>=46&&pc<49){pc=46;continue;}
 throw A;
 }
 }
}
AOTMD["$GBm_Iy_j_1"] = {"osr":[46]};
// com/sun/midp/events/NativeEventPool.putBack.(Lcom/sun/midp/events/NativeEvent;)V ($GBm_Iy_j_2)
function $GBm_Iy_j_2(b) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f0;
 B=A;
 c=B;
 pc=6;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c,d],[],null);return;}
 }
 pc=8;
 A=a.f1;
 pc=12;
 B=a.f0;
 pc=15;
 B=B.length;
 if (!(A!==B)) {
 pc=20;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=21;
 return;
 }
 pc=23;
 re=b.v10();
 if(U){$.B(23,26,[a,b,c,d],[],null);return;}
 pc=27;
 A=a.f0;
 pc=31;
 B=a.f1;
 pc=35;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 CAS(A, b);
 A[B] = b;
 A=a;
 pc=38;
 B=(A).f1;
 pc=43;
 A.f1=B+1|0;
 pc=47;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 } else if (pc===51) {
 d=A;
 pc=53;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=55;
 throw d;
 A=d;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=7&&pc<21){pc=51;continue;}
 if(pc>=22&&pc<48){pc=51;continue;}
 if(pc>=51&&pc<54){pc=51;continue;}
 throw A;
 }
 }
}
AOTMD["$GBm_Iy_j_2"] = {"osr":[51]};
$GBm_Iy_j.classSymbols = ["com/sun/midp/events/NativeEventPool", "com/sun/midp/events/NativeEvent"];
// com/sun/midp/io/j2me/file/Protocol extends com/sun/cdc/io/j2me/file/Protocol
function $G$WVS2Ei() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
 this.f6 = 0;
 this.f7 = null;
 this.f8 = null;
 this.f9 = null;
 this.f10 = null;
 this.f11 = null;
 this.f12 = null;
 this.f13 = null;
 this.f14 = null;
}
// com/sun/midp/io/j2me/file/Protocol.<init>.()V ($G$WVS2Ei_0)
function $G$WVS2Ei_0() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=$GBOQs8Xh.m(0).call(a);
 return;
}
AOTMD["$G$WVS2Ei_0"] = {"osr":[]};
$G$WVS2Ei.classSymbols = ["com/sun/cdc/io/j2me/file/Protocol"];
// com/sun/midp/io/Util extends java/lang/Object
function $Fx_6fwU() {
 this._hashCode = 0;
}
// com/sun/midp/io/Util.toJavaString.([B)Ljava/lang/String; ($Fx_6fwU_2)
function $Fx_6fwU_2(a) {
 var re,k0=$Fx_6fwU;
 var a,b,c,d;
 var A,B,C,D,E,F;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 b=0;
 } else if (pc===27) {
 d=A;
 pc=29;
 return null;
 } else if (!(pc===2)) {
 }
 while(1) {
 if ((b >>> 0) >= (a.length >>> 0)) TI(b);
 if (a[b]===0) {
 break;
 }
 b+=1;
 }
 pc=14;
 A=new $G_81POkQ();
 pc=21;
 B=A;
 C=a;
 D=0;
 E=b;
 F=k0.c(5);
 pc=23;
 re=$G_81POkQ.m(4).call(B,C,D,E,F);
 if(U){$.B(23,26,[a,b,c,d],[A],null);return;}
 pc=26;
 return A;
 }catch(ex){
 A=TE(ex);
 if(pc>=14&&pc<26&&IOK(A,$Fs4SITk)){pc=27;continue;}
 throw A;
 }
 }
}
AOTMD["$Fx_6fwU_2"] = {"osr":[2]};
$Fx_6fwU.classSymbols = ["java/lang/String", "java/io/UnsupportedEncodingException"];
// com/sun/midp/lcdui/DisplayContainer extends java/lang/Object
function $G$lkaWRj() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = null;
}
// com/sun/midp/lcdui/DisplayContainer.findDisplayById.(I)Lcom/sun/midp/lcdui/DisplayAccess; ($G$lkaWRj_6)
function $G$lkaWRj_6(b) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e;
 a=this;
 var A,B;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }else{
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a,b,c,d,e],[],a);return;}
 }
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 re=(a.f2).v15();
 U&&B0(4);
 c=re;
 d=0;
 } else if (!(pc===10)) {
 }
 while(1) {
 if (d>=c) {
 label = 6;
 break;
 }
 re=(a.f2).v23(d);
 U&&B0(20);
 CCI(re,$GB1YQYyg);
 e=re;
 re=e.$G$$z0Lc();
 U&&B0(30,35);
 if (!(re!==b)) {
 label = 4;
 break;
 }
 d+=1;
 }
 if (label == 4) {
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return e;
 }
 else if (label == 6) {
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return null;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B],a);return;}
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$G$lkaWRj_6"] = {"osr":[10]};
// com/sun/midp/lcdui/DisplayContainer.findDisplayEventConsumer.(I)Lcom/sun/midp/lcdui/DisplayEventConsumer; ($G$lkaWRj_10)
function $G$lkaWRj_10(b) {
 var re;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=a.v14(b);
 if(U){$.B(2,5,[a,b,c],[],null);return;}
 c=re;
 if (c!==null) {
 re=c.$G$SrCSP();
 if(U){$.B(13,18,[a,b,c],[],null);return;}
 return re;
 } else {
 return null;
 }
}
AOTMD["$G$lkaWRj_10"] = {"osr":[]};
$G$lkaWRj.classSymbols = ["com/sun/midp/lcdui/DisplayContainer", "java/util/Vector", "com/sun/midp/lcdui/DisplayAccess"];
// com/sun/midp/lcdui/DisplayDevice extends java/lang/Object
function $G$4XYy4g() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = 0;
 this.f6 = 0;
 this.f7 = 0;
}
// com/sun/midp/lcdui/DisplayDevice.isPrimaryDisplay.()Z ($G$4XYy4g_4)
function $G$4XYy4g_4() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f2);
}
AOTMD["$G$4XYy4g_4"] = {"osr":[]};
// com/sun/midp/lcdui/DisplayDevice.refresh.(IIIII)V ($G$4XYy4g_15)
function $G$4XYy4g_15(b,c,d,e,f) {
 var k0=$G$4XYy4g,re;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E,F,G;
 var pc=0;
 var label=0;
 re=k0.m(24).call(a,(a.f0),b,c,d,e,f);
 return;
}
AOTMD["$G$4XYy4g_15"] = {"osr":[]};
$G$4XYy4g.classSymbols = ["com/sun/midp/lcdui/DisplayDevice"];
// com/sun/midp/lcdui/DisplayEventListener extends java/lang/Object
function $GBbVcfbn() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
}
// com/sun/midp/lcdui/DisplayEventListener.preprocess.(Lcom/sun/midp/events/Event;Lcom/sun/midp/events/Event;)Z ($GBbVcfbn_1)
function $GBbVcfbn_1(b,c) {
 var a,b,c;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return 1;
}
AOTMD["$GBbVcfbn_1"] = {"osr":[]};
// com/sun/midp/lcdui/DisplayEventListener.process.(Lcom/sun/midp/events/Event;)V ($GBbVcfbn_2)
function $GBbVcfbn_2(b) {
 var re,k0=$GBbVcfbn;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (pc===98) {
 label = 10;
 } else if (!(pc===25)) {
 }
 do {
 if (label == 1) {
 CCK(b,$G_f3ke7f);
 c=b;
 re=b.v9();
 U&&B0(6);
 if (!(re!==62)) {
 re=(a.f0).v19();
 U&&B0(18);
 d=re;
 e=0;
 break;
 }
 re=b.v9();
 U&&B0(56);
 if (!(re!==54)) {
 re=(a.f1).v10((c.f2));
 U&&B0(72);
 re=re.v10((c.f3));
 U&&B0(79);
 re=(a.f0).v16((c.f2));
 U&&B0(90);
 d=re;
 e=d.length;
 label = 10;
 break;
 }
 re=(a.f0).v18((c.f5));
 U&&B0(136);
 d=re;
 if (d===null) {
 return;
 }
 re=b.v9();
 U&&B0(145);
 // Lookup Switch
 switch (re) {
 case 1: {
 if (!((c.f2)!==4)) {
 re=d.$G$3Haqj((c.f19));
 U&&B0(229,234);
 }
 if ((c.f3)!==(-22)) {
 re=d.$G$e00eb((c.f2),(c.f3));
 U&&B0(269,274);
 return;
 }
 if ((c.f2)!==1) {
 return;
 }
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 A=k0.c(21);
 U&&B1(253,253);
 re=$GBEt6NdQ.m(4)(A);
 U&&B0(253);
 return;
 break;
 }
 case 2: {
 re=d.$G$FvC1M((c.f2),(c.f3),(c.f4));
 U&&B0(288,293);
 return;
 break;
 }
 case 3: {
 re=d.$GBy5kOu((c.f2));
 U&&B0(299,304);
 return;
 break;
 }
 case 8: {
 re=d.$G$qpe4L((c.f2),(c.f3),(c.f4),(c.f6));
 U&&B0(322,327);
 return;
 break;
 }
 case 43: {
 re=d.$GB8rJMf();
 U&&B0(329,334);
 return;
 break;
 }
 case 58: {
 re=d.$FXtwNJ();
 U&&B0(343,348);
 return;
 break;
 }
 case 67: {
 re=d.$GB48BO2();
 U&&B0(336,341);
 return;
 break;
 }
 default: {
 return;
 }
 }
 }
 } while(0);
 if (label == 10) {
 while(1) {
 label = 0;
 e+=-1;
 if (e<0) {
 break;
 }
 if ((e >>> 0) >= (d.length >>> 0)) TI(e);
 re=(d[e]).$G$SrCSP();
 U&&B0(110,115);
 re=re.$G__Br$K((c.f3));
 U&&B0(119,124);
 label = 10;
 }
 return;
 }
 while(1) {
 if (e>=(d.length)) {
 break;
 }
 if ((e >>> 0) >= (d.length >>> 0)) TI(e);
 if (!((d[e])===null)) {
 if ((e >>> 0) >= (d.length >>> 0)) TI(e);
 re=(d[e]).$G$EkNm5();
 U&&B0(43,48);
 }
 e+=1;
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C,D,E],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GBbVcfbn_2"] = {"osr":[25,98]};
$GBbVcfbn.classSymbols = ["com/sun/midp/events/NativeEvent", "com/sun/midp/events/Event", "com/sun/midp/lcdui/DisplayEventListener", "com/sun/midp/lcdui/DisplayContainer", "com/sun/midp/lcdui/DisplayEventConsumer", "com/sun/midp/lcdui/DisplayDeviceContainer", "com/sun/midp/lcdui/DisplayDevice", "com/sun/midp/lcdui/DisplayAccess", "java/lang/System"];
// com/sun/midp/lcdui/DisplayEventProducer extends java/lang/Object
function $G$EZha1n() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/sun/midp/lcdui/DisplayEventProducer.sendCallSeriallyEvent.(Lcom/sun/midp/lcdui/DisplayEventConsumer;)V ($G$EZha1n_3)
function $G$EZha1n_3(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if ($.initialized["com/sun/midp/lcdui/LCDUIEvent"] === undefined) { $.$G$UTPc2d.classObject.initialize(); }
 A=a.f0;
 re=$G$UTPc2d.m(1)(b,9);
 re=A.v16(re);
 if(U){$.B(10,13,[a,b],[],null);return;}
 return;
}
AOTMD["$G$EZha1n_3"] = {"osr":[]};
$G$EZha1n.classSymbols = ["com/sun/midp/lcdui/DisplayEventProducer", "com/sun/midp/lcdui/LCDUIEvent", "com/sun/midp/events/EventQueue"];
// com/sun/midp/lcdui/LCDUIEvent extends com/sun/midp/events/Event
function $G$UTPc2d() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = null;
 this.f3 = null;
 this.f4 = null;
 this.f5 = 0;
 this.f6 = 0;
}
// com/sun/midp/lcdui/LCDUIEvent.<init>.(I)V ($G$UTPc2d_0)
function $G$UTPc2d_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$G$IhEmnZ.m(0).call(a,b);
 a.f2=null;
 a.f3=null;
 return;
}
AOTMD["$G$UTPc2d_0"] = {"osr":[]};
// com/sun/midp/lcdui/LCDUIEvent.createBasicEvent.(Lcom/sun/midp/lcdui/DisplayEventConsumer;I)Lcom/sun/midp/lcdui/LCDUIEvent; ($G$UTPc2d_1)
function $G$UTPc2d_1(a,b) {
 var k0=$G$UTPc2d,re;
 var a,b,c;
 var A,B,C;
 var pc=0;
 var label=0;
 A=new k0();
 re=k0.m(0).call((A),b);
 c=A;
 c.f4=a;
 return c;
}
AOTMD["$G$UTPc2d_1"] = {"osr":[]};
$G$UTPc2d.classSymbols = ["com/sun/midp/events/Event", "com/sun/midp/lcdui/LCDUIEvent"];
// com/sun/midp/lcdui/LCDUIEventListener extends java/lang/Object
function $G_5Rr4hl() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// com/sun/midp/lcdui/LCDUIEventListener.preprocess.(Lcom/sun/midp/events/Event;Lcom/sun/midp/events/Event;)Z ($G_5Rr4hl_1)
function $G_5Rr4hl_1(b,c) {
 var re,k0=$G_5Rr4hl;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 try{
 var label=0;
 re=b.v9();
 U&&B0(1);
 // Table Switch
 switch (re) {
 case 5: {
 re=k0.m(4).call(a,b,c);
 return re;
 break;
 }
 case 6: {
 break;
 }
 case 9: {
 break;
 }
 default: {
 return 1;
 }
 }
 re=k0.m(3).call(a,b,c);
 return re;
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_5Rr4hl_1"] = {"osr":[]};
// com/sun/midp/lcdui/LCDUIEventListener.process.(Lcom/sun/midp/events/Event;)V ($G_5Rr4hl_2)
function $G_5Rr4hl_2(b) {
 var re,k0=$G_5Rr4hl;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 try{
 var label=0;
 CCK(b,$G$UTPc2d);
 c=b;
 re=b.v9();
 U&&B0(6);
 // Lookup Switch
 switch (re) {
 case 5: {
 re=(c.f4).$G_VPeEM((c.f3));
 U&&B0(68,73);
 return;
 break;
 }
 case 6: {
 re=(c.f4).$Fe2luv();
 U&&B0(88,93);
 return;
 break;
 }
 case 7: {
 re=k0.m(5).call(a,c);
 U&&B0(96);
 return;
 break;
 }
 case 9: {
 re=(c.f4).$G$NqjyK();
 U&&B0(104,109);
 return;
 break;
 }
 case 47: {
 re=(c.f4).$GBHR5ne();
 U&&B0(78,83);
 return;
 break;
 }
 default: {
 return;
 }
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_5Rr4hl_2"] = {"osr":[]};
// com/sun/midp/lcdui/LCDUIEventListener.preprocessAllowOnlyOneEvent.(Lcom/sun/midp/events/Event;Lcom/sun/midp/events/Event;)Z ($G_5Rr4hl_3)
function $G_5Rr4hl_3(b,c) {
 var a,b,c;
 a=this;
 var A;
 var pc=0;
 var label=0;
 if (c!==null) {
 return 0;
 } else {
 return 1;
 }
}
AOTMD["$G_5Rr4hl_3"] = {"osr":[]};
$G_5Rr4hl.classSymbols = ["com/sun/midp/events/Event", "com/sun/midp/lcdui/LCDUIEventListener", "com/sun/midp/lcdui/LCDUIEvent", "com/sun/midp/lcdui/DisplayEventConsumer"];
// com/sun/midp/lcdui/RepaintEvent extends com/sun/midp/events/Event
function $Fahnr8f() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = 0;
 this.f6 = null;
 this.f7 = 0;
 this.f8 = null;
}
// com/sun/midp/lcdui/RepaintEvent.setRepaintFields.(Lcom/sun/midp/lcdui/DisplayEventConsumer;IIIILjava/lang/Object;)V ($Fahnr8f_2)
function $Fahnr8f_2(b,c,d,e,f,g) {
 var a,b,c,d,e,f,g;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 a.f8=b;
 e=e+c|0;
 f=f+d|0;
 if (!(c>=0)) {
 c=0;
 }
 if (!(d>=0)) {
 d=0;
 }
 a.f2=c;
 a.f3=d;
 a.f4=e;
 a.f5=f;
 a.f6=g;
 return;
}
AOTMD["$Fahnr8f_2"] = {"osr":[]};
$Fahnr8f.classSymbols = ["com/sun/midp/lcdui/RepaintEvent"];
// com/sun/midp/lcdui/RepaintEventProducer extends java/lang/Object
function $G_bRhsEn() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = null;
 this.f4 = null;
 this.f5 = null;
}
// com/sun/midp/lcdui/RepaintEventProducer.scheduleRepaint.(Lcom/sun/midp/lcdui/DisplayEventConsumer;IIIILjava/lang/Object;)V ($G_bRhsEn_1)
function $G_bRhsEn_1(b,c,d,e,f,g) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f,g,h,i,j;
 a=this;
 var A,B,C,D,E,F,G;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8],j=_[9];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 A=a;
 B=A;
 i=B;
 pc=4;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(4,5,[a,b,c,d,e,f,g,h,i,j],[],null);return;}
 }
 pc=6;
 A=a.f1;
 h=A;
 pc=22;
 re=h.v10(b,c,d,e,f,g);
 U&&B0(22);
 pc=26;
 A=a.f4;
 do {
 if (A!==null) {
 pc=75;
 A=a.f4;
 pc=78;
 A=A.f8;
 if (!(A===b)) {
 pc=86;
 A=a.f4;
 pc=98;
 re=A.v10(b,c,d,e,f,g);
 U&&B0(98);
 break;
 }
 pc=105;
 A=a.f4;
 pc=108;
 A=A.f2;
 pc=113;
 B=h.f2;
 if (!(A<=B)) {
 pc=120;
 A=a.f4;
 pc=125;
 B=h.f2;
 pc=128;
 A.f2=B;
 }
 pc=132;
 A=a.f4;
 pc=135;
 A=A.f3;
 pc=140;
 B=h.f3;
 if (!(A<=B)) {
 pc=147;
 A=a.f4;
 pc=152;
 B=h.f3;
 pc=155;
 A.f3=B;
 }
 pc=159;
 A=a.f4;
 pc=162;
 A=A.f4;
 pc=167;
 B=h.f4;
 if (!(A>=B)) {
 pc=174;
 A=a.f4;
 pc=179;
 B=h.f4;
 pc=182;
 A.f4=B;
 }
 pc=186;
 A=a.f4;
 pc=189;
 A=A.f5;
 pc=194;
 B=h.f5;
 if (!(A>=B)) {
 pc=201;
 A=a.f4;
 pc=206;
 B=h.f5;
 pc=209;
 A.f5=B;
 }
 pc=213;
 A=a.f4;
 pc=217;
 A.f6=null;
 } else {
 pc=34;
 A=a;
 B=a.f2;
 pc=37;
 A.f1=B;
 pc=42;
 A=a;
 B=a.f3;
 pc=45;
 A.f2=B;
 pc=51;
 a.f3=h;
 pc=57;
 a.f4=h;
 pc=61;
 A=a.f0;
 pc=65;
 B=a.f4;
 pc=68;
 re=A.v16(B);
 U&&B0(68);
 }
 } while(0);
 pc=222;
 if(i._lock.level===1&&i._lock.ready.length===0)i._lock.level=0;else MX(i);
 return;
 } else if (pc===226) {
 j=A;
 pc=230;
 if(i._lock.level===1&&i._lock.ready.length===0)i._lock.level=0;else MX(i);
 pc=233;
 throw j;
 A=j;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h,i,j],[A,B,C,D,E,F,G],null);return;}
 A=TE(ex);
 if(pc>=5&&pc<223){pc=226;continue;}
 if(pc>=226&&pc<231){pc=226;continue;}
 throw A;
 }
 }
}
AOTMD["$G_bRhsEn_1"] = {"osr":[226]};
// com/sun/midp/lcdui/RepaintEventProducer.preprocess.(Lcom/sun/midp/events/Event;Lcom/sun/midp/events/Event;)Z ($G_bRhsEn_2)
function $G_bRhsEn_2(b,c) {
 var a,b,c;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return 1;
}
AOTMD["$G_bRhsEn_2"] = {"osr":[]};
// com/sun/midp/lcdui/RepaintEventProducer.process.(Lcom/sun/midp/events/Event;)V ($G_bRhsEn_3)
function $G_bRhsEn_3(b) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 CCK(b,$Fahnr8f);
 A=b;
 c=A;
 A=a;
 B=A;
 d=B;
 pc=8;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(8,9,[a,b,c,d,e,f],[],null);return;}
 }
 pc=11;
 a.f4=null;
 pc=16;
 a.f5=c;
 pc=20;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=32;
 A=c.f8;
 pc=36;
 B=c.f2;
 pc=40;
 C=c.f3;
 pc=44;
 D=c.f4;
 pc=48;
 E=c.f5;
 pc=52;
 F=c.f6;
 pc=55;
 re=A.$G$5asTW(B,C,D,E,F);
 if(U){$.B(55,60,[a,b,c,d,e,f],[],null);return;}
 A=a;
 B=A;
 d=B;
 pc=63;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(63,64,[a,b,c,d,e,f],[],null);return;}
 }
 pc=65;
 A=a.f5;
 pc=69;
 B=(A).f7;
 pc=74;
 A.f7=B+1|0;
 pc=79;
 a.f5=null;
 pc=83;
 re=a.v5();
 pc=87;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 return;
 } else if (pc===24) {
 e=A;
 pc=27;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=30;
 throw e;
 A=e;
 } else if (pc===91) {
 f=A;
 pc=94;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=97;
 throw f;
 A=f;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=9&&pc<21){pc=24;continue;}
 if(pc>=24&&pc<28){pc=24;continue;}
 if(pc>=64&&pc<88){pc=91;continue;}
 if(pc>=91&&pc<95){pc=91;continue;}
 throw A;
 }
 }
}
AOTMD["$G_bRhsEn_3"] = {"osr":[24,91]};
$G_bRhsEn.classSymbols = ["com/sun/midp/lcdui/RepaintEventProducer", "com/sun/midp/lcdui/RepaintEvent", "com/sun/midp/events/EventQueue", "com/sun/midp/lcdui/DisplayEventConsumer", "java/lang/Object"];
// com/sun/midp/main/MIDletProxy extends java/lang/Object
function $G$19BAmd() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
 this.f6 = null;
 this.f7 = 0;
 this.f8 = 0;
 this.f9 = 0;
 this.f10 = 0;
 this.f11 = null;
 this.f12 = 0;
 this.f13 = null;
 this.f14 = null;
 this.f15 = null;
 this.f16 = 0;
}
// com/sun/midp/main/MIDletProxy.getClassName.()Ljava/lang/String; ($G$19BAmd_8)
function $G$19BAmd_8() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f5);
}
AOTMD["$G$19BAmd_8"] = {"osr":[]};
$G$19BAmd.classSymbols = ["com/sun/midp/main/MIDletProxy"];
// com/sun/midp/main/MIDletProxyList extends java/lang/Object
function $G$1QRcPh() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = null;
 this.f4 = 0;
 this.f5 = null;
}
// com/sun/midp/main/MIDletProxyList.notifyListenersOfProxyUpdate.(Lcom/sun/midp/main/MIDletProxy;I)V ($G$1QRcPh_43)
function $G$1QRcPh_43(b,c) {
 var re;
 var a,b,c,d,e;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 re=(a.f0).v15();
 U&&B0(4);
 d=re-1|0;
 } else if (!(pc===10)) {
 }
 while(1) {
 if (d<0) {
 break;
 }
 re=(a.f0).v23(d);
 U&&B0(19);
 CCI(re,$GBqGtWXp);
 e=re;
 re=e.$G$I5Xin(b,c);
 U&&B0(31,36);
 d+=-1;
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$1QRcPh_43"] = {"osr":[10]};
$G$1QRcPh.classSymbols = ["com/sun/midp/main/MIDletProxyList", "java/util/Vector", "com/sun/midp/main/MIDletProxyListListener"];
// com/sun/midp/midlet/MIDletStateHandler extends java/lang/Object
function $GBeecOTm() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
}
// com/sun/midp/midlet/MIDletStateHandler.getMidletStateHandler.()Lcom/sun/midp/midlet/MIDletStateHandler; ($GBeecOTm_1)
function $GBeecOTm_1() {
 var th=$.ctx.thread;
 var lk,k0=$GBeecOTm,re;
 var A,B;
 var pc=0;
 lk=$.$GBeecOTm.classObject._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME($.$GBeecOTm.classObject);
 if(U){$.B(0,0,[],[],$.$GBeecOTm.classObject);return;}
 }
 try{
 var label=0;
 if (!(($.$GBeecOTm.s5)!==null)) {
 A=new k0();
 re=k0.m(0).call((A));
 $.$GBeecOTm.s5=A;
 }
 if($.$GBeecOTm.classObject._lock.level===1&&$.$GBeecOTm.classObject._lock.ready.length===0)$.$GBeecOTm.classObject._lock.level=0;else MX($.$GBeecOTm.classObject);
 return ($.$GBeecOTm.s5);
 }catch(ex){
 A=TE(ex);
 if($.$GBeecOTm.classObject._lock.level===1&&$.$GBeecOTm.classObject._lock.ready.length===0)$.$GBeecOTm.classObject._lock.level=0;else MX($.$GBeecOTm.classObject);
 throw A;
 }
}
AOTMD["$GBeecOTm_1"] = {"osr":[]};
// com/sun/midp/midlet/MIDletStateHandler.getMIDletSuite.()Lcom/sun/midp/midlet/MIDletSuite; ($GBeecOTm_10)
function $GBeecOTm_10() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$GBeecOTm_10"] = {"osr":[]};
$GBeecOTm.classSymbols = ["com/sun/midp/midlet/MIDletStateHandler"];
// com/sun/midp/midletsuite/MIDletSuiteImpl extends java/lang/Object
function $G_4ruU1o() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = null;
 this.f4 = null;
 this.f5 = 0;
 this.f6 = null;
 this.f7 = null;
 this.f8 = 0;
 this.f9 = 0;
}
// com/sun/midp/midletsuite/MIDletSuiteImpl.getProperty.(Ljava/lang/String;)Ljava/lang/String; ($G_4ruU1o_2)
function $G_4ruU1o_2(b) {
 var k0=$G_4ruU1o,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(30).call(a,k0.c(21));
 re=(a.f2).v9(b);
 if(U){$.B(11,14,[a,b],[],null);return;}
 return re;
}
AOTMD["$G_4ruU1o_2"] = {"osr":[]};
// com/sun/midp/midletsuite/MIDletSuiteImpl.getID.()I ($G_4ruU1o_9)
function $G_4ruU1o_9() {
 var k0=$G_4ruU1o,re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(30).call(a,k0.c(46));
 return (a.f5);
}
AOTMD["$G_4ruU1o_9"] = {"osr":[]};
// com/sun/midp/midletsuite/MIDletSuiteImpl.guaranteeMIDletSuiteLocked.(Ljava/lang/String;)V ($G_4ruU1o_30)
function $G_4ruU1o_30(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if (a.f9!==0) {
 return;
 } else {
 if ($.initialized["java/lang/IllegalStateException"] === undefined) { $.$G$L_F0if.classObject.initialize(); }
 A=new $G$L_F0if();
 re=$G$L_F0if.m(1).call((A),b);
 throw A;
 }
}
AOTMD["$G_4ruU1o_30"] = {"osr":[]};
$G_4ruU1o.classSymbols = ["com/sun/midp/midletsuite/MIDletSuiteImpl", "com/sun/midp/midletsuite/SuiteProperties", "java/lang/IllegalStateException"];
// com/sun/midp/midletsuite/SuiteContainerAdapter extends java/lang/Object
function $FBbnZJu() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/sun/midp/midletsuite/SuiteContainerAdapter.getSecureFilenameBase.(I)Ljava/lang/String; ($FBbnZJu_3)
function $FBbnZJu_3(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=(a.f0).v35(b);
 if(U){$.B(5,8,[a,b],[],null);return;}
 return re;
}
AOTMD["$FBbnZJu_3"] = {"osr":[]};
$FBbnZJu.classSymbols = ["com/sun/midp/midletsuite/SuiteContainerAdapter", "com/sun/midp/midletsuite/MIDletSuiteStorage"];
// com/sun/midp/midletsuite/SuiteProperties extends java/lang/Object
function $G_TmcdVo() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
}
// com/sun/midp/midletsuite/SuiteProperties.getProperty.(Ljava/lang/String;)Ljava/lang/String; ($G_TmcdVo_1)
function $G_TmcdVo_1(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if (!((a.f0)!==null)) {
 re=a.v12();
 if(U){$.B(8,11,[a,b],[],null);return;}
 }
 re=(a.f0).v14(b);
 if(U){$.B(16,19,[a,b],[],null);return;}
 return re;
}
AOTMD["$G_TmcdVo_1"] = {"osr":[]};
// com/sun/midp/midletsuite/SuiteProperties.loadProperties.()V ($G_TmcdVo_4)
function $G_TmcdVo_4() {
 var re;
 var a,b,c;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 if ($.initialized["com/sun/midp/util/Properties"] === undefined) { $.$G_oLkOTc.classObject.initialize(); }
 A=a;
 U&&B1(1,1);
 B=new $G_oLkOTc();
 pc=5;
 re=$G_oLkOTc.m(0).call((B));
 U&&B2(5);
 pc=8;
 A.f0=B;
 pc=12;
 re=a.v13();
 U&&B0(12);
 A=re;
 b=A;
 c=(b.length)-2|0;
 } else if (pc===19) {
 c=A;
 pc=20;
 return;
 } else if (!(pc===26)) {
 }
 while(1) {
 if (c<0) {
 break;
 }
 if ((c >>> 0) >= (b.length >>> 0)) TI(c);
 if ((c+1|0 >>> 0) >= (b.length >>> 0)) TI(c+1|0);
 re=(a.f0).v11((b[c]),(b[c+1|0]));
 U&&B0(42);
 c+=-2;
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B,C,D,E],null);return;}
 A=TE(ex);
 if(pc>=11&&pc<16&&IOK(A,$G_yTb0tT)){pc=19;continue;}
 throw A;
 }
 }
}
AOTMD["$G_TmcdVo_4"] = {"osr":[26]};
$G_TmcdVo.classSymbols = ["com/sun/midp/midletsuite/SuiteProperties", "com/sun/midp/util/Properties", "java/io/IOException"];
// com/sun/midp/rms/IntToIntMapper extends java/lang/Object
function $GBj0qsuf() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
}
// com/sun/midp/rms/IntToIntMapper.elementAt.(I)I ($GBj0qsuf_4)
function $GBj0qsuf_4(b) {
 var th=$.ctx.thread;
 var lk;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a,b,c],[],a);return;}
 }
 try{
 var label=0;
 c=0;
 while(1) {
 if (c>=(a.f2)) {
 label = 6;
 break;
 }
 if ((c >>> 0) >= (a.f1.length >>> 0)) TI(c);
 if (!(b!==(a.f1[c]))) {
 label = 4;
 break;
 }
 c+=1;
 }
 if (label == 4) {
 if ((c >>> 0) >= (a.f0.length >>> 0)) TI(c);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return (a.f0[c]);
 }
 else if (label == 6) {
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return (a.f4);
 }
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GBj0qsuf_4"] = {"osr":[]};
// com/sun/midp/rms/IntToIntMapper.addElement.(II)V ($GBj0qsuf_5)
function $GBj0qsuf_5(b,c) {
 var k0=$GBj0qsuf,re;
 var a,b,c,d;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 d=(a.f2)+1|0;
 if (!(d<=((a.f0).length))) {
 re=k0.m(1).call(a,d);
 }
 if ((a.f2 >>> 0) >= (a.f1.length >>> 0)) TI(a.f2);
 a.f1[a.f2] = c;
 A=a.f0;
 B=a;
 C=(B).f2;
 var t0=C;
 var t1=B;
 t1.f2=t0+1|0;
 if ((t0 >>> 0) >= (A.length >>> 0)) TI(t0);
 A[t0] = b;
 return;
}
AOTMD["$GBj0qsuf_5"] = {"osr":[]};
// com/sun/midp/rms/IntToIntMapper.setElementAt.(II)V ($GBj0qsuf_6)
function $GBj0qsuf_6(b,c) {
 var th=$.ctx.thread;
 var re,lk,k0=$GBj0qsuf;
 var a,b,c,d;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }else{
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a,b,c,d],[],a);return;}
 }
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 d=0;
 } else if (!(pc===2)) {
 }
 while(1) {
 if (d>=(a.f2)) {
 label = 6;
 break;
 }
 if ((d >>> 0) >= (a.f1.length >>> 0)) TI(d);
 if (!(c!==(a.f1[d]))) {
 label = 4;
 break;
 }
 d+=1;
 }
 if (label == 4) {
 if ((d >>> 0) >= (a.f0.length >>> 0)) TI(d);
 a.f0[d] = b;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }
 else if (label == 6) {
 re=k0.m(5).call(a,b,c);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GBj0qsuf_6"] = {"osr":[2]};
$GBj0qsuf.classSymbols = ["com/sun/midp/rms/IntToIntMapper"];
// com/sun/midp/rms/RecordStoreFile extends java/lang/Object
function $GBiGK_7g() {
 this._hashCode = 0;
 this.f0 = 0;
}
// com/sun/midp/rms/RecordStoreFile.seek.(I)V ($GBiGK_7g_11)
function $GBiGK_7g_11(b) {
 var k0=$GBiGK_7g,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(12)((a.f0),b);
 return;
}
AOTMD["$GBiGK_7g_11"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreFile.read.([B)I ($GBiGK_7g_18)
function $GBiGK_7g_18(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 re=a.v16(b,0,(b.length));
 if(U){$.B(5,8,[a,b],[],null);return;}
 return re;
}
AOTMD["$GBiGK_7g_18"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreFile.read.([BII)I ($GBiGK_7g_19)
function $GBiGK_7g_19(b,c,d) {
 var k0=$GBiGK_7g,re;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 if (d!==0) {
 if ((c >>> 0) >= (b.length >>> 0)) TI(c);
 if ((d-1|0 >>> 0) >= (b.length >>> 0)) TI(d-1|0);
 if (((c+d|0)-1|0 >>> 0) >= (b.length >>> 0)) TI((c+d|0)-1|0);
 e=((b[c])+(b[d-1|0])|0)+(b[(c+d|0)-1|0])|0;
 re=k0.m(20)((a.f0),b,c,d);
 return re;
 } else {
 return 0;
 }
}
AOTMD["$GBiGK_7g_19"] = {"osr":[]};
$GBiGK_7g.classSymbols = ["com/sun/midp/rms/RecordStoreFile"];
// com/sun/midp/rms/RecordStoreImpl extends java/lang/Object
function $FJAVsGg() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = null;
 this.f4 = null;
 this.f5 = null;
}
// com/sun/midp/rms/RecordStoreImpl.getVersion.()I ($FJAVsGg_6)
function $FJAVsGg_6() {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=(a.f3).v10();
 if(U){$.B(4,7,[a,b],[],null);return;}
 b=re;
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(1)(b,20);
 return re;
}
AOTMD["$FJAVsGg_6"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreImpl.getSize.()I ($FJAVsGg_8)
function $FJAVsGg_8() {
 var re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=(a.f3).v10();
 if(U){$.B(4,7,[a,b],[],null);return;}
 b=re;
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 A=40;
 re=$FoXDC_g.m(1)(b,32);
 return (A+re|0);
}
AOTMD["$FJAVsGg_8"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreImpl.getRecord.(I)[B ($FJAVsGg_16)
function $FJAVsGg_16(b) {
 var th=$.ctx.thread;
 var re,lk,k0=$FJAVsGg;
 var a,b,c,d,e,f,g,h,i,j;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8],j=_[9];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f2;
 B=A;
 c=B;
 pc=6;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c,d,e,f,g,h,i,j],[],null);return;}
 }
 pc=8;
 re=k0.m(26).call(a);
 U&&B0(8);
 pc=13;
 8 < 0 && TN();
 A=new Int8Array(8);
 d=A;
 pc=17;
 A=a.f4;
 pc=22;
 re=A.v11(b,d);
 U&&B0(22);
 A=re;
 e=A;
 pc=29;
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(1)(d,4);
 A=re;
 f=A;
 if (f!==0) {
 pc=53;
 f < 0 && TN();
 A=new Int8Array(f);
 g=A;
 pc=58;
 A=a.f5;
 pc=66;
 re=A.v11((e+8|0));
 U&&B0(66);
 pc=70;
 A=a.f5;
 pc=75;
 re=A.v15(g);
 U&&B0(75);
 A=re;
 h=g;
 pc=84;
 re=k0.m(27).call(a);
 U&&B0(84);
 pc=88;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=91;
 return h;
 } else {
 g=null;
 pc=43;
 re=k0.m(27).call(a);
 U&&B0(43);
 pc=47;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=50;
 return g;
 }
 } else if (pc===92) {
 d=A;
 pc=93;
 if ($.initialized["javax/microedition/rms/RecordStoreException"] === undefined) { $.$GBMhjbfr.classObject.initialize(); }
 A=new $GBMhjbfr();
 pc=97;
 B=A;
 C=k0.c(55);
 pc=99;
 re=$GBMhjbfr.m(0).call(B,C);
 pc=102;
 throw A;
 } else if (pc===103) {
 i=A;
 pc=106;
 re=k0.m(27).call(a);
 U&&B0(106);
 pc=111;
 throw i;
 A=i;
 } else if (pc===112) {
 j=A;
 pc=115;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=118;
 throw j;
 A=j;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h,i,j],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=11&&pc<42&&IOK(A,$G_yTb0tT)){pc=92;continue;}
 if(pc>=51&&pc<83&&IOK(A,$G_yTb0tT)){pc=92;continue;}
 if(pc>=11&&pc<42){pc=103;continue;}
 if(pc>=51&&pc<83){pc=103;continue;}
 if(pc>=92&&pc<105){pc=103;continue;}
 if(pc>=7&&pc<48){pc=112;continue;}
 if(pc>=51&&pc<89){pc=112;continue;}
 if(pc>=92&&pc<116){pc=112;continue;}
 throw A;
 }
 }
}
AOTMD["$FJAVsGg_16"] = {"osr":[112]};
// com/sun/midp/rms/RecordStoreImpl.lockRecordStore.()V ($FJAVsGg_26)
function $FJAVsGg_26() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f2).$GBeCKLE();
 if(U){$.B(4,9,[a],[],null);return;}
 re=(a.f3).v11();
 if(U){$.B(13,16,[a],[],null);return;}
 return;
}
AOTMD["$FJAVsGg_26"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreImpl.unlockRecordStore.()V ($FJAVsGg_27)
function $FJAVsGg_27() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f3).v12();
 if(U){$.B(4,7,[a],[],null);return;}
 re=(a.f2).$GBA0mLc();
 if(U){$.B(11,16,[a],[],null);return;}
 return;
}
AOTMD["$FJAVsGg_27"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreImpl.<init>.(Lcom/sun/midp/security/SecurityToken;ILjava/lang/String;Z)V ($FJAVsGg_28)
function $FJAVsGg_28(b,c,d,e) {
 var re,k0=$FJAVsGg;
 var a,b,c,d,e,f,g,h,i;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 do {
 if (pc===183) {
 label = 31;
 } else if (pc===0) {
 pc=1;
 re=undefined;
 pc=8;
 1024 < 0 && TN();
 A=a;
 B=new Int8Array(1024);
 pc=10;
 A.f0=B;
 pc=15;
 a.f1=c;
 pc=22;
 if ($.initialized["com/sun/midp/rms/RecordStoreLockFactory"] === undefined) { $.$GBHhtP4n.classObject.initialize(); }
 A=a;
 re=$GBHhtP4n.m(1)(b,c,d);
 U&&B1(22);
 B=re;
 pc=25;
 A.f2=B;
 pc=29;
 A=a.f2;
 pc=32;
 re=A.$GBeCKLE();
 U&&B0(32,37);
 pc=38;
 if ($.initialized["com/sun/midp/rms/RmsEnvironment"] === undefined) { $.$GBv$1Rrf.classObject.initialize(); }
 re=$GBv$1Rrf.m(6)(c);
 U&&B0(38);
 A=re;
 pc=43;
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(6)(A,d,0);
 A=re;
 f=A;
 if (!(e!==0)) {
 if (!(f!==0)) {
 pc=58;
 if ($.initialized["javax/microedition/rms/RecordStoreNotFoundException"] === undefined) { $.$G$0Evzyz.classObject.initialize(); }
 A=new $G$0Evzyz();
 pc=62;
 B=A;
 C=k0.c(83);
 pc=64;
 re=$G$0Evzyz.m(0).call(B,C);
 pc=67;
 throw A;
 }
 }
 if (!(e===0)) {
 if (!(f!==0)) {
 pc=79;
 if ($.initialized["com/sun/midp/rms/RecordStoreFile"] === undefined) { $.$GBiGK_7g.classObject.initialize(); }
 re=$GBiGK_7g.m(6)(c);
 U&&B0(79);
 A=re;
 g=A;
 if (!((g-40|0)>=0)) {
 pc=92;
 if ($.initialized["javax/microedition/rms/RecordStoreFullException"] === undefined) { $.$G$_w5Pyv.classObject.initialize(); }
 A=new $G$_w5Pyv();
 pc=96;
 re=$G$_w5Pyv.m(1).call((A));
 pc=99;
 throw A;
 }
 }
 }
 pc=101;
 if ($.initialized["com/sun/midp/rms/RecordStoreFile"] === undefined) { $.$GBiGK_7g.classObject.initialize(); }
 A=a;
 B=new $GBiGK_7g();
 pc=108;
 re=$GBiGK_7g.m(7).call((B),c,d,0);
 U&&B2(108);
 pc=111;
 A.f5=B;
 pc=116;
 40 < 0 && TN();
 A=new Int8Array(40);
 g=A;
 if (f===0) {
 h=0;
 label = 31;
 break;
 } else {
 pc=126;
 A=a.f5;
 pc=131;
 re=A.v15(g);
 U&&B0(131);
 A=re;
 h=0;
 label = 16;
 break;
 }
 } else if (pc===277) {
 g=A;
 pc=280;
 A=a.f5;
 if (!(A===null)) {
 pc=287;
 A=a.f5;
 pc=290;
 re=A.v17();
 U&&B0(290);
 }
 label = 60;
 } else if (pc===296) {
 h=A;
 label = 60;
 } else if (pc===346) {
 i=A;
 pc=349;
 A=a.f2;
 pc=352;
 re=A.$GBA0mLc();
 U&&B0(352,357);
 pc=359;
 throw i;
 A=i;
 } else if (pc===138) {
 label = 16;
 } else {
 }
 } while(0);
 do {
 if (label == 16) {
 while(1) {
 label = 0;
 pc=140;
 if ($.initialized["com/sun/midp/rms/AbstractRecordStoreImpl"] === undefined) { $.$G_Hcrnno.classObject.initialize(); }
 A=h;
 U&&B1(140,140);
 B=$.$G_Hcrnno.null;
 pc=143;
 B=B.length;
 if (A>=B) {
 label = 29;
 break;
 }
 pc=151;
 if ((h >>> 0) >= (g.length >>> 0)) TI(h);
 A=g[h];
 pc=152;
 if ($.initialized["com/sun/midp/rms/AbstractRecordStoreImpl"] === undefined) { $.$G_Hcrnno.classObject.initialize(); }
 U&&B1(152,152);
 B=$.$G_Hcrnno.null;
 pc=157;
 if ((h >>> 0) >= (B.length >>> 0)) TI(h);
 B=B[h];
 if (!(A===B)) {
 label = 23;
 break;
 }
 h+=1;
 label = 16;
 }
 if (label == 23) {
 pc=161;
 if ($.initialized["javax/microedition/rms/RecordStoreException"] === undefined) { $.$GBMhjbfr.classObject.initialize(); }
 A=new $GBMhjbfr();
 pc=165;
 B=A;
 C=k0.c(85);
 pc=167;
 re=$GBMhjbfr.m(0).call(B,C);
 pc=170;
 throw A;
 }
 else if (label == 29) {
 break;
 }
 }
 else if (label == 31) {
 while(1) {
 label = 0;
 pc=185;
 if ($.initialized["com/sun/midp/rms/AbstractRecordStoreImpl"] === undefined) { $.$G_Hcrnno.classObject.initialize(); }
 A=h;
 U&&B1(185,185);
 B=$.$G_Hcrnno.null;
 pc=188;
 B=B.length;
 if (A>=B) {
 break;
 }
 pc=196;
 if ($.initialized["com/sun/midp/rms/AbstractRecordStoreImpl"] === undefined) { $.$G_Hcrnno.classObject.initialize(); }
 A=g;
 B=h;
 U&&B2(196,196);
 C=$.$G_Hcrnno.null;
 pc=201;
 if ((h >>> 0) >= (C.length >>> 0)) TI(h);
 C=C[h];
 pc=202;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 A[B] = C;
 h+=1;
 label = 31;
 }
 pc=214;
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(3)(1,g,12);
 A=re;
 pc=218;
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 U&&B0(218,218);
 re=$GBEt6NdQ.m(1)();
 A=re;
 B=g;
 pc=225;
 re=$FoXDC_g.m(4)(A,g,24);
 A=re;
 pc=230;
 A=a.f5;
 pc=235;
 re=A.v12(g);
 U&&B0(235);
 pc=239;
 A=a.f5;
 pc=242;
 re=A.v14();
 U&&B0(242);
 }
 else if (label == 60) {
 if (f!==0) {
 pc=321;
 a.f5=null;
 pc=324;
 if ($.initialized["javax/microedition/rms/RecordStoreException"] === undefined) { $.$GBMhjbfr.classObject.initialize(); }
 A=new $GBMhjbfr();
 pc=328;
 B=A;
 C=k0.c(92);
 pc=330;
 re=$GBMhjbfr.m(0).call(B,C);
 pc=333;
 throw A;
 }
 pc=304;
 if ($.initialized["com/sun/midp/rms/RmsEnvironment"] === undefined) { $.$GBv$1Rrf.classObject.initialize(); }
 re=$GBv$1Rrf.m(6)(c);
 U&&B0(304);
 A=re;
 pc=309;
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(8)(A,d,0);
 A=re;
 pc=315;
 if ($.initialized["com/sun/midp/rms/RecordStoreIndex"] === undefined) { $.$G$Z09BYh.classObject.initialize(); }
 re=$G$Z09BYh.m(2)(c,d);
 A=re;
 pc=321;
 a.f5=null;
 pc=324;
 if ($.initialized["javax/microedition/rms/RecordStoreException"] === undefined) { $.$GBMhjbfr.classObject.initialize(); }
 A=new $GBMhjbfr();
 pc=328;
 B=A;
 C=k0.c(92);
 pc=330;
 re=$GBMhjbfr.m(0).call(B,C);
 pc=333;
 throw A;
 }
 } while(0);
 pc=246;
 if ($.initialized["com/sun/midp/rms/RecordStoreSharedDBHeader"] === undefined) { $.$GBqEqwWq.classObject.initialize(); }
 A=a;
 B=new $GBqEqwWq();
 pc=254;
 re=$GBqEqwWq.m(0).call((B),c,d,g);
 pc=257;
 A.f3=B;
 pc=261;
 if ($.initialized["com/sun/midp/rms/RecordStoreIndex"] === undefined) { $.$G$Z09BYh.classObject.initialize(); }
 A=a;
 B=new $G$Z09BYh();
 pc=268;
 re=$G$Z09BYh.m(0).call((B),a,c,d);
 U&&B2(268);
 pc=271;
 A.f4=B;
 re=(a.f2).$GBA0mLc();
 U&&B0(338,343);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h,i],[A,B,C,D,E,F],null);return;}
 A=TE(ex);
 if(pc>=100&&pc<274&&IOK(A,$G_yTb0tT)){pc=277;continue;}
 if(pc>=279&&pc<293&&IOK(A,$G_yTb0tT)){pc=296;continue;}
 if(pc>=37&&pc<334){pc=346;continue;}
 if(pc>=346&&pc<348){pc=346;continue;}
 throw A;
 }
 }
}
AOTMD["$FJAVsGg_28"] = {"osr":[138,183]};
$FJAVsGg.classSymbols = ["com/sun/midp/rms/RecordStoreImpl", "com/sun/midp/rms/RecordStoreSharedDBHeader", "com/sun/midp/rms/RecordStoreUtil", "com/sun/midp/rms/RecordStoreIndex", "com/sun/midp/rms/RecordStoreFile", "javax/microedition/rms/RecordStoreException", "java/io/IOException", "com/sun/midp/rms/AbstractRecordStoreLock", "java/lang/Object", "com/sun/midp/rms/RecordStoreLockFactory", "com/sun/midp/rms/RmsEnvironment", "javax/microedition/rms/RecordStoreNotFoundException", "javax/microedition/rms/RecordStoreFullException", "com/sun/midp/rms/AbstractRecordStoreImpl", "java/lang/System"];
// com/sun/midp/rms/RecordStoreIndex extends java/lang/Object
function $G$Z09BYh() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
}
// com/sun/midp/rms/RecordStoreIndex.getRecordIDs.()[I ($G$Z09BYh_3)
function $G$Z09BYh_3() {
 var re;
 var a,b,c,d,e,f,g,h,i,j;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8],j=_[9];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 re=(a.f0).$G$KHdGg();
 U&&B0(4,9);
 b=re;
 b < 0 && TN();
 c=new Int32Array(b);
 8 < 0 && TN();
 d=new Int8Array(8);
 e=40;
 f=0;
 g=0;
 re=(a.f0).$Ffn5J1();
 U&&B0(33,38);
 h=re;
 i=0;
 } else if (pc===98) {
 j=A;
 return c;
 } else if (!(pc===43)) {
 }
 while(1) {
 if (i>=b) {
 label = 16;
 break;
 }
 if (!(e<h)) {
 label = 4;
 break;
 }
 e=e+f|0;
 pc=67;
 A=a.f1;
 pc=72;
 re=A.$F5NIme(e);
 U&&B0(72,77);
 pc=78;
 A=a.f1;
 pc=82;
 re=A.$FuqaI4(d);
 U&&B0(82,87);
 A=re;
 if (!(A===8)) {
 label = 11;
 break;
 }
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(1)(d,0);
 g=re;
 if (!(g<=0)) {
 A=c;
 B=i;
 i+=1;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 A[B] = g;
 }
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(1)(d,4);
 re=$FoXDC_g.m(5)(re);
 f=re;
 }
 if (label == 4) {
 return c;
 }
 else if (label == 11) {
 return c;
 }
 else if (label == 16) {
 return c;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h,i,j],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=59&&pc<92&&IOK(A,$G_yTb0tT)){pc=98;continue;}
 throw A;
 }
 }
}
AOTMD["$G$Z09BYh_3"] = {"osr":[43]};
// com/sun/midp/rms/RecordStoreIndex.getRecordHeader.(I[B)I ($G$Z09BYh_4)
function $G$Z09BYh_4(b,c) {
 var k0=$G$Z09BYh,re;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 try{
 var label=0;
 if (!(b>0)) {
 if ($.initialized["javax/microedition/rms/InvalidRecordIDException"] === undefined) { $.$G$O4cyNv.classObject.initialize(); }
 A=new $G$O4cyNv();
 re=$G$O4cyNv.m(0).call((A),k0.c(16));
 throw A;
 }
 re=a.v19();
 U&&B0(15);
 do {
 if (!(null===(a.f2))) {
 re=(a.f2).v12(b);
 U&&B0(31);
 d=re;
 if (!(d===((a.f2).f4))) {
 re=(a.f1).$F5NIme(d);
 U&&B0(51,56);
 re=(a.f1).$FuqaI4(c);
 U&&B0(61,66);
 if (!(re===8)) {
 a.f2=null;
 break;
 }
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(1)(c,0);
 e=re;
 if (!(e!==b)) {
 return d;
 }
 }
 }
 } while(0);
 if (null!==(a.f2)) {
 re=a.v12(b,c);
 U&&B0(120);
 return re;
 }
 if ($.initialized["com/sun/midp/rms/OffsetCache"] === undefined) { $.$G_p3b1Uc.classObject.initialize(); }
 A=a;
 B=new $G_p3b1Uc();
 re=$G_p3b1Uc.m(0).call((B),32,(-1),0);
 A.f2=B;
 re=a.v12(b,c);
 U&&B0(120);
 return re;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C,D,E,F],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$Z09BYh_4"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreIndex.getRecordHeader_NoCache.(I[B)I ($G$Z09BYh_5)
function $G$Z09BYh_5(b,c) {
 var re,k0=$G$Z09BYh;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 try{
 var label=0;
 re=(a.f0).$Ffn5J1();
 U&&B0(4,9);
 e=re;
 f=-1;
 if (!(null===(a.f2))) {
 if (!(((a.f2).f5)===0)) {
 re=a.v13(b,c,((a.f2).f5),e);
 U&&B0(50);
 f=re;
 }
 }
 if (!((-1)!==f)) {
 re=a.v13(b,c,40,e);
 U&&B0(68);
 f=re;
 }
 if ((-1)!==f) {
 return f;
 } else {
 if ($.initialized["javax/microedition/rms/InvalidRecordIDException"] === undefined) { $.$G$O4cyNv.classObject.initialize(); }
 A=new $G$O4cyNv();
 re=$G$O4cyNv.m(0).call((A),k0.c(27));
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B,C,D,E],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$Z09BYh_5"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreIndex.getRecordHeader_SearchFromTo.(I[BII)I ($G$Z09BYh_6)
function $G$Z09BYh_6(b,c,d,e) {
 var re;
 var a,b,c,d,e,f,g,h;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 f=0;
 g=d;
 h=0;
 } else if (!(pc===9)) {
 }
 while(1) {
 if (f===b) {
 label = 9;
 break;
 }
 g=g+h|0;
 if (!(g<e)) {
 label = 4;
 break;
 }
 re=(a.f1).$F5NIme(g);
 U&&B0(37,42);
 re=(a.f1).$FuqaI4(c);
 U&&B0(47,52);
 if (!(re===8)) {
 label = 6;
 break;
 }
 if ($.initialized["com/sun/midp/rms/RecordStoreUtil"] === undefined) { $.$FoXDC_g.classObject.initialize(); }
 re=$FoXDC_g.m(1)(c,0);
 f=re;
 re=$FoXDC_g.m(1)(c,4);
 re=$FoXDC_g.m(5)(re);
 h=re;
 if (null===(a.f2)) {
 continue;
 }
 re=(a.f2).v14(g,f);
 U&&B0(92);
 (a.f2).f5=g;
 }
 if (label == 4) {
 return (-1);
 }
 else if (label == 6) {
 return (-1);
 }
 else if (label == 9) {
 return g;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$Z09BYh_6"] = {"osr":[9]};
// com/sun/midp/rms/RecordStoreIndex.ensureIndexValidity.()V ($G$Z09BYh_12)
function $G$Z09BYh_12() {
 var re,k0=$G$Z09BYh;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f3;
 b=A;
 pc=6;
 A=a.f0;
 pc=9;
 re=A.$GB_hXkU();
 if(U){$.B(9,14,[a,b,c],[],null);return;}
 A=re;
 b=A;
 } else if (pc===18) {
 c=A;
 } else {
 }
 if ((a.f3)>=b) {
 return;
 }
 re=k0.m(13).call(a);
 a.f3=b;
 return;
 }catch(ex){
 A=TE(ex);
 if(pc>=5&&pc<15&&IOK(A,$G_8od8BT)){pc=18;continue;}
 throw A;
 }
 }
}
AOTMD["$G$Z09BYh_12"] = {"osr":[]};
$G$Z09BYh.classSymbols = ["com/sun/midp/rms/RecordStoreIndex", "com/sun/midp/rms/AbstractRecordStoreImpl", "com/sun/midp/rms/AbstractRecordStoreFile", "com/sun/midp/rms/RecordStoreUtil", "java/io/IOException", "javax/microedition/rms/InvalidRecordIDException", "com/sun/midp/rms/IntToIntMapper", "com/sun/midp/rms/OffsetCache", "java/lang/Exception"];
// com/sun/midp/rms/RecordStoreLock extends java/lang/Object
function $G_jL$EWg() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/sun/midp/rms/RecordStoreLock.obtain.()V ($G_jL$EWg_0)
function $G_jL$EWg_0() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f0).v9();
 if(U){$.B(4,7,[a],[],null);return;}
 return;
}
AOTMD["$G_jL$EWg_0"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreLock.release.()V ($G_jL$EWg_1)
function $G_jL$EWg_1() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f0).v10();
 if(U){$.B(4,7,[a],[],null);return;}
 return;
}
AOTMD["$G_jL$EWg_1"] = {"osr":[]};
$G_jL$EWg.classSymbols = ["com/sun/midp/rms/RecordStoreLock", "com/sun/midp/util/isolate/InterIsolateMutex"];
// com/sun/midp/rms/RecordStoreSharedDBHeader extends java/lang/Object
function $GBqEqwWq() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
}
// com/sun/midp/rms/RecordStoreSharedDBHeader.getHeaderData.()[B ($GBqEqwWq_2)
function $GBqEqwWq_2() {
 var th=$.ctx.thread;
 var lk,k0=$GBqEqwWq,re;
 var a;
 a=this;
 var A;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 if (!(a.f2!==0)) {
 re=k0.m(6).call(a);
 }
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return (a.f0);
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GBqEqwWq_2"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreSharedDBHeader.recordStoreLocked.()V ($GBqEqwWq_3)
function $GBqEqwWq_3() {
 var th=$.ctx.thread;
 var lk,k0=$GBqEqwWq,re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a,b],[],a);return;}
 }
 try{
 var label=0;
 if (!(a.f2===0)) {
 if ($.initialized["java/lang/IllegalStateException"] === undefined) { $.$G$L_F0if.classObject.initialize(); }
 A=new $G$L_F0if();
 re=$G$L_F0if.m(1).call((A),k0.c(11));
 throw A;
 }
 re=k0.m(6).call(a);
 re=k0.m(11)((a.f4));
 b=re;
 if (b!==1) {
 a.f3=0;
 } else {
 a.f3=1;
 }
 a.f2=1;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GBqEqwWq_3"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreSharedDBHeader.recordStoreAboutToBeUnlocked.()V ($GBqEqwWq_4)
function $GBqEqwWq_4() {
 var th=$.ctx.thread;
 var lk;
 var a;
 a=this;
 var A,B;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 a.f3=0;
 a.f2=0;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GBqEqwWq_4"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreSharedDBHeader.updateCachedData.()V ($GBqEqwWq_6)
function $GBqEqwWq_6() {
 var k0=$GBqEqwWq,re;
 var a;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 A=a;
 re=k0.m(10)((a.f4),(a.f0),((a.f0).length),(a.f1));
 A.f1=re;
 return;
}
AOTMD["$GBqEqwWq_6"] = {"osr":[]};
$GBqEqwWq.classSymbols = ["com/sun/midp/rms/RecordStoreSharedDBHeader", "java/lang/IllegalStateException"];
// com/sun/midp/rms/RecordStoreUtil extends java/lang/Object
function $FoXDC_g() {
 this._hashCode = 0;
}
// com/sun/midp/rms/RecordStoreUtil.getInt.([BI)I ($FoXDC_g_1)
function $FoXDC_g_1(a,b) {
 var a,b,c;
 var A,B,C;
 var pc=0;
 var label=0;
 A=a;
 B=b;
 b+=1;
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 c=A[B];
 A=c<<8;
 B=a;
 C=b;
 b+=1;
 if ((C >>> 0) >= (B.length >>> 0)) TI(C);
 c=A|((B[C])&255);
 A=c<<8;
 B=a;
 C=b;
 b+=1;
 if ((C >>> 0) >= (B.length >>> 0)) TI(C);
 c=A|((B[C])&255);
 A=c<<8;
 B=a;
 C=b;
 b+=1;
 if ((C >>> 0) >= (B.length >>> 0)) TI(C);
 c=A|((B[C])&255);
 return c;
}
AOTMD["$FoXDC_g_1"] = {"osr":[]};
// com/sun/midp/rms/RecordStoreUtil.calculateBlockSize.(I)I ($FoXDC_g_5)
function $FoXDC_g_5(a) {
 var a,b,c;
 var A,B,C;
 var pc=0;
 var label=0;
 8 === 0 && TA();
 c=a%8;
 if (c!==0) {
 return ((a+(8-c|0)|0)+8|0);
 } else {
 return (a+8|0);
 }
}
AOTMD["$FoXDC_g_5"] = {"osr":[]};
$FoXDC_g.classSymbols = [];
// com/sun/midp/rms/RmsEnvironment extends java/lang/Object
function $GBv$1Rrf() {
 this._hashCode = 0;
}
// com/sun/midp/rms/RmsEnvironment.getSecureFilenameBase.(I)Ljava/lang/String; ($GBv$1Rrf_6)
function $GBv$1Rrf_6(a) {
 var re;
 var a;
 var A,B;
 var pc=0;
 var label=0;
 re=($.$GBv$1Rrf.s0).$G$Xa4Jn(a);
 if(U){$.B(4,9,[a],[],null);return;}
 return re;
}
AOTMD["$GBv$1Rrf_6"] = {"osr":[]};
$GBv$1Rrf.classSymbols = ["com/sun/midp/rms/RmsEnvironment", "com/sun/midp/rms/SuiteContainer"];
// com/sun/midp/security/SecurityInitializer extends java/lang/Object
function $FzZIiGp() {
 this._hashCode = 0;
}
// com/sun/midp/security/SecurityInitializer.requestToken.(Lcom/sun/midp/security/ImplicitlyTrustedClass;)Lcom/sun/midp/security/SecurityToken; ($FzZIiGp_0)
function $FzZIiGp_0(a) {
 var re;
 var a;
 var A,B;
 var pc=0;
 var label=0;
 re=($.$FzZIiGp.s0).v10(a);
 if(U){$.B(4,7,[a],[],null);return;}
 return re;
}
AOTMD["$FzZIiGp_0"] = {"osr":[]};
$FzZIiGp.classSymbols = ["com/sun/midp/security/SecurityInitializer", "com/sun/midp/security/SecurityInitializerImpl"];
// com/sun/midp/security/SecurityInitializerImpl extends java/lang/Object
function $G$WPTvjt() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// com/sun/midp/security/SecurityInitializerImpl.isTrusted.(Ljava/lang/Object;)Z ($G$WPTvjt_0)
function $G$WPTvjt_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 try{
 var label=0;
 if (!((a.f1)!==null)) {
 return 0;
 }
 A=a.f1;
 re=b.v0();
 re=re.v16();
 re=A.v15(re);
 U&&B0(20);
 if (re===null) {
 A=0;
 return A;
 } else {
 A=1;
 return A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b],[A,B],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$WPTvjt_0"] = {"osr":[]};
// com/sun/midp/security/SecurityInitializerImpl.requestToken.(Lcom/sun/midp/security/ImplicitlyTrustedClass;)Lcom/sun/midp/security/SecurityToken; ($G$WPTvjt_1)
function $G$WPTvjt_1(b) {
 var re,k0=$G$WPTvjt;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 re=a.v9(b);
 U&&B0(2);
 if (re!==0) {
 return (a.f0);
 } else {
 if ($.initialized["java/lang/SecurityException"] === undefined) { $.$G$Fzycub.classObject.initialize(); }
 A=new $G$Fzycub();
 B=A;
 C=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((C));
 re=C.v19(k0.c(9));
 C=re;
 re=b.v0();
 re=re.v16();
 re=C.v19(re);
 re=re.v3();
 re=$G$Fzycub.m(1).call(B,re);
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$WPTvjt_1"] = {"osr":[]};
// com/sun/midp/security/SecurityInitializerImpl.<init>.(Lcom/sun/midp/security/SecurityToken;[Ljava/lang/String;)V ($G$WPTvjt_2)
function $G$WPTvjt_2(b,c) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 re=undefined;
 a.f0=b;
 if ($.initialized["java/util/Hashtable"] === undefined) { $.$F_ZoE_T.classObject.initialize(); }
 A=a;
 B=new $F_ZoE_T();
 re=$F_ZoE_T.m(0).call((B),(c.length));
 A.f1=B;
 d=0;
 } else if (!(pc===24)) {
 }
 while(1) {
 if (d>=(c.length)) {
 break;
 }
 if ((d >>> 0) >= (c.length >>> 0)) TI(d);
 if ((d >>> 0) >= (c.length >>> 0)) TI(d);
 re=(a.f1).v17((c[d]),(c[d]));
 U&&B0(40);
 d+=1;
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$WPTvjt_2"] = {"osr":[24]};
$G$WPTvjt.classSymbols = ["com/sun/midp/security/SecurityInitializerImpl", "java/lang/Object", "java/lang/Class", "java/util/Hashtable", "java/lang/SecurityException", "java/lang/StringBuffer"];
// com/sun/midp/security/SecurityToken extends java/lang/Object
function $G_0N6dKj() {
 this._hashCode = 0;
 this.f0 = null;
}
// com/sun/midp/security/SecurityToken.checkIfPermissionAllowed.(I)V ($G_0N6dKj_1)
function $G_0N6dKj_1(b) {
 var k0=$G_0N6dKj,re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=k0.m(3).call(a,b,k0.c(5));
 return;
}
AOTMD["$G_0N6dKj_1"] = {"osr":[]};
// com/sun/midp/security/SecurityToken.checkIfPermissionAllowed.(ILjava/lang/String;)V ($G_0N6dKj_3)
function $G_0N6dKj_3(b,c) {
 var re;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if (!((a.f0)!==null)) {
 return;
 }
 if (!(b<0)) {
 if (!(b>=((a.f0).length))) {
 if ((b >>> 0) >= (a.f0.length >>> 0)) TI(b);
 if (!((a.f0[b])!==1)) {
 return;
 }
 }
 }
 if ($.initialized["java/lang/SecurityException"] === undefined) { $.$G$Fzycub.classObject.initialize(); }
 A=new $G$Fzycub();
 re=$G$Fzycub.m(1).call((A),c);
 throw A;
}
AOTMD["$G_0N6dKj_3"] = {"osr":[]};
$G_0N6dKj.classSymbols = ["com/sun/midp/security/SecurityToken", "java/lang/SecurityException"];
// com/sun/midp/util/isolate/InterIsolateMutex extends java/lang/Object
function $GBilE$Wr() {
 this._hashCode = 0;
 this.f0 = 0;
}
// com/sun/midp/util/isolate/InterIsolateMutex.lock.()V ($GBilE$Wr_1)
function $GBilE$Wr_1() {
 var k0=$GBilE$Wr,re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=k0.m(6)((a.f0));
 if(U){$.B(4,7,[a],[],null);return;}
 return;
}
AOTMD["$GBilE$Wr_1"] = {"osr":[]};
// com/sun/midp/util/isolate/InterIsolateMutex.unlock.()V ($GBilE$Wr_2)
function $GBilE$Wr_2() {
 var k0=$GBilE$Wr,re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=k0.m(7)((a.f0));
 return;
}
AOTMD["$GBilE$Wr_2"] = {"osr":[]};
$GBilE$Wr.classSymbols = ["com/sun/midp/util/isolate/InterIsolateMutex"];
// com/sun/midp/util/Properties extends java/lang/Object
function $G_oLkOTc() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
}
// com/sun/midp/util/Properties.setProperty.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ($G_oLkOTc_4)
function $G_oLkOTc_4(b,c) {
 var th=$.ctx.thread;
 var lk,k0=$G_oLkOTc,re;
 var a,b,c,d,e;
 a=this;
 var A,B,C;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a,b,c,d,e],[],a);return;}
 }
 try{
 var label=0;
 e=null;
 if (!((a.f1)!==null)) {
 re=k0.m(2).call(a);
 U&&B0(11);
 }
 re=(a.f1).v19(b);
 U&&B0(19);
 d=re;
 if (d!==(-1)) {
 re=(a.f2).v23(d);
 U&&B0(52);
 CCK(re,$G_81POkQ);
 e=re;
 re=(a.f2).v26(c,d);
 U&&B0(66);
 } else {
 re=(a.f1).v29(b);
 U&&B0(33);
 re=(a.f2).v29(c);
 U&&B0(41);
 }
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return e;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C],a);return;}
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$G_oLkOTc_4"] = {"osr":[]};
// com/sun/midp/util/Properties.getProperty.(Ljava/lang/String;)Ljava/lang/String; ($G_oLkOTc_7)
function $G_oLkOTc_7(b) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===23)) {
 }
 do {
 if (label == 1) {
 c=null;
 if (!(b!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 if (!((a.f1)!==null)) {
 d=0;
 break;
 }
 re=(a.f1).v19(b);
 U&&B0(71);
 d=re;
 if (d<=(-1)) {
 return c;
 }
 re=(a.f2).v23(d);
 U&&B0(85);
 CCK(re,$G_81POkQ);
 c=re;
 return c;
 }
 } while(0);
 while(1) {
 if (d>=((a.f0).length)) {
 break;
 }
 if ((d >>> 0) >= (a.f0.length >>> 0)) TI(d);
 re=(a.f0[d]).v2(b);
 if (!(re===0)) {
 label = 7;
 break;
 }
 d+=2;
 }
 if (label == 7) {
 if ((d+1|0 >>> 0) >= (a.f0.length >>> 0)) TI(d+1|0);
 c=a.f0[d+1|0];
 }
 return c;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_oLkOTc_7"] = {"osr":[23]};
$G_oLkOTc.classSymbols = ["com/sun/midp/util/Properties", "java/util/Vector", "java/lang/String", "java/lang/NullPointerException"];
// java/io/InputStream extends java/lang/Object
function $GBYoI9ST() {
 this._hashCode = 0;
}
// java/io/InputStream.<init>.()V ($GBYoI9ST_0)
function $GBYoI9ST_0() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 return;
}
AOTMD["$GBYoI9ST_0"] = {"osr":[]};
// java/io/InputStream.read.([B)I ($GBYoI9ST_2)
function $GBYoI9ST_2(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 re=a.v11(b,0,(b.length));
 if(U){$.B(5,8,[a,b],[],null);return;}
 return re;
}
AOTMD["$GBYoI9ST_2"] = {"osr":[]};
$GBYoI9ST.classSymbols = ["java/lang/Object", "java/io/InputStream"];
// com/sun/cldc/io/ResourceInputStream extends java/io/InputStream
function $GBRpcdyj() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// com/sun/cldc/io/ResourceInputStream.fixResourceName.(Ljava/lang/String;)Ljava/lang/String; ($GBRpcdyj_0)
function $GBRpcdyj_0(a) {
 var re,k0=$GBRpcdyj;
 var a,b,c,d,e,f,g,h;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 A=new $G$K6gi9Q();
 re=$G$K6gi9Q.m(2).call((A));
 b=A;
 c=0;
 d=0;
 label = 2;
 } else if (pc===12) {
 label = 2;
 } else if (pc===84) {
 f=A;
 pc=86;
 A=new $G_yTb0tT();
 pc=90;
 re=$G_yTb0tT.m(0).call((A));
 pc=93;
 throw A;
 } else if (!(pc===121)) {
 }
 if (label == 2) {
 while(1) {
 label = 0;
 re=a.v21(47,c);
 A=re;
 B=A;
 d=B;
 if (A===(-1)) {
 break;
 }
 if (!(d!==c)) {
 c+=1;
 label = 2;
 continue;
 }
 re=a.v27(c,d);
 e=re;
 c=d+1|0;
 re=e.v2(k0.c(5));
 if (!(re===0)) {
 label = 2;
 continue;
 }
 re=e.v2(k0.c(7));
 if (re===0) {
 re=b.v29(e);
 U&&B0(97);
 label = 2;
 continue;
 } else {
 pc=73;
 A=b;
 re=b.v15();
 U&&B1(73);
 B=re;
 pc=78;
 re=A.v27((B-1|0));
 U&&B0(78);
 label = 2;
 continue;
 }
 }
 A=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((A));
 f=A;
 re=b.v15();
 U&&B0(113);
 g=re;
 h=0;
 }
 while(1) {
 if (h>=g) {
 break;
 }
 A=f;
 re=b.v23(h);
 U&&B1(133);
 CCK(re,$G_81POkQ);
 re=A.v19(re);
 re=f.v19(k0.c(19));
 h+=1;
 }
 A=c;
 re=a.v9();
 if (A>=re) {
 re=f.v3();
 return re;
 }
 re=a.v26(c);
 h=re;
 re=h.v19(k0.c(22));
 if (!(re===0)) {
 re=k0.c(22).v2(h);
 if (!(re!==0)) {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
 }
 A=f;
 re=a.v26(c);
 re=A.v19(re);
 re=f.v3();
 return re;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=71&&pc<81&&IOK(A,$GBGnQL7o)){pc=84;continue;}
 throw A;
 }
 }
}
AOTMD["$GBRpcdyj_0"] = {"osr":[12,121]};
// com/sun/cldc/io/ResourceInputStream.<init>.(Ljava/lang/String;)V ($GBRpcdyj_1)
function $GBRpcdyj_1(b) {
 var re,k0=$GBRpcdyj;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 try{
 var label=0;
 re=$GBYoI9ST.m(0).call(a);
 re=k0.m(0)(b);
 U&&B0(5);
 c=re;
 A=a;
 re=k0.m(9)(c);
 A.f0=re;
 if ((a.f0)!==null) {
 return;
 } else {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GBRpcdyj_1"] = {"osr":[]};
// com/sun/cldc/io/ResourceInputStream.read.([BII)I ($GBRpcdyj_4)
function $GBRpcdyj_4(b,c,d) {
 var re,k0=$GBRpcdyj;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 if (!((a.f0)!==null)) {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
 if (!(b!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 if (!(c<0)) {
 if (!(c>(b.length))) {
 if (!(d<0)) {
 if (!((c+d|0)>(b.length))) {
 if ((c+d|0)>=0) {
 re=k0.m(12)((a.f0),b,c,d);
 return re;
 }
 }
 }
 }
 }
 if ($.initialized["java/lang/IndexOutOfBoundsException"] === undefined) { $.$F5KN_aj.classObject.initialize(); }
 A=new $F5KN_aj();
 re=$F5KN_aj.m(0).call((A));
 throw A;
}
AOTMD["$GBRpcdyj_4"] = {"osr":[]};
// com/sun/cldc/io/ResourceInputStream.close.()V ($GBRpcdyj_5)
function $GBRpcdyj_5() {
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 a.f0=null;
 return;
}
AOTMD["$GBRpcdyj_5"] = {"osr":[]};
$GBRpcdyj.classSymbols = ["java/util/Vector", "java/lang/String", "java/io/IOException", "java/lang/StringBuffer", "java/lang/ArrayIndexOutOfBoundsException", "java/io/InputStream", "com/sun/cldc/io/ResourceInputStream", "java/lang/NullPointerException", "java/lang/IndexOutOfBoundsException"];
// java/io/ByteArrayInputStream extends java/io/InputStream
function $GB2eYx_c() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
}
// java/io/ByteArrayInputStream.close.()V ($GB2eYx_c_9)
function $GB2eYx_c_9() {
 var th=$.ctx.thread;
 var lk;
 var a;
 a=this;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GB2eYx_c_9"] = {"osr":[]};
$GB2eYx_c.classSymbols = [];
// java/io/DataInputStream extends java/io/InputStream
function $GB4rHbdX() {
 this._hashCode = 0;
 this.f0 = null;
}
// java/io/DataInputStream.<init>.(Ljava/io/InputStream;)V ($GB4rHbdX_0)
function $GB4rHbdX_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$GBYoI9ST.m(0).call(a);
 a.f0=b;
 return;
}
AOTMD["$GB4rHbdX_0"] = {"osr":[]};
// java/io/DataInputStream.read.()I ($GB4rHbdX_1)
function $GB4rHbdX_1() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f0).v9();
 if(U){$.B(4,7,[a],[],null);return;}
 return re;
}
AOTMD["$GB4rHbdX_1"] = {"osr":[]};
// java/io/DataInputStream.read.([BII)I ($GB4rHbdX_3)
function $GB4rHbdX_3(b,c,d) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 re=(a.f0).v11(b,c,d);
 if(U){$.B(7,10,[a,b,c,d],[],null);return;}
 return re;
}
AOTMD["$GB4rHbdX_3"] = {"osr":[]};
// java/io/DataInputStream.readFully.([BII)V ($GB4rHbdX_5)
function $GB4rHbdX_5(b,c,d) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===15)) {
 }
 do {
 if (label == 1) {
 if (d>=0) {
 e=0;
 break;
 } else {
 if ($.initialized["java/lang/IndexOutOfBoundsException"] === undefined) { $.$F5KN_aj.classObject.initialize(); }
 A=new $F5KN_aj();
 re=$F5KN_aj.m(0).call((A));
 throw A;
 }
 }
 } while(0);
 while(1) {
 if (e>=d) {
 label = 8;
 break;
 }
 re=a.v11(b,(c+e|0),(d-e|0));
 U&&B0(31);
 f=re;
 if (!(f>=0)) {
 label = 6;
 break;
 }
 e=e+f|0;
 }
 if (label == 6) {
 if ($.initialized["java/io/EOFException"] === undefined) { $.$G_OHERZU.classObject.initialize(); }
 A=new $G_OHERZU();
 re=$G_OHERZU.m(0).call((A));
 throw A;
 }
 else if (label == 8) {
 return;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B,C,D,E],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GB4rHbdX_5"] = {"osr":[15]};
// java/io/DataInputStream.readByte.()B ($GB4rHbdX_8)
function $GB4rHbdX_8() {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=a.v9();
 if(U){$.B(1,4,[a,b],[],null);return;}
 b=re;
 if (b>=0) {
 return ((b<<24)>>24);
 } else {
 if ($.initialized["java/io/EOFException"] === undefined) { $.$G_OHERZU.classObject.initialize(); }
 A=new $G_OHERZU();
 re=$G_OHERZU.m(0).call((A));
 throw A;
 }
}
AOTMD["$GB4rHbdX_8"] = {"osr":[]};
// java/io/DataInputStream.readInt.()I ($GB4rHbdX_13)
function $GB4rHbdX_13() {
 var re;
 var a,b,c,d,e;
 a=this;
 var A,B,C;
 var pc=0;
 try{
 var label=0;
 re=a.v9();
 U&&B0(1);
 b=re;
 re=a.v9();
 U&&B0(6);
 c=re;
 re=a.v9();
 U&&B0(11);
 d=re;
 re=a.v9();
 U&&B0(16);
 e=re;
 if ((((b|c)|d)|e)>=0) {
 return ((((b<<24)+(c<<16)|0)+(d<<8)|0)+(e<<0)|0);
 } else {
 if ($.initialized["java/io/EOFException"] === undefined) { $.$G_OHERZU.classObject.initialize(); }
 A=new $G_OHERZU();
 re=$G_OHERZU.m(0).call((A));
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GB4rHbdX_13"] = {"osr":[]};
// java/io/DataInputStream.readLong.()J ($GB4rHbdX_14)
function $GB4rHbdX_14() {
 var re;
 var a;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var label=0;
 re=a.v27();
 if(U){$.B(1,4,[a],[],null);return;}
 A=(Long.fromInt(re)).shiftLeft(32);
 B=undefined;
 re=a.v27();
 if(U){$.B(9,12,[a],[A,B],null);return;}
 return (A.add(((Long.fromInt(re)).and(Long.fromBits(-1,0)))));
}
AOTMD["$GB4rHbdX_14"] = {"osr":[]};
$GB4rHbdX.classSymbols = ["java/io/InputStream", "java/io/DataInputStream", "java/lang/IndexOutOfBoundsException", "java/io/EOFException"];
// java/io/OutputStream extends java/lang/Object
function $G$sJMI9U() {
 this._hashCode = 0;
}
// java/io/OutputStream.<init>.()V ($G$sJMI9U_0)
function $G$sJMI9U_0() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 return;
}
AOTMD["$G$sJMI9U_0"] = {"osr":[]};
// java/io/OutputStream.write.([B)V ($G$sJMI9U_2)
function $G$sJMI9U_2(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 re=a.v11(b,0,(b.length));
 if(U){$.B(5,8,[a,b],[],null);return;}
 return;
}
AOTMD["$G$sJMI9U_2"] = {"osr":[]};
// java/io/OutputStream.write.([BII)V ($G$sJMI9U_3)
function $G$sJMI9U_3(b,c,d) {
 var re;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===56)) {
 }
 do {
 if (label == 1) {
 if (!(b!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 if (!(c<0)) {
 if (!(c>(b.length))) {
 if (!(d<0)) {
 if (!((c+d|0)>(b.length))) {
 if ((c+d|0)>=0) {
 if (d!==0) {
 e=0;
 break;
 } else {
 return;
 }
 }
 }
 }
 }
 }
 if ($.initialized["java/lang/IndexOutOfBoundsException"] === undefined) { $.$F5KN_aj.classObject.initialize(); }
 A=new $F5KN_aj();
 re=$F5KN_aj.m(0).call((A));
 throw A;
 }
 } while(0);
 while(1) {
 if (e>=d) {
 break;
 }
 if ((c+e|0 >>> 0) >= (b.length >>> 0)) TI(c+e|0);
 re=a.v9((b[c+e|0]));
 U&&B0(69);
 e+=1;
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$sJMI9U_3"] = {"osr":[56]};
// java/io/OutputStream.close.()V ($G$sJMI9U_5)
function $G$sJMI9U_5() {
 var a;
 a=this;
 var pc=0;
 var label=0;
 return;
}
AOTMD["$G$sJMI9U_5"] = {"osr":[]};
$G$sJMI9U.classSymbols = ["java/lang/Object", "java/io/OutputStream", "java/lang/NullPointerException", "java/lang/IndexOutOfBoundsException"];
// java/io/ByteArrayOutputStream extends java/io/OutputStream
function $G_svFbRd() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
}
// java/io/ByteArrayOutputStream.<init>.(I)V ($G_svFbRd_1)
function $G_svFbRd_1(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$G$sJMI9U.m(0).call(a);
 a.f2=0;
 if (b>=0) {
 b < 0 && TN();
 a.f0=new Int8Array(b);
 return;
 } else {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
}
AOTMD["$G_svFbRd_1"] = {"osr":[]};
// java/io/ByteArrayOutputStream.reset.()V ($G_svFbRd_4)
function $G_svFbRd_4() {
 var th=$.ctx.thread;
 var lk;
 var a;
 a=this;
 var A,B;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 a.f1=0;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$G_svFbRd_4"] = {"osr":[]};
// java/io/ByteArrayOutputStream.toByteArray.()[B ($G_svFbRd_5)
function $G_svFbRd_5() {
 var th=$.ctx.thread;
 var lk,re;
 var a,b;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a,b],[],a);return;}
 }
 try{
 var label=0;
 if (!(a.f2===0)) {
 if (!(((a.f0).length)!==(a.f1))) {
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return (a.f0);
 }
 }
 (a.f1) < 0 && TN();
 b=new Int8Array((a.f1));
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 if(U){$.B(42,42,[a,b],[a.f0,0,b,0,a.f1],a);return;}
 re=$GBEt6NdQ.m(2)((a.f0),0,b,0,(a.f1));
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return b;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$G_svFbRd_5"] = {"osr":[]};
// java/io/ByteArrayOutputStream.size.()I ($G_svFbRd_6)
function $G_svFbRd_6() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f1);
}
AOTMD["$G_svFbRd_6"] = {"osr":[]};
// java/io/ByteArrayOutputStream.close.()V ($G_svFbRd_8)
function $G_svFbRd_8() {
 var th=$.ctx.thread;
 var lk;
 var a;
 a=this;
 var A,B;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 a.f2=1;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$G_svFbRd_8"] = {"osr":[]};
$G_svFbRd.classSymbols = ["java/io/OutputStream", "java/io/ByteArrayOutputStream", "java/lang/IllegalArgumentException", "java/lang/System"];
// java/io/DataOutputStream extends java/io/OutputStream
function $FFA0ZDY() {
 this._hashCode = 0;
 this.f0 = null;
}
// java/io/DataOutputStream.<init>.(Ljava/io/OutputStream;)V ($FFA0ZDY_0)
function $FFA0ZDY_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$G$sJMI9U.m(0).call(a);
 a.f0=b;
 return;
}
AOTMD["$FFA0ZDY_0"] = {"osr":[]};
// java/io/DataOutputStream.write.(I)V ($FFA0ZDY_1)
function $FFA0ZDY_1(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=(a.f0).v9(b);
 if(U){$.B(5,8,[a,b],[],null);return;}
 return;
}
AOTMD["$FFA0ZDY_1"] = {"osr":[]};
// java/io/DataOutputStream.write.([BII)V ($FFA0ZDY_2)
function $FFA0ZDY_2(b,c,d) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 re=(a.f0).v11(b,c,d);
 if(U){$.B(7,10,[a,b,c,d],[],null);return;}
 return;
}
AOTMD["$FFA0ZDY_2"] = {"osr":[]};
// java/io/DataOutputStream.flush.()V ($FFA0ZDY_3)
function $FFA0ZDY_3() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f0).v12();
 if(U){$.B(4,7,[a],[],null);return;}
 return;
}
AOTMD["$FFA0ZDY_3"] = {"osr":[]};
// java/io/DataOutputStream.close.()V ($FFA0ZDY_4)
function $FFA0ZDY_4() {
 var re;
 var a,b;
 a=this;
 var A;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 re=a.v12();
 if(U){$.B(1,4,[a,b],[],null);return;}
 } else if (pc===7) {
 b=A;
 } else {
 }
 re=(a.f0).v13();
 if(U){$.B(12,15,[a,b],[],null);return;}
 return;
 }catch(ex){
 A=TE(ex);
 if(pc>=0&&pc<4&&IOK(A,$G_yTb0tT)){pc=7;continue;}
 throw A;
 }
 }
}
AOTMD["$FFA0ZDY_4"] = {"osr":[]};
// java/io/DataOutputStream.writeByte.(I)V ($FFA0ZDY_6)
function $FFA0ZDY_6(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=a.v9(b);
 if(U){$.B(2,5,[a,b],[],null);return;}
 return;
}
AOTMD["$FFA0ZDY_6"] = {"osr":[]};
// java/io/DataOutputStream.writeLong.(J)V ($FFA0ZDY_10)
function $FFA0ZDY_10(b) {
 var re;
 var a,b,c;
 a=this;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 re=a.v9((((b.shiftRightUnsigned(56)).toInt())&255));
 U&&B0(10);
 re=a.v9((((b.shiftRightUnsigned(48)).toInt())&255));
 U&&B0(23);
 re=a.v9((((b.shiftRightUnsigned(40)).toInt())&255));
 U&&B0(36);
 re=a.v9((((b.shiftRightUnsigned(32)).toInt())&255));
 U&&B0(49);
 re=a.v9((((b.shiftRightUnsigned(24)).toInt())&255));
 U&&B0(62);
 re=a.v9((((b.shiftRightUnsigned(16)).toInt())&255));
 U&&B0(75);
 re=a.v9((((b.shiftRightUnsigned(8)).toInt())&255));
 U&&B0(88);
 re=a.v9((((b.shiftRightUnsigned(0)).toInt())&255));
 U&&B0(100);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$FFA0ZDY_10"] = {"osr":[]};
// java/io/DataOutputStream.writeUTF.(Ljava/lang/String;)V ($FFA0ZDY_14)
function $FFA0ZDY_14(b) {
 var k0=$FFA0ZDY,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(15)(b,a);
 if(U){$.B(2,5,[a,b],[],null);return;}
 return;
}
AOTMD["$FFA0ZDY_14"] = {"osr":[]};
// java/io/DataOutputStream.writeUTF.(Ljava/lang/String;Ljava/io/DataOutput;)I ($FFA0ZDY_15)
function $FFA0ZDY_15(a,b) {
 var k0=$FFA0ZDY,re;
 var a,b,c;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(16)(a);
 c=re;
 re=b.$GBUY0xZ(c);
 if(U){$.B(7,12,[a,b,c],[],null);return;}
 return (c.length);
}
AOTMD["$FFA0ZDY_15"] = {"osr":[]};
$FFA0ZDY.classSymbols = ["java/io/OutputStream", "java/io/DataOutputStream", "java/io/IOException", "java/io/DataOutput"];
// java/io/PrintStream extends java/io/OutputStream
function $FYqf4kT() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
}
// java/io/PrintStream.ensureOpen.()V ($FYqf4kT_1)
function $FYqf4kT_1() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((a.f1)!==null) {
 return;
 } else {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
}
AOTMD["$FYqf4kT_1"] = {"osr":[]};
// java/io/PrintStream.write.(Ljava/lang/String;)V ($FYqf4kT_9)
function $FYqf4kT_9(b) {
 var th=$.ctx.thread;
 var re,lk,k0=$FYqf4kT;
 var a,b,c,d;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===29) {
 c=A;
 pc=32;
 a.f0=1;
 return;
 } else if (pc===0) {
 A=a;
 B=A;
 c=B;
 pc=3;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(3,4,[a,b,c,d],[],null);return;}
 }
 pc=5;
 re=k0.m(1).call(a);
 pc=9;
 A=a.f1;
 pc=13;
 re=A.v12(b);
 if(U){$.B(13,16,[a,b,c,d],[],null);return;}
 pc=17;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 } else if (pc===21) {
 d=A;
 pc=23;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=25;
 throw d;
 A=d;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=4&&pc<18){pc=21;continue;}
 if(pc>=21&&pc<24){pc=21;continue;}
 if(pc>=0&&pc<26&&IOK(A,$G_yTb0tT)){pc=29;continue;}
 throw A;
 }
 }
}
AOTMD["$FYqf4kT_9"] = {"osr":[21]};
// java/io/PrintStream.newLine.()V ($FYqf4kT_10)
function $FYqf4kT_10() {
 var th=$.ctx.thread;
 var re,lk,k0=$FYqf4kT;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 A=a;
 B=A;
 b=B;
 pc=3;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(3,4,[a,b,c],[],null);return;}
 }
 pc=5;
 re=k0.m(1).call(a);
 pc=9;
 A=a.f1;
 pc=14;
 re=A.v9(10);
 if(U){$.B(14,17,[a,b,c],[],null);return;}
 pc=18;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 return;
 } else if (pc===22) {
 c=A;
 pc=24;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=26;
 throw c;
 A=c;
 } else if (pc===30) {
 b=A;
 pc=33;
 a.f0=1;
 return;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=4&&pc<19){pc=22;continue;}
 if(pc>=22&&pc<25){pc=22;continue;}
 if(pc>=0&&pc<27&&IOK(A,$G_yTb0tT)){pc=30;continue;}
 throw A;
 }
 }
}
AOTMD["$FYqf4kT_10"] = {"osr":[22]};
// java/io/PrintStream.print.(Ljava/lang/String;)V ($FYqf4kT_18)
function $FYqf4kT_18(b) {
 var k0=$FYqf4kT,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if (!(b!==null)) {
 b=k0.c(30);
 }
 re=k0.m(9).call(a,b);
 if(U){$.B(9,12,[a,b],[],null);return;}
 return;
}
AOTMD["$FYqf4kT_18"] = {"osr":[]};
// java/io/PrintStream.println.(Ljava/lang/String;)V ($FYqf4kT_28)
function $FYqf4kT_28(b) {
 var th=$.ctx.thread;
 var re,lk,k0=$FYqf4kT;
 var a,b,c,d;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 A=a;
 B=A;
 c=B;
 pc=3;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(3,4,[a,b,c,d],[],null);return;}
 }
 pc=6;
 re=a.v27(b);
 if(U){$.B(6,9,[a,b,c,d],[],null);return;}
 pc=10;
 re=k0.m(10).call(a);
 if(U){$.B(10,13,[a,b,c,d],[],null);return;}
 pc=14;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 } else if (pc===18) {
 d=A;
 pc=20;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=22;
 throw d;
 A=d;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=4&&pc<15){pc=18;continue;}
 if(pc>=18&&pc<21){pc=18;continue;}
 throw A;
 }
 }
}
AOTMD["$FYqf4kT_28"] = {"osr":[18]};
$FYqf4kT.classSymbols = ["java/io/PrintStream", "java/io/IOException", "java/io/Writer", "java/io/OutputStreamWriter"];
// java/io/Reader extends java/lang/Object
function $G_vatEkO() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// java/io/Reader.read.([C)I ($G_vatEkO_3)
function $G_vatEkO_3(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 re=a.v11(b,0,(b.length));
 if(U){$.B(5,8,[a,b],[],null);return;}
 return re;
}
AOTMD["$G_vatEkO_3"] = {"osr":[]};
$G_vatEkO.classSymbols = ["java/io/Reader"];
// com/sun/cldc/i18n/j2me/UTF_8_Reader extends com/sun/cldc/i18n/StreamReader
function $FTI37nj() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
}
// com/sun/cldc/i18n/j2me/UTF_8_Reader.read.([CII)I ($FTI37nj_4)
function $FTI37nj_4(b,c,d) {
 var re,k0=$FTI37nj;
 var a,b,c,d,e,f,g;
 a=this;
 var A,B,C,D;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 do {
 if (pc===0) {
 if (a.f3!==0) {
 re=a.v21(b,c,d);
 U&&B0(93);
 return re;
 } else {
 1024 < 0 && TN();
 e=new Int8Array(1024);
 if ($.initialized["java/io/ByteArrayOutputStream"] === undefined) { $.$G_svFbRd.classObject.initialize(); }
 A=new $G_svFbRd();
 re=$G_svFbRd.m(0).call((A));
 f=A;
 g=0;
 break;
 }
 } else if (pc===63) {
 g=A;
 pc=65;
 if ($.initialized["java/io/UnsupportedEncodingException"] === undefined) { $.$Fs4SITk.classObject.initialize(); }
 A=new $Fs4SITk();
 pc=69;
 B=A;
 C=k0.c(12);
 pc=71;
 re=$Fs4SITk.m(1).call(B,C);
 pc=74;
 throw A;
 } else if (!(pc===26)) {
 }
 } while(0);
 while(1) {
 pc=27;
 A=a.f2;
 pc=32;
 re=A.v10(e);
 U&&B0(32);
 A=re;
 B=A;
 g=B;
 if (A<=(-1)) {
 break;
 }
 pc=49;
 re=f.v11(e,0,g);
 U&&B0(49);
 }
 pc=57;
 re=f.v12();
 U&&B0(57);
 A=a;
 re=f.v15();
 U&&B1(78);
 re=k0.m(2).call(A,re);
 a.f3=1;
 re=a.v21(b,c,d);
 U&&B0(93);
 return re;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g],[A,B,C,D],null);return;}
 A=TE(ex);
 if(pc>=23&&pc<60&&IOK(A,$G_8od8BT)){pc=63;continue;}
 throw A;
 }
 }
}
AOTMD["$FTI37nj_4"] = {"osr":[26]};
$FTI37nj.classSymbols = ["com/sun/cldc/i18n/j2me/UTF_8_Reader", "java/io/ByteArrayOutputStream", "com/sun/cldc/i18n/StreamReader", "java/io/InputStream", "java/io/OutputStream", "java/io/UnsupportedEncodingException", "java/lang/Exception"];
// java/io/InputStreamReader extends java/io/Reader
function $G_rz_nOZ() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
}
// java/io/InputStreamReader.ensureOpen.()V ($G_rz_nOZ_2)
function $G_rz_nOZ_2() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((a.f2)!==null) {
 return;
 } else {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
}
AOTMD["$G_rz_nOZ_2"] = {"osr":[]};
// java/io/InputStreamReader.read.([CII)I ($G_rz_nOZ_4)
function $G_rz_nOZ_4(b,c,d) {
 var k0=$G_rz_nOZ,re;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 re=k0.m(2).call(a);
 if (!(c<0)) {
 if (!(c>(b.length))) {
 if (!(d<0)) {
 if (!((c+d|0)>(b.length))) {
 if ((c+d|0)>=0) {
 if (d!==0) {
 re=(a.f2).v11(b,c,d);
 U&&B0(53);
 return re;
 } else {
 return 0;
 }
 }
 }
 }
 }
 }
 if ($.initialized["java/lang/IndexOutOfBoundsException"] === undefined) { $.$F5KN_aj.classObject.initialize(); }
 A=new $F5KN_aj();
 re=$F5KN_aj.m(0).call((A));
 throw A;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_rz_nOZ_4"] = {"osr":[]};
$G_rz_nOZ.classSymbols = ["java/io/InputStreamReader", "java/io/IOException", "java/io/Reader", "java/lang/IndexOutOfBoundsException"];
// java/io/Writer extends java/lang/Object
function $G_InNtcO() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
}
// java/io/Writer.write.(I)V ($G_InNtcO_2)
function $G_InNtcO_2(b) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f2;
 B=A;
 c=B;
 pc=6;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c,d],[],null);return;}
 }
 pc=8;
 A=a.f0;
 if (!(A!==null)) {
 pc=18;
 1024 < 0 && TN();
 A=a;
 B=new Uint16Array(1024);
 pc=20;
 A.f0=B;
 }
 pc=24;
 A=a.f0;
 pc=30;
 if ((0 >>> 0) >= (A.length >>> 0)) TI(0);
 A[0] = b&0xffff;
 pc=33;
 A=a;
 B=a.f0;
 pc=38;
 re=A.v11(B,0,1);
 if(U){$.B(38,41,[a,b,c,d],[],null);return;}
 pc=42;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 } else if (pc===46) {
 d=A;
 pc=48;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=50;
 throw d;
 A=d;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=7&&pc<43){pc=46;continue;}
 if(pc>=46&&pc<49){pc=46;continue;}
 throw A;
 }
 }
}
AOTMD["$G_InNtcO_2"] = {"osr":[46]};
// java/io/Writer.write.(Ljava/lang/String;)V ($G_InNtcO_5)
function $G_InNtcO_5(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 A=a;
 B=b;
 C=0;
 re=b.v9();
 re=A.v13(B,C,re);
 if(U){$.B(7,10,[a,b],[],null);return;}
 return;
}
AOTMD["$G_InNtcO_5"] = {"osr":[]};
// java/io/Writer.write.(Ljava/lang/String;II)V ($G_InNtcO_6)
function $G_InNtcO_6(b,c,d) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f,g;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 A=a.f2;
 B=A;
 e=B;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(7,8,[a,b,c,d,e,f,g],[],null);return;}
 }
 if (d>1024) {
 pc=41;
 d < 0 && TN();
 A=new Uint16Array(d);
 f=A;
 } else {
 pc=16;
 A=a.f0;
 if (!(A!==null)) {
 pc=26;
 1024 < 0 && TN();
 A=a;
 B=new Uint16Array(1024);
 pc=28;
 A.f0=B;
 }
 pc=32;
 A=a.f0;
 f=A;
 }
 pc=53;
 re=b.v11(c,(c+d|0),f,0);
 pc=61;
 re=a.v11(f,0,d);
 if(U){$.B(61,64,[a,b,c,d,e,f,g],[],null);return;}
 pc=66;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 return;
 } else if (pc===70) {
 g=A;
 pc=74;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 pc=77;
 throw g;
 A=g;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=8&&pc<67){pc=70;continue;}
 if(pc>=70&&pc<75){pc=70;continue;}
 throw A;
 }
 }
}
AOTMD["$G_InNtcO_6"] = {"osr":[70]};
$G_InNtcO.classSymbols = ["java/io/Writer", "java/lang/String"];
// com/sun/cldc/i18n/j2me/UTF_8_Writer extends com/sun/cldc/i18n/StreamWriter
function $FX1flXj() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = null;
 this.f4 = 0;
}
// com/sun/cldc/i18n/j2me/UTF_8_Writer.write.([CII)V ($FX1flXj_1)
function $FX1flXj_1(b,c,d) {
 var k0=$FX1flXj,re;
 var a,b,c,d;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 A=a.f3;
 re=k0.m(2).call(a,b,c,d);
 re=A.v10(re);
 if(U){$.B(11,14,[a,b,c,d],[],null);return;}
 return;
}
AOTMD["$FX1flXj_1"] = {"osr":[]};
$FX1flXj.classSymbols = ["com/sun/cldc/i18n/StreamWriter", "com/sun/cldc/i18n/j2me/UTF_8_Writer", "java/io/OutputStream"];
// java/io/OutputStreamWriter extends java/io/Writer
function $GBnkRvRa() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = null;
}
// java/io/OutputStreamWriter.ensureOpen.()V ($GBnkRvRa_2)
function $GBnkRvRa_2() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((a.f3)!==null) {
 return;
 } else {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
}
AOTMD["$GBnkRvRa_2"] = {"osr":[]};
// java/io/OutputStreamWriter.write.(I)V ($GBnkRvRa_3)
function $GBnkRvRa_3(b) {
 var k0=$GBnkRvRa,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(2).call(a);
 re=(a.f3).v9(b);
 if(U){$.B(9,12,[a,b],[],null);return;}
 return;
}
AOTMD["$GBnkRvRa_3"] = {"osr":[]};
// java/io/OutputStreamWriter.write.(Ljava/lang/String;II)V ($GBnkRvRa_5)
function $GBnkRvRa_5(b,c,d) {
 var k0=$GBnkRvRa,re;
 var a,b,c,d;
 a=this;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 re=k0.m(2).call(a);
 if (!(c<0)) {
 A=c;
 re=b.v9();
 if (!(A>re)) {
 if (!(d<0)) {
 A=c+d|0;
 re=b.v9();
 if (!(A>re)) {
 if ((c+d|0)>=0) {
 if (d!==0) {
 re=(a.f3).v13(b,c,d);
 U&&B0(56);
 return;
 } else {
 return;
 }
 }
 }
 }
 }
 }
 if ($.initialized["java/lang/IndexOutOfBoundsException"] === undefined) { $.$F5KN_aj.classObject.initialize(); }
 A=new $F5KN_aj();
 re=$F5KN_aj.m(0).call((A));
 throw A;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GBnkRvRa_5"] = {"osr":[]};
$GBnkRvRa.classSymbols = ["java/io/OutputStreamWriter", "java/io/IOException", "java/io/Writer", "java/lang/String", "java/lang/IndexOutOfBoundsException"];
// java/lang/Boolean extends java/lang/Object
function $FOIIp0R() {
 this._hashCode = 0;
 this.f0 = 0;
}
// java/lang/Boolean.booleanValue.()Z ($FOIIp0R_1)
function $FOIIp0R_1() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$FOIIp0R_1"] = {"osr":[]};
// java/lang/Boolean.equals.(Ljava/lang/Object;)Z ($FOIIp0R_4)
function $FOIIp0R_4(b) {
 var k0=$FOIIp0R,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((IOK(b,k0)|0)===0) {
 return 0;
 }
 CCK(b,k0);
 A=a.f0;
 re=b.v9();
 if (A!==re) {
 A=0;
 return A;
 } else {
 A=1;
 return A;
 }
}
AOTMD["$FOIIp0R_4"] = {"osr":[]};
$FOIIp0R.classSymbols = ["java/lang/Boolean"];
// java/lang/Character extends java/lang/Object
function $G$WgS_KT() {
 this._hashCode = 0;
 this.f0 = 0;
}
// java/lang/Character.<init>.(C)V ($G$WgS_KT_0)
function $G$WgS_KT_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$G$WgS_KT_0"] = {"osr":[]};
// java/lang/Character.toString.()Ljava/lang/String; ($G$WgS_KT_4)
function $G$WgS_KT_4() {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 1 < 0 && TN();
 A=new Uint16Array(1);
 if ((0 >>> 0) >= (A.length >>> 0)) TI(0);
 A[0] = a.f0;
 b=A;
 re=$G_81POkQ.m(39)(b);
 return re;
}
AOTMD["$G$WgS_KT_4"] = {"osr":[]};
// java/lang/Character.isDigit.(C)Z ($G$WgS_KT_7)
function $G$WgS_KT_7(a) {
 var re;
 var a;
 var A;
 var pc=0;
 var label=0;
 if ($.initialized["com/sun/cldc/i18n/uclc/DefaultCaseConverter"] === undefined) { $.$G_NmYBMr.classObject.initialize(); }
 re=$G_NmYBMr.m(5)(a);
 return re;
}
AOTMD["$G$WgS_KT_7"] = {"osr":[]};
// java/lang/Character.toUpperCase.(C)C ($G$WgS_KT_9)
function $G$WgS_KT_9(a) {
 var re;
 var a;
 var A;
 var pc=0;
 var label=0;
 if ($.initialized["com/sun/cldc/i18n/uclc/DefaultCaseConverter"] === undefined) { $.$G_NmYBMr.classObject.initialize(); }
 re=$G_NmYBMr.m(4)(a);
 return re;
}
AOTMD["$G$WgS_KT_9"] = {"osr":[]};
// java/lang/Character.digit.(CI)I ($G$WgS_KT_10)
function $G$WgS_KT_10(a,b) {
 var re;
 var a,b;
 var A,B;
 var pc=0;
 var label=0;
 if ($.initialized["com/sun/cldc/i18n/uclc/DefaultCaseConverter"] === undefined) { $.$G_NmYBMr.classObject.initialize(); }
 re=$G_NmYBMr.m(6)(a,b);
 return re;
}
AOTMD["$G$WgS_KT_10"] = {"osr":[]};
$G$WgS_KT.classSymbols = ["java/lang/Object", "java/lang/Character", "java/lang/String", "com/sun/cldc/i18n/uclc/DefaultCaseConverter"];
// java/lang/Class extends java/lang/Object
function $FLrf5lP() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
}
// java/lang/Class.getResourceAsStream.(Ljava/lang/String;)Ljava/io/InputStream; ($FLrf5lP_13)
function $FLrf5lP_13(b) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 re=b.v9();
 A=re;
 if (A<=0) {
 label = 7;
 } else {
 pc=9;
 re=b.v10(0);
 A=re;
 if (A!==47) {
 label = 7;
 } else {
 pc=19;
 re=b.v26(1);
 A=re;
 b=A;
 }
 }
 if (label == 7) {
 pc=27;
 re=a.v16();
 A=re;
 c=A;
 pc=34;
 re=c.v22(46);
 A=re;
 d=A;
 if (!(d<0)) {
 pc=42;
 A=new $G_qRAz2W();
 pc=46;
 re=$G_qRAz2W.m(0).call((A));
 pc=54;
 re=c.v27(0,(d+1|0));
 B=re;
 pc=61;
 re=B.v29(46,47);
 B=re;
 pc=64;
 re=A.v19(B);
 A=re;
 pc=68;
 re=A.v19(b);
 A=re;
 pc=71;
 re=A.v3();
 A=re;
 b=A;
 }
 }
 pc=75;
 if ($.initialized["com/sun/cldc/io/ResourceInputStream"] === undefined) { $.$GBRpcdyj.classObject.initialize(); }
 A=new $GBRpcdyj();
 pc=80;
 re=$GBRpcdyj.m(1).call((A),b);
 U&&B1(80);
 pc=83;
 return A;
 } else if (pc===84) {
 c=A;
 pc=86;
 return null;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C,D,E],null);return;}
 A=TE(ex);
 if(pc>=0&&pc<83&&IOK(A,$G_yTb0tT)){pc=84;continue;}
 throw A;
 }
 }
}
AOTMD["$FLrf5lP_13"] = {"osr":[]};
// java/lang/Class.initialize.()V ($FLrf5lP_18)
function $FLrf5lP_18() {
 var th=$.ctx.thread;
 var re,lk,k0=$FLrf5lP;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===189) {
 e=A;
 pc=192;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=195;
 throw e;
 A=e;
 } else if (pc===199) {
 b=A;
 pc=203;
 a.f1=8;
 pc=208;
 a.f2=null;
 A=a;
 B=A;
 c=B;
 pc=214;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(214,215,[a,b,c,d,e,f],[],null);return;}
 }
 pc=216;
 re=a.v5();
 pc=221;
 re=k0.m(19).call(a,b);
 U&&B0(221);
 A=re;
 pc=226;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 } else if (pc===230) {
 f=A;
 pc=233;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=236;
 throw f;
 A=f;
 } else if (pc===0) {
 A=a;
 B=A;
 b=B;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(3,4,[a,b,c,d,e,f],[],null);return;}
 }
 } else if (pc===30) {
 c=A;
 } else if (pc===111) {
 d=A;
 pc=113;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=115;
 throw d;
 A=d;
 } else if (!(pc===4)) {
 }
 while(1) {
 pc=5;
 A=a.f1;
 if ((A&1)===0) {
 break;
 }
 pc=14;
 A=a.f2;
 pc=17;
 re=$GB3owdCQ.m(0)();
 B=re;
 if (A===B) {
 break;
 }
 pc=24;
 re=a.v8();
 U&&B0(24);
 }
 pc=35;
 A=a.f1;
 if (!((A&1)===0)) {
 pc=44;
 A=a.f2;
 pc=47;
 re=$GB3owdCQ.m(0)();
 B=re;
 if (!(A!==B)) {
 pc=54;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=55;
 return;
 }
 }
 pc=57;
 A=a.f1;
 if (!((A&4)===0)) {
 pc=66;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=67;
 return;
 }
 pc=69;
 A=a.f1;
 if (!(A!==8)) {
 pc=77;
 if ($.initialized["java/lang/NoClassDefFoundError"] === undefined) { $.$G$Ke3Abe.classObject.initialize(); }
 A=new $G$Ke3Abe();
 pc=82;
 B=A;
 re=a.v16();
 C=re;
 pc=85;
 re=$G$Ke3Abe.m(1).call(B,C);
 pc=88;
 throw A;
 }
 A=a;
 pc=91;
 B=(A).f1;
 pc=96;
 A.f1=B|1;
 pc=100;
 A=a;
 re=$GB3owdCQ.m(0)();
 B=re;
 pc=103;
 A.f2=B;
 pc=107;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=117;
 re=k0.m(17).call(a);
 pc=121;
 re=k0.m(14).call(a);
 A=re;
 b=A;
 if (!(b===null)) {
 pc=130;
 A=b.f1;
 if (!((A&4)!==0)) {
 pc=139;
 re=b.v22();
 U&&B0(139);
 }
 }
 pc=143;
 re=k0.m(15).call(a);
 U&&B0(143);
 A=a;
 B=A;
 c=B;
 pc=149;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(149,150,[a,b,c,d,e,f],[],null);return;}
 }
 A=a;
 pc=152;
 B=(A).f1;
 pc=158;
 A.f1=B&(-2);
 A=a;
 pc=163;
 B=(A).f1;
 pc=168;
 A.f1=B|4;
 pc=173;
 a.f2=null;
 pc=177;
 re=k0.m(16).call(a);
 pc=181;
 re=a.v5();
 pc=185;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=23&&pc<27&&IOK(A,$G_$ayCLe)){pc=30;continue;}
 if(pc>=4&&pc<55){pc=111;continue;}
 if(pc>=56&&pc<67){pc=111;continue;}
 if(pc>=68&&pc<108){pc=111;continue;}
 if(pc>=111&&pc<114){pc=111;continue;}
 if(pc>=150&&pc<186){pc=189;continue;}
 if(pc>=189&&pc<193){pc=189;continue;}
 if(pc>=116&&pc<196&&IOK(A,$G_VRHXsT)){pc=199;continue;}
 if(pc>=215&&pc<227){pc=230;continue;}
 if(pc>=230&&pc<234){pc=230;continue;}
 throw A;
 }
 }
}
AOTMD["$FLrf5lP_18"] = {"osr":[4,111,189,230]};
$FLrf5lP.classSymbols = ["java/lang/String", "java/lang/Class", "java/lang/StringBuffer", "com/sun/cldc/io/ResourceInputStream", "java/io/IOException", "java/lang/Thread", "java/lang/Object", "java/lang/NoClassDefFoundError", "java/lang/InterruptedException", "java/lang/Throwable"];
// java/lang/Integer extends java/lang/Object
function $G_HAwZDR() {
 this._hashCode = 0;
 this.f0 = 0;
}
// java/lang/Integer.toString.(II)Ljava/lang/String; ($G_HAwZDR_0)
function $G_HAwZDR_0(a,b) {
 var re;
 var a,b,c,d,e;
 var A,B,C,D,E,F;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===40)) {
 }
 if (label == 1) {
 if (b<2) {
 label = 3;
 } else {
 if (!(b<=36)) {
 label = 3;
 }
 }
 if (label == 3) {
 b=10;
 }
 33 < 0 && TN();
 c=new Uint16Array(33);
 if (a>=0) {
 A=0;
 } else {
 A=1;
 }
 d=A;
 e=32;
 if (!(d!==0)) {
 a=(- a)|0;
 }
 }
 while(1) {
 if (a>((- b)|0)) {
 break;
 }
 A=c;
 B=e;
 e+=-1;
 b === 0 && TA();
 if (((- (a%b))|0 >>> 0) >= ($.$G_HAwZDR.s2.length >>> 0)) TI((- (a%b))|0);
 if ((B >>> 0) >= (A.length >>> 0)) TI(B);
 A[B] = $.$G_HAwZDR.s2[(- (a%b))|0];
 b === 0 && TA();
 a=a/b|0;
 }
 if (((- a)|0 >>> 0) >= ($.$G_HAwZDR.s2.length >>> 0)) TI((- a)|0);
 if ((e >>> 0) >= (c.length >>> 0)) TI(e);
 c[e] = $.$G_HAwZDR.s2[(- a)|0];
 if (d===0) {
 A=new $G_81POkQ();
 re=$G_81POkQ.m(3).call((A),c,e,(33-e|0));
 return A;
 }
 A=c;
 e+=-1;
 if ((e >>> 0) >= (A.length >>> 0)) TI(e);
 A[e] = 45;
 A=new $G_81POkQ();
 re=$G_81POkQ.m(3).call((A),c,e,(33-e|0));
 return A;
}
AOTMD["$G_HAwZDR_0"] = {"osr":[40]};
// java/lang/Integer.toHexString.(I)Ljava/lang/String; ($G_HAwZDR_1)
function $G_HAwZDR_1(a) {
 var k0=$G_HAwZDR,re;
 var a;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(4)(a,4);
 if(U){$.B(2,5,[a],[],null);return;}
 return re;
}
AOTMD["$G_HAwZDR_1"] = {"osr":[]};
// java/lang/Integer.toUnsignedString.(II)Ljava/lang/String; ($G_HAwZDR_4)
function $G_HAwZDR_4(a,b) {
 var re;
 var a,b,c,d,e,f;
 var A,B,C,D,E,F;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 32 < 0 && TN();
 c=new Uint16Array(32);
 d=32;
 e=1<<b;
 f=e-1|0;
 } else if (!(pc===19)) {
 }
 while(1) {
 A=c;
 d+=-1;
 if ((a&f >>> 0) >= ($.$G_HAwZDR.s2.length >>> 0)) TI(a&f);
 if ((d >>> 0) >= (A.length >>> 0)) TI(d);
 A[d] = $.$G_HAwZDR.s2[a&f];
 a=a>>>b;
 if (!(a!==0)) {
 break;
 }
 }
 A=new $G_81POkQ();
 re=$G_81POkQ.m(3).call((A),c,d,(32-d|0));
 return A;
}
AOTMD["$G_HAwZDR_4"] = {"osr":[19]};
// java/lang/Integer.toString.(I)Ljava/lang/String; ($G_HAwZDR_5)
function $G_HAwZDR_5(a) {
 var k0=$G_HAwZDR,re;
 var a;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(0)(a,10);
 if(U){$.B(3,6,[a],[],null);return;}
 return re;
}
AOTMD["$G_HAwZDR_5"] = {"osr":[]};
// java/lang/Integer.parseInt.(Ljava/lang/String;I)I ($G_HAwZDR_6)
function $G_HAwZDR_6(a,b) {
 var re;
 var a,b,c,d,e,f,g,h,i;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===128)) {
 }
 do {
 if (label == 1) {
 if (!(a!==null)) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 if (!(b>=2)) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 if (!(b<=36)) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 c=0;
 d=0;
 e=0;
 re=a.v9();
 f=re;
 if (f<=0) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 re=a.v10(0);
 if (re!==45) {
 g=-2147483647;
 } else {
 d=1;
 g=-2147483648;
 e+=1;
 }
 b === 0 && TA();
 h=g/b|0;
 if (!(e>=f)) {
 A=a;
 B=e;
 e+=1;
 re=A.v10(B);
 re=$G$WgS_KT.m(10)(re,b);
 i=re;
 if (i>=0) {
 c=(- i)|0;
 break;
 } else {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 }
 }
 } while(0);
 while(1) {
 if (e>=f) {
 label = 23;
 break;
 }
 A=a;
 B=e;
 e+=1;
 re=A.v10(B);
 re=$G$WgS_KT.m(10)(re,b);
 i=re;
 if (!(i>=0)) {
 label = 17;
 break;
 }
 if (!(c>=h)) {
 label = 19;
 break;
 }
 c=Math.imul(c,b);
 if (!(c>=(g+i|0))) {
 label = 21;
 break;
 }
 c=c-i|0;
 }
 if (label == 17) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 else if (label == 19) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 else if (label == 21) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 }
 else if (label == 23) {
 if (d===0) {
 return ((- c)|0);
 }
 if (e<=1) {
 if ($.initialized["java/lang/NumberFormatException"] === undefined) { $.$GBpy4UDf.classObject.initialize(); }
 A=new $GBpy4UDf();
 re=$GBpy4UDf.m(0).call((A));
 throw A;
 } else {
 return c;
 }
 }
}
AOTMD["$G_HAwZDR_6"] = {"osr":[128]};
// java/lang/Integer.parseInt.(Ljava/lang/String;)I ($G_HAwZDR_7)
function $G_HAwZDR_7(a) {
 var k0=$G_HAwZDR,re;
 var a;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(6)(a,10);
 if(U){$.B(3,6,[a],[],null);return;}
 return re;
}
AOTMD["$G_HAwZDR_7"] = {"osr":[]};
// java/lang/Integer.<init>.(I)V ($G_HAwZDR_10)
function $G_HAwZDR_10(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$G_HAwZDR_10"] = {"osr":[]};
// java/lang/Integer.intValue.()I ($G_HAwZDR_13)
function $G_HAwZDR_13() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$G_HAwZDR_13"] = {"osr":[]};
// java/lang/Integer.hashCode.()I ($G_HAwZDR_18)
function $G_HAwZDR_18() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$G_HAwZDR_18"] = {"osr":[]};
// java/lang/Integer.equals.(Ljava/lang/Object;)Z ($G_HAwZDR_19)
function $G_HAwZDR_19(b) {
 var k0=$G_HAwZDR,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((IOK(b,k0)|0)===0) {
 return 0;
 }
 CCK(b,k0);
 A=a.f0;
 re=b.v11();
 if (A!==re) {
 A=0;
 return A;
 } else {
 A=1;
 return A;
 }
}
AOTMD["$G_HAwZDR_19"] = {"osr":[]};
$G_HAwZDR.classSymbols = ["java/lang/Integer", "java/lang/String", "java/lang/NumberFormatException", "java/lang/Character", "java/lang/Object"];
// java/lang/Long extends java/lang/Object
function $G$tnWvIO() {
 this._hashCode = 0;
 this.f0 = Long.ZERO;
}
// java/lang/Long.<init>.(J)V ($G$tnWvIO_4)
function $G$tnWvIO_4(b) {
 var re;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$G$tnWvIO_4"] = {"osr":[]};
// java/lang/Long.longValue.()J ($G$tnWvIO_5)
function $G$tnWvIO_5() {
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$G$tnWvIO_5"] = {"osr":[]};
// java/lang/Long.hashCode.()I ($G$tnWvIO_9)
function $G$tnWvIO_9() {
 var a;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 return (((a.f0).xor(((a.f0).shiftRight(32)))).toInt());
}
AOTMD["$G$tnWvIO_9"] = {"osr":[]};
// java/lang/Long.equals.(Ljava/lang/Object;)Z ($G$tnWvIO_10)
function $G$tnWvIO_10(b) {
 var k0=$G$tnWvIO,re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 if ((IOK(b,k0)|0)===0) {
 return 0;
 }
 CCK(b,k0);
 A=a.f0;
 B=undefined;
 re=b.v9();
 if(A.greaterThan(re)){
 A=1
 }else if(A.lessThan(re)){
 A=-1
 }else{
 A=0
 }
 if (A!==0) {
 A=0;
 return A;
 } else {
 A=1;
 return A;
 }
}
AOTMD["$G$tnWvIO_10"] = {"osr":[]};
$G$tnWvIO.classSymbols = ["java/lang/Object", "java/lang/Long"];
// java/lang/Math extends java/lang/Object
function $GB7HgX9O() {
 this._hashCode = 0;
}
// java/lang/Math.abs.(I)I ($GB7HgX9O_9)
function $GB7HgX9O_9(a) {
 var a;
 var A;
 var pc=0;
 var label=0;
 if (a>=0) {
 A=a;
 } else {
 A=(- a)|0;
 }
 return A;
}
AOTMD["$GB7HgX9O_9"] = {"osr":[]};
// java/lang/Math.max.(II)I ($GB7HgX9O_13)
function $GB7HgX9O_13(a,b) {
 var a,b;
 var A,B;
 var pc=0;
 var label=0;
 if (a<b) {
 A=b;
 } else {
 A=a;
 }
 return A;
}
AOTMD["$GB7HgX9O_13"] = {"osr":[]};
$GB7HgX9O.classSymbols = [];
// java/lang/ref/Reference extends java/lang/Object
function $F5vHRqX() {
 this._hashCode = 0;
}
// java/lang/ref/Reference.<init>.(Ljava/lang/Object;)V ($F5vHRqX_2)
function $F5vHRqX_2(b) {
 var re;
 var a,b;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 return;
}
AOTMD["$F5vHRqX_2"] = {"osr":[]};
$F5vHRqX.classSymbols = ["java/lang/Object"];
// java/lang/ref/WeakReference extends java/lang/ref/Reference
function $FC1J49b() {
 this._hashCode = 0;
 this.f0 = 0;
}
// java/lang/ref/WeakReference.<init>.(Ljava/lang/Object;)V ($FC1J49b_2)
function $FC1J49b_2(b) {
 var re,k0=$FC1J49b;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$F5vHRqX.m(2).call(a,b);
 re=k0.m(3).call(a,b);
 return;
}
AOTMD["$FC1J49b_2"] = {"osr":[]};
$FC1J49b.classSymbols = ["java/lang/ref/Reference", "java/lang/ref/WeakReference"];
// java/lang/String extends java/lang/Object
function $G_81POkQ() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
}
// java/lang/String.valueOf.(Ljava/lang/Object;)Ljava/lang/String; ($G_81POkQ_38)
function $G_81POkQ_38(a) {
 var k0=$G_81POkQ,re;
 var a;
 var A;
 var pc=0;
 var label=0;
 if (a!==null) {
 re=a.v3();
 if(U){$.B(10,13,[a],[],null);return;}
 A=re;
 return A;
 } else {
 A=k0.c(32);
 return A;
 }
}
AOTMD["$G_81POkQ_38"] = {"osr":[]};
$G_81POkQ.classSymbols = ["java/lang/Object"];
// java/lang/StringBuffer extends java/lang/Object
function $G_qRAz2W() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
}
// java/lang/StringBuffer.append.(Ljava/lang/Object;)Ljava/lang/StringBuffer; ($G_qRAz2W_12)
function $G_qRAz2W_12(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 A=a;
 re=$G_81POkQ.m(38)(b);
 if(U){$.B(2,5,[a,b],[A],null);return;}
 re=A.v19(re);
 return re;
}
AOTMD["$G_qRAz2W_12"] = {"osr":[]};
$G_qRAz2W.classSymbols = ["java/lang/String", "java/lang/StringBuffer"];
// java/lang/System extends java/lang/Object
function $GBEt6NdQ() {
 this._hashCode = 0;
}
// java/lang/System.getProperty.(Ljava/lang/String;)Ljava/lang/String; ($GBEt6NdQ_4)
function $GBEt6NdQ_4(a) {
 var re,k0=$GBEt6NdQ;
 var a,b;
 var A,B,C,D;
 var pc=0;
 var label=0;
 if (!(a!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 re=a.v2(k0.c(4));
 if (re===0) {
 if ($.initialized["java/util/PropertyPermission"] === undefined) { $.$G_tXHEIc.classObject.initialize(); }
 A=new $G_tXHEIc();
 re=$G_tXHEIc.m(1).call((A),a,k0.c(9));
 b=A;
 if ($.initialized["java/security/AccessController"] === undefined) { $.$G_y85Ore.classObject.initialize(); }
 re=$G_y85Ore.m(1)(b);
 re=k0.m(5)(a);
 return re;
 } else {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
}
AOTMD["$GBEt6NdQ_4"] = {"osr":[]};
$GBEt6NdQ.classSymbols = ["java/lang/NullPointerException", "java/lang/String", "java/lang/IllegalArgumentException", "java/util/PropertyPermission", "java/security/AccessController", "java/lang/System"];
// java/lang/Thread extends java/lang/Object
function $GB3owdCQ() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
}
// java/lang/Thread.nextThreadNum.()I ($GB3owdCQ_1)
function $GB3owdCQ_1() {
 var th=$.ctx.thread;
 var lk;
 var A,B;
 var pc=0;
 lk=$.$GB3owdCQ.classObject._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME($.$GB3owdCQ.classObject);
 if(U){$.B(0,0,[],[],$.$GB3owdCQ.classObject);return;}
 }
 try{
 var label=0;
 A=($.$GB3owdCQ.s9)+1|0;
 $.$GB3owdCQ.s9=A;
 if($.$GB3owdCQ.classObject._lock.level===1&&$.$GB3owdCQ.classObject._lock.ready.length===0)$.$GB3owdCQ.classObject._lock.level=0;else MX($.$GB3owdCQ.classObject);
 return A;
 }catch(ex){
 A=TE(ex);
 if($.$GB3owdCQ.classObject._lock.level===1&&$.$GB3owdCQ.classObject._lock.ready.length===0)$.$GB3owdCQ.classObject._lock.level=0;else MX($.$GB3owdCQ.classObject);
 throw A;
 }
}
AOTMD["$GB3owdCQ_1"] = {"osr":[]};
// java/lang/Thread.init.(Ljava/lang/Runnable;Ljava/lang/String;)V ($GB3owdCQ_4)
function $GB3owdCQ_4(b,c) {
 var k0=$GB3owdCQ,re;
 var a,b,c,d;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(0)();
 d=re;
 a.f1=b;
 A=a;
 re=c.v33();
 A.f5=re;
 if (!(d===null)) {
 A=a;
 re=d.v16();
 A.f0=re;
 }
 re=a.v15((a.f0));
 return;
}
AOTMD["$GB3owdCQ_4"] = {"osr":[]};
// java/lang/Thread.<init>.()V ($GB3owdCQ_5)
function $GB3owdCQ_5() {
 var re,k0=$GB3owdCQ;
 var a;
 a=this;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 re=undefined;
 a.f0=5;
 A=a;
 B=null;
 C=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((C));
 re=C.v19(k0.c(12));
 C=re;
 re=k0.m(1)();
 U&&B3(23);
 re=C.v24(re);
 U&&B2(26);
 re=re.v3();
 re=k0.m(4).call(A,B,re);
 return;
 }catch(ex){
 if(U){$.T(ex,[a],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GB3owdCQ_5"] = {"osr":[]};
// java/lang/Thread.start.()V ($GB3owdCQ_9)
function $GB3owdCQ_9() {
 var th=$.ctx.thread;
 var lk,k0=$GB3owdCQ,re;
 var a;
 a=this;
 var A;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 re=k0.m(10)(a);
 if(U){$.B(1,4,[a],[],a);return;}
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return;
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GB3owdCQ_9"] = {"osr":[]};
// java/lang/Thread.start.(Ljava/lang/Thread;)V ($GB3owdCQ_10)
function $GB3owdCQ_10(a) {
 var th=$.ctx.thread;
 var lk,k0=$GB3owdCQ,re;
 var a;
 var A;
 var pc=0;
 lk=$.$GB3owdCQ.classObject._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME($.$GB3owdCQ.classObject);
 if(U){$.B(0,0,[a],[],$.$GB3owdCQ.classObject);return;}
 }
 try{
 var label=0;
 re=k0.m(11).call(a);
 if(U){$.B(1,4,[a],[],$.$GB3owdCQ.classObject);return;}
 if($.$GB3owdCQ.classObject._lock.level===1&&$.$GB3owdCQ.classObject._lock.ready.length===0)$.$GB3owdCQ.classObject._lock.level=0;else MX($.$GB3owdCQ.classObject);
 return;
 }catch(ex){
 A=TE(ex);
 if($.$GB3owdCQ.classObject._lock.level===1&&$.$GB3owdCQ.classObject._lock.ready.length===0)$.$GB3owdCQ.classObject._lock.level=0;else MX($.$GB3owdCQ.classObject);
 throw A;
 }
}
AOTMD["$GB3owdCQ_10"] = {"osr":[]};
// java/lang/Thread.setPriority.(I)V ($GB3owdCQ_15)
function $GB3owdCQ_15(b) {
 var re,k0=$GB3owdCQ;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if (!(b>10)) {
 if (b>=1) {
 re=a.v22();
 re=k0.m(21).call(a,(a.f0),b);
 a.f0=b;
 return;
 }
 }
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
}
AOTMD["$GB3owdCQ_15"] = {"osr":[]};
// java/lang/Thread.getPriority.()I ($GB3owdCQ_16)
function $GB3owdCQ_16() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$GB3owdCQ_16"] = {"osr":[]};
// java/lang/Thread.checkAccess.()V ($GB3owdCQ_24)
function $GB3owdCQ_24() {
 var k0=$GB3owdCQ,re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if ($.initialized["java/lang/RuntimePermission"] === undefined) { $.$GBALYoZb.classObject.initialize(); }
 A=new $GBALYoZb();
 re=$GBALYoZb.m(0).call((A),k0.c(36));
 b=A;
 if ($.initialized["java/security/AccessController"] === undefined) { $.$G_y85Ore.classObject.initialize(); }
 re=$G_y85Ore.m(1)(b);
 return;
}
AOTMD["$GB3owdCQ_24"] = {"osr":[]};
$GB3owdCQ.classSymbols = ["java/lang/Thread", "java/lang/String", "java/lang/Object", "java/lang/StringBuffer", "java/lang/IllegalArgumentException", "java/lang/RuntimePermission", "java/security/AccessController"];
// com/nokia/mid/ui/TextEditorThread extends java/lang/Thread
function $G$AyIxnh() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
}
// com/nokia/mid/ui/TextEditorThread.run.()V ($G$AyIxnh_2)
function $G$AyIxnh_2() {
 var re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (!(pc===0)) {
 }
 while(1) {
 re=a.v23();
 if(U){$.B(1,4,[a,b],[],null);return;}
 b=re;
 if (!((b.f1)===null)) {
 re=(b.f1).$G_vBLa4(b,1);
 if(U){$.B(18,23,[a,b],[],null);return;}
 }
 }
}
AOTMD["$G$AyIxnh_2"] = {"osr":[0]};
$G$AyIxnh.classSymbols = ["com/nokia/mid/ui/TextEditorThread", "com/nokia/mid/ui/TextEditor", "com/nokia/mid/ui/TextEditorListener"];
// java/lang/Throwable extends java/lang/Object
function $G_VRHXsT() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// java/lang/Throwable.<init>.()V ($G_VRHXsT_0)
function $G_VRHXsT_0() {
 var re,k0=$G_VRHXsT;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 re=k0.m(7).call(a);
 return;
}
AOTMD["$G_VRHXsT_0"] = {"osr":[]};
// java/lang/Throwable.<init>.(Ljava/lang/String;)V ($G_VRHXsT_1)
function $G_VRHXsT_1(b) {
 var re,k0=$G_VRHXsT;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 re=k0.m(7).call(a);
 a.f0=b;
 return;
}
AOTMD["$G_VRHXsT_1"] = {"osr":[]};
$G_VRHXsT.classSymbols = ["java/lang/Object", "java/lang/Throwable"];
// java/lang/Exception extends java/lang/Throwable
function $G_8od8BT() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
}
// java/lang/Exception.<init>.()V ($G_8od8BT_0)
function $G_8od8BT_0() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=$G_VRHXsT.m(0).call(a);
 return;
}
AOTMD["$G_8od8BT_0"] = {"osr":[]};
// java/lang/Exception.<init>.(Ljava/lang/String;)V ($G_8od8BT_1)
function $G_8od8BT_1(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$G_VRHXsT.m(1).call(a,b);
 return;
}
AOTMD["$G_8od8BT_1"] = {"osr":[]};
$G_8od8BT.classSymbols = ["java/lang/Throwable"];
// java/security/AccessController extends java/lang/Object
function $G_y85Ore() {
 this._hashCode = 0;
}
// java/security/AccessController.checkPermission.(Ljava/security/Permission;)V ($G_y85Ore_1)
function $G_y85Ore_1(a) {
 var a;
 var pc=0;
 var label=0;
 return;
}
AOTMD["$G_y85Ore_1"] = {"osr":[]};
$G_y85Ore.classSymbols = [];
// java/security/Permission extends java/lang/Object
function $FJHYa5Y() {
 this._hashCode = 0;
 this.f0 = null;
}
// java/security/Permission.<init>.(Ljava/lang/String;)V ($FJHYa5Y_0)
function $FJHYa5Y_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 return;
}
AOTMD["$FJHYa5Y_0"] = {"osr":[]};
// java/security/Permission.getName.()Ljava/lang/String; ($FJHYa5Y_4)
function $FJHYa5Y_4() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$FJHYa5Y_4"] = {"osr":[]};
$FJHYa5Y.classSymbols = ["java/lang/Object", "java/security/Permission"];
// java/security/BasicPermission extends java/security/Permission
function $Fzu2iVd() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
}
// java/security/BasicPermission.init.(Ljava/lang/String;)V ($Fzu2iVd_0)
function $Fzu2iVd_0(b) {
 var k0=$Fzu2iVd,re;
 var a,b,c,d;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 if (!(b!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(1).call((A),k0.c(2));
 throw A;
 }
 re=b.v9();
 c=re;
 if (!(c!==0)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(1).call((A),k0.c(6));
 throw A;
 }
 re=b.v10((c-1|0));
 d=re;
 do {
 if (!(d!==42)) {
 if (!(c===1)) {
 re=b.v10((c-2|0));
 if (re!==46) {
 break;
 }
 }
 a.f1=1;
 if (c!==1) {
 A=a;
 re=b.v27(0,(c-1|0));
 A.f2=re;
 return;
 } else {
 a.f2=k0.c(10);
 return;
 }
 }
 } while(0);
 a.f2=b;
 return;
}
AOTMD["$Fzu2iVd_0"] = {"osr":[]};
// java/security/BasicPermission.<init>.(Ljava/lang/String;)V ($Fzu2iVd_1)
function $Fzu2iVd_1(b) {
 var re,k0=$Fzu2iVd;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$FJHYa5Y.m(0).call(a,b);
 re=k0.m(0).call(a,b);
 return;
}
AOTMD["$Fzu2iVd_1"] = {"osr":[]};
// java/security/BasicPermission.<init>.(Ljava/lang/String;Ljava/lang/String;)V ($Fzu2iVd_2)
function $Fzu2iVd_2(b,c) {
 var re,k0=$Fzu2iVd;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$FJHYa5Y.m(0).call(a,b);
 re=k0.m(0).call(a,b);
 return;
}
AOTMD["$Fzu2iVd_2"] = {"osr":[]};
$Fzu2iVd.classSymbols = ["java/lang/NullPointerException", "java/lang/String", "java/lang/IllegalArgumentException", "java/security/BasicPermission", "java/security/Permission"];
// java/lang/RuntimePermission extends java/security/BasicPermission
function $GBALYoZb() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
}
// java/lang/RuntimePermission.<init>.(Ljava/lang/String;)V ($GBALYoZb_0)
function $GBALYoZb_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=$Fzu2iVd.m(1).call(a,b);
 return;
}
AOTMD["$GBALYoZb_0"] = {"osr":[]};
$GBALYoZb.classSymbols = ["java/security/BasicPermission"];
// com/sun/cldc/util/j2me/CalendarImpl extends java/util/Calendar
function $G$O1Tqkj() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = Long.ZERO;
 this.f3 = 0;
 this.f4 = null;
}
// com/sun/cldc/util/j2me/CalendarImpl.floorDivide.(II[I)I ($G$O1Tqkj_15)
function $G$O1Tqkj_15(a,b,c) {
 var a,b,c,d;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 if (a<0) {
 b === 0 && TA();
 d=((a+1|0)/b|0)-1|0;
 if ((0 >>> 0) >= (c.length >>> 0)) TI(0);
 c[0] = a-(Math.imul(d,b))|0;
 return d;
 } else {
 b === 0 && TA();
 if ((0 >>> 0) >= (c.length >>> 0)) TI(0);
 c[0] = a%b;
 b === 0 && TA();
 return (a/b|0);
 }
}
AOTMD["$G$O1Tqkj_15"] = {"osr":[]};
$G$O1Tqkj.classSymbols = [];
// java/util/Hashtable$HashtableEnumerator extends java/lang/Object
function $FanH9Mn() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = null;
 this.f4 = null;
}
// java/util/Hashtable$HashtableEnumerator.hasMoreElements.()Z ($FanH9Mn_1)
function $FanH9Mn_1() {
 var a;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 if (!((a.f3)===null)) {
 return 1;
 }
 while(1) {
 A=a;
 B=(A).f1;
 var t0=B;
 var t1=A;
 t1.f1=t0-1|0;
 if (t0<=0) {
 label = 6;
 break;
 }
 if ((a.f1 >>> 0) >= (a.f2.length >>> 0)) TI(a.f1);
 A=a;
 B=a.f2[a.f1];
 var t0=B;
 var t1=A;
 t1.f3=t0;
 if (!(t0===null)) {
 label = 5;
 break;
 }
 }
 if (label == 5) {
 return 1;
 }
 else if (label == 6) {
 return 0;
 }
}
AOTMD["$FanH9Mn_1"] = {"osr":[]};
// java/util/Hashtable$HashtableEnumerator.nextElement.()Ljava/lang/Object; ($FanH9Mn_2)
function $FanH9Mn_2() {
 var re;
 var a,b;
 a=this;
 var A,B,C,D;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===7) {
 label = 2;
 } else if (pc===0) {
 if (!((a.f3)!==null)) {
 label = 2;
 }
 } else {
 }
 L4: do {
 if (label == 2) {
 while(1) {
 label = 0;
 A=a;
 B=(A).f1;
 var t0=B;
 var t1=A;
 t1.f1=t0-1|0;
 if (t0<=0) {
 break L4;
 }
 if ((a.f1 >>> 0) >= (a.f2.length >>> 0)) TI(a.f1);
 A=a;
 B=a.f2[a.f1];
 var t0=B;
 var t1=A;
 t1.f3=t0;
 if (t0!==null) {
 break L4;
 }
 label = 2;
 }
 }
 } while(0);
 if ((a.f3)===null) {
 if ($.initialized["java/util/NoSuchElementException"] === undefined) { $.$GBq8ejtg.classObject.initialize(); }
 A=new $GBq8ejtg();
 re=$GBq8ejtg.m(0).call((A));
 throw A;
 }
 b=a.f3;
 a.f3=b.f3;
 if (a.f0===0) {
 A=b.f2;
 return A;
 } else {
 A=b.f1;
 return A;
 }
}
AOTMD["$FanH9Mn_2"] = {"osr":[7]};
$FanH9Mn.classSymbols = ["java/util/Hashtable$HashtableEnumerator", "java/util/HashtableEntry", "java/util/NoSuchElementException"];
// java/util/Hashtable extends java/lang/Object
function $F_ZoE_T() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
}
// java/util/Hashtable.<init>.(I)V ($F_ZoE_T_0)
function $F_ZoE_T_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=undefined;
 if (!(b>=0)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 if (!(b!==0)) {
 b=1;
 }
 b < 0 && TN();
 a.f0=NA($G_K31uLY,b);
 100 === 0 && TA();
 a.f2=(Math.imul(b,75))/100|0;
 return;
}
AOTMD["$F_ZoE_T_0"] = {"osr":[]};
// java/util/Hashtable.<init>.()V ($F_ZoE_T_1)
function $F_ZoE_T_1() {
 var k0=$F_ZoE_T,re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(0).call(a,11);
 return;
}
AOTMD["$F_ZoE_T_1"] = {"osr":[]};
// java/util/Hashtable.containsKey.(Ljava/lang/Object;)Z ($F_ZoE_T_7)
function $F_ZoE_T_7(b) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 c=a.f0;
 re=b.v1();
 if(U){$.B(6,9,[a,b,c,d,e,f],[],null);return;}
 d=re;
 (c.length) === 0 && TA();
 e=(d&2147483647)%(c.length);
 if ((e >>> 0) >= (c.length >>> 0)) TI(e);
 f=c[e];
 } else if (!(pc===25)) {
 }
 while(1) {
 if (f===null) {
 label = 7;
 break;
 }
 if (!((f.f0)!==d)) {
 re=(f.f1).v2(b);
 if(U){$.B(45,48,[a,b,c,d,e,f],[],null);return;}
 if (!(re===0)) {
 label = 5;
 break;
 }
 }
 f=f.f3;
 }
 if (label == 5) {
 return 1;
 }
 else if (label == 7) {
 return 0;
 }
}
AOTMD["$F_ZoE_T_7"] = {"osr":[25]};
// java/util/Hashtable.get.(Ljava/lang/Object;)Ljava/lang/Object; ($F_ZoE_T_8)
function $F_ZoE_T_8(b) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 c=a.f0;
 re=b.v1();
 if(U){$.B(6,9,[a,b,c,d,e,f],[],null);return;}
 d=re;
 (c.length) === 0 && TA();
 e=(d&2147483647)%(c.length);
 if ((e >>> 0) >= (c.length >>> 0)) TI(e);
 f=c[e];
 } else if (!(pc===25)) {
 }
 while(1) {
 if (f===null) {
 label = 7;
 break;
 }
 if (!((f.f0)!==d)) {
 re=(f.f1).v2(b);
 if(U){$.B(45,48,[a,b,c,d,e,f],[],null);return;}
 if (!(re===0)) {
 label = 5;
 break;
 }
 }
 f=f.f3;
 }
 if (label == 5) {
 return (f.f2);
 }
 else if (label == 7) {
 return null;
 }
}
AOTMD["$F_ZoE_T_8"] = {"osr":[25]};
// java/util/Hashtable.rehash.()V ($F_ZoE_T_9)
function $F_ZoE_T_9() {
 var a,b,c,d,e,f,g,h,i;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 b=(a.f0).length;
 c=a.f0;
 d=(Math.imul(b,2))+1|0;
 d < 0 && TN();
 e=NA($G_K31uLY,d);
 100 === 0 && TA();
 a.f2=(Math.imul(d,75))/100|0;
 a.f0=e;
 f=b;
 while(1) {
 A=f;
 f+=-1;
 if (A<=0) {
 break;
 }
 if ((f >>> 0) >= (c.length >>> 0)) TI(f);
 g=c[f];
 while(1) {
 if (g===null) {
 break;
 }
 h=g;
 g=g.f3;
 d === 0 && TA();
 i=((h.f0)&2147483647)%d;
 if ((i >>> 0) >= (e.length >>> 0)) TI(i);
 h.f3=e[i];
 if ((i >>> 0) >= (e.length >>> 0)) TI(i);
 CAS(e, h);
 e[i] = h;
 }
 }
 return;
}
AOTMD["$F_ZoE_T_9"] = {"osr":[]};
// java/util/Hashtable.put.(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; ($F_ZoE_T_10)
function $F_ZoE_T_10(b,c) {
 var re;
 var a,b,c,d,e,f,g,h;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7];
 pc=O.pc;
 O=null;
 }
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===39)) {
 }
 do {
 if (label == 1) {
 if (c!==null) {
 d=a.f0;
 re=b.v1();
 U&&B0(18);
 e=re;
 (d.length) === 0 && TA();
 f=(e&2147483647)%(d.length);
 if ((f >>> 0) >= (d.length >>> 0)) TI(f);
 g=d[f];
 break;
 } else {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 }
 } while(0);
 while(1) {
 if (g===null) {
 break;
 }
 if (!((g.f0)!==e)) {
 re=(g.f1).v2(b);
 U&&B0(60);
 if (!(re===0)) {
 label = 7;
 break;
 }
 }
 g=g.f3;
 }
 if (label == 7) {
 h=g.f2;
 g.f2=c;
 return h;
 }
 if ((a.f1)<(a.f2)) {
 A=new $G_K31uLY();
 re=$G_K31uLY.m(0).call((A));
 g=A;
 g.f0=e;
 g.f1=b;
 g.f2=c;
 if ((f >>> 0) >= (d.length >>> 0)) TI(f);
 g.f3=d[f];
 if ((f >>> 0) >= (d.length >>> 0)) TI(f);
 CAS(d, g);
 d[f] = g;
 A=a;
 A.f1=((A).f1)+1|0;
 return null;
 } else {
 re=a.v16();
 U&&B0(104);
 re=a.v17(b,c);
 U&&B0(110);
 return re;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$F_ZoE_T_10"] = {"osr":[39]};
// java/util/Hashtable.clear.()V ($F_ZoE_T_12)
function $F_ZoE_T_12() {
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 b=a.f0;
 c=b.length;
 while(1) {
 c+=-1;
 if (c<0) {
 break;
 }
 if ((c >>> 0) >= (b.length >>> 0)) TI(c);
 CAS(b, null);
 b[c] = null;
 }
 a.f1=0;
 return;
}
AOTMD["$F_ZoE_T_12"] = {"osr":[]};
$F_ZoE_T.classSymbols = ["java/lang/Object", "java/lang/IllegalArgumentException", "java/util/HashtableEntry", "java/util/Hashtable", "java/lang/NullPointerException"];
// java/util/HashtableEntry extends java/lang/Object
function $G_K31uLY() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = null;
 this.f2 = null;
 this.f3 = null;
}
// java/util/HashtableEntry.<init>.()V ($G_K31uLY_0)
function $G_K31uLY_0() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 return;
}
AOTMD["$G_K31uLY_0"] = {"osr":[]};
$G_K31uLY.classSymbols = ["java/lang/Object"];
// java/util/PropertyPermission extends java/security/BasicPermission
function $G_tXHEIc() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = null;
}
// java/util/PropertyPermission.init.(I)V ($G_tXHEIc_0)
function $G_tXHEIc_0(b) {
 var k0=$G_tXHEIc,re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if (!((b&3)===b)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(1).call((A),k0.c(2));
 throw A;
 }
 if (!(b!==0)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(1).call((A),k0.c(2));
 throw A;
 }
 re=a.v10();
 if (re!==null) {
 a.f3=b;
 return;
 } else {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(1).call((A),k0.c(6));
 throw A;
 }
}
AOTMD["$G_tXHEIc_0"] = {"osr":[]};
// java/util/PropertyPermission.<init>.(Ljava/lang/String;Ljava/lang/String;)V ($G_tXHEIc_1)
function $G_tXHEIc_1(b,c) {
 var re,k0=$G_tXHEIc;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=$Fzu2iVd.m(2).call(a,b,c);
 A=a;
 re=k0.m(5)(c);
 re=k0.m(0).call(A,re);
 return;
}
AOTMD["$G_tXHEIc_1"] = {"osr":[]};
// java/util/PropertyPermission.getMask.(Ljava/lang/String;)I ($G_tXHEIc_5)
function $G_tXHEIc_5(a) {
 var re,k0=$G_tXHEIc;
 var a,b,c,d,e;
 var A,B,C,D;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===24)) {
 }
 if (label == 1) {
 b=0;
 if (!(a!==null)) {
 return b;
 }
 re=a.v33();
 c=re;
 d=(c.length)-1|0;
 if (!(d>=0)) {
 return b;
 }
 }
 while(1) {
 if (d===(-1)) {
 label = 35;
 break;
 }
 do {
 if (d<3) {
 label = 16;
 } else {
 if ((d-3|0 >>> 0) >= (c.length >>> 0)) TI(d-3|0);
 if (!((c[d-3|0])===114)) {
 if ((d-3|0 >>> 0) >= (c.length >>> 0)) TI(d-3|0);
 if ((c[d-3|0])!==82) {
 label = 16;
 break;
 }
 }
 if ((d-2|0 >>> 0) >= (c.length >>> 0)) TI(d-2|0);
 if (!((c[d-2|0])===101)) {
 if ((d-2|0 >>> 0) >= (c.length >>> 0)) TI(d-2|0);
 if ((c[d-2|0])!==69) {
 label = 16;
 break;
 }
 }
 if ((d-1|0 >>> 0) >= (c.length >>> 0)) TI(d-1|0);
 if (!((c[d-1|0])===97)) {
 if ((d-1|0 >>> 0) >= (c.length >>> 0)) TI(d-1|0);
 if ((c[d-1|0])!==65) {
 label = 16;
 break;
 }
 }
 if ((d >>> 0) >= (c.length >>> 0)) TI(d);
 if (!((c[d])===100)) {
 if ((d >>> 0) >= (c.length >>> 0)) TI(d);
 if ((c[d])!==68) {
 label = 16;
 break;
 }
 }
 e=4;
 b=b|1;
 }
 } while(0);
 if (label == 16) {
 label = 0;
 if (d<4) {
 label = 34;
 break;
 }
 if ((d-4|0 >>> 0) >= (c.length >>> 0)) TI(d-4|0);
 if (!((c[d-4|0])===119)) {
 if ((d-4|0 >>> 0) >= (c.length >>> 0)) TI(d-4|0);
 if ((c[d-4|0])!==87) {
 label = 34;
 break;
 }
 }
 if ((d-3|0 >>> 0) >= (c.length >>> 0)) TI(d-3|0);
 if (!((c[d-3|0])===114)) {
 if ((d-3|0 >>> 0) >= (c.length >>> 0)) TI(d-3|0);
 if ((c[d-3|0])!==82) {
 label = 34;
 break;
 }
 }
 if ((d-2|0 >>> 0) >= (c.length >>> 0)) TI(d-2|0);
 if (!((c[d-2|0])===105)) {
 if ((d-2|0 >>> 0) >= (c.length >>> 0)) TI(d-2|0);
 if ((c[d-2|0])!==73) {
 label = 34;
 break;
 }
 }
 if ((d-1|0 >>> 0) >= (c.length >>> 0)) TI(d-1|0);
 if (!((c[d-1|0])===116)) {
 if ((d-1|0 >>> 0) >= (c.length >>> 0)) TI(d-1|0);
 if ((c[d-1|0])!==84) {
 label = 34;
 break;
 }
 }
 if ((d >>> 0) >= (c.length >>> 0)) TI(d);
 if (!((c[d])===101)) {
 if ((d >>> 0) >= (c.length >>> 0)) TI(d);
 if ((c[d])!==69) {
 label = 34;
 break;
 }
 }
 e=5;
 b=b|2;
 }
 if (!(d<e)) {
 if (d<=e) {
 label = 32;
 break;
 }
 if ((d-e|0 >>> 0) >= (c.length >>> 0)) TI(d-e|0);
 if ((c[d-e|0])!==44) {
 label = 32;
 break;
 }
 d+=-1;
 }
 d=d-e|0;
 }
 if (label == 32) {
 A=new $GBhP0Jpi();
 B=A;
 C=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((C));
 re=C.v19(k0.c(19));
 re=re.v19(a);
 re=re.v3();
 re=$GBhP0Jpi.m(1).call(B,re);
 throw A;
 }
 else if (label == 34) {
 A=new $GBhP0Jpi();
 B=A;
 C=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((C));
 re=C.v19(k0.c(19));
 re=re.v19(a);
 re=re.v3();
 re=$GBhP0Jpi.m(1).call(B,re);
 throw A;
 }
 else if (label == 35) {
 return b;
 }
}
AOTMD["$G_tXHEIc_5"] = {"osr":[24]};
// java/util/PropertyPermission.getActions.(I)Ljava/lang/String; ($G_tXHEIc_6)
function $G_tXHEIc_6(a) {
 var re,k0=$G_tXHEIc;
 var a,b,c;
 var A,B;
 var pc=0;
 var label=0;
 A=new $G_qRAz2W();
 re=$G_qRAz2W.m(0).call((A));
 b=A;
 c=0;
 if (!((a&1)!==1)) {
 c=1;
 re=b.v19(k0.c(22));
 }
 if ((a&2)!==2) {
 re=b.v3();
 return re;
 }
 if (c===0) {
 c=1;
 } else {
 re=b.v23(44);
 }
 re=b.v19(k0.c(24));
 re=b.v3();
 return re;
}
AOTMD["$G_tXHEIc_6"] = {"osr":[]};
$G_tXHEIc.classSymbols = ["java/lang/IllegalArgumentException", "java/security/Permission", "java/lang/NullPointerException", "java/util/PropertyPermission", "java/security/BasicPermission", "java/lang/String", "java/lang/StringBuffer"];
// java/util/Vector extends java/lang/Object
function $G$K6gi9Q() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
}
// java/util/Vector.<init>.(II)V ($G$K6gi9Q_0)
function $G$K6gi9Q_0(b,c) {
 var re;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 if (b>=0) {
 b < 0 && TN();
 a.f0=NA($G_qyIrdQ,b);
 a.f2=c;
 return;
 } else {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
}
AOTMD["$G$K6gi9Q_0"] = {"osr":[]};
// java/util/Vector.<init>.(I)V ($G$K6gi9Q_1)
function $G$K6gi9Q_1(b) {
 var k0=$G$K6gi9Q,re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=k0.m(0).call(a,b,0);
 return;
}
AOTMD["$G$K6gi9Q_1"] = {"osr":[]};
// java/util/Vector.<init>.()V ($G$K6gi9Q_2)
function $G$K6gi9Q_2() {
 var k0=$G$K6gi9Q,re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(1).call(a,10);
 return;
}
AOTMD["$G$K6gi9Q_2"] = {"osr":[]};
// java/util/Vector.copyInto.([Ljava/lang/Object;)V ($G$K6gi9Q_3)
function $G$K6gi9Q_3(b) {
 var a,b,c;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 c=a.f1;
 while(1) {
 A=c;
 c+=-1;
 if (A<=0) {
 break;
 }
 if ((c >>> 0) >= (a.f0.length >>> 0)) TI(c);
 if ((c >>> 0) >= (b.length >>> 0)) TI(c);
 CAS(b, a.f0[c]);
 b[c] = a.f0[c];
 }
 return;
}
AOTMD["$G$K6gi9Q_3"] = {"osr":[]};
// java/util/Vector.ensureCapacityHelper.(I)V ($G$K6gi9Q_6)
function $G$K6gi9Q_6(b) {
 var re;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 c=(a.f0).length;
 d=a.f0;
 if (a.f2<=0) {
 A=Math.imul(c,2);
 } else {
 A=c+(a.f2)|0;
 }
 e=A;
 if (!(e>=b)) {
 e=b;
 }
 e < 0 && TN();
 a.f0=NA($G_qyIrdQ,e);
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 if(U){$.B(61,61,[a,b,c,d,e],[d,0,a.f0,0,a.f1],null);return;}
 re=$GBEt6NdQ.m(2)(d,0,(a.f0),0,(a.f1));
 return;
}
AOTMD["$G$K6gi9Q_6"] = {"osr":[]};
// java/util/Vector.setSize.(I)V ($G$K6gi9Q_7)
function $G$K6gi9Q_7(b) {
 var re,k0=$G$K6gi9Q;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (!(pc===27)) {
 }
 if (label == 1) {
 if (!(b<=(a.f1))) {
 if (!(b<=((a.f0).length))) {
 re=k0.m(6).call(a,b);
 a.f1=b;
 return;
 }
 }
 c=b;
 }
 while(1) {
 if (c>=(a.f1)) {
 break;
 }
 if ((c >>> 0) >= (a.f0.length >>> 0)) TI(c);
 CAS(a.f0, null);
 a.f0[c] = null;
 c+=1;
 }
 a.f1=b;
 return;
}
AOTMD["$G$K6gi9Q_7"] = {"osr":[27]};
// java/util/Vector.size.()I ($G$K6gi9Q_9)
function $G$K6gi9Q_9() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f1);
}
AOTMD["$G$K6gi9Q_9"] = {"osr":[]};
// java/util/Vector.isEmpty.()Z ($G$K6gi9Q_10)
function $G$K6gi9Q_10() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 if (a.f1!==0) {
 A=0;
 } else {
 A=1;
 }
 return A;
}
AOTMD["$G$K6gi9Q_10"] = {"osr":[]};
// java/util/Vector.elements.()Ljava/util/Enumeration; ($G$K6gi9Q_11)
function $G$K6gi9Q_11() {
 var re;
 var a;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if ($.initialized["java/util/VectorEnumerator"] === undefined) { $.$GBhVjMka.classObject.initialize(); }
 A=new $GBhVjMka();
 re=$GBhVjMka.m(0).call((A),a);
 return A;
}
AOTMD["$G$K6gi9Q_11"] = {"osr":[]};
// java/util/Vector.indexOf.(Ljava/lang/Object;)I ($G$K6gi9Q_13)
function $G$K6gi9Q_13(b) {
 var re;
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=a.v20(b,0);
 if(U){$.B(3,6,[a,b],[],null);return;}
 return re;
}
AOTMD["$G$K6gi9Q_13"] = {"osr":[]};
// java/util/Vector.indexOf.(Ljava/lang/Object;I)I ($G$K6gi9Q_14)
function $G$K6gi9Q_14(b,c) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 label = 1;
 } else if (pc===36) {
 label = 9;
 } else if (!(pc===6)) {
 }
 do {
 if (label == 1) {
 if (b!==null) {
 d=c;
 label = 9;
 break;
 } else {
 d=c;
 break;
 }
 }
 } while(0);
 if (label == 9) {
 while(1) {
 label = 0;
 if (d>=(a.f1)) {
 label = 13;
 break;
 }
 if ((d >>> 0) >= (a.f0.length >>> 0)) TI(d);
 re=b.v2((a.f0[d]));
 if(U){$.B(51,54,[a,b,c,d],[],null);return;}
 if (!(re===0)) {
 label = 11;
 break;
 }
 d+=1;
 label = 9;
 }
 if (label == 11) {
 return d;
 }
 else if (label == 13) {
 return (-1);
 }
 }
 while(1) {
 if (d>=(a.f1)) {
 break;
 }
 if ((d >>> 0) >= (a.f0.length >>> 0)) TI(d);
 if (!((a.f0[d])!==null)) {
 label = 5;
 break;
 }
 d+=1;
 }
 if (label == 5) {
 return d;
 }
 return (-1);
}
AOTMD["$G$K6gi9Q_14"] = {"osr":[6,36]};
// java/util/Vector.elementAt.(I)Ljava/lang/Object; ($G$K6gi9Q_17)
function $G$K6gi9Q_17(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if (b<(a.f1)) {
 if ((b >>> 0) >= (a.f0.length >>> 0)) TI(b);
 return (a.f0[b]);
 } else {
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }
}
AOTMD["$G$K6gi9Q_17"] = {"osr":[]};
// java/util/Vector.setElementAt.(Ljava/lang/Object;I)V ($G$K6gi9Q_20)
function $G$K6gi9Q_20(b,c) {
 var re;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if (c<(a.f1)) {
 if ((c >>> 0) >= (a.f0.length >>> 0)) TI(c);
 CAS(a.f0, b);
 a.f0[c] = b;
 return;
 } else {
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }
}
AOTMD["$G$K6gi9Q_20"] = {"osr":[]};
// java/util/Vector.removeElementAt.(I)V ($G$K6gi9Q_21)
function $G$K6gi9Q_21(b) {
 var re;
 var a,b,c;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 try{
 var label=0;
 if (!(b<(a.f1))) {
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }
 if (!(b>=0)) {
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }
 c=((a.f1)-b|0)-1|0;
 if (c<=0) {
 A=a;
 A.f1=((A).f1)-1|0;
 if ((a.f1 >>> 0) >= (a.f0.length >>> 0)) TI(a.f1);
 CAS(a.f0, null);
 a.f0[a.f1] = null;
 return;
 }
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 A=a.f0;
 B=b+1|0;
 C=a.f0;
 D=b;
 E=c;
 U&&B5(54,54);
 re=$GBEt6NdQ.m(2)(A,B,C,D,E);
 A=a;
 A.f1=((A).f1)-1|0;
 if ((a.f1 >>> 0) >= (a.f0.length >>> 0)) TI(a.f1);
 CAS(a.f0, null);
 a.f0[a.f1] = null;
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B,C,D,E],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$K6gi9Q_21"] = {"osr":[]};
// java/util/Vector.insertElementAt.(Ljava/lang/Object;I)V ($G$K6gi9Q_22)
function $G$K6gi9Q_22(b,c) {
 var k0=$G$K6gi9Q,re;
 var a,b,c,d;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 try{
 var label=0;
 d=(a.f1)+1|0;
 if (!(c<0)) {
 if (c<d) {
 if (!(d<=((a.f0).length))) {
 re=k0.m(6).call(a,d);
 }
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 A=a.f0;
 B=c;
 C=a.f0;
 D=c+1|0;
 E=(a.f1)-c|0;
 U&&B5(56,56);
 re=$GBEt6NdQ.m(2)(A,B,C,D,E);
 if ((c >>> 0) >= (a.f0.length >>> 0)) TI(c);
 CAS(a.f0, b);
 a.f0[c] = b;
 A=a;
 A.f1=((A).f1)+1|0;
 return;
 }
 }
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C,D,E,F],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$K6gi9Q_22"] = {"osr":[]};
// java/util/Vector.addElement.(Ljava/lang/Object;)V ($G$K6gi9Q_23)
function $G$K6gi9Q_23(b) {
 var k0=$G$K6gi9Q,re;
 var a,b,c;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var label=0;
 c=(a.f1)+1|0;
 if (!(c<=((a.f0).length))) {
 re=k0.m(6).call(a,c);
 }
 A=a.f0;
 B=a;
 C=(B).f1;
 var t0=C;
 var t1=B;
 t1.f1=t0+1|0;
 if ((t0 >>> 0) >= (A.length >>> 0)) TI(t0);
 CAS(A, b);
 A[t0] = b;
 return;
}
AOTMD["$G$K6gi9Q_23"] = {"osr":[]};
// java/util/Vector.removeElement.(Ljava/lang/Object;)Z ($G$K6gi9Q_24)
function $G$K6gi9Q_24(b) {
 var re;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=a.v19(b);
 if(U){$.B(2,5,[a,b,c],[],null);return;}
 c=re;
 if (c<0) {
 return 0;
 } else {
 re=a.v27(c);
 if(U){$.B(12,15,[a,b,c],[],null);return;}
 return 1;
 }
}
AOTMD["$G$K6gi9Q_24"] = {"osr":[]};
// java/util/Vector.removeAllElements.()V ($G$K6gi9Q_25)
function $G$K6gi9Q_25() {
 var a,b;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 b=0;
 while(1) {
 if (b>=(a.f1)) {
 break;
 }
 if ((b >>> 0) >= (a.f0.length >>> 0)) TI(b);
 CAS(a.f0, null);
 a.f0[b] = null;
 b+=1;
 }
 a.f1=0;
 return;
}
AOTMD["$G$K6gi9Q_25"] = {"osr":[]};
$G$K6gi9Q.classSymbols = ["java/lang/Object", "java/lang/IllegalArgumentException", "java/util/Vector", "java/lang/System", "java/util/VectorEnumerator", "java/lang/ArrayIndexOutOfBoundsException"];
// java/util/Stack extends java/util/Vector
function $FCkyhrP() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
}
// java/util/Stack.empty.()Z ($FCkyhrP_4)
function $FCkyhrP_4() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=a.v15();
 if(U){$.B(1,4,[a],[],null);return;}
 if (re!==0) {
 A=0;
 return A;
 } else {
 A=1;
 return A;
 }
}
AOTMD["$FCkyhrP_4"] = {"osr":[]};
$FCkyhrP.classSymbols = ["java/util/Vector"];
// java/util/VectorEnumerator extends java/lang/Object
function $GBhVjMka() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
}
// java/util/VectorEnumerator.<init>.(Ljava/util/Vector;)V ($GBhVjMka_0)
function $GBhVjMka_0(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 a.f1=0;
 return;
}
AOTMD["$GBhVjMka_0"] = {"osr":[]};
// java/util/VectorEnumerator.hasMoreElements.()Z ($GBhVjMka_1)
function $GBhVjMka_1() {
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((a.f1)>=((a.f0).f1)) {
 A=0;
 } else {
 A=1;
 }
 return A;
}
AOTMD["$GBhVjMka_1"] = {"osr":[]};
$GBhVjMka.classSymbols = ["java/lang/Object", "java/util/VectorEnumerator", "java/util/Vector"];
// javax/microedition/io/Connector extends java/lang/Object
function $GBfMb36f() {
 this._hashCode = 0;
}
// javax/microedition/io/Connector.open.(Ljava/lang/String;I)Ljavax/microedition/io/Connection; ($GBfMb36f_2)
function $GBfMb36f_2(a,b) {
 var k0=$GBfMb36f,re;
 var a,b;
 var A,B,C;
 var pc=0;
 var label=0;
 re=k0.m(3)(a,b,0);
 if(U){$.B(3,6,[a,b],[],null);return;}
 return re;
}
AOTMD["$GBfMb36f_2"] = {"osr":[]};
// javax/microedition/io/Connector.open.(Ljava/lang/String;IZ)Ljavax/microedition/io/Connection; ($GBfMb36f_3)
function $GBfMb36f_3(a,b,c) {
 var k0=$GBfMb36f,re;
 var a,b,c,d;
 var A,B,C;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=3;
 re=k0.m(5)(a,b,c);
 if(U){$.B(3,6,[a,b,c,d],[],null);return;}
 A=re;
 pc=6;
 return A;
 } else if (pc===7) {
 d=A;
 pc=8;
 if ($.initialized["javax/microedition/io/ConnectionNotFoundException"] === undefined) { $.$G_XgaH$x.classObject.initialize(); }
 A=new $G_XgaH$x();
 pc=12;
 re=$G_XgaH$x.m(0).call((A));
 pc=15;
 throw A;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=0&&pc<6&&IOK(A,$G_yxhMUg)){pc=7;continue;}
 throw A;
 }
 }
}
AOTMD["$GBfMb36f_3"] = {"osr":[]};
// javax/microedition/io/Connector.checkProtocolName.(Ljava/lang/String;)V ($GBfMb36f_4)
function $GBfMb36f_4(a) {
 var re,k0=$GBfMb36f;
 var a,b,c,d;
 var A,B,C;
 var pc=0;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 re=a.v33();
 b=re;
 c=0;
 } else if (!(pc===7)) {
 }
 L4: while(1) {
 if (c>=(b.length)) {
 label = 16;
 break;
 }
 if ((c >>> 0) >= (b.length >>> 0)) TI(c);
 d=b[c];
 if (65>d) {
 label = 5;
 } else {
 if (!(d<=90)) {
 label = 5;
 }
 }
 do {
 if (label == 5) {
 label = 0;
 if (!(97>d)) {
 if (d<=122) {
 break;
 }
 }
 if (c<=0) {
 label = 15;
 break L4;
 }
 if (!(48>d)) {
 if (d<=57) {
 break;
 }
 }
 if (!(d===43)) {
 if (!(d===45)) {
 if (d!==46) {
 label = 15;
 break L4;
 }
 }
 }
 }
 } while(0);
 c+=1;
 }
 if (label == 15) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(1).call((A),k0.c(10));
 throw A;
 }
 else if (label == 16) {
 return;
 }
}
AOTMD["$GBfMb36f_4"] = {"osr":[7]};
// javax/microedition/io/Connector.openPrim.(Ljava/lang/String;IZ)Ljavax/microedition/io/Connection; ($GBfMb36f_5)
function $GBfMb36f_5(a,b,c) {
 var re,k0=$GBfMb36f;
 var a,b,c,d,e,f,g;
 var A,B,C,D;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 if (!(b===1)) {
 if (!(b===2)) {
 if (!(b===3)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 }
 }
 if (!(a!==null)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 re=a.v20(58);
 d=re;
 if (!(d>=1)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 pc=58;
 re=a.v27(0,d);
 A=re;
 e=A;
 pc=65;
 re=k0.m(4)(e);
 pc=72;
 re=a.v26((d+1|0));
 A=re;
 a=A;
 pc=82;
 re=e.v29(45,95);
 A=re;
 e=A;
 pc=87;
 A=new $G_qRAz2W();
 pc=91;
 re=$G_qRAz2W.m(0).call((A));
 pc=94;
 B=$.$GBfMb36f.s4;
 pc=97;
 re=A.v19(B);
 A=re;
 pc=100;
 B=k0.c(22);
 pc=102;
 re=A.v19(B);
 A=re;
 pc=105;
 B=$.$GBfMb36f.s3;
 pc=108;
 re=A.v19(B);
 A=re;
 pc=111;
 B=k0.c(22);
 pc=113;
 re=A.v19(B);
 A=re;
 pc=118;
 re=A.v19(e);
 A=re;
 pc=121;
 B=k0.c(24);
 pc=123;
 re=A.v19(B);
 A=re;
 pc=126;
 re=A.v3();
 A=re;
 pc=129;
 re=$FLrf5lP.m(2)(A);
 U&&B0(129);
 A=re;
 f=A;
 pc=200;
 re=f.v9();
 U&&B0(200);
 A=re;
 pc=203;
 CCI(A,$G_bByMnn);
 g=A;
 pc=213;
 re=g.$Fi8fi1(a,b,c);
 U&&B0(213,218);
 A=re;
 pc=218;
 return A;
 } else if (pc===137) {
 g=A;
 pc=139;
 A=$.$GBfMb36f.s5;
 if (A===null) {
 pc=197;
 throw g;
 A=g;
 }
 pc=145;
 A=new $G_qRAz2W();
 pc=149;
 re=$G_qRAz2W.m(0).call((A));
 pc=152;
 B=$.$GBfMb36f.s5;
 pc=155;
 re=A.v19(B);
 A=re;
 pc=158;
 B=k0.c(22);
 pc=160;
 re=A.v19(B);
 A=re;
 pc=163;
 B=$.$GBfMb36f.s3;
 pc=166;
 re=A.v19(B);
 A=re;
 pc=169;
 B=k0.c(22);
 pc=171;
 re=A.v19(B);
 A=re;
 pc=176;
 re=A.v19(e);
 A=re;
 pc=179;
 B=k0.c(24);
 pc=181;
 re=A.v19(B);
 A=re;
 pc=184;
 re=A.v3();
 A=re;
 pc=187;
 re=$FLrf5lP.m(2)(A);
 U&&B0(187);
 A=re;
 f=A;
 pc=200;
 re=f.v9();
 U&&B0(200);
 A=re;
 pc=203;
 CCI(A,$G_bByMnn);
 g=A;
 pc=213;
 re=g.$Fi8fi1(a,b,c);
 U&&B0(213,218);
 A=re;
 pc=218;
 return A;
 } else if (pc===239) {
 e=A;
 pc=241;
 A=new $G_yTb0tT();
 pc=245;
 re=$G_yTb0tT.m(0).call((A));
 pc=248;
 throw A;
 } else if (pc===229) {
 e=A;
 pc=231;
 A=new $G_yTb0tT();
 pc=235;
 re=$G_yTb0tT.m(0).call((A));
 pc=238;
 throw A;
 } else if (pc===219) {
 e=A;
 pc=221;
 A=new $G_yTb0tT();
 pc=225;
 re=$G_yTb0tT.m(0).call((A));
 pc=228;
 throw A;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g],[A,B,C,D],null);return;}
 A=TE(ex);
 if(pc>=87&&pc<134&&IOK(A,$G_yxhMUg)){pc=137;continue;}
 if(pc>=55&&pc<218&&IOK(A,$GB9zXfug)){pc=219;continue;}
 if(pc>=55&&pc<218&&IOK(A,$Fqzb1Vg)){pc=229;continue;}
 if(pc>=55&&pc<218&&IOK(A,$GBioA0Ic)){pc=239;continue;}
 throw A;
 }
 }
}
AOTMD["$GBfMb36f_5"] = {"osr":[]};
$GBfMb36f.classSymbols = ["javax/microedition/io/Connector", "javax/microedition/io/ConnectionNotFoundException", "java/lang/ClassNotFoundException", "java/lang/String", "java/lang/IllegalArgumentException", "java/lang/StringBuffer", "java/lang/Class", "com/sun/cldc/io/ConnectionBaseInterface", "java/io/IOException", "java/lang/InstantiationException", "java/lang/IllegalAccessException", "java/lang/ClassCastException"];
// javax/microedition/lcdui/Display$DisplayAccessImpl extends java/lang/Object
function $GBg9Y71y() {
 this._hashCode = 0;
 this.f0 = Long.ZERO;
 this.f1 = null;
 this.f2 = null;
}
// javax/microedition/lcdui/Display$DisplayAccessImpl.getDisplayId.()I ($GBg9Y71y_9)
function $GBg9Y71y_9() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f2).f2);
}
AOTMD["$GBg9Y71y_9"] = {"osr":[]};
// javax/microedition/lcdui/Display$DisplayAccessImpl.getDisplayEventConsumer.()Lcom/sun/midp/lcdui/DisplayEventConsumer; ($GBg9Y71y_12)
function $GBg9Y71y_12() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return ((a.f2).f10);
}
AOTMD["$GBg9Y71y_12"] = {"osr":[]};
$GBg9Y71y.classSymbols = ["javax/microedition/lcdui/Display$DisplayAccessImpl", "javax/microedition/lcdui/Display"];
// javax/microedition/lcdui/Display$DisplayEventConsumerImpl extends java/lang/Object
function $Fn5VUs5() {
 this._hashCode = 0;
 this.f0 = null;
}
// javax/microedition/lcdui/Display$DisplayEventConsumerImpl.handleKeyEvent.(II)V ($Fn5VUs5_3)
function $Fn5VUs5_3(b,c) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(4,4,[a,b,c,d],[a.f0],null);return;}
 re=$GBsDr4Ag.m(49)((a.f0));
 d=re;
 if (d===null) {
 return;
 }
 re=d.$F$xXM2(b,c);
 if(U){$.B(15,20,[a,b,c,d],[],null);return;}
 return;
}
AOTMD["$Fn5VUs5_3"] = {"osr":[]};
// javax/microedition/lcdui/Display$DisplayEventConsumerImpl.handlePointerEvent.(III)V ($Fn5VUs5_5)
function $Fn5VUs5_5(b,c,d) {
 var re;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D;
 var pc=0;
 var label=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(4,4,[a,b,c,d,e],[a.f0],null);return;}
 re=$GBsDr4Ag.m(49)((a.f0));
 e=re;
 if (e===null) {
 return;
 }
 re=e.$GBOTI4S(b,c,d);
 if(U){$.B(19,24,[a,b,c,d,e],[],null);return;}
 return;
}
AOTMD["$Fn5VUs5_5"] = {"osr":[]};
// javax/microedition/lcdui/Display$DisplayEventConsumerImpl.handleRepaintEvent.(IIIILjava/lang/Object;)V ($Fn5VUs5_8)
function $Fn5VUs5_8(b,c,d,e,f) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var label=0;
 re=(a.f0).v33(b,c,d,e,f);
 if(U){$.B(11,14,[a,b,c,d,e,f],[],null);return;}
 return;
}
AOTMD["$Fn5VUs5_8"] = {"osr":[]};
// javax/microedition/lcdui/Display$DisplayEventConsumerImpl.handleCallSeriallyEvent.()V ($Fn5VUs5_15)
function $Fn5VUs5_15() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(4,4,[a],[a.f0],null);return;}
 re=$GBsDr4Ag.m(53)((a.f0));
 if(U){$.B(4,7,[a],[],null);return;}
 return;
}
AOTMD["$Fn5VUs5_15"] = {"osr":[]};
$Fn5VUs5.classSymbols = ["javax/microedition/lcdui/Display$DisplayEventConsumerImpl", "javax/microedition/lcdui/Display", "javax/microedition/lcdui/DisplayableLF"];
// javax/microedition/lcdui/Display extends java/lang/Object
function $GBsDr4Ag() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = null;
 this.f4 = 0;
 this.f5 = 0;
 this.f6 = 0;
 this.f7 = 0;
 this.f8 = null;
 this.f9 = null;
 this.f10 = null;
 this.f11 = null;
 this.f12 = null;
 this.f13 = 0;
 this.f14 = 0;
 this.f15 = null;
 this.f16 = 0;
 this.f17 = null;
 this.f18 = null;
 this.f19 = null;
 this.f20 = null;
 this.f21 = 0;
}
// javax/microedition/lcdui/Display.getCurrent.()Ljavax/microedition/lcdui/Displayable; ($GBsDr4Ag_11)
function $GBsDr4Ag_11() {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=0;
 A=$.$GBsDr4Ag.s9;
 B=A;
 b=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b,c],[],null);return;}
 }
 pc=7;
 A=a.f18;
 if (A!==null) {
 pc=37;
 A=a.f18;
 pc=41;
 B=a.f17;
 if (A!==B) {
 pc=52;
 A=a.f18;
 pc=55;
 re=A.$G_aYxg2();
 if(U){$.B(55,60,[a,b,c],[],null);return;}
 A=re;
 pc=61;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=62;
 return A;
 } else {
 pc=49;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 A=null;
 pc=50;
 return A;
 }
 } else {
 pc=14;
 A=a.f19;
 if (A!==null) {
 pc=25;
 A=a.f19;
 pc=28;
 re=A.$G_aYxg2();
 if(U){$.B(28,33,[a,b,c],[],null);return;}
 A=re;
 pc=34;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=35;
 return A;
 } else {
 pc=22;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 A=null;
 pc=23;
 return A;
 }
 }
 } else if (pc===63) {
 c=A;
 pc=65;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=67;
 throw c;
 A=c;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<23){pc=63;continue;}
 if(pc>=24&&pc<35){pc=63;continue;}
 if(pc>=36&&pc<50){pc=63;continue;}
 if(pc>=51&&pc<62){pc=63;continue;}
 if(pc>=63&&pc<66){pc=63;continue;}
 throw A;
 }
 }
}
AOTMD["$GBsDr4Ag_11"] = {"osr":[63]};
// javax/microedition/lcdui/Display.callSerially.(Ljava/lang/Runnable;)V ($GBsDr4Ag_15)
function $GBsDr4Ag_15(b) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===40) {
 d=A;
 pc=42;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=44;
 throw d;
 A=d;
 } else if (pc===0) {
 if (!(b!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 pc=12;
 A=$.$GBsDr4Ag.s9;
 B=A;
 c=B;
 pc=17;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(17,18,[a,b,c,d],[],null);return;}
 }
 pc=18;
 A=$.$GBsDr4Ag.s50;
 pc=22;
 re=A.v29(b);
 U&&B0(22);
 pc=25;
 A=$.$GBsDr4Ag.s33;
 pc=29;
 B=a.f10;
 pc=32;
 re=A.v11(B);
 U&&B0(32);
 pc=36;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B],null);return;}
 A=TE(ex);
 if(pc>=18&&pc<37){pc=40;continue;}
 if(pc>=40&&pc<43){pc=40;continue;}
 throw A;
 }
 }
}
AOTMD["$GBsDr4Ag_15"] = {"osr":[40]};
// javax/microedition/lcdui/Display.repaintImpl.(Ljavax/microedition/lcdui/DisplayableLF;IIIILjava/lang/Object;)V ($GBsDr4Ag_33)
function $GBsDr4Ag_33(b,c,d,e,f,g) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f,g,h,i;
 a=this;
 var A,B,C,D,E,F,G;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=0;
 A=$.$GBsDr4Ag.s9;
 B=A;
 h=B;
 pc=6;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c,d,e,f,g,h,i],[],null);return;}
 }
 pc=8;
 A=a.f21;
 if (!(A!==0)) {
 pc=15;
 A=a.f13;
 if (!(A===0)) {
 pc=23;
 A=b;
 B=a.f18;
 if (A===B) {
 pc=35;
 if(h._lock.level===1&&h._lock.ready.length===0)h._lock.level=0;else MX(h);
 re=($.$GBsDr4Ag.s34).v9((a.f10),c,d,e,f,g);
 if(U){$.B(62,65,[a,b,c,d,e,f,g,h,i],[],null);return;}
 return;
 }
 }
 }
 pc=31;
 if(h._lock.level===1&&h._lock.ready.length===0)h._lock.level=0;else MX(h);
 pc=32;
 return;
 } else if (pc===39) {
 i=A;
 pc=43;
 if(h._lock.level===1&&h._lock.ready.length===0)h._lock.level=0;else MX(h);
 pc=46;
 throw i;
 A=i;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=7&&pc<32){pc=39;continue;}
 if(pc>=33&&pc<36){pc=39;continue;}
 if(pc>=39&&pc<44){pc=39;continue;}
 throw A;
 }
 }
}
AOTMD["$GBsDr4Ag_33"] = {"osr":[39]};
// javax/microedition/lcdui/Display.callPaint.(IIIILjava/lang/Object;)V ($GBsDr4Ag_35)
function $GBsDr4Ag_35(b,c,d,e,f) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f,g,h,i,j;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8],j=_[9];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===47) {
 i=A;
 pc=51;
 if(h._lock.level===1&&h._lock.ready.length===0)h._lock.level=0;else MX(h);
 pc=54;
 throw i;
 A=i;
 } else if (pc===132) {
 j=A;
 pc=136;
 throw j;
 A=j;
 } else if (pc===0) {
 g=null;
 pc=3;
 A=$.$GBsDr4Ag.s9;
 B=A;
 h=B;
 pc=9;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(9,10,[a,b,c,d,e,f,g,h,i,j],[],null);return;}
 }
 pc=11;
 A=a.f21;
 if (!(A!==0)) {
 pc=18;
 A=a.f13;
 if (!(A===0)) {
 pc=25;
 A=a.f18;
 if (A!==null) {
 pc=36;
 A=a.f18;
 g=A;
 pc=43;
 if(h._lock.level===1&&h._lock.ready.length===0)h._lock.level=0;else MX(h);
 pc=57;
 re=g.$GBnYZs6();
 U&&B0(57,62);
 A=re;
 if (A===0) {
 pc=89;
 A=a.f15;
 pc=97;
 re=A.v52(b,c,d,e);
 U&&B0(97);
 pc=103;
 A=g;
 B=a.f15;
 pc=108;
 re=A.$FpyUl_(B,f);
 U&&B0(108,113);
 pc=114;
 A=a.f9;
 pc=118;
 B=a.f2;
 pc=126;
 re=A.v23(B,b,c,d,e);
 U&&B0(126);
 } else {
 pc=66;
 A=a.f15;
 pc=69;
 re=A.v53();
 U&&B0(69);
 pc=75;
 A=g;
 B=a.f15;
 pc=80;
 re=A.$FpyUl_(B,f);
 U&&B0(80,85);
 }
 return;
 }
 }
 }
 pc=33;
 if(h._lock.level===1&&h._lock.ready.length===0)h._lock.level=0;else MX(h);
 pc=34;
 return;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h,i,j],[A,B,C,D,E,F],null);return;}
 A=TE(ex);
 if(pc>=10&&pc<34){pc=47;continue;}
 if(pc>=35&&pc<44){pc=47;continue;}
 if(pc>=47&&pc<52){pc=47;continue;}
 if(pc>=55&&pc<129){pc=132;continue;}
 if(pc>=132&&pc<134){pc=132;continue;}
 throw A;
 }
 }
}
AOTMD["$GBsDr4Ag_35"] = {"osr":[47]};
// javax/microedition/lcdui/Display.isShown.(Ljavax/microedition/lcdui/DisplayableLF;)Z ($GBsDr4Ag_39)
function $GBsDr4Ag_39(b) {
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if (a.f13===0) {
 label = 5;
 } else {
 if (a.f21!==0) {
 label = 5;
 } else {
 if ((a.f18)!==b) {
 label = 5;
 } else {
 A=1;
 }
 }
 }
 if (label == 5) {
 A=0;
 }
 return A;
}
AOTMD["$GBsDr4Ag_39"] = {"osr":[]};
// javax/microedition/lcdui/Display.getCallSerially.()V ($GBsDr4Ag_42)
function $GBsDr4Ag_42() {
 var th=$.ctx.thread;
 var re,lk,k0=$GBsDr4Ag;
 var a,b,c,d,e,f;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===95) {
 f=A;
 pc=98;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=101;
 throw f;
 A=f;
 } else if (pc===0) {
 b=null;
 pc=2;
 A=$.$GBsDr4Ag.s9;
 B=A;
 c=B;
 pc=7;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(7,8,[a,b,c,d,e,f],[],null);return;}
 }
 pc=8;
 A=$.$GBsDr4Ag.s50;
 b=A;
 pc=13;
 A=b;
 B=$.$GBsDr4Ag.s48;
 if (A!==B) {
 pc=25;
 A=$.$GBsDr4Ag.s48;
 } else {
 pc=19;
 A=$.$GBsDr4Ag.s49;
 }
 pc=28;
 $.$GBsDr4Ag.s50=A;
 pc=32;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 A=$.$GBsDr4Ag.s10;
 B=A;
 c=B;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(46,47,[a,b,c,d,e,f],[],null);return;}
 }
 d=0;
 } else if (pc===77) {
 e=A;
 pc=81;
 re=k0.m(40)(e);
 label = 13;
 } else if (pc===36) {
 d=A;
 pc=38;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=40;
 throw d;
 A=d;
 } else if (!(pc===49)) {
 }
 while(1) {
 if (label == 13) {
 label = 0;
 d+=1;
 }
 pc=51;
 A=d;
 re=b.v15();
 U&&B1(51);
 B=re;
 if (A>=B) {
 break;
 }
 pc=59;
 re=b.v23(d);
 U&&B0(59);
 A=re;
 pc=62;
 CCI(A,$GB3AvSiS);
 e=A;
 pc=69;
 re=e.$G$_eccG();
 U&&B0(69,74);
 label = 13;
 }
 pc=91;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 re=b.v31();
 U&&B0(103);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B],null);return;}
 A=TE(ex);
 if(pc>=8&&pc<33){pc=36;continue;}
 if(pc>=36&&pc<39){pc=36;continue;}
 if(pc>=57&&pc<74&&IOK(A,$G_VRHXsT)){pc=77;continue;}
 if(pc>=47&&pc<92){pc=95;continue;}
 if(pc>=95&&pc<99){pc=95;continue;}
 throw A;
 }
 }
}
AOTMD["$GBsDr4Ag_42"] = {"osr":[36,49,95]};
// javax/microedition/lcdui/Display.access$200.(Ljavax/microedition/lcdui/Display;)Ljavax/microedition/lcdui/DisplayableLF; ($GBsDr4Ag_49)
function $GBsDr4Ag_49(a) {
 var a;
 var A;
 var pc=0;
 var label=0;
 return (a.f18);
}
AOTMD["$GBsDr4Ag_49"] = {"osr":[]};
// javax/microedition/lcdui/Display.access$700.(Ljavax/microedition/lcdui/Display;)V ($GBsDr4Ag_53)
function $GBsDr4Ag_53(a) {
 var k0=$GBsDr4Ag,re;
 var a;
 var A;
 var pc=0;
 var label=0;
 re=k0.m(42).call(a);
 if(U){$.B(1,4,[a],[],null);return;}
 return;
}
AOTMD["$GBsDr4Ag_53"] = {"osr":[]};
$GBsDr4Ag.classSymbols = ["javax/microedition/lcdui/Display", "javax/microedition/lcdui/DisplayableLF", "java/lang/NullPointerException", "java/util/Vector", "com/sun/midp/lcdui/DisplayEventProducer", "com/sun/midp/lcdui/RepaintEventProducer", "javax/microedition/lcdui/Graphics", "com/sun/midp/lcdui/DisplayDevice", "java/lang/Runnable", "java/lang/Throwable"];
// javax/microedition/lcdui/Displayable extends java/lang/Object
function $GBJOp2dk() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
 this.f6 = null;
 this.f7 = null;
}
// javax/microedition/lcdui/Displayable.getWidth.()I ($GBJOp2dk_10)
function $GBJOp2dk_10() {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(0,0,[a,b,c],[],null);return;}
 A=$.$GBsDr4Ag.s9;
 B=A;
 b=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b,c],[],null);return;}
 }
 pc=7;
 A=a.f7;
 pc=10;
 re=A.$GBxsvXn();
 if(U){$.B(10,15,[a,b,c],[],null);return;}
 A=re;
 pc=16;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=17;
 return A;
 } else if (pc===18) {
 c=A;
 pc=20;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=22;
 throw c;
 A=c;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<17){pc=18;continue;}
 if(pc>=18&&pc<21){pc=18;continue;}
 throw A;
 }
 }
}
AOTMD["$GBJOp2dk_10"] = {"osr":[18]};
// javax/microedition/lcdui/Displayable.getHeight.()I ($GBJOp2dk_11)
function $GBJOp2dk_11() {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===18) {
 c=A;
 pc=20;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=22;
 throw c;
 A=c;
 } else if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(0,0,[a,b,c],[],null);return;}
 A=$.$GBsDr4Ag.s9;
 B=A;
 b=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b,c],[],null);return;}
 }
 pc=7;
 A=a.f7;
 pc=10;
 re=A.$G$80TUy();
 if(U){$.B(10,15,[a,b,c],[],null);return;}
 A=re;
 pc=16;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=17;
 return A;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<17){pc=18;continue;}
 if(pc>=18&&pc<21){pc=18;continue;}
 throw A;
 }
 }
}
AOTMD["$GBJOp2dk_11"] = {"osr":[18]};
$GBJOp2dk.classSymbols = ["javax/microedition/lcdui/Display", "javax/microedition/lcdui/Displayable", "javax/microedition/lcdui/DisplayableLF"];
// javax/microedition/lcdui/Canvas extends javax/microedition/lcdui/Displayable
function $G_7D6Hkf() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
 this.f6 = null;
 this.f7 = null;
 this.f8 = 0;
 this.f9 = null;
}
// javax/microedition/lcdui/Canvas.keyPressed.(I)V ($G_7D6Hkf_9)
function $G_7D6Hkf_9(b) {
 var a,b;
 a=this;
 var pc=0;
 var label=0;
 return;
}
AOTMD["$G_7D6Hkf_9"] = {"osr":[]};
// javax/microedition/lcdui/Canvas.keyReleased.(I)V ($G_7D6Hkf_11)
function $G_7D6Hkf_11(b) {
 var a,b;
 a=this;
 var pc=0;
 var label=0;
 return;
}
AOTMD["$G_7D6Hkf_11"] = {"osr":[]};
// javax/microedition/lcdui/Canvas.repaint.(IIII)V ($G_7D6Hkf_15)
function $G_7D6Hkf_15(b,c,d,e) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f,g;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(0,0,[a,b,c,d,e,f,g],[],null);return;}
 A=$.$GBsDr4Ag.s9;
 B=A;
 f=B;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(6,7,[a,b,c,d,e,f,g],[],null);return;}
 }
 if (!(d<=0)) {
 if (!(e<=0)) {
 pc=17;
 A=a.f9;
 pc=26;
 re=A.$G$oMjzi(b,c,d,e,null);
 if(U){$.B(26,31,[a,b,c,d,e,f,g],[],null);return;}
 }
 }
 pc=33;
 if(f._lock.level===1&&f._lock.ready.length===0)f._lock.level=0;else MX(f);
 return;
 } else if (pc===37) {
 g=A;
 pc=41;
 if(f._lock.level===1&&f._lock.ready.length===0)f._lock.level=0;else MX(f);
 pc=44;
 throw g;
 A=g;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=7&&pc<34){pc=37;continue;}
 if(pc>=37&&pc<42){pc=37;continue;}
 throw A;
 }
 }
}
AOTMD["$G_7D6Hkf_15"] = {"osr":[37]};
// javax/microedition/lcdui/Canvas.repaint.()V ($G_7D6Hkf_16)
function $G_7D6Hkf_16() {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===20) {
 c=A;
 pc=22;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=24;
 throw c;
 A=c;
 } else if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(0,0,[a,b,c],[],null);return;}
 A=$.$GBsDr4Ag.s9;
 B=A;
 b=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b,c],[],null);return;}
 }
 pc=7;
 A=a.f9;
 pc=10;
 re=A.$G_fVOe6();
 if(U){$.B(10,15,[a,b,c],[],null);return;}
 pc=16;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 return;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<17){pc=20;continue;}
 if(pc>=20&&pc<23){pc=20;continue;}
 throw A;
 }
 }
}
AOTMD["$G_7D6Hkf_16"] = {"osr":[20]};
$G_7D6Hkf.classSymbols = ["javax/microedition/lcdui/Display", "javax/microedition/lcdui/Canvas", "javax/microedition/lcdui/CanvasLF"];
// javax/microedition/lcdui/DisplayableLFImpl extends java/lang/Object
function $G_s_i3rq() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = null;
 this.f5 = 0;
 this.f6 = 0;
 this.f7 = 0;
 this.f8 = 0;
 this.f9 = 0;
 this.f10 = 0;
 this.f11 = 0;
 this.f12 = 0;
}
// javax/microedition/lcdui/DisplayableLFImpl.lIsShown.()Z ($G_s_i3rq_3)
function $G_s_i3rq_3() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if (!((a.f0)===null)) {
 re=(a.f0).v36(a);
 if(U){$.B(12,15,[a],[],null);return;}
 if (!(re===0)) {
 A=1;
 return A;
 }
 }
 A=0;
 return A;
}
AOTMD["$G_s_i3rq_3"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.lGetWidth.()I ($G_s_i3rq_4)
function $G_s_i3rq_4() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f1);
}
AOTMD["$G_s_i3rq_4"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.lGetHeight.()I ($G_s_i3rq_5)
function $G_s_i3rq_5() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f2);
}
AOTMD["$G_s_i3rq_5"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.lGetDisplayable.()Ljavax/microedition/lcdui/Displayable; ($G_s_i3rq_14)
function $G_s_i3rq_14() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f4);
}
AOTMD["$G_s_i3rq_14"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.uIsScrollNative.()Z ($G_s_i3rq_24)
function $G_s_i3rq_24() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return 0;
}
AOTMD["$G_s_i3rq_24"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.uCallPaint.(Ljavax/microedition/lcdui/Graphics;Ljava/lang/Object;)V ($G_s_i3rq_29)
function $G_s_i3rq_29(b,c) {
 var a,b,c;
 a=this;
 var pc=0;
 var label=0;
 return;
}
AOTMD["$G_s_i3rq_29"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.uCallKeyEvent.(II)V ($G_s_i3rq_30)
function $G_s_i3rq_30(b,c) {
 var th=$.ctx.thread;
 var re,lk,k0=$G_s_i3rq;
 var a,b,c,d,e,f;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===104) {
 f=A;
 pc=108;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 pc=111;
 throw f;
 A=f;
 } else if (pc===0) {
 d=-1;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 U&&B0(2,2);
 A=$.$GBsDr4Ag.s9;
 B=A;
 e=B;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(8,9,[a,b,c,d,e,f],[],null);return;}
 }
 // Table Switch
 switch (b) {
 case 1: {
 pc=38;
 a.f8=1;
 d=0;
 break;
 }
 case 2: {
 pc=47;
 A=a.f8;
 if (!(A===0)) {
 d=1;
 }
 break;
 }
 case 3: {
 pc=59;
 A=a.f8;
 if (!(A===0)) {
 d=2;
 }
 break;
 }
 default: {
 }
 }
 pc=68;
 A=a.f11;
 do {
 if (!(A<=(-1))) {
 if (!(d===(-1))) {
 if (d!==1) {
 pc=95;
 re=k0.m(48).call(a,c);
 U&&B0(95);
 break;
 } else {
 pc=87;
 re=k0.m(49).call(a,c);
 U&&B0(87);
 break;
 }
 }
 }
 } while(0);
 pc=100;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 // Table Switch
 switch (d) {
 case -1: {
 return;
 break;
 }
 case 0: {
 re=a.v39(c);
 U&&B0(147);
 return;
 break;
 }
 case 1: {
 re=a.v41(c);
 U&&B0(155);
 return;
 break;
 }
 case 2: {
 re=a.v40(c);
 U&&B0(163);
 return;
 break;
 }
 default: {
 return;
 }
 }
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B],null);return;}
 A=TE(ex);
 if(pc>=9&&pc<101){pc=104;continue;}
 if(pc>=104&&pc<109){pc=104;continue;}
 throw A;
 }
 }
}
AOTMD["$G_s_i3rq_30"] = {"osr":[104]};
// javax/microedition/lcdui/DisplayableLFImpl.uCallPointerEvent.(III)V ($G_s_i3rq_35)
function $G_s_i3rq_35(b,c,d) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f,g;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 e=-1;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 U&&B0(3,3);
 A=$.$GBsDr4Ag.s9;
 B=A;
 f=B;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(9,10,[a,b,c,d,e,f,g],[],null);return;}
 }
 // Table Switch
 switch (b) {
 case 1: {
 pc=38;
 a.f7=1;
 e=0;
 break;
 }
 case 2: {
 pc=48;
 A=a.f7;
 if (!(A===0)) {
 e=1;
 }
 break;
 }
 case 3: {
 pc=61;
 A=a.f7;
 if (!(A===0)) {
 e=2;
 }
 break;
 }
 default: {
 }
 }
 pc=72;
 if(f._lock.level===1&&f._lock.ready.length===0)f._lock.level=0;else MX(f);
 // Table Switch
 switch (e) {
 case -1: {
 return;
 break;
 }
 case 0: {
 re=a.v43(c,d);
 U&&B0(120);
 return;
 break;
 }
 case 1: {
 re=a.v45(c,d);
 U&&B0(129);
 return;
 break;
 }
 case 2: {
 re=a.v44(c,d);
 U&&B0(138);
 return;
 break;
 }
 default: {
 return;
 }
 }
 } else if (pc===76) {
 g=A;
 pc=80;
 if(f._lock.level===1&&f._lock.ready.length===0)f._lock.level=0;else MX(f);
 pc=83;
 throw g;
 A=g;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=10&&pc<73){pc=76;continue;}
 if(pc>=76&&pc<81){pc=76;continue;}
 throw A;
 }
 }
}
AOTMD["$G_s_i3rq_35"] = {"osr":[76]};
// javax/microedition/lcdui/DisplayableLFImpl.lRequestPaint.(IIIILjava/lang/Object;)V ($G_s_i3rq_40)
function $G_s_i3rq_40(b,c,d,e,f) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E,F,G;
 var pc=0;
 var label=0;
 re=a.v10();
 if(U){$.B(1,4,[a,b,c,d,e,f],[],null);return;}
 if (re===0) {
 return;
 }
 re=(a.f0).v31(a,b,c,d,e,f);
 if(U){$.B(19,22,[a,b,c,d,e,f],[],null);return;}
 return;
}
AOTMD["$G_s_i3rq_40"] = {"osr":[]};
// javax/microedition/lcdui/DisplayableLFImpl.lRequestPaintContents.()V ($G_s_i3rq_43)
function $G_s_i3rq_43() {
 var re;
 var a;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var label=0;
 re=a.v47(0,0,(a.f1),(a.f2),null);
 if(U){$.B(12,15,[a],[],null);return;}
 return;
}
AOTMD["$G_s_i3rq_43"] = {"osr":[]};
$G_s_i3rq.classSymbols = ["javax/microedition/lcdui/DisplayableLFImpl", "javax/microedition/lcdui/Display"];
// javax/microedition/lcdui/CanvasLFImpl extends javax/microedition/lcdui/DisplayableLFImpl
function $GBgELIql() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = null;
 this.f5 = 0;
 this.f6 = 0;
 this.f7 = 0;
 this.f8 = 0;
 this.f9 = 0;
 this.f10 = 0;
 this.f11 = 0;
 this.f12 = 0;
 this.f13 = null;
 this.f14 = null;
}
// javax/microedition/lcdui/CanvasLFImpl.lRepaint.(IIIILjava/lang/Object;)V ($GBgELIql_1)
function $GBgELIql_1(b,c,d,e,f) {
 var re;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var label=0;
 re=a.v47(b,c,d,e,f);
 if(U){$.B(8,11,[a,b,c,d,e,f],[],null);return;}
 return;
}
AOTMD["$GBgELIql_1"] = {"osr":[]};
// javax/microedition/lcdui/CanvasLFImpl.lRepaint.()V ($GBgELIql_2)
function $GBgELIql_2() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=a.v50();
 if(U){$.B(1,4,[a],[],null);return;}
 return;
}
AOTMD["$GBgELIql_2"] = {"osr":[]};
// javax/microedition/lcdui/CanvasLFImpl.uCallPaint.(Ljavax/microedition/lcdui/Graphics;Ljava/lang/Object;)V ($GBgELIql_7)
function $GBgELIql_7(b,c) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===39) {
 d=A;
 pc=41;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 A=d;
 U&&B1(41,41);
 re=$GBsDr4Ag.m(40)(A);
 label = 8;
 } else if (pc===29) {
 e=A;
 pc=32;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=35;
 throw e;
 A=e;
 } else if (pc===0) {
 pc=3;
 re=$G_s_i3rq.m(29).call(a,b,c);
 pc=7;
 re=b.v54();
 U&&B0(7);
 pc=10;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 U&&B0(10,10);
 A=$.$GBsDr4Ag.s10;
 B=A;
 d=B;
 pc=15;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(15,16,[a,b,c,d,e],[],null);return;}
 }
 pc=17;
 A=a.f13;
 pc=21;
 re=A.v44(b);
 U&&B0(21);
 pc=25;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 label = 8;
 } else if (!(pc===58)) {
 }
 do {
 if (label == 8) {
 if (($.$GBgELIql.s2)===null) {
 return;
 } else {
 re=(a.f14).v17();
 U&&B0(54);
 d=re;
 break;
 }
 }
 } while(0);
 while(1) {
 re=d.$F1LJE8();
 U&&B0(59,64);
 if (re===0) {
 break;
 }
 A=$.$GBgELIql.s2;
 re=d.$F3$pAC();
 U&&B1(71,76);
 re=A.v16(re,b);
 U&&B0(77);
 }
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=16&&pc<26){pc=29;continue;}
 if(pc>=29&&pc<33){pc=29;continue;}
 if(pc>=10&&pc<36&&IOK(A,$G_VRHXsT)){pc=39;continue;}
 throw A;
 }
 }
}
AOTMD["$GBgELIql_7"] = {"osr":[29,58]};
// javax/microedition/lcdui/CanvasLFImpl.uCallKeyPressed.(I)V ($GBgELIql_8)
function $GBgELIql_8(b) {
 var th=$.ctx.thread;
 var re,k0=$GBgELIql,lk;
 var a,b,c,d,e;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 do {
 if (pc===35) {
 e=A;
 pc=38;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=41;
 throw e;
 A=e;
 } else if (pc===0) {
 re=k0.m(16).call(a,b);
 U&&B0(2);
 if (re===0) {
 return;
 } else {
 pc=8;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 U&&B0(8,8);
 A=$.$GBsDr4Ag.s10;
 B=A;
 c=B;
 pc=13;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(13,14,[a,b,c,d,e],[],null);return;}
 }
 pc=15;
 A=a.f13;
 pc=19;
 re=A.v33(b);
 U&&B0(19);
 break;
 }
 } else if (pc===25) {
 d=A;
 pc=27;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 A=d;
 U&&B1(27,27);
 re=$GBsDr4Ag.m(40)(A);
 } else {
 }
 } while(0);
 pc=31;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B],null);return;}
 A=TE(ex);
 if(pc>=14&&pc<22&&IOK(A,$G_VRHXsT)){pc=25;continue;}
 if(pc>=14&&pc<32){pc=35;continue;}
 if(pc>=35&&pc<39){pc=35;continue;}
 throw A;
 }
 }
}
AOTMD["$GBgELIql_8"] = {"osr":[35]};
// javax/microedition/lcdui/CanvasLFImpl.uCallKeyReleased.(I)V ($GBgELIql_9)
function $GBgELIql_9(b) {
 var th=$.ctx.thread;
 var re,k0=$GBgELIql,lk;
 var a,b,c,d,e;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 do {
 if (pc===25) {
 d=A;
 pc=27;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 A=d;
 U&&B1(27,27);
 re=$GBsDr4Ag.m(40)(A);
 } else if (pc===35) {
 e=A;
 pc=38;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 pc=41;
 throw e;
 A=e;
 } else if (pc===0) {
 re=k0.m(16).call(a,b);
 U&&B0(2);
 if (re===0) {
 return;
 } else {
 pc=8;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 U&&B0(8,8);
 A=$.$GBsDr4Ag.s10;
 B=A;
 c=B;
 pc=13;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(13,14,[a,b,c,d,e],[],null);return;}
 }
 pc=15;
 A=a.f13;
 pc=19;
 re=A.v35(b);
 U&&B0(19);
 break;
 }
 } else {
 }
 } while(0);
 pc=31;
 if(c._lock.level===1&&c._lock.ready.length===0)c._lock.level=0;else MX(c);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B],null);return;}
 A=TE(ex);
 if(pc>=14&&pc<22&&IOK(A,$G_VRHXsT)){pc=25;continue;}
 if(pc>=14&&pc<32){pc=35;continue;}
 if(pc>=35&&pc<39){pc=35;continue;}
 throw A;
 }
 }
}
AOTMD["$GBgELIql_9"] = {"osr":[35]};
// javax/microedition/lcdui/CanvasLFImpl.uCallPointerDragged.(II)V ($GBgELIql_13)
function $GBgELIql_13(b,c) {
 var th=$.ctx.thread;
 var re,lk;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===18) {
 e=A;
 pc=22;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(22,22,[a,b,c,d,e,f],[e],null);return;}
 re=$GBsDr4Ag.m(40)(e);
 } else if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(0,0,[a,b,c,d,e,f],[],null);return;}
 A=$.$GBsDr4Ag.s10;
 B=A;
 d=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b,c,d,e,f],[],null);return;}
 }
 pc=7;
 A=a.f13;
 pc=12;
 re=A.v38(b,c);
 if(U){$.B(12,15,[a,b,c,d,e,f],[],null);return;}
 } else if (pc===30) {
 f=A;
 pc=33;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 pc=36;
 throw f;
 A=f;
 } else {
 }
 pc=26;
 if(d._lock.level===1&&d._lock.ready.length===0)d._lock.level=0;else MX(d);
 return;
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<15&&IOK(A,$G_VRHXsT)){pc=18;continue;}
 if(pc>=6&&pc<27){pc=30;continue;}
 if(pc>=30&&pc<34){pc=30;continue;}
 throw A;
 }
 }
}
AOTMD["$GBgELIql_13"] = {"osr":[30]};
// javax/microedition/lcdui/CanvasLFImpl.allowKey.(I)Z ($GBgELIql_16)
function $GBgELIql_16(b) {
 var re;
 var a,b;
 a=this;
 var A;
 var pc=0;
 var label=0;
 if (!((a.f13).f8!==0)) {
 return 1;
 }
 if ($.initialized["javax/microedition/lcdui/KeyConverter"] === undefined) { $.$G_8PZQKl.classObject.initialize(); }
 re=$G_8PZQKl.m(2)(b);
 // Table Switch
 do {
 switch (re) {
 case 8: {
 break;
 }
 case 5: {
 break;
 }
 case -1: {
 return 1;
 break;
 }
 case 10: {
 break;
 }
 case 11: {
 break;
 }
 case 12: {
 break;
 }
 case 6: {
 break;
 }
 case 2: {
 break;
 }
 case 1: {
 break;
 }
 case 9: {
 break;
 }
 default: {
 return 1;
 }
 }
 } while(0);
 return 0;
}
AOTMD["$GBgELIql_16"] = {"osr":[]};
$GBgELIql.classSymbols = ["javax/microedition/lcdui/DisplayableLFImpl", "javax/microedition/lcdui/Graphics", "javax/microedition/lcdui/Display", "javax/microedition/lcdui/CanvasLFImpl", "javax/microedition/lcdui/Canvas", "java/util/Vector", "java/util/Enumeration", "javax/microedition/lcdui/MMHelperImpl", "java/lang/Throwable", "javax/microedition/lcdui/KeyConverter"];
// javax/microedition/lcdui/Font extends java/lang/Object
function $G$nZGced() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = 0;
}
// javax/microedition/lcdui/Font.getDefaultFont.()Ljavax/microedition/lcdui/Font; ($G$nZGced_2)
function $G$nZGced_2() {
 var th=$.ctx.thread;
 var re,lk,k0=$G$nZGced;
 var a,b;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===31) {
 b=A;
 pc=33;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 pc=35;
 throw b;
 A=b;
 } else if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/Display"] === undefined) { $.$GBsDr4Ag.classObject.initialize(); }
 if(U){$.B(0,0,[a,b],[],null);return;}
 A=$.$GBsDr4Ag.s9;
 B=A;
 a=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b],[],null);return;}
 }
 pc=6;
 A=$.$G$nZGced.s17;
 if (A!==null) {
 pc=25;
 A=$.$G$nZGced.s17;
 pc=29;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 pc=30;
 return A;
 }
 pc=12;
 A=new k0();
 pc=19;
 re=k0.m(1).call((A),0,0,0);
 pc=22;
 $.$G$nZGced.s17=A;
 pc=25;
 A=$.$G$nZGced.s17;
 pc=29;
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 pc=30;
 return A;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<30){pc=31;continue;}
 if(pc>=31&&pc<34){pc=31;continue;}
 throw A;
 }
 }
}
AOTMD["$G$nZGced_2"] = {"osr":[31]};
// javax/microedition/lcdui/Font.getHeight.()I ($G$nZGced_11)
function $G$nZGced_11() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f4);
}
AOTMD["$G$nZGced_11"] = {"osr":[]};
// javax/microedition/lcdui/Font.getBaselinePosition.()I ($G$nZGced_12)
function $G$nZGced_12() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f3);
}
AOTMD["$G$nZGced_12"] = {"osr":[]};
$G$nZGced.classSymbols = ["javax/microedition/lcdui/Display", "javax/microedition/lcdui/Font"];
// javax/microedition/lcdui/Graphics extends java/lang/Object
function $GB3dUXBh() {
 this._hashCode = 0;
}
// javax/microedition/lcdui/Graphics.<init>.()V ($GB3dUXBh_2)
function $GB3dUXBh_2() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=undefined;
 return;
}
AOTMD["$GB3dUXBh_2"] = {"osr":[]};
// javax/microedition/lcdui/Graphics.getImageGraphics.(Ljavax/microedition/lcdui/Image;)Ljavax/microedition/lcdui/Graphics; ($GB3dUXBh_43)
function $GB3dUXBh_43(a) {
 var re,k0=$GB3dUXBh;
 var a,b;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 if (null!==a) {
 A=new k0();
 re=k0.m(2).call((A));
 b=A;
 A=b;
 B=a;
 re=a.v10();
 U&&B2(24);
 C=re;
 re=a.v11();
 U&&B3(28);
 re=k0.m(1).call(A,B,C,re);
 return b;
 } else {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$GB3dUXBh_43"] = {"osr":[]};
$GB3dUXBh.classSymbols = ["java/lang/Object", "java/lang/NullPointerException", "javax/microedition/lcdui/Graphics", "javax/microedition/lcdui/Image"];
// javax/microedition/lcdui/Image extends java/lang/Object
function $Fmpjqpe() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = null;
}
// javax/microedition/lcdui/Image.createImage.(II)Ljavax/microedition/lcdui/Image; ($Fmpjqpe_0)
function $Fmpjqpe_0(a,b) {
 var k0=$Fmpjqpe,re;
 var a,b;
 var A,B,C,D,E;
 var pc=0;
 try{
 var label=0;
 if (a<=0) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 if (b>0) {
 A=new k0();
 if ($.initialized["javax/microedition/lcdui/ImageDataFactory"] === undefined) { $.$G$AgPkIp.classObject.initialize(); }
 B=A;
 U&&B2(20,20);
 re=$G$AgPkIp.m(1)();
 U&&B2(20);
 re=re.$GBECLhG(a,b);
 U&&B2(25,30);
 re=k0.m(14).call(B,re);
 return A;
 } else {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b],[A,B,C,D,E],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$Fmpjqpe_0"] = {"osr":[]};
// javax/microedition/lcdui/Image.createImage.(Ljava/lang/String;)Ljavax/microedition/lcdui/Image; ($Fmpjqpe_2)
function $Fmpjqpe_2(a) {
 var k0=$Fmpjqpe,re;
 var a;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 A=new k0();
 if ($.initialized["javax/microedition/lcdui/ImageDataFactory"] === undefined) { $.$G$AgPkIp.classObject.initialize(); }
 B=A;
 U&&B2(4,4);
 re=$G$AgPkIp.m(1)();
 U&&B2(4);
 re=re.$G$EtUdR(a);
 U&&B2(8,13);
 re=k0.m(14).call(B,re);
 return A;
 }catch(ex){
 if(U){$.T(ex,[a],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$Fmpjqpe_2"] = {"osr":[]};
// javax/microedition/lcdui/Image.createRGBImage.([IIIZ)Ljavax/microedition/lcdui/Image; ($Fmpjqpe_6)
function $Fmpjqpe_6(a,b,c,d) {
 var re,k0=$Fmpjqpe;
 var a,b,c,d;
 var A,B,C,D,E,F,G;
 var pc=0;
 try{
 var label=0;
 if (b<=0) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 if (!(c>0)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 if ((Math.imul(b,c))<=(a.length)) {
 A=new k0();
 if ($.initialized["javax/microedition/lcdui/ImageDataFactory"] === undefined) { $.$G$AgPkIp.classObject.initialize(); }
 B=A;
 U&&B2(36,36);
 re=$G$AgPkIp.m(1)();
 U&&B2(36);
 re=re.$F9bL7C(a,b,c,d);
 U&&B2(43,48);
 re=k0.m(14).call(B,re);
 return A;
 } else {
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d],[A,B,C,D,E,F,G],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$Fmpjqpe_6"] = {"osr":[]};
// javax/microedition/lcdui/Image.getGraphics.()Ljavax/microedition/lcdui/Graphics; ($Fmpjqpe_7)
function $Fmpjqpe_7() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 try{
 var label=0;
 re=a.v12();
 U&&B0(1);
 if (re===0) {
 if ($.initialized["java/lang/IllegalStateException"] === undefined) { $.$G$L_F0if.classObject.initialize(); }
 A=new $G$L_F0if();
 re=$G$L_F0if.m(0).call((A));
 throw A;
 } else {
 if ($.initialized["javax/microedition/lcdui/Graphics"] === undefined) { $.$GB3dUXBh.classObject.initialize(); }
 re=$GB3dUXBh.m(43)(a);
 U&&B0(8);
 return re;
 }
 }catch(ex){
 if(U){$.T(ex,[a],[A,B],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$Fmpjqpe_7"] = {"osr":[]};
// javax/microedition/lcdui/Image.getWidth.()I ($Fmpjqpe_8)
function $Fmpjqpe_8() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$Fmpjqpe_8"] = {"osr":[]};
// javax/microedition/lcdui/Image.getHeight.()I ($Fmpjqpe_9)
function $Fmpjqpe_9() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f1);
}
AOTMD["$Fmpjqpe_9"] = {"osr":[]};
// javax/microedition/lcdui/Image.isMutable.()Z ($Fmpjqpe_10)
function $Fmpjqpe_10() {
 var re;
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 re=(a.f2).v11();
 return re;
}
AOTMD["$Fmpjqpe_10"] = {"osr":[]};
// javax/microedition/lcdui/Image.getRGB.([IIIIIII)V ($Fmpjqpe_11)
function $Fmpjqpe_11(b,c,d,e,f,g,h) {
 var re;
 var a,b,c,d,e,f,g,h,i,j,k;
 a=this;
 var A,B,C,D,E,F,G,H;
 var pc=0;
 var label=0;
 re=(a.f2).v9();
 i=re;
 re=(a.f2).v10();
 j=re;
 if (!(d<0)) {
 if (!(d>=g)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 }
 if (!(d>=0)) {
 if (!((0-d|0)>=g)) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 }
 if (!(f<0)) {
 if (!(e<0)) {
 if (!((e+g|0)>i)) {
 if ((f+h|0)<=j) {
 if (h<0) {
 return;
 }
 if (!(g>=0)) {
 return;
 }
 k=b.length;
 if (!(c<0)) {
 if (!(((c+(Math.imul((h-1|0),d))|0)+g|0)>k)) {
 if ((c+(Math.imul((h-1|0),d))|0)>=0) {
 re=(a.f2).v12(b,c,d,e,f,g,h);
 return;
 }
 }
 }
 if ($.initialized["java/lang/ArrayIndexOutOfBoundsException"] === undefined) { $.$GBGnQL7o.classObject.initialize(); }
 A=new $GBGnQL7o();
 re=$GBGnQL7o.m(0).call((A));
 throw A;
 }
 }
 }
 }
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
}
AOTMD["$Fmpjqpe_11"] = {"osr":[]};
// javax/microedition/lcdui/Image.<init>.(Ljavax/microedition/lcdui/ImageData;)V ($Fmpjqpe_14)
function $Fmpjqpe_14(b) {
 var re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f2=b;
 A=a;
 re=b.v9();
 A.f0=re;
 A=a;
 re=b.v10();
 A.f1=re;
 return;
}
AOTMD["$Fmpjqpe_14"] = {"osr":[]};
$Fmpjqpe.classSymbols = ["javax/microedition/lcdui/Image", "javax/microedition/lcdui/ImageDataFactory", "javax/microedition/lcdui/AbstractImageDataFactory", "java/lang/IllegalArgumentException", "java/lang/ArrayIndexOutOfBoundsException", "javax/microedition/lcdui/Graphics", "java/lang/IllegalStateException", "javax/microedition/lcdui/ImageData", "java/lang/Object"];
// javax/microedition/lcdui/ImageData extends java/lang/Object
function $G_y9QCUi() {
 this._hashCode = 0;
 this.f0 = 0;
 this.f1 = 0;
 this.f2 = 0;
 this.f3 = 0;
}
// javax/microedition/lcdui/ImageData.<init>.()V ($G_y9QCUi_0)
function $G_y9QCUi_0() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=0;
 a.f1=0;
 return;
}
AOTMD["$G_y9QCUi_0"] = {"osr":[]};
// javax/microedition/lcdui/ImageData.<init>.(IIZ)V ($G_y9QCUi_1)
function $G_y9QCUi_1(b,c,d) {
 var re;
 var a,b,c,d;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=undefined;
 a.f0=b;
 a.f1=c;
 a.f2=d;
 return;
}
AOTMD["$G_y9QCUi_1"] = {"osr":[]};
// javax/microedition/lcdui/ImageData.getWidth.()I ($G_y9QCUi_2)
function $G_y9QCUi_2() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f0);
}
AOTMD["$G_y9QCUi_2"] = {"osr":[]};
// javax/microedition/lcdui/ImageData.getHeight.()I ($G_y9QCUi_3)
function $G_y9QCUi_3() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f1);
}
AOTMD["$G_y9QCUi_3"] = {"osr":[]};
// javax/microedition/lcdui/ImageData.isMutable.()Z ($G_y9QCUi_4)
function $G_y9QCUi_4() {
 var a;
 a=this;
 var A;
 var pc=0;
 var label=0;
 return (a.f2);
}
AOTMD["$G_y9QCUi_4"] = {"osr":[]};
$G_y9QCUi.classSymbols = ["java/lang/Object", "javax/microedition/lcdui/ImageData"];
// javax/microedition/lcdui/ImageDataFactory extends java/lang/Object
function $G$AgPkIp() {
 this._hashCode = 0;
 this.f0 = null;
}
// javax/microedition/lcdui/ImageDataFactory.getImageDataFactory.()Ljavax/microedition/lcdui/AbstractImageDataFactory; ($G$AgPkIp_1)
function $G$AgPkIp_1() {
 var A;
 var pc=0;
 var label=0;
 return ($.$G$AgPkIp.s1);
}
AOTMD["$G$AgPkIp_1"] = {"osr":[]};
// javax/microedition/lcdui/ImageDataFactory.createOffScreenImageData.(II)Ljavax/microedition/lcdui/ImageData; ($G$AgPkIp_2)
function $G$AgPkIp_2(b,c) {
 var re,k0=$G$AgPkIp;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===21) {
 e=A;
 pc=24;
 re=k0.m(18)(0);
 pc=31;
 re=k0.m(12).call(a,d,b,c);
 return d;
 } else if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/ImageData"] === undefined) { $.$G_y9QCUi.classObject.initialize(); }
 A=new $G_y9QCUi();
 pc=7;
 re=$G_y9QCUi.m(1).call((A),b,c,1);
 d=A;
 pc=15;
 re=k0.m(12).call(a,d,b,c);
 return d;
 } else if (pc===37) {
 f=A;
 pc=40;
 re=k0.m(18)(1);
 pc=47;
 re=k0.m(12).call(a,d,b,c);
 return d;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=11&&pc<18&&IOK(A,$G_kHtcSa)){pc=21;continue;}
 if(pc>=27&&pc<34&&IOK(A,$G_kHtcSa)){pc=37;continue;}
 throw A;
 }
 }
}
AOTMD["$G$AgPkIp_2"] = {"osr":[]};
// javax/microedition/lcdui/ImageDataFactory.createResourceImageData.(Ljava/lang/String;)Ljavax/microedition/lcdui/ImageData; ($G$AgPkIp_4)
function $G$AgPkIp_4(b) {
 var re,k0=$G$AgPkIp;
 var a,b,c,d,e,f;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 if (!(b!==null)) {
 if ($.initialized["java/lang/NullPointerException"] === undefined) { $.$GBb4IsYe.classObject.initialize(); }
 A=new $GBb4IsYe();
 re=$GBb4IsYe.m(0).call((A));
 throw A;
 }
 if ($.initialized["javax/microedition/lcdui/ImageData"] === undefined) { $.$G_y9QCUi.classObject.initialize(); }
 A=new $G_y9QCUi();
 re=$G_y9QCUi.m(0).call((A));
 c=A;
 re=k0.m(10).call(a,c,b);
 U&&B0(23);
 if (!(re===0)) {
 return c;
 }
 re=a.v0();
 re=re.v17(b);
 U&&B0(36);
 d=re;
 if (!(d!==null)) {
 A=new $G_yTb0tT();
 re=$G_yTb0tT.m(0).call((A));
 throw A;
 }
 pc=55;
 re=k0.m(11).call(a,c,d);
 U&&B0(55);
 return c;
 } else if (pc===61) {
 e=A;
 pc=64;
 re=k0.m(18)(0);
 pc=70;
 re=k0.m(11).call(a,c,d);
 U&&B0(70);
 return c;
 } else if (pc===76) {
 f=A;
 pc=79;
 re=k0.m(18)(1);
 pc=85;
 re=k0.m(11).call(a,c,d);
 U&&B0(85);
 return c;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=52&&pc<58&&IOK(A,$G_kHtcSa)){pc=61;continue;}
 if(pc>=67&&pc<73&&IOK(A,$G_kHtcSa)){pc=76;continue;}
 throw A;
 }
 }
}
AOTMD["$G$AgPkIp_4"] = {"osr":[]};
// javax/microedition/lcdui/ImageDataFactory.createImmutableImageData.([IIIZ)Ljavax/microedition/lcdui/ImageData; ($G$AgPkIp_8)
function $G$AgPkIp_8(b,c,d,e) {
 var re,k0=$G$AgPkIp;
 var a,b,c,d,e,f,g,h;
 a=this;
 var A,B,C,D,E,F;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===26) {
 g=A;
 pc=29;
 re=k0.m(18)(0);
 pc=40;
 re=k0.m(17).call(a,f,b,c,d,e);
 return f;
 } else if (pc===0) {
 pc=0;
 if ($.initialized["javax/microedition/lcdui/ImageData"] === undefined) { $.$G_y9QCUi.classObject.initialize(); }
 A=new $G_y9QCUi();
 pc=7;
 re=$G_y9QCUi.m(1).call((A),c,d,0);
 f=A;
 pc=20;
 re=k0.m(17).call(a,f,b,c,d,e);
 return f;
 } else if (pc===46) {
 h=A;
 pc=49;
 re=k0.m(18)(1);
 pc=60;
 re=k0.m(17).call(a,f,b,c,d,e);
 return f;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=12&&pc<23&&IOK(A,$G_kHtcSa)){pc=26;continue;}
 if(pc>=32&&pc<43&&IOK(A,$G_kHtcSa)){pc=46;continue;}
 throw A;
 }
 }
}
AOTMD["$G$AgPkIp_8"] = {"osr":[]};
// javax/microedition/lcdui/ImageDataFactory.loadAndCreateImmutableImageDataFromCache.(Ljavax/microedition/lcdui/ImageData;Ljava/lang/String;)Z ($G$AgPkIp_10)
function $G$AgPkIp_10(b,c) {
 var re,k0=$G$AgPkIp;
 var a,b,c,d,e;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 A=a.f0;
 pc=6;
 re=A.$G$qUNe2(b,c);
 U&&B0(6,11);
 A=re;
 pc=11;
 return A;
 } else if (pc===12) {
 d=A;
 pc=14;
 re=k0.m(18)(0);
 pc=18;
 A=a.f0;
 pc=23;
 re=A.$G$qUNe2(b,c);
 U&&B0(23,28);
 A=re;
 pc=28;
 return A;
 } else if (pc===29) {
 e=A;
 pc=32;
 re=k0.m(18)(1);
 pc=36;
 A=a.f0;
 pc=41;
 re=A.$G$qUNe2(b,c);
 U&&B0(41,46);
 A=re;
 pc=46;
 return A;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=0&&pc<11&&IOK(A,$G_kHtcSa)){pc=12;continue;}
 if(pc>=17&&pc<28&&IOK(A,$G_kHtcSa)){pc=29;continue;}
 throw A;
 }
 }
}
AOTMD["$G$AgPkIp_10"] = {"osr":[]};
// javax/microedition/lcdui/ImageDataFactory.getImageDataFromStream.(Ljavax/microedition/lcdui/ImageData;Ljava/io/InputStream;)V ($G$AgPkIp_11)
function $G$AgPkIp_11(b,c) {
 var re,k0=$G$AgPkIp;
 var a,b,c,d,e,f,g,h,i;
 a=this;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7],i=_[8];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===101) {
 h=A;
 pc=103;
 A=new $G_yTb0tT();
 pc=107;
 re=$G_yTb0tT.m(0).call((A));
 pc=110;
 throw A;
 } else if (pc===111) {
 i=A;
 pc=114;
 re=c.v14();
 U&&B0(114);
 pc=119;
 throw i;
 A=i;
 } else if (pc===0) {
 d=4096;
 re=c.v13();
 U&&B0(5);
 e=re;
 (e+1|0) < 0 && TN();
 f=new Int8Array((e+1|0));
 g=0;
 } else if (!(pc===21)) {
 }
 while(1) {
 re=c.v11(f,g,((f.length)-g|0));
 U&&B0(32);
 A=re;
 B=A;
 e=B;
 if (A===(-1)) {
 break;
 }
 g=g+e|0;
 if (g!==(f.length)) {
 continue;
 }
 ((f.length)+d|0) < 0 && TN();
 h=new Int8Array(((f.length)+d|0));
 if ($.initialized["java/lang/System"] === undefined) { $.$GBEt6NdQ.classObject.initialize(); }
 A=f;
 B=0;
 C=h;
 D=0;
 E=g;
 U&&B5(74,74);
 re=$GBEt6NdQ.m(2)(A,B,C,D,E);
 f=h;
 }
 pc=91;
 re=k0.m(15).call(a,b,f,0,g);
 U&&B0(91);
 pc=95;
 re=c.v14();
 U&&B0(95);
 return;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h,i],[A,B,C,D,E],null);return;}
 A=TE(ex);
 if(pc>=84&&pc<94&&IOK(A,$GBhP0Jpi)){pc=101;continue;}
 if(pc>=84&&pc<94){pc=111;continue;}
 if(pc>=101&&pc<113){pc=111;continue;}
 throw A;
 }
 }
}
AOTMD["$G$AgPkIp_11"] = {"osr":[21]};
$G$AgPkIp.classSymbols = ["javax/microedition/lcdui/ImageDataFactory", "javax/microedition/lcdui/ImageData", "java/lang/OutOfMemoryError", "java/lang/NullPointerException", "java/lang/Object", "java/lang/Class", "java/io/IOException", "javax/microedition/lcdui/SuiteImageCache", "java/io/InputStream", "java/lang/System", "java/lang/IllegalArgumentException"];
// javax/microedition/lcdui/SuiteImageCacheImpl extends java/lang/Object
function $G$R0OxIs() {
 this._hashCode = 0;
}
// javax/microedition/lcdui/SuiteImageCacheImpl.loadAndCreateImmutableImageData.(Ljavax/microedition/lcdui/ImageData;Ljava/lang/String;)Z ($G$R0OxIs_1)
function $G$R0OxIs_1(b,c) {
 var re,k0=$G$R0OxIs;
 var a,b,c,d,e;
 a=this;
 var A,B,C,D;
 var pc=0;
 try{
 var label=0;
 if ($.initialized["com/sun/midp/midlet/MIDletStateHandler"] === undefined) { $.$GBeecOTm.classObject.initialize(); }
 U&&B0(0,0);
 re=$GBeecOTm.m(1)();
 U&&B0(0);
 re=re.v17();
 U&&B0(3);
 d=re;
 re=d.$G$Eujwp();
 U&&B0(8,13);
 e=re;
 re=k0.m(2).call(a,b,e,c);
 return re;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e],[A,B,C,D],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G$R0OxIs_1"] = {"osr":[]};
$G$R0OxIs.classSymbols = ["com/sun/midp/midlet/MIDletStateHandler", "com/sun/midp/midlet/MIDletSuite", "javax/microedition/lcdui/SuiteImageCacheImpl"];
// javax/microedition/rms/RecordEnumerationImpl extends java/lang/Object
function $GB4C1kGs() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = null;
 this.f3 = 0;
 this.f4 = 0;
 this.f5 = null;
}
// javax/microedition/rms/RecordEnumerationImpl.nextRecordId.()I ($GB4C1kGs_3)
function $GB4C1kGs_3() {
 var th=$.ctx.thread;
 var lk,k0=$GB4C1kGs,re;
 var a;
 a=this;
 var A,B,C;
 var pc=0;
 lk=a._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(a);
 if(U){$.B(0,0,[a],[],a);return;}
 }
 try{
 var label=0;
 re=k0.m(16).call(a);
 if (!((a.f4)!==(((a.f5).length)-1|0))) {
 if ($.initialized["javax/microedition/rms/InvalidRecordIDException"] === undefined) { $.$G$O4cyNv.classObject.initialize(); }
 A=new $G$O4cyNv();
 re=$G$O4cyNv.m(1).call((A));
 throw A;
 }
 if ((a.f4)!==(-1)) {
 A=a;
 A.f4=((A).f4)+1|0;
 } else {
 a.f4=0;
 }
 if ((a.f4 >>> 0) >= (a.f5.length >>> 0)) TI(a.f4);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 return (a.f5[a.f4]);
 }catch(ex){
 A=TE(ex);
 if(a._lock.level===1&&a._lock.ready.length===0)a._lock.level=0;else MX(a);
 throw A;
 }
}
AOTMD["$GB4C1kGs_3"] = {"osr":[]};
// javax/microedition/rms/RecordEnumerationImpl.hasNextElement.()Z ($GB4C1kGs_6)
function $GB4C1kGs_6() {
 var k0=$GB4C1kGs,re;
 var a;
 a=this;
 var A,B,C;
 var pc=0;
 var label=0;
 re=k0.m(16).call(a);
 if ((a.f5).length===0) {
 return 0;
 }
 re=(a.f0).v30();
 if(U){$.B(16,19,[a],[],null);return;}
 if (!(re!==0)) {
 return 0;
 }
 if ((a.f4)===(((a.f5).length)-1|0)) {
 A=0;
 return A;
 } else {
 A=1;
 return A;
 }
}
AOTMD["$GB4C1kGs_6"] = {"osr":[]};
// javax/microedition/rms/RecordEnumerationImpl.checkDestroyed.()V ($GB4C1kGs_16)
function $GB4C1kGs_16() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 if ((a.f0)!==null) {
 return;
 } else {
 if ($.initialized["java/lang/IllegalStateException"] === undefined) { $.$G$L_F0if.classObject.initialize(); }
 A=new $G$L_F0if();
 re=$G$L_F0if.m(0).call((A));
 throw A;
 }
}
AOTMD["$GB4C1kGs_16"] = {"osr":[]};
$GB4C1kGs.classSymbols = ["javax/microedition/rms/RecordEnumerationImpl", "javax/microedition/rms/InvalidRecordIDException", "javax/microedition/rms/RecordStore", "java/lang/IllegalStateException"];
// javax/microedition/rms/RecordStore extends java/lang/Object
function $G_vybgPi() {
 this._hashCode = 0;
 this.f0 = null;
 this.f1 = null;
 this.f2 = 0;
 this.f3 = 0;
 this.f4 = null;
}
// javax/microedition/rms/RecordStore.openRecordStore.(Ljava/lang/String;Z)Ljavax/microedition/rms/RecordStore; ($G_vybgPi_2)
function $G_vybgPi_2(a,b) {
 var re,k0=$G_vybgPi;
 var a,b,c;
 var A,B,C;
 var pc=0;
 try{
 var label=0;
 if ($.initialized["com/sun/midp/midlet/MIDletStateHandler"] === undefined) { $.$GBeecOTm.classObject.initialize(); }
 U&&B0(0,0);
 re=$GBeecOTm.m(1)();
 U&&B0(0);
 re=re.v17();
 U&&B0(3);
 re=re.$G$Eujwp();
 U&&B0(6,11);
 c=re;
 re=k0.m(34)(c,a,b);
 U&&B0(15);
 return re;
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B,C],null);return;}
 A=TE(ex);
 throw A;
 }
}
AOTMD["$G_vybgPi_2"] = {"osr":[]};
// javax/microedition/rms/RecordStore.closeRecordStore.()V ($G_vybgPi_6)
function $G_vybgPi_6() {
 var th=$.ctx.thread;
 var re,k0=$G_vybgPi,lk;
 var a,b,c;
 a=this;
 var A,B,C;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=1;
 re=k0.m(29).call(a);
 U&&B0(1);
 pc=4;
 A=$.$G_vybgPi.s3;
 B=A;
 b=B;
 pc=9;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(9,10,[a,b,c],[],null);return;}
 }
 A=a;
 pc=12;
 B=(A).f3;
 B=B-1|0;
 var t0=B;
 var t1=A;
 pc=18;
 t1.f3=t0;
 A=t0;
 if (!(A>0)) {
 pc=25;
 re=k0.m(15).call(a);
 U&&B0(25);
 pc=28;
 A=$.$G_vybgPi.s3;
 pc=32;
 re=A.v30(a);
 U&&B0(32);
 A=re;
 pc=37;
 A=a.f0;
 pc=40;
 re=A.v10();
 U&&B0(40);
 pc=45;
 a.f0=null;
 }
 pc=49;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 return;
 } else if (pc===53) {
 c=A;
 pc=55;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=57;
 throw c;
 A=c;
 } else {
 }
 }catch(ex){
 if(U){$.T(ex,[a,b,c],[A,B,C],null);return;}
 A=TE(ex);
 if(pc>=10&&pc<50){pc=53;continue;}
 if(pc>=53&&pc<56){pc=53;continue;}
 throw A;
 }
 }
}
AOTMD["$G_vybgPi_6"] = {"osr":[53]};
// javax/microedition/rms/RecordStore.getRecord.(I)[B ($G_vybgPi_24)
function $G_vybgPi_24(b) {
 var k0=$G_vybgPi,re;
 var a,b;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=k0.m(29).call(a);
 if(U){$.B(1,4,[a,b],[],null);return;}
 re=(a.f0).v22(b);
 if(U){$.B(9,12,[a,b],[],null);return;}
 return re;
}
AOTMD["$G_vybgPi_24"] = {"osr":[]};
// javax/microedition/rms/RecordStore.isOpen.()Z ($G_vybgPi_27)
function $G_vybgPi_27() {
 var th=$.ctx.thread;
 var lk;
 var a,b,c;
 a=this;
 var A,B;
 var pc=0;
 var ex;
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 if (pc===0) {
 pc=0;
 A=$.$G_vybgPi.s3;
 B=A;
 b=B;
 pc=5;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(5,6,[a,b,c],[],null);return;}
 }
 pc=7;
 A=a.f0;
 if (A===null) {
 A=0;
 } else {
 A=1;
 }
 pc=19;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=20;
 return A;
 } else if (pc===21) {
 c=A;
 pc=23;
 if(b._lock.level===1&&b._lock.ready.length===0)b._lock.level=0;else MX(b);
 pc=25;
 throw c;
 A=c;
 } else {
 }
 }catch(ex){
 A=TE(ex);
 if(pc>=6&&pc<20){pc=21;continue;}
 if(pc>=21&&pc<24){pc=21;continue;}
 throw A;
 }
 }
}
AOTMD["$G_vybgPi_27"] = {"osr":[]};
// javax/microedition/rms/RecordStore.checkOpen.()V ($G_vybgPi_29)
function $G_vybgPi_29() {
 var re;
 var a;
 a=this;
 var A,B;
 var pc=0;
 var label=0;
 re=a.v30();
 if(U){$.B(1,4,[a],[],null);return;}
 if (re!==0) {
 return;
 } else {
 if ($.initialized["javax/microedition/rms/RecordStoreNotOpenException"] === undefined) { $.$FnygIhy.classObject.initialize(); }
 A=new $FnygIhy();
 re=$FnygIhy.m(1).call((A));
 throw A;
 }
}
AOTMD["$G_vybgPi_29"] = {"osr":[]};
// javax/microedition/rms/RecordStore.doOpen.(ILjava/lang/String;Z)Ljavax/microedition/rms/RecordStore; ($G_vybgPi_34)
function $G_vybgPi_34(a,b,c) {
 var th=$.ctx.thread;
 var re,lk,k0=$G_vybgPi;
 var a,b,c,d,e,f,g,h;
 var A,B,C,D,E;
 var pc=0;
 var ex;
 if(O){
 var _=O.local;
 a=_[0],b=_[1],c=_[2],d=_[3],e=_[4],f=_[5],g=_[6],h=_[7];
 pc=O.pc;
 O=null;
 }
 while(1){
 try{
 var label=0;
 // Entry Dispatch Block
 do {
 if (pc===0) {
 re=b.v9();
 if (re>32) {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 re=b.v9();
 if (re!==0) {
 pc=24;
 A=$.$G_vybgPi.s3;
 B=A;
 e=B;
 pc=30;
 lk=A._lock;
 if(lk&&lk.level===0){lk.thread=th;lk.level=1;}else{ME(A);
 if(U){$.B(30,31,[a,b,c,d,e,f,g,h],[],null);return;}
 }
 pc=31;
 A=$.$G_vybgPi.s3;
 pc=34;
 re=A.v15();
 U&&B0(34);
 A=re;
 f=A;
 g=0;
 break;
 } else {
 A=new $GBhP0Jpi();
 re=$GBhP0Jpi.m(0).call((A));
 throw A;
 }
 } else if (pc===142) {
 h=A;
 pc=146;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 pc=149;
 throw h;
 A=h;
 } else if (!(pc===42)) {
 }
 } while(0);
 while(1) {
 if (g>=f) {
 break;
 }
 pc=49;
 A=$.$G_vybgPi.s3;
 pc=54;
 re=A.v23(g);
 U&&B0(54);
 A=re;
 pc=57;
 CCK(A,k0);
 d=A;
 pc=62;
 A=d.f2;
 if (!(A!==a)) {
 pc=70;
 A=d.f1;
 pc=74;
 re=A.v2(b);
 A=re;
 if (!(A===0)) {
 label = 7;
 break;
 }
 }
 g+=1;
 }
 if (label == 7) {
 A=d;
 pc=82;
 B=(A).f3;
 pc=87;
 A.f3=B+1|0;
 pc=93;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 A=d;
 pc=94;
 return A;
 }
 pc=101;
 A=new k0();
 pc=107;
 re=k0.m(0).call((A),a,b);
 d=A;
 pc=112;
 A=d;
 B=$.$G_vybgPi.s9;
 pc=118;
 if ($.initialized["com/sun/midp/rms/RecordStoreImpl"] === undefined) { $.$FJAVsGg.classObject.initialize(); }
 re=$FJAVsGg.m(1)(B,a,b,c);
 U&&B1(118);
 B=re;
 pc=121;
 A.f0=B;
 pc=126;
 d.f3=1;
 pc=129;
 A=$.$G_vybgPi.s3;
 pc=133;
 re=A.v29(d);
 U&&B0(133);
 pc=138;
 if(e._lock.level===1&&e._lock.ready.length===0)e._lock.level=0;else MX(e);
 return d;
 }catch(ex){
 if(U){$.T(ex,[a,b,c,d,e,f,g,h],[A,B,C,D,E],null);return;}
 A=TE(ex);
 if(pc>=31&&pc<94){pc=142;continue;}
 if(pc>=95&&pc<139){pc=142;continue;}
 if(pc>=142&&pc<147){pc=142;continue;}
 throw A;
 }
 }
}
AOTMD["$G_vybgPi_34"] = {"osr":[42,142]};
$G_vybgPi.classSymbols = ["com/sun/midp/midlet/MIDletStateHandler", "com/sun/midp/midlet/MIDletSuite", "javax/microedition/rms/RecordStore", "java/util/Vector", "com/sun/midp/rms/RecordStoreImpl", "javax/microedition/rms/RecordStoreNotOpenException", "java/lang/String", "java/lang/IllegalArgumentException"];

/*
 */
  console.log("Loaded java/classes.jar in " + (performance.now() - startCompile).toFixed(2) + " ms.");
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */



// The real profile variable declaration in config.ts is folded away by closure. Until we
// make closure process this file also, make sure that |profile| is defined in this file.
var profile;
var jvm = new JVM();

if ("gamepad" in config && !/no|0/.test(config.gamepad)) {
  document.documentElement.classList.add('gamepad');
}

var jars = [];

if (config.midletClassName == "RunTests") {
  jars.push("tests/tests.jar");
}

if (typeof Benchmark !== "undefined") {
  Benchmark.startup.init();
}

if (config.jars) {
  jars = jars.concat(config.jars.split(":"));
}

// Mobile info gets accessed a lot, so we cache it on startup.
var mobileInfo;
var getMobileInfo = new Promise(function(resolve, reject) {
  var sender = DumbPipe.open("mobileInfo", {}, function(message) {
    mobileInfo = message;
    DumbPipe.close(sender);
    resolve();
  });
});

var loadingMIDletPromises = [initFS, getMobileInfo];

var loadingPromises = [];

loadingPromises.push(load("java/classes.jar", "arraybuffer").then(function(data) {
  JARStore.addBuiltIn("java/classes.jar", data);
  CLASSES.initializeBuiltinClasses();
}));

jars.forEach(function(jar) {
  loadingMIDletPromises.push(load(jar, "arraybuffer").then(function(data) {
    JARStore.addBuiltIn(jar, data);
  }));
});

function processJAD(data) {
  data
  .replace(/\r\n|\r/g, "\n")
  .replace(/\n /g, "")
  .split("\n")
  .forEach(function(entry) {
    if (entry) {
      var keyEnd = entry.indexOf(":");
      var key = entry.substring(0, keyEnd);
      var val = entry.substring(keyEnd + 1).trim();
      MIDP.manifest[key] = val;

      if (key == "MIDlet-Name") {
        var title = document.getElementById("splash-screen").querySelector(".title");
        title.textContent = "Loading " + val;
      }
    }
  });
}

if (config.jad) {
  loadingMIDletPromises.push(load(config.jad, "text").then(processJAD).then(backgroundCheck));
}

function performDownload(url, dialog, callback) {
  var dialogText = dialog.querySelector('h1.download-dialog-text');
  dialogText.textContent = "Downloading " + MIDlet.name + "…";

  var progressBar = dialog.querySelector('progress.pack-activity');

  var sender = DumbPipe.open("JARDownloader", url, function(message) {
    switch (message.type) {
      case "done":
        DumbPipe.close(sender);

        callback(message.data);

        break;

      case "progress":
        progressBar.value = message.progress;
        break;

      case "fail":
        DumbPipe.close(sender);

        progressBar.value = 0;
        progressBar.style.display = "none";

        var dialogText = dialog.querySelector('h1.download-dialog-text');
        dialogText.textContent = "Download failure";

        var btnRetry = dialog.querySelector('button.recommend');
        btnRetry.style.display = '';

        btnRetry.addEventListener('click', function onclick(e) {
          e.preventDefault();
          btnRetry.removeEventListener('click', onclick);

          btnRetry.style.display = "none";

          progressBar.style.display = '';

          performDownload(url, dialog, callback);
        });

        break;
    }
  });
}

if (config.downloadJAD) {
  loadingMIDletPromises.push(new Promise(function(resolve, reject) {
    JARStore.loadJAR("midlet.jar").then(function(loaded) {
      if (loaded) {
        processJAD(JARStore.getJAD());
        resolve();
        return;
      }

      var progressTemplateNode = document.getElementById('download-progress-dialog');
      var dialog = progressTemplateNode.cloneNode(true);
      dialog.style.display = 'block';
      dialog.classList.add('visible');
      progressTemplateNode.parentNode.appendChild(dialog);

      performDownload(config.downloadJAD, dialog, function(data) {
        dialog.parentElement.removeChild(dialog);

        JARStore.installJAR("midlet.jar", data.jarData, data.jadData).then(function() {
          processJAD(data.jadData);
          resolve();
        });
      });
    });
  }).then(backgroundCheck));
}

if (jars.indexOf("tests/tests.jar") !== -1) {
  loadingPromises.push(loadScript("tests/native.js"),
                       loadScript("tests/override.js"),
                       loadScript("tests/mozactivitymock.js"),
                       loadScript("tests/config.js"));
}

function getIsOff(button) {
  return button.textContent.contains("OFF");
}
function toggle(button) {
  var isOff = getIsOff(button);
  button.textContent = button.textContent.replace(isOff ? "OFF" : "ON", isOff ? "ON" : "OFF");
}

var bigBang = 0;

function startTimeline() {
  requestTimelineBuffers(function (buffers) {
    for (var i = 0; i < buffers.length; i++) {
      buffers[i].reset();
    }
  });
}

function stopAndSaveTimeline() {
  console.log("Saving profile, please wait ...");
  var output = [];
  var writer = new J2ME.IndentingWriter(false, function (s) {
    output.push(s);
  });
  requestTimelineBuffers(function (buffers) {
    var snapshots = [];
    for (var i = 0; i < buffers.length; i++) {
      snapshots.push(buffers[i].createSnapshot());
    }
    // Trace Statistcs
    for (var i = 0; i < snapshots.length; i++) {
      writer.writeLn("Timeline Statistics: " + i);
      snapshots[i].traceStatistics(writer, 1); // Don't trace any totals below 1 ms.
    }
    // Trace Events
    for (var i = 0; i < snapshots.length; i++) {
      writer.writeLn("Timeline Events: " + i);
      snapshots[i].trace(writer, 0.1); // Don't trace anything below 0.1 ms.
    }
  });
  var text = output.join("\n");
  var profileFilename = "profile.txt";
  var blob = new Blob([text], {type : 'text/html'});
  saveAs(blob, profileFilename);
  console.log("Saved profile in: adb pull /sdcard/downloads/" + profileFilename);
}

function start() {
  J2ME.Context.setWriters(new J2ME.IndentingWriter());
  // For profile mode 1, we start the profiler and wait 2 seconds and show the flame chart UI.
  profile === 1 && profiler.start(2000, false);
  bigBang = performance.now();
  // For profiler mode 2, we start the timeline and stop it later by calling |stopAndSaveTimeline|.
  profile === 2 && startTimeline();
  jvm.startIsolate0(config.main, config.args);
}

// If we're not running a MIDlet, we need to wait everything to be loaded.
if (!config.midletClassName || config.midletClassName == "RunTests") {
  loadingPromises = loadingPromises.concat(loadingMIDletPromises);
}

Promise.all(loadingPromises).then(start, function (reason) {
  console.error("Loading failed: \"" + reason + "\"");
});

document.getElementById("start").onclick = function() {
  start();
};

document.getElementById("canvasSize").onchange = function() {
  Array.prototype.forEach.call(document.body.classList, function(c) {
    if (c.indexOf('size-') == 0) {
      document.body.classList.remove(c);
    }
  });

  if (this.value) {
    document.body.classList.add(this.value);
  }

  MIDP.updatePhysicalScreenSize();
  MIDP.updateCanvas();
  start();
};

if (typeof Benchmark !== "undefined") {
  Benchmark.initUI("benchmark");
}

window.onload = function() {
 document.getElementById("deleteDatabase").onclick = function() {
   indexedDB.deleteDatabase("asyncStorage");
 };
 document.getElementById("exportstorage").onclick = function() {
   fs.exportStore(function(blob) {
     saveAs(blob, "fs-" + Date.now() + ".json");
   });
 };
 document.getElementById("importstorage").onclick = function() {
   function performImport(file) {
     fs.importStore(file, function() {
       DumbPipe.close(DumbPipe.open("alert", "Import completed."));
     });
   }

   var file = document.getElementById("importstoragefile").files[0];
   if (file) {
     performImport(file);
   } else {
     load(document.getElementById("importstorageurl").value, "blob").then(function(blob) {
       performImport(blob);
     });
   }
 };
 document.getElementById("clearCompiledMethodCache").onclick = function() {
   CompiledMethodCache.clear().then(function() { console.log("cleared compiled method cache") });
 };
 document.getElementById("printAllExceptions").onclick = function() {
   VM.DEBUG_PRINT_ALL_EXCEPTIONS = !VM.DEBUG_PRINT_ALL_EXCEPTIONS;
   toggle(this);
 };
 document.getElementById("clearCounters").onclick = function() {
   clearCounters();
 };

  function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  setInterval(function () {
    var el = document.getElementById("bytecodeCount");
    el.textContent = numberWithCommas(J2ME.bytecodeCount);

    var el = document.getElementById("interpreterCount");
    el.textContent = numberWithCommas(J2ME.interpreterCount);

    var el = document.getElementById("compiledCount");
    el.textContent = numberWithCommas(J2ME.compiledMethodCount) + " / " +
                     numberWithCommas(J2ME.cachedMethodCount) + " / " +
                     numberWithCommas(J2ME.aotMethodCount);

    var el = document.getElementById("onStackReplacementCount");
    el.textContent = numberWithCommas(J2ME.onStackReplacementCount);

    var el = document.getElementById("unwindCount");
    el.textContent = numberWithCommas(J2ME.unwindCount);

    var el = document.getElementById("preemptionCount");
    el.textContent = numberWithCommas(J2ME.preemptionCount);

  }, 500);

  function dumpCounters() {
    var writer = new J2ME.IndentingWriter();

    writer.writeLn("Frame Count: " + J2ME.frameCount);
    writer.writeLn("Unwind Count: " + J2ME.unwindCount);
    writer.writeLn("Bytecode Count: " + J2ME.bytecodeCount);
    writer.writeLn("OSR Count: " + J2ME.onStackReplacementCount);

    if (J2ME.interpreterCounter) {
      writer.enter("interpreterCounter");
      J2ME.interpreterCounter.traceSorted(writer);
      writer.outdent();
    }
    if (J2ME.interpreterMethodCounter) {
      writer.enter("interpreterMethodCounter");
      J2ME.interpreterMethodCounter.traceSorted(writer);
      writer.outdent();
    }
    if (J2ME.baselineMethodCounter) {
      writer.enter("baselineMethodCounter");
      J2ME.baselineMethodCounter.traceSorted(writer);
      writer.outdent();
    }
    if (J2ME.baselineCounter) {
      writer.enter("baselineCounter");
      J2ME.baselineCounter.traceSorted(writer);
      writer.outdent();
    }
    if (J2ME.nativeCounter) {
      writer.enter("nativeCounter");
      J2ME.nativeCounter.traceSorted(writer);
      writer.outdent();
    }
    if (J2ME.runtimeCounter) {
      writer.enter("runtimeCounter");
      J2ME.runtimeCounter.traceSorted(writer);
      writer.outdent();
    }
    if (J2ME.asyncCounter) {
      writer.enter("asyncCounter");
      J2ME.asyncCounter.traceSorted(writer);
      writer.outdent();
    }
  }
  function clearCounters() {
    J2ME.frameCount = 0;
    J2ME.unwindCount = 0;
    J2ME.bytecodeCount = 0;
    J2ME.interpreterCount = 0;
    J2ME.onStackReplacementCount = 0;

    J2ME.interpreterCounter && J2ME.interpreterCounter.clear();
    J2ME.interpreterMethodCounter && J2ME.interpreterMethodCounter.clear();
    J2ME.nativeCounter && J2ME.nativeCounter.clear();
    J2ME.runtimeCounter && J2ME.runtimeCounter.clear();
    J2ME.asyncCounter && J2ME.asyncCounter.clear();
    J2ME.baselineMethodCounter && J2ME.baselineMethodCounter.clear();
    J2ME.baselineCounter && J2ME.baselineCounter.clear();
  }

  document.getElementById("dumpCounters").onclick = function() {
    dumpCounters();
  };
  document.getElementById("sampleCounters1").onclick = function() {
    clearCounters();
    dumpCounters();
    setTimeout(function () {
      dumpCounters();
    }, 1000);
  };
  document.getElementById("sampleCounters2").onclick = function() {
    clearCounters();
    function sample() {
      var c = 1;
      function tick() {
        if (c-- > 0) {
          dumpCounters();
          clearCounters();
          setTimeout(tick, 16);
        }
      }

      setTimeout(tick, 100);
    }
    setTimeout(sample, 2000); // Wait 2s before starting.
  };
};

function requestTimelineBuffers(fn) {
  if (J2ME.timeline) {
    fn([
      J2ME.timeline,
      J2ME.threadTimeline,
      J2ME.methodTimeline
    ]);
    return;
  }
  return fn([]);
}

var perfWriterCheckbox = document.querySelector('#perfWriter');

perfWriterCheckbox.checked = !!(J2ME.writers & J2ME.WriterFlags.Perf);
perfWriterCheckbox.addEventListener('change', function() {
  if (perfWriterCheckbox.checked) {
    J2ME.writers |= J2ME.WriterFlags.Perf;
  } else {
    J2ME.writers &= !J2ME.WriterFlags.Perf;
  }
});

var profiler = profile === 1 ? (function() {

  var elPageContainer = document.getElementById("pageContainer");
  elPageContainer.classList.add("profile-mode");

  var elProfilerToolbar = document.getElementById("profilerToolbar");
  var elProfilerMessage = document.getElementById("profilerMessage");
  var elProfilerPanel = document.getElementById("profilePanel");
  var elBtnMinimize = document.getElementById("profilerMinimizeButton");
  var elBtnStartStop = document.getElementById("profilerStartStop");

  var controller;
  var startTime;
  var timerHandle;
  var timeoutHandle;

  var Profiler = function() {
    controller = new Shumway.Tools.Profiler.Controller(elProfilerPanel);
    elBtnStartStop.addEventListener("click", this._onStartStopClick.bind(this));

    var self = this;
    window.addEventListener("keypress", function (event) {
      if (event.altKey && event.keyCode === 114) { // Alt + R
        self._onStartStopClick();
      }
    }, false);
  }

  Profiler.prototype.start = function(maxTime, resetTimelines) {
    window.profile = true;
    requestTimelineBuffers(function (buffers) {
      for (var i = 0; i < buffers.length; i++) {
        buffers[i].reset();
      }
    });
    controller.deactivateProfile();
    maxTime = maxTime || 0;
    elProfilerToolbar.classList.add("withEmphasis");
    elBtnStartStop.textContent = "Stop";
    startTime = Date.now();
    timerHandle = setInterval(showTimeMessage, 1000);
    if (maxTime) {
      timeoutHandle = setTimeout(this.createProfile.bind(this), maxTime);
    }
    showTimeMessage();
  }

  Profiler.prototype.createProfile = function() {
    requestTimelineBuffers(function (buffers) {
      controller.createProfile(buffers);
      elProfilerToolbar.classList.remove("withEmphasis");
      elBtnStartStop.textContent = "Start";
      clearInterval(timerHandle);
      clearTimeout(timeoutHandle);
      timerHandle = 0;
      timeoutHandle = 0;
      window.profile = false;
      showTimeMessage(false);
    });
  }

  Profiler.prototype.openPanel = function() {
    elProfilerContainer.classList.remove("collapsed");
  }

  Profiler.prototype.closePanel = function() {
    elProfilerContainer.classList.add("collapsed");
  }

  Profiler.prototype.resize = function() {
    controller.resize();
  }

  Profiler.prototype._onMinimizeClick = function(e) {
    if (elProfilerContainer.classList.contains("collapsed")) {
      this.openPanel();
    } else {
      this.closePanel();
    }
  }

  Profiler.prototype._onStartStopClick = function(e) {
    if (timerHandle) {
      this.createProfile();
      this.openPanel();
    } else {
      this.start(0, true);
    }
  }

  function showTimeMessage(show) {
    show = typeof show === "undefined" ? true : show;
    var time = Math.round((Date.now() - startTime) / 1000);
    elProfilerMessage.textContent = show ? "Running: " + time + " Seconds" : "";
  }

  return new Profiler();

})() : undefined;
